PROGRAM times_table_format;

//VAR 
//<Variable declarations> ,#locs:74
//<FUNCTION> #file:008_times_table.TXT

// TODO: with format to left or right justifying-- 

// With the '-' operator, the data is left justified
//  ShowMessage(Format('Justified decimal = <%-7d>', [1234]));
// The precision value forces 0 padding to the desired size
//  ShowMessage(Format('0 padded decimal  = <%.6d>', [1234]));
// Note the <> characters are added to show formatting
//  ShowMessage(Format('Padded decimal    = <%7d>', [1234]));

//call by value - wertübergabe - copy
Function NMaleins(limit: byte): string;
var i, j: byte;  //local
   temps: string;
begin
for i:= 1 to LIMIT do
  for j:= 1 to LIMIT do begin
    temps:= temps + Format('%.3d   ',[i*j])
    if j=LIMIT then temps:= temps + #13#10;
  end;
  result:= temps;    
end; //function end   


// call by reference -pointer   
//PSXCompiler: [Hint] 08_EINMALEINS_FUNC.TXT(32:10): Variable 'Result' never used
Function NMaleinsWithout_Return(var limit: byte): string;
var i, j: byte;  //local
begin
limit:= 15;
for i:= 1 to LIMIT do
  for j:= 1 to LIMIT do begin
    write(intToStr(i*j)+'   ')
    if j = LIMIT then writeln('')
  end;    
end; //function end   


procedure recursion_fct(k: integer);
begin
 inc(k)
 writeln(format('top S: Funktion rek_fkt (%f)',[power(k,2)]));
  if k < 5  then //break condition
    recursion_fct(k); //recursive call
  writeln(format('back E: Funktion rek_fkt(%d)',[k])); 
  writeln(floatToStr(log2(20)))
end;


Function TimesTable2(row,col: integer; tab: byte):string;
var i,j: integer; 
begin
  for i:= 1 to row do
   for j:= 1 to col do begin
     result:= result+ Format('%-*.3d',[tab,i*j])
     if j=col then result:= result+#13#10;
   end;
end; 


BEGIN  //Main
//<Executable statements>
  recursion_fct(0)
  Writeln(' ');
  Writeln(NMaleins(12))
  {elimit:= 12;
  NMaleinsReturn(elimit)}
//<Definitions>  
END. 

//---------------------------------------------------------------------

  1     2     3     4     5     6     7     8     9    10    11    12   
  2     4     6     8    10    12    14    16    18    20    22    24   
  3     6     9    12    15    18    21    24    27    30    33    36   
  4     8    12    16    20    24    28    32    36    40    44    48   
  5    10    15    20    25    30    35    40    45    50    55    60   
  6    12    18    24    30    36    42    48    54    60    66    72   
  7    14    21    28    35    42    49    56    63    70    77    84   
  8    16    24    32    40    48    56    64    72    80    88    96   
  9    18    27    36    45    54    63    72    81    90    99   108   
 10    20    30    40    50    60    70    80    90   100   110   120   
 11    22    33    44    55    66    77    88    99   110   121   132   
 12    24    36    48    60    72    84    96   108   120   132   144   

Was ist die Idee eines Stacks ?

Die Daten werden auf den Stapel gelegt und in derselben Reihenfolge wieder vom Stapel genommen.  Bsp.: Zwischenspeicher, Parameteraufrufe, lokale Variablen, Datenbankfragen (SQL), Graphentest 



----app_template_loaded----


----app_template_loaded----