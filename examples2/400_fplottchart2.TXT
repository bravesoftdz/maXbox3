PROGRAM FPlot_Framework_format_TChart;

//VAR 

//<Variable declarations>   still in progress (tous pourris), #locs=824
//Task: connect the trackbar with the math functions!  virare in numeris
//task2 //TODO: set the X Axis to compare with Cross
//task3 //DONE: plot the legend on Y Axis 
  
  
//<FUNCTION>
// do with format to left or right justifying-- 

// With the '-' operator, the data is left justified
//  ShowMessage(Format('Justified decimal = <%-7d>', [1234]));
// The precision value forces 0 padding to the desired size
//  ShowMessage(Format('0 padded decimal  = <%.6d>', [1234]));
// Note the <> characters are added to show formatting
//  ShowMessage(Format('Padded decimal    = <%7d>', [1234]));


Const
  MaxSymbol    = 9;          { Max. number of symbols for plotting curves }
  MaxCurvColor = 9;          { Max. number of colors for curves }
  MaxPixel     = 30000;      { Max. number of pixels }
  Eps          = 1.0E-10;    { Lower limit for an axis label }
  MaxColor     = $02FFFFFF;  { Max. color value for Delphi }
  
var PenWidth                : Integer;
    PenStyle                : TPenStyle;
    PenColor, BrushColor    : TColor;
    BrushStyle              : TBrushStyle;  
    chart: TJVChart;
    sg: TStringGrid;
    anzF, anzW: integer;
    PlotF: Array[1..4] of boolean;
    aFrm: TForm;
    pc: TPageControl;
    edtcalc: TEdit;
    TabSheet1: TTabSheet;
    TabSheet2: TTabSheet;
    TabSheet3: TTabSheet;
    tB: TTrackBar;

   {Series1: TLineSeries;
    Series2: TLineSeries;
    Series3: TLineSeries; }


type TFuncX = function(x: double): double;
//task4 //TODO: set the function to compare with Cross

  //TLegendStyle    =(lsAuto,lsSeries,lsValues,lsLastValues,lsSeriesGroups);

  //TLegendAlignment=(laLeft,laRight,laTop,laBottom);

  //LegendException =class(Exception);

  {TOnGetLegendText=Procedure( Sender:TCustomAxisPanel;
			      LegendStyle:TLegendStyle;
			      Index:Integer;
			      var LegendText:String) of Object;

  TCustomChartLegend=class;   }

  //TLegendSymbolSize=(lcsPercent,lcsPixels);

  //TLegendSymbolPosition=(spLeft,spRight);

  {TSymbolDrawEvent=procedure(Sender:TObject; Series:TChartSeries;
                             ValueIndex:Integer; R:TRect) of object; // 7.0

  SymbolCalcHeight=function:Integer of object; // 7.06}


procedure PlotFunc2(Canvas: TCanvas; Func: TFuncX; Xmin, Xmax : Float;
                   Npt: Integer; CurvIndex: Integer); forward;


Function NMaleins(limit: byte): string;
var i, j: byte;  //local
   temps: string;
begin
for i:= 1 to LIMIT do
  for j:= 1 to LIMIT do begin
    temps:= temps + Format('%.3d   ',[i*j])
    if j=LIMIT then temps:= temps + #13#10;
  end;
  result:= temps;    
end; //function end   


// call by reference -pointer   
//PSXCompiler: [Hint] 08_EINMALEINS_FUNC.TXT(32:10): Variable 'Result' never used
Function NMaleinsWithout_Return(var limit: byte): string;
var i, j: byte;  //local
begin
limit:= 15;
for i:= 1 to LIMIT do
  for j:= 1 to LIMIT do begin
    write(intToStr(i*j)+'   ')
    if j = LIMIT then writeln('')
  end;    
end; //function end   


procedure recursion_fct(k: integer);
begin
 inc(k)
 writeln(format('top S: Funktion rek_fkt (%f)',[power(k,2)]));
  if k < 5  then //break condition
    recursion_fct(k); //recursive call
  writeln(format('back E: Funktion rek_fkt(%d)',[k])); 
  writeln(floatToStr(log2(20)))
end;

function Func2(X : double): double;
{ Function to be plotted }
begin
    result:= Cos(X);
   // 9 : Func := Tan(X);
end;


function Func(X : double) : double;
{ Function to be plotted }
var A, B: double;
begin
  case tb.position of
    0 : result:= uExpo(X);
    1 : result:= Exp2(X);
    2 : result:= Exp10(X);
    3 : result := Power(X, B);
    4 : result := Log(X);
    5 : result := Log2(X);
    6 : result := Log10(X);
    7 : result := Sin(X);
    8 : result := Cos(X);
    9 : result := Tan(X);
   10 : result := ArcSin(X);
   11 : result := ArcCos(X);
   12 : result := ArcTan(X);
   13 : result := uSinh(X);
   14 : result := Cosh(X);
   15 : result := Tanh(X);
   16 : result := ArcSinh(X);
   17 : result := ArcCosh(X);
   18 : result := ArcTanh(X);
   19 : result := Gamma(X);
   20 : result := IGamma(A);
   21 : result := Beta(X, B);
   22 : result := IBeta(A, B, X);
   23 : result := Erf(X);
   24 : result := Stirling(X);
   //24 : result := LambertW(X, UBranch, False);
  else
    result:= 0.0
  end;
end;


var 
  mT: TTimer;
  statBar1: TStatusBar;
  image1: TImage;

//**************************Event Handlers*******************************
procedure TFrm_trackSpeedChange(Sender: TObject);
begin
  //mt.Interval:= 1000 div tB.Position;
  writeln('tr: '+intToStr(tB.Position));
  chart.options.PrimaryYAxis.YMax:= tb.Position;
end;

procedure TFrm_closeForm(Sender: TObject; var Action: TCloseAction);
begin
  {if mt <> NIL then begin
    mT.enabled:= false;
    mT.Free;
    mT:= NIL;
  end;}
  ///afrm.Free;  
  sg.Free;
  chart.Free;
  action:= caFree;
  afrm:= NIL;
  writeln('Form Close at '+objecttoString(sender));
end;

procedure TFrm_CloseClick(Sender: TObject);
begin
  afrm.Close;
end;

 procedure CalcData(newf: shortstring); forward;
 procedure DrawTeeChart; forward;

var sgfirst: boolean;
procedure TFrm_NewClick(Sender: TObject);
var  ax: TFuncX;
begin
  {if mT <> NIL then
    mt.enabled:= not mt.enabled; }
  ax:= @Func;
  //image1.repaint;
  //image1.canvas.invalidaterect;
  //PlotFunc2(image1.canvas, ax, 100, 100, 120, 1);
  CalcData('');
  if NOT sgfirst then
    tb.position:= random(50)+12;
  DrawTeeChart;
  writeln('calc & draw done');
  sgfirst:= false;
  //PlotFunc2(image1.canvas, ax, X1, X2, Npts, 1);
end;


procedure TFrm_EditClick(Sender: TObject);
var  ax: TFuncX;
begin
  {if mT <> NIL then
    mt.enabled:= not mt.enabled; }
  //image1.repaint;
  //image1.canvas.invalidaterect;
  //PlotFunc2(image1.canvas, ax, 100, 100, 120, 1);
  CalcData('');
  DrawTeeChart;
  writeln('calc & draw done');
  //PlotFunc2(image1.canvas, ax, X1, X2, Npts, 1);
end;


var sgvis: boolean;
procedure TFrm_HideClick(Sender: TObject);
begin
  sgvis:= NOT sgvis;           
  sg.visible:= sgvis;
end;


type Tmyfunc = function(x: double): double;

procedure CalcData(newf: shortstring);
var
  x,w,x1,x2,dx, xnew: double;
  i,anz: integer;
  afunc1: Tmyfunc;
begin
  sgvis:= true;
  anzF:=0;
  for i:=1 to 4 do PlotF[i]:=false;
 {if Form1.cbF1.Checked then begin inc(anzF);
  x1:=StrToFloat(Form1.edXmin.Text);
  x2:=StrToFloat(Form1.edXmax.Text);
  dx:=StrToFloat(Form1.edDX.Text);  }
  for i:=1 to 4 do PlotF[i]:= true;
  anzF:= 4;
  x1:= -4; x2:= 4;
  dx:= 0.15; //0.25
  anz:= Round((x2-x1)/dx);
  sg.RowCount:=anz+1;
  x:=x1; i:=1;
  //xnew:= strtofloat(encodeQuotes(edtcalc.text));
  //afunc1:= log10(x);
  repeat
    sg.Cells[0,i]:=FloatToStr(x);
    sg.Cells[1,i]:=FloatToStr(sin(x));
    sg.Cells[2,i]:=FloatToStr(x*x*sin(x));
    sg.Cells[3,i]:=FloatToStr(1/10*x*x);
    if newf <> '' then
      sg.Cells[4,i]:=FloatToStr(func(x))
    else
      sg.Cells[4,i]:=FloatToStr(cos(x));
    //sg.Cells[4,i]:= FloatToStr(func(x));
    x:=x+dx; inc(i);
  until(x>=x2);
  anzW:= i-1;
end;


procedure DrawTeeChart;
var
  i,f: integer;
  w: float;
begin
  with chart do begin
    Data.clear;
    for f:= 1 to anzF do begin
      options.PenLegends.Add(sg.Cells[f,0]);
      if PlotF[f] then 
        for i:= 1 to anzW do begin
          w:= StrToFloat(sg.Cells[f,i]);
          Data.Timestamp[I]:= now+i; // X legends generated
          //SeriesList.Series[f-1].Add(w,s);
          Chart.Data.Value[f-1,i]:= (w*2.8);
        end;
    end;
    PlotGraph;
  end;
end;


procedure InitTChartVisualEffects;
var
  vbar:TJvChartVerticalBar;
  hbar:TJvChartHorizontalBar;
begin
  Chart.Options.GradientColor:= $00FDEEDB; // powder blue mostly white.
  Chart.Options.GradientDirection:=grDown;
   // Vertical Bar.
    vbar:= Chart.AddVerticalBar;
    vbar.Color:= $00FDDDC7;
    vbar.Visible:= true;
    vbar.XLeft:= 27;
    vbar.XRight:= 30;
    // Horizontal Bar.
    hbar:= Chart.AddHorizontalBar;
    hbar.Color:= $007CCAC7;
    hbar.Visible:= true;
    hbar.YTop:= 3;
    hbar.YBottom:= 5;
  Chart.PlotGraph;
end;

Procedure InitChartPlotOptions;
begin
  with Chart.Options do begin
    //XAxisValuesPerDivision:= 13;
    //XAxisLabelAlignment:= taRightJustify
    sgfirst:= true;
    XAxisDateTimeMode:= true;
    XAxisDivisionMarkers:= true;
    XAxisValuesPerDivision:= 6; // 6 divisions, 4 val per div
    //ChartKind := ckChartLine;
    PenCount:= 4;    //init series !
    Title:= 'maXPlot3';
    //XAxisLegendSkipBy:= 2
    XAxisHeader := 'Plotter X Values';
     //XOrigin:= 10;
    PrimaryYAxis.YMin := -12;
    PrimaryYAxis.YMax := 13;
    PenLineWidth:= 3;
    //XStartOffset:= 30;
    //PrimaryYAxis.YMax:= 30
    //PrimaryYAxis.YDivisions:= 20
    PrimaryYAxis.YLegendDecimalPlaces:= 1
    //SecondaryYAxis.DefaultYLegends:= 20
    Legend:= clChartLegendBelow
    HeaderFont.Height:= 20;
    LegendFont.Height:= 16;
    AxisFont.Height:= 13;
    AxisLineWidth:= 2;
    //XValueCount:= 20
    PaperColor:= clWhite
    AxisLineColor:= clBlack
    CursorColor:= clBlack
    CursorStyle:= psDot
    //OnChartPaint:= @ChartChartPaint
    //OnBeginFloatingMarkerDrag:= ChartBeginFloatingMarkerDrag
    //OnEndFloatingMarkerDrag:= ChartEndFloatingMarkerDrag
  end
end; 

procedure TEEChartTest;
var chart1: TCustomchart;
	  chart2: TChart;
	  atit: TCharttitle;
	  axis: TchartAxis;
    aseries: TChartSeries;
    begin
	    { function AddXY(Const AXValue, AYValue: Double;
	    Const AXLabel: String; AColor: TColor) : Longint;
	     
	    This function inserts a new point in the Series.
	    The new point has X and Y values. The AXLabel
	    parameter is optional (can be empty ''). The AColor
	    parameter is optional (can be clTeeColor).
	    The function returns the new point position in the
	    Values list. }
	    (* chart2:= TChart.create(self)
	      chart2.parent:= aFrm;
         chart2.setBounds(10,10,965,500);
       
	    With Chart2.Series[0] Do Begin
	            //chart2.Seriesup(chart2.getASeries);
	            AddXY(10, 20, '', clTeeColor);
	            AddXY(15, 50, '', clTeeColor);
	            AddXY(20, 30, '', clTeeColor);
	            AddXY(25, 70, '', clTeeColor);
	            AddXY(30, 10, '', clTeeColor);
	            AddXY(35, 50, '', clTeeColor);
	            AddXY(40, 45, '', clTeeColor);
	            AddXY(45, 10, '', clTeeColor);
	       End;*)
	    
	    
	     aseries:=TChartseries.create(self);
	     chart2:= TChart.create(self)
	      chart2.parent:= aFrm;
         chart2.setBounds(10,10,965,500);
         //chart2.Series[0].AddXY(10, 20, '', clTeeColor);
         //chart2.Series[0].AddXY(15, 50, '', clTeeColor);
	      //chart2.Series[0].AddXY(20, 30, '', clTeeColor);
	      //atit:= Tcharttitle.create(NIL);
          //atit.caption:= 'this is';
	     //chart2.title:= atit;  
         
         //chart2.axistitleorname(axis);
         //series:= chart2.getASeries;
         aseries.addxy(10, 20, '', clTeeColor);
         aseries.addxy(20, 50, '', clTeeColor);
         aseries.addxy(30, 70, '', clTeeColor);
         aseries.startz;
         writeln('ser name count '+intToStr(aseries.count));
         
         writeln('ser name '+aseries.name);
         //chart2.FillSeriesSourceItems(aseries, NIL);                      
         //chart2.series.add.assign:= series;
         
         aseries.ymandatory;
         aseries.free;
         //writeln('ser name '+series.name);
         //Series[0].AddXY(10, 20, '', clTeeColor);
         
         chart2.Seriesup(chart2.getASeries);
	      chart2.Seriesdown(chart2.getASeries);
	     chart2.free;
       
        //Chart2.Series[0].AddXY(10, 20, '', clTeeColor);
	     
	     //With Chart2.Series[0] Do Begin
	            //chart2.Seriesup(chart2.getASeries);
	            {AddXY(10, 20, '', clTeeColor);
	            AddXY(15, 50, '', clTeeColor);
	            AddXY(20, 30, '', clTeeColor);
	            AddXY(25, 70, '', clTeeColor);
	            AddXY(30, 10, '', clTeeColor);
	            AddXY(35, 50, '', clTeeColor);
	            AddXY(40, 45, '', clTeeColor);
	            AddXY(45, 10, '', clTeeColor);}
	       // End;
	    
	    {:= TCustomChart.create(self)
	      chart1.parent:= aFrm;
         chart1.setBounds(10,10,965,500);}
  
	      //chart1.legend;
	      //chart1.leftwall;
	      
         //series:= chart1.getASeries;
	    //  chart1.title:= 'mX Chart Art';
       // chart1.backcolor:= clRed;
       //Chart1.Series[0].AddXY(10, 20, '', clTeeColor);
	    
       //chart1.addXy
	    //chart1.free;
	    //Series[0].AddXY(10, 20, '', clTeeColor);
	  {  Chart1.Series[0].AddXY(15, 50, '', clTeeColor);
	    Chart1.Series[0].AddXY(20, 30, '', clTeeColor);
	    Chart1.Series[0].AddXY(25, 70, '', clTeeColor);
	    Chart1.Series[0].AddXY(30, 10, '', clTeeColor);
	    Chart1.Series[0].AddXY(35, 50, '', clTeeColor);
	    Chart1.Series[0].AddXY(40, 45, '', clTeeColor);
	    Chart1.Series[0].AddXY(45, 10, '', clTeeColor);}
	   //chart1.free;
	   
	     
	    { Or you can write following code using "With" statement.
	    Its much easier than repeating everything again and again.
	        With Chart1.Series[0] Do
	        Begin
	            AddXY(10, 20, '', clTeeColor);
	            AddXY(15, 50, '', clTeeColor);
	            AddXY(20, 30, '', clTeeColor);
	            AddXY(25, 70, '', clTeeColor);
	            AddXY(30, 10, '', clTeeColor);
	            AddXY(35, 50, '', clTeeColor);
	            AddXY(40, 45, '', clTeeColor);
	            AddXY(45, 10, '', clTeeColor);
	        End;
	    }
	end;



//**************************Form Builder*******************************
procedure loadForm;
begin
  aFrm:= TForm.Create(self);
  //mT:= TTimer.Create(self);
  //mt.onTimer:= @TFrm_timerRedrawTimer;
  //mt.interval:= MILLISECONDS;
  //mt.free;  in on close            
  with aFrm do begin
    Caption:= '********** Plot Form Template ***********';  
    height:= 650;
    width:= 1000;
    Position:= poScreenCenter;
    //Color:= clBlack;
    onClose:= @TFrm_closeForm;
    //onPaint:= @TFrm_FormPaint;
    Canvas.Pen.color:= clBlue;
    Canvas.Pen.Width:= 15;
    Show;
    //canvas.brush.bitmap:= getBitmapObject(Exepath+'examples\images\citymax.bmp');
    //Canvas.FillRect(Rect(600,300,100,100));
  end;
  image1:= Timage.create(aFrm);
  with image1 do begin
    Parent:= aFrm;
   // setbounds(31,39,550,255);
 //Image1.Picture.BitMap.LoadFromFile('F:\dateienohneback\EKON15\maxbox3\mX397\maxbox3\examples\citymax.bmp');
    //image1.brush.color:= clblue;
  end;
 
  with TBitBtn.Create(aFrm) do begin
    Parent:= aFrm;
    setbounds(310,520,150,55);
    caption:= 'New Plot';
    font.size:= 12;
    glyph.LoadFromResourceName(getHINSTANCE,'TCHARTGALLERYPANEL'); //CL_MPPAUSE'); 
    mXButton(05,05,width, height,12,12,handle);
    //event handler
    onClick:= @TFrm_NewClick;
  end;
  with TBitBtn.Create(aFrm) do begin
    Parent:= aFrm;
    setbounds(780, 520,150, 55);
    caption:= 'Close';
    font.size:= 12;
    glyph.LoadFromResourceName(getHINSTANCE,'TCHART'); // CL_MPSTOP'); 
    mXButton(05,05,width, height,12,12,handle);
    onClick:= @TFrm_CloseClick;
  end;
  with TBitBtn.Create(aFrm) do begin
    Parent:= aFrm;
    setbounds(480, 520,150, 55);
    caption:= 'Hide Grid';
    font.size:= 12;
    glyph.LoadFromResourceName(getHINSTANCE,'TCHARTGRID'); //CL_MPPREV'); 
    mXButton(05,05,width, height,12,12,handle);
    onClick:= @TFrm_HideClick;
  end;
  edtcalc:= TEdit.create(afrm)
  with edtcalc do begin
    Parent:= aFrm;
    setbounds(720,475,225,55);
    text:= 'cos(x)+5';
    font.size:= 12;
    onClick:= @TFrm_EditClick;
  end;
  
  tB:= TTrackBar.create(aFrm);
  with tB do begin
    parent:= aFrm;
    setBounds(40,530,230,40);
    Min:= 1; Max:= 100;
    Frequency:= 10;
    Position:= 12;
    linesize:= 4;
    ThumbLength:= 30;
    SetFocus;
    OnChange:= @TFrm_trackSpeedChange;
  end;
  statbar1:= TStatusBar.Create(aFrm);
  with statbar1 do begin
    parent:= aFrm;
    showhint:= true;
    hint:= 'this is a LED BoX Function Plotter';
    Panels.add;
      panels.items[0].width:= 200;
      panels.items[0].text:= 'Function Plot';
    Panels.add;
      panels.items[1].width:= 150;
      panels.items[1].text:= '1/10*x^2 last set';
  end;
  
  {pc:= TPageControl.create(self);
   with pc do begin
    parent:= afrm;
    setbounds(28,16,630,400);
    ActivePage:= TabSheet1;
    //caption:= 'Graph';
    TabOrder:= 0
   end; 
   TabSheet1:= TTabSheet.create(self)
     with tabsheet1 do begin
      parent:= pc;
      imageindex:= 1;
      //caption:= 'Graph';
     end;
   TabSheet2:= TTabSheet.create(self)
     with tabsheet2 do begin
      parent:= pc;
      imageindex:= 1;
      //caption:= 'Graph';
     end;}
  
  chart:= TJvChart.create(aFrm);
  with chart do begin
    parent:= aFrm;
    setBounds(10,10,965,500);
    DisplayBars;
    //RegisterProperty('Data', 'TJvChartData', iptr);
    //GraphHeader
    //PlotGraph;
    ClearFloatingMarkers; // remove any previous markers.
    Data.Clear;
    //XValueCount := 32;
    //Data.ValueCount := 20;
    {PenStyle[0] := psSolid;
    PenStyle[1] := psDot; }
    //OnChartPaint:= @TJvChart_ChartChartPaint;
    //OnBeginFloatingMarkerDrag:= @TJvChart_ChartBeginFloatingMarkerDrag;
    //OnEndFloatingMarkerDrag:= @TJvChart_ChartEndFloatingMarkerDrag;
  end;
   InitChartPlotOptions;
   InitTChartVisualEffects;
   
  sG:= TStringGrid.Create(self);
  sG.parent:= aFrm;
  with sG do begin
    //defaultColwidth:= 115;
    {defaultRowheight:= 22;
    height:= 380; width:= 975; } 
    colcount:= 5;
    width:=263;
    height:= 288;  
    //rowcount:= CROW-1;
    top:= 82; left:= 75;
    //borderStyle:= bsNone;
    DefaultRowHeight:= 18
    FixedColor:= 16764868;
    GridLineWidth:= 1;
    scrollbars:= false;
    Options:= [goFixedVertLine, goFixedHorzLine, goVertLine,+
                        goHorzLine, goRangeSelect, goThumbTracking]
    Cells[0,0]:=' x'; Cells[1,0]:='sin(x)';
    Cells[2,0]:='x^2*sin(x)'; Cells[3,0]:='1/10*x^2';
    Cells[4,0]:= edtcalc.text;
  end; 
  
  TFrm_NewClick(self);   
end;

  
//**************************FPlot Tester*******************************

 type
  TAxis = record        { Coordinate axis }
    Scale : TScale;
    Min   : Float;
    Max   : Float;
    Step  : Float;
  end;
  
procedure PlotLine(Canvas : TCanvas; X1, Y1, X2, Y2: Integer);
begin
  Canvas.MoveTo(X1, Y1);
  Canvas.LineTo(X2, Y2);
  //writeln(inttoStr(y2));
end;

var
  MaxCurv : Byte;
  XminPixel,XmaxPixel  : Integer; 
  YminPixel, YmaxPixel : Integer; 
  //XminPixel := 0;
  XAxis: TAxis; 
  YAxis: TAxis; 
  //XTitle     : String = 'X';
  //YTitle     : String = 'Y';
  //GraphTitle : String = '';
  
procedure InitScale;
begin
   Xaxis.Scale:= LinScale;
   Xaxis.Min:= 0.0;
   Xaxis.Max:= 1.0;
   Xaxis.Step:= 0.2;  
   yaxis.Scale:= LinScale;
   Yaxis.Min:= 0.0;
   Yaxis.Max:= 1.0;
   Yaxis.Step:= 0.2;  
   MaxCurv:= 0;
   XminPixel:= 0;
   XmaxPixel:= 100;
   YminPixel:= 0;
   YmaxPixel:= 100;
//  = (Scale : LinScale; Min : 0.0; Max : 1.0; Step : 0.2);
end;


function XOutOfBounds(X : Integer) : Boolean;
{ Checks if an absissa is outside the graphic bounds }
begin
  result:= (X < 0) or (X > 100);
end;

function YOutOfBounds(Y : Integer) : Boolean;
{ Checks if an ordinate is outside the graphic bounds }
begin
  result:= (Y < 0) or (Y > 100);
end;

function CheckPoint(X, Y       : Float;
                    var Xp, Yp : Integer) : Boolean;
{ Computes the pixel coordinates of a point and
  checks if it is enclosed within the graph limits }
begin
  //Xp := Xpixel(X);
  //Yp := Ypixel(Y);
  result:= not(XOutOfBounds(Xp) or YOutOfBounds(Yp));
end;

procedure RestoreGraphSettings(Canvas : TCanvas);
begin
  Canvas.Pen.Color   := PenColor;
  Canvas.Pen.Style   := PenStyle;
  Canvas.Pen.Width   := PenWidth;
  Canvas.Brush.Color := BrushColor;
  Canvas.Brush.Style := BrushStyle;
end;

procedure PlotFunc2(Canvas     : TCanvas;
                   Func       : TFuncX;
                   Xmin, Xmax : Float;
                   Npt, CurvIndex  : Integer);
var
  X1, Y1, X2, Y2, H  : Float;
  Xp1, Yp1, Xp2, Yp2, i : Integer;
  Flag1, Flag2       : Boolean;
begin
  //if (Npt < 2) or (CurvParam[CurvIndex]^.LineParam.Style = psClear) then Exit;
  if Xmin >= Xmax then begin
      Xmin:= 10; //XAxis.Min; //10;
      Xmax:= 300; //XAxis.Max;  //100;
    end;
  H := (Xmax - Xmin) / Npt;
  //SetGraphSettings(Canvas, CurvIndex);
  { Check first point }
  X1 := Xmin;
  if XAxis.Scale = LinScale then
    Y1 := Func(X1)
  else
    Y1 := Func(uExp10(X1));
  if YAxis.Scale = LogScale then Y1 := Log10(Y1);
    Flag1 := CheckPoint(X1, Y1, Xp1, Yp1);
  { Check other points and plot lines if possible }
  for I := 1 to Npt do begin
      X2 := X1 + H;
      if XAxis.Scale = LinScale then
        Y2 := Func(X2)
        //writeln(floattostr(y2))
      else
        Y2 := Func(uExp10(X2));
      if YAxis.Scale = LogScale then Y2 := Log10(Y2);
      Flag2 := CheckPoint(X2, Y2, Xp2, Yp2);
      if Flag1 and Flag2 then
        PlotLine(Canvas, XP1, YP1, round(X1)+210, round(Y2)+200);
          //PlotLine(Canvas, Xp1, Yp1, Xp2, Yp2);
      X1 := X2;
      Xp1 := Xp2;
      Yp1 := Yp2;
      Flag1 := Flag2;
    end;
   RestoreGraphSettings(Canvas);
end;

var   npts, width: integer;
      X1,X2,Y1,Y2,D: float;
      color: TColor;
      ax: TFuncX;
      amon: TSQLMonitor;
      //asim: TSimpleDataSet;
      //ast: TCheckBoxesStyle
      //att: tdatetimestep

BEGIN  //Main
//<Executable statements>
  recursion_fct(0)
  Writeln(' ');
  Writeln(NMaleins(12))
  loadForm;
  
  TEEChartTest;
    //PlotFunc(Image1.Canvas, @Func, X1, X2, Npts, 1);
  if not InitGraphics(Image1.Width, Image1.Height) then Exit;

 (* InitScale;
  SetWindow(Image1.Canvas, 10, 95, 10, 80, True);
  X1 := StrToFloat('170');
  X2 := StrToFloat('140');
  D  := StrToFloat('50');
  if (X1 < X2) and (D > 0.0) and (D <= X2 - X1) then
    SetOxScale(LinScale, X1, X2, D);
  Y1 := StrToFloat('140');
  Y2 := StrToFloat('20');
  D  := StrToFloat('50');
  if (Y1 < Y2) and (D > 0.0) and (D <= Y2 - Y1) then
    SetOyScale(LinScale, Y1, Y2, D);
  PlotOxAxis(Image1.Canvas);
  PlotOyAxis(Image1.Canvas);
  PlotGrid(Image1.Canvas, BothGrid);
  Width:= 50;
  Npts  := 120;
  Color := clBlue;
  SetLineParam(1, psSolid, Width, Color);
  //X1:= 20;
  //X2:= 530;
  Func2(10);
  ax:= @Func2;
  PlotFunc2(image1.canvas, @Func2, X1, X2, Npts, 1);  *)
  //PlotFunc2(image1.canvas, ax, X1, X2, Npts, 1);
  {elimit:= 12;
  NMaleinsReturn(elimit)}
   //<Definitions>  
   //SetCurrentPrinterAsDefault;
   //CurrentPrinterName: string;
   //writeln((CurrentPrinterPaperSize));
   //UseDefaultPrinter;
   //getfilelist
   //dnorm
END. 

Test Drive DUnit
//---------------------------------------------------------------------

  1     2     3     4     5     6     7     8     9    10    11    12   
  2     4     6     8    10    12    14    16    18    20    22    24   
  3     6     9    12    15    18    21    24    27    30    33    36   
  4     8    12    16    20    24    28    32    36    40    44    48   
  5    10    15    20    25    30    35    40    45    50    55    60   
  6    12    18    24    30    36    42    48    54    60    66    72   
  7    14    21    28    35    42    49    56    63    70    77    84   
  8    16    24    32    40    48    56    64    72    80    88    96   
  9    18    27    36    45    54    63    72    81    90    99   108   
 10    20    30    40    50    60    70    80    90   100   110   120   
 11    22    33    44    55    66    77    88    99   110   121   132   
 12    24    36    48    60    72    84    96   108   120   132   144   

Was ist die Idee eines Stacks ?

Die Daten werden auf den Stapel gelegt und in derselben Reihenfolge wieder vom Stapel genommen.  Bsp.: Zwischenspeicher, Parameteraufrufe, lokale Variablen, Datenbankfragen (SQL) 



----app_template_loaded----


unit Main;

interface

uses
  SysUtils, WinTypes, WinProcs, Messages, Classes, Graphics, Controls,
  Forms, Dialogs, StdCtrls, ExtCtrls, Spin;

type
  TForm1 = class(TForm)
    RadioGroup1: TRadioGroup;
    GroupBox1: TGroupBox;
    Label1: TLabel;
    Edit1: TEdit;
    Label2: TLabel;
    Edit2: TEdit;
    Label3: TLabel;
    Edit3: TEdit;
    GroupBox2: TGroupBox;
    Label4: TLabel;
    Label5: TLabel;
    Label6: TLabel;
    Edit4: TEdit;
    Edit5: TEdit;
    Edit6: TEdit;
    ColorDialog1: TColorDialog;
    GroupBox4: TGroupBox;
    Label9: TLabel;
    Edit7: TEdit;
    Label10: TLabel;
    Edit8: TEdit;
    Label11: TLabel;
    Edit9: TEdit;
    GroupBox3: TGroupBox;
    Shape1: TShape;
    Label7: TLabel;
    Label8: TLabel;
    SpinEdit1: TSpinEdit;
    SpinEdit2: TSpinEdit;
    Button1: TButton;
    Button2: TButton;
    Button3: TButton;
    Image1: TImage;
    RadioGroup2: TRadioGroup;
    procedure Button1Click(Sender: TObject);
    procedure RadioGroup1Click(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure RadioGroup2Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
  end;

var
  Form1: TForm1;

implementation

//{$R *.DFM}

uses
  utypes, umath, utrigo, uhyper, ugamma, uigamma,
  ubeta, uibeta, ulambert, uwinplot;

//{$IFDEF _16BIT}const{$ELSE}var{$ENDIF}
  UBranch : Boolean = True;  { Use upper branch of Lambert's function }

var
  A, B, Y : Float;    { Function parameters }

function Func(X : Float) : Float;
{ Function to be plotted }
begin
  case Form1.RadioGroup1.ItemIndex of
    0 : Func := Expo(X);
    1 : Func := Exp2(X);
    2 : Func := Exp10(X);
    3 : Func := Power(X, Y);
    4 : Func := Log(X);
    5 : Func := Log2(X);
    6 : Func := Log10(X);
    7 : Func := Sin(X);
    8 : Func := Cos(X);
    9 : Func := Tan(X);
   10 : Func := ArcSin(X);
   11 : Func := ArcCos(X);
   12 : Func := ArcTan(X);
   13 : Func := Sinh(X);
   14 : Func := Cosh(X);
   15 : Func := Tanh(X);
   16 : Func := ArcSinh(X);
   17 : Func := ArcCosh(X);
   18 : Func := ArcTanh(X);
   19 : Func := Gamma(X);
   20 : Func := IGamma(A, X);
   21 : Func := Beta(X, Y);
   22 : Func := IBeta(A, B, X);
   23 : Func := Erf(X);
   24 : Func := LambertW(X, UBranch, False);
  else
    Func := 0.0
  end;
end;

procedure TForm1.RadioGroup1Click(Sender: TObject);
begin
  with Form1 do
    begin
      Edit7.Visible := (RadioGroup1.ItemIndex in [3, 21]);
      Edit8.Visible := (RadioGroup1.ItemIndex in [20, 22]);
      Edit9.Visible := (RadioGroup1.ItemIndex = 22);

      Label9.Visible  := Edit7.Visible;
      Label10.Visible := Edit8.Visible;
      Label11.Visible := Edit9.Visible;

      GroupBox4.Visible := (RadioGroup1.ItemIndex in [3, 20, 21, 22]);

      RadioGroup2.Visible := (RadioGroup1.ItemIndex = 24);
    end;
end;

procedure TForm1.RadioGroup2Click(Sender: TObject);
begin
  UBranch := (RadioGroup2.ItemIndex = 0);
end;

procedure TForm1.Button1Click(Sender: TObject);
begin
  if ColorDialog1.Execute then
    Shape1.Brush.Color := ColorDialog1.Color;
end;

procedure TForm1.Button2Click(Sender: TObject);
var
  X1, X2, Y1, Y2, D, Temp : Float;
  Npts, Width             : Integer;
  Color                   : TColor;
begin
  if not InitGraphics(Image1.Width, Image1.Height) then Exit;

  SetWindow(Image1.Canvas, 10, 95, 10, 90, True);

  X1 := StrToFloat(Edit1.Text);
  X2 := StrToFloat(Edit2.Text);
  D  := StrToFloat(Edit3.Text);

  if (X1 < X2) and (D > 0.0) and (D <= X2 - X1) then
    SetOxScale(LinScale, X1, X2, D);

  Y1 := StrToFloat(Edit4.Text);
  Y2 := StrToFloat(Edit5.Text);
  D  := StrToFloat(Edit6.Text);

  if (Y1 < Y2) and (D > 0.0) and (D <= Y2 - Y1) then
    SetOyScale(LinScale, Y1, Y2, D);

  PlotOxAxis(Image1.Canvas);
  PlotOyAxis(Image1.Canvas);
  PlotGrid(Image1.Canvas, BothGrid);

  Width := SpinEdit1.Value;
  Npts  := SpinEdit2.Value;
  Color := Shape1.Brush.Color;

  SetLineParam(1, psSolid, Width, Color);

  Temp := StrToFloat(Edit7.Text); if Temp > 0.0 then Y := Temp;
  Temp := StrToFloat(Edit8.Text); if Temp > 0.0 then A := Temp;
  Temp := StrToFloat(Edit9.Text); if Temp > 0.0 then B := Temp;

  PlotFunc(Image1.Canvas, Func, X1, X2, Npts, 1);
end;

procedure TForm1.Button3Click(Sender: TObject);
begin
  with Image1 do
    Canvas.FillRect(Rect(0, 0, Width, Height));
end;

end.


ProductVersionNumber 3.9.9.18
**************************************************************
MD5 a1f7bff53e2415ad273aafda7b6177ef
SHA1 1f9ac60552abda3d25e4f4a2646c791b5d93303e
SHA256 a7d80cbe29cacf9e4451b8e43212554f647cf3856780520f858180f2bfd129aa
ssdeep196608:Ca9MaoTCkqCPaX1Qst1h70g+e/dMBtXj+I/U19RY:pM3qCEC+L0NeFMj/4nY
File size 13.5 MB ( 14150656 bytes )
File type Win32 EXE
Magic literalPE32 executable for MS Windows (GUI) Intel 80386 32-bit
TrID	 Windows ActiveX control (34.5%)
Inno Setup installer (32.5%)
InstallShield setup (12.7%)
Win32 EXE PECompact compressed (generic) (12.3%)
Win 9x/ME Control Panel applet (4.6%)

Copyright Free PascalScript
Publisher kleiner kommunikation
Product maXbox
Version 3.9 Solar mX4
Original name maxbox3_9.exe
Internal name SunSet mX4
File version 3.9.9.18
Description maXbox Delphi VM
Comments reduce to the max
 PE header basic information
Target machine Intel 386 or later processors and compatible processors
Compilation timestamp 2013-09-27 19:22:45
Link date 8:22 PM 9/27/2013
Entry Point 0x00AFB2C4
Number of sections 10
 PE sections
Name Virtual address Virtual size Raw size Entropy MD5
.text  4096 11473452 11473920 6.58 23a999590e3e839cc1d42c1f5cbcd810
.itext  11481088 33636 33792 6.29 d8805fe1267fcbe508abd458c22bc4d5
.data  11517952 197848 198144 5.42 d421bfbe2b33dcda07a7ae84dc2ecd8c
.bss  11718656 277020 0 0.00 d41d8cd98f00b204e9800998ecf8427e
.idata  11997184 36934 37376 5.20 21fdc1ed7db074ea8ce2002d1aece321
.edata  12038144 77 512 0.83 c16cd08f1c53e22a978ef83047d7e51a
.tls  12042240 188 0 0.00 d41d8cd98f00b204e9800998ecf8427e
.rdata  12046336 24 512 0.21 fd37c784aebce7be73a6f5e7c6e9e061
.reloc  12050432 734104 734208 6.75 d33f45241799e46edfa502dc88f970e5
.rsrc  12787712 1671168 1671168 4.88 8d0ecbb265196736d5760ec776d54339
 PE imports
[+] IMAGEHLP.DLL
[+] MSVCRT.DLL
[+] URLMON.DLL
[+] advapi32.dll
[+] comctl32.dll
[+] comdlg32.dll
[+] gdi32.dll
[+] imagehlp.dll
[+] imm32.dll
[+] iphlpapi.dll
[+] kernel32.dll
[+] mpr.dll
[+] ole32.dll
[+] oleaut32.dll
[+] oledlg.dll
[+] shell32.dll
[+] shlwapi.dll
[+] user32.dll
[+] usp10.dll
[+] version.dll
[+] wininet.dll
[+] winmm.dll
[+] winspool.drv
[+] ws2_32.dll
[+] wsock32.dll
 PE exports
CreateIncome
 Number of PE resources by type
RT_BITMAP 258
RT_STRING 184
RT_RCDATA 111
RT_CURSOR 21
RT_GROUP_CURSOR 20
RT_ICON 9
RT_GROUP_ICON 4
RT_DIALOG 2
RT_MESSAGETABLE 1
RT_MANIFEST 1
RT_VERSION 1
 Number of PE resources by language
NEUTRAL 288
ENGLISH US 139
SPANISH MODERN 71
GERMAN 50
SLOVENIAN DEFAULT 20
CATALAN DEFAULT 19
FRENCH BELGIAN 11
GERMAN SWISS 8
SWEDISH 3
DANISH DEFAULT 2
CZECH DEFAULT 1
 ExifTool file metadata
SpecialBuild mX4
LegalTrademarks maXbox
SubsystemVersion 4.0
Commentsreduce to the max
LinkerVersion 2.25
ImageVersion 0.0
FileSubtype 0
FileVersionNumber 3.9.9.18
LanguageCodeGerman (Swiss)
FileFlagsMask 0x003f
FileDescription maXbox Delphi VM
CharacterSetWindows, Latin1
InitializedDataSize 2641920
FileOS Win32
TimeStamp2013:09:27 20:22:45+01:00
MIMETypeapplication/octet-stream
LegalCopyrightFree PascalScript
FileVersion 3.9.9.18
SpeziellesBuild mX4 Compiler Engine
FileType Win32 EXE
PEType PE32
InternalNameSunSet mX4
ProductVersion 3.9 Solar mX4
UninitializedDataSize 0
OSVersion 4.0
OriginalFilename maxbox3_9.exe
SubsystemWindows GUI
MachineTypeIntel 386 or later, and compatibles
CompanyName kleiner kommunikation
CodeSize 11507712
ProductName maXbox
ProductVersionNumber 3.9.9.18
EntryPoint 0xafb2c4
ObjectFileType Executable application

SHA256:	a7d80cbe29cacf9e4451b8e43212554f647cf3856780520f858180f2bfd129aa
File name:	maxbox3.exe
Detection ratio: 0 / 48
Analysis date: 2013-10-02 19:25:21 UTC ( 7 minutes ago )



----app_template_loaded----


http://offer.ebay.fr/ws/eBayISAPI.dll?ViewBids&_trksid=p2047675.l2565&rt=nc&item=290989859492


procedure TForm1.GetDBListe;
var SearchRec:TSearchRec;
    Found:integer;
begin
  FileList.Clear;
  try
      Found:=FindFirst(AliasPfad+'\*.db', faAnyFile-faDirectory, SearchRec);
      while Found=0 do begin
            FileList.Add(SearchRec.Name);
            Found:=FindNext(SearchRec);
      end;
  finally
      FindClose(SearchRec);
  end;
  FileList.Sort;
end;

01	procedure TForm1.Button1Click(Sender: TObject);
02	begin
03	    { function AddXY(Const AXValue, AYValue: Double;
04	    Const AXLabel: String; AColor: TColor) : Longint;
05	     
06	    This function inserts a new point in the Series.
07	    The new point has X and Y values. The AXLabel
08	    parameter is optional (can be empty ''). The AColor
09	    parameter is optional (can be clTeeColor).
10	    The function returns the new point position in the
11	    Values list. }
12	    Chart1.Series[0].AddXY(10, 20, '', clTeeColor);
13	    Chart1.Series[0].AddXY(15, 50, '', clTeeColor);
14	    Chart1.Series[0].AddXY(20, 30, '', clTeeColor);
15	    Chart1.Series[0].AddXY(25, 70, '', clTeeColor);
16	    Chart1.Series[0].AddXY(30, 10, '', clTeeColor);
17	    Chart1.Series[0].AddXY(35, 50, '', clTeeColor);
18	    Chart1.Series[0].AddXY(40, 45, '', clTeeColor);
19	    Chart1.Series[0].AddXY(45, 10, '', clTeeColor);
20	     
21	    { Or you can write following code using "With" statement.
22	    Its much easier than repeating everything again and again.
23	     
24	        With Chart1.Series[0] Do
25	        Begin
26	            AddXY(10, 20, '', clTeeColor);
27	            AddXY(15, 50, '', clTeeColor);
28	            AddXY(20, 30, '', clTeeColor);
29	            AddXY(25, 70, '', clTeeColor);
30	            AddXY(30, 10, '', clTeeColor);
31	            AddXY(35, 50, '', clTeeColor);
32	            AddXY(40, 45, '', clTeeColor);
33	            AddXY(45, 10, '', clTeeColor);
34	        End;
35	    }
36	end;
