PROGRAM ShortStringFileClass_Tester_buggy;

//////////////////////////////////////////////////////////////////////
//  #sign:max: APSN21: 04.01.2014 19:14:34 
//  Purpose: TTxtFile - OO wrapper for  Pascal short routines type  //
//  #path>ples\E:\maxbox\maxbox3\examples\                          //
//  precondition: file test text in data directory                  //
//  Lines of Code #locs:259
//  Ex. wrapper: of unit uFilexport;
//      q:= TTxtFile.Create(sd1.FileName);
//      q.ReWrite;
//      q.Write(intToStr(i));
//      q.Close; q.Free;
//////////////////////////////////////////////////////////////////////

Const TEXTOUT = 'hi world of code coverage with cover age';
      TEXTTEST = 'this is maXbox out of the hex box';
      uFILENAME = 'classfiletest2.txt';

//############################################################################
// TEXTFILE CLASS App       mX4 Script Studio
//############################################################################
//TODO: change cursor to hand and save bitmap as png
//TODO: transfer the Algo to a LED Matrix on Arduino ex. I^2C Adafruit Shield!!

{TYPE <Type declarations>} 

  var FWait, switch: Boolean;
      ComPorts: TStrings;

//<FUNCTION>
//<PROCEDURE> 

procedure CreateTextFile(afilename: string);
var qt: TTxtFile;
begin
  qt:= TTxtFile.Create(aFileName);
  try
    qt.ReWrite;
  //qt.active:= true;
    qt.append;
    //qt.Write('maxform1.memo2.text of ref rex tex');
    qt.Write(maxform1.memo2.text);
  finally
    qt.Close;
    qt.Free;
  end;  
end; 

procedure TBusObj_writeToFile(kList: TStringList);
 var qf : TTxtFile;
      i: integer;
 begin
 //constructor  base
   qf:= TTxtFile.Create(uFILENAME);
   qf.ReWrite;
   try
     if kList.count > 0 then
       for i:= 0 to kList.count -1 do
               qf.Writeln(kList.strings[i]);
   finally
     qf.Close;
     qf.Free
   end;
 end;

function TBusObj_readFromFile(rList: TStringList): TStringList;
var qa: TTxtFile;
     tmpString: String;
 begin
   qa:= TTxtFile.create(uFILENAME);
   qa.ReSet;
   try
     while not qa.Eof do begin
       qa.Readln(tmpString);
       rList.add(tmpString);
     end;
     result:= rList;
   finally
    qa.Close;
    qa.Free;
   end
 end;
 
 
procedure SIRegister_StStrS_Tester;
 //var hexdigits: hexdigits;
begin
 //CL.AddDelphiFunction('Function HexBS( B : Byte) : ShortString');
 //HexBS( B : Byte) : ShortString');
   //HexWS( W : Word) : ShortString');
  //HexLS( L : LongInt) : ShortString');
  {HexPtrS( P : Pointer) : ShortString');
  BinaryBS( B : Byte) : ShortString');
  BinaryWS( W : Word) : ShortString');
  BinaryLS( L : LongInt) : ShortString');
  OctalBS( B : Byte) : ShortString');
  OctalWS( W : Word) : ShortString');
  OctalLS( L : LongInt) : ShortString');
  Str2Int16S( const S : ShortString; var I : SmallInt) : Boolean');
  Str2WordS( const S : ShortString; var I : Word) : Boolean');
  Str2LongS( const S : ShortString; var I : LongInt) : Boolean');
  Str2RealS( const S : ShortString; var R : Double) : Boolean');
  Str2RealS( const S : ShortString; var R : Real) : Boolean');
  Str2ExtS( const S : ShortString; var R : Extended) : Boolean');
  Long2StrS( L : LongInt) : ShortString');
  Real2StrS( R : Double; Width : Byte; Places : ShortInt) : ShortString');
  Ext2StrS( R : Extended; Width : Byte; Places : ShortInt) : ShortString');
  ValPrepS( const S : ShortString) : ShortString');   }
  //CharStrS( C : AnsiChar; Len : Cardinal) : ShortString');
  //PadChS( const S : ShortString; C : AnsiChar; Len : Cardinal) : ShortString');
  //PadS( const S : ShortString; Len : Cardinal) : ShortString');
  //LeftPadChS( const S : ShortString; C : AnsiChar; Len : Cardinal) : ShortString');
  //LeftPadS( const S : ShortString; Len : Cardinal) : ShortString');
  //TrimLeadS( const S : ShortString) : ShortString');
  //TrimTrailS( const S : ShortString) : ShortString');
  //TrimS( const S : ShortString) : ShortString');
  {TrimSpacesS( const S : ShortString) : ShortString');
  CenterChS( const S : ShortString; C : AnsiChar; Len : Cardinal) : ShortString');
  CenterS( const S : ShortString; Len : Cardinal) : ShortString');
  EntabS( const S : ShortString; TabSize : Byte) : ShortString');
  DetabS( const S : ShortString; TabSize : Byte) : ShortString');
  ScrambleS( const S, Key : ShortString) : ShortString');
  SubstituteS( const S, FromStr, ToStr : ShortString) : ShortString');
  FilterS( const S, Filters : ShortString) : ShortString');
  CharExistsS( const S : ShortString; C : AnsiChar) : Boolean');
  CharCountS( const S : ShortString; C : AnsiChar) : Byte');
  WordCountS( const S, WordDelims : ShortString) : Cardinal');
  WordPositionS(N: Cardinal; const S, WordDelims : ShortString; var Pos : Cardinal) : Boolean');
  ExtractWordS( N : Cardinal; const S, WordDelims : ShortString) : ShortString');
  AsciiCountS( const S, WordDelims : ShortString; Quote : AnsiChar) : Cardinal');
  AsciiPositionS( N : Cardinal; const S, WordDelims : ShortString; Quote : AnsiChar; var Pos : Cardinal) : Boolean'); }
  //ExtractAsciiS(N:Cardinal; const S,WordDelims: ShortString; Quote : AnsiChar) : ShortString');
 //WordWrapS( const InSt : ShortString; var OutSt, Overlap : ShortString; Margin : Cardinal; PadToMargin : Boolean)');
  //CompStringS( const S1, S2 : ShortString) : Integer');
  //CompUCStringS( const S1, S2 : ShortString) : Integer');
  //SoundexS( const S : ShortString) : ShortString');
  //MakeLetterSetS( const S : ShortString) : Longint');
 //BMMakeTableS( const MatchString : ShortString; var BT : BTable)');
  //BMSearchS( var Buffer, BufLength : Cardinal; var BT : BTable; const MatchString : ShortString; var Pos : Cardinal) : Boolean');
  //BMSearchUCS( var Buffer, BufLength : Cardinal; var BT : BTable; const MatchString : ShortString; var Pos : Cardinal) : Boolean');
  //DefaultExtensionS( const Name, Ext : ShortString) : ShortString');
  //ForceExtensionS( const Name, Ext : ShortString) : ShortString');
  {JustFilenameS( const PathName : ShortString) : ShortString');
  JustNameS( const PathName : ShortString) : ShortString');
  JustExtensionS( const Name : ShortString) : ShortString');
  JustPathnameS( const PathName : ShortString) : ShortString');
  AddBackSlashS( const DirName : ShortString) : ShortString');
  CleanPathNameS( const PathName : ShortString) : ShortString');
  HasExtensionS( const Name : ShortString; var DotPos : Cardinal) : Boolean');
  CommaizeS( L : LongInt) : ShortString');
  CommaizeChS( L : Longint; Ch : AnsiChar) : ShortString');
  FloatFormS( const Mask : ShortString; R : TstFloat; const LtCurr, RtCurr : ShortString; Sep, DecPt : AnsiChar) : ShortString');
  LongIntFormS( const Mask : ShortString; L : LongInt; const LtCurr, RtCurr : ShortString; Sep : AnsiChar) : ShortString');}
  {StrChPosS( const P : ShortString; C : AnsiChar; var Pos : Cardinal) : Boolean');
  StrStPosS( const P, S : ShortString; var Pos : Cardinal) : Boolean');
  StrStCopyS( const S : ShortString; Pos, Count : Cardinal) : ShortString');
  StrChInsertS( const S : ShortString; C : AnsiChar; Pos : Cardinal) : ShortString');
  StrStInsertS( const S1, S2 : ShortString; Pos : Cardinal) : ShortString');
  StrChDeleteS( const S : ShortString; Pos : Cardinal) : ShortString');
  StrStDeleteS( const S : ShortString; Pos, Count : Cardinal) : ShortString');
  ContainsOnlyS( const S, Chars : ShortString; var BadPos : Cardinal) : Boolean');
  ContainsOtherThanS( const S, Chars : ShortString; var BadPos : Cardinal) : Boolean');
  CopyLeftS( const S : ShortString; Len : Cardinal) : ShortString');
  CopyMidS( const S : ShortString; First, Len : Cardinal) : ShortString');
  CopyRightS( const S : ShortString; First : Cardinal) : ShortString');
  CopyRightAbsS( const S : ShortString; NumChars : Cardinal) : ShortString');
  CopyFromNthWordS( const S, WordDelims : ShortString; const AWord : ShortString; N : Cardinal; var SubString : ShortString) : Boolean');
  DeleteFromNthWordS( const S, WordDelims : ShortString; AWord : ShortString; N : Cardinal; var SubString : ShortString) : Boolean');
  CopyFromToWordS( const S, WordDelims, Word1, Word2 : ShortString; N1, N2 : Cardinal; var SubString : ShortString) : Boolean');
  DeleteFromToWordS( const S, WordDelims, Word1, Word2 : ShortString; N1, N2 : Cardinal; var SubString : ShortString) : Boolean');
  CopyWithinS( const S, Delimiter : ShortString; Strip : Boolean) : ShortString');
  DeleteWithinS( const S, Delimiter : ShortString) : ShortString');
  ExtractTokensS( const S, Delims : ShortString; QuoteChar : AnsiChar; AllowNulls : Boolean; Tokens : TStrings) : Cardinal');   }
  //IsChAlphaS( C : Char) : Boolean');
  //IsChNumericS( C : Char; const Numbers : ShortString) : Boolean');
  //IsChAlphaNumericS( C : Char; const Numbers : ShortString) : Boolean');
  {IsStrAlphaS( const S : Shortstring) : Boolean');
  IsStrNumericS( const S, Numbers : ShortString) : Boolean');
  IsStrAlphaNumericS( const S, Numbers : ShortString) : Boolean');
  LastWordS( const S, WordDelims, AWord : ShortString; var Position : Cardinal) : Boolean');
  LastWordAbsS( const S, WordDelims : ShortString; var Position : Cardinal) : Boolean');
  LastStringS( const S, AString : ShortString; var Position : Cardinal) : Boolean');
  LeftTrimCharsS( const S, Chars : ShortString) : ShortString');
  KeepCharsS( const S, Chars : ShortString) : ShortString'); }
  //RepeatStringS( const RepeatString : ShortString; var Repetitions : Cardinal; MaxLen : Cardinal) : ShortString');
  //ReplaceStringS( const S, OldString, NewString : ShortString; N : Cardinal; var Replacements : Cardinal) : ShortString');
  //ReplaceStringAllS( const S, OldString, NewString : ShortString; var Replacements : Cardinal) : ShortString');
  //ReplaceWordS( const S, WordDelims, OldWord, NewWord : ShortString; N : Cardinal; var Replacements : Cardinal) : ShortString');
  //ReplaceWordAllS( const S, WordDelims, OldWord, NewWord : ShortString; var Replacements : Cardinal) : ShortString');
  //RightTrimCharsS( const S, Chars : ShortString) : ShortString');
  //StrWithinS( const S, SearchStr : ShortString; Start : Cardinal; var Position : Cardinal) : boolean');
  //TrimCharsS( const S, Chars : ShortString) : ShortString');
  //WordPosS( const S, WordDelims, AWord : ShortString; N : Cardinal; var Position : Cardinal) : Boolean');
  //CharCountS( const S : ShortString; C : AnsiChar) : Byte');
  //WordCountS( const S, WordDelims : ShortString) : Cardinal');
  
end;


procedure startOthello(sender: TObject);
var mst: TStString;
  asi: ansichar;
begin
  FWait:= false;
  writeln('othello demo started...');
    screen.cursor:= CRHandpoint;
    //maxform1.cursor:= CRHandpoint;;
    maxform1.reversi1click(sender);
    screen.cursor:= CRDefault;
  writeln('othello demo stopped...');
  FWait:= true;
end; 


Begin  //Main
//<Executable statements>
  //TOutlookExport_Spy;
  Writeln('');
  ComPorts:= TStringlist.Create;
  EnumComPorts(ComPorts);
  Writeln('Start COM Port Command of Arduino COM: '+ComPorts[0]);  
  ComPorts.Free;
//<Definitions>  

  //ares:= TResolver.create;
 { with TResolver.create do begin
   //writeln(inttostr(GetHostByName(gethostname)));
    Free;
   end;  }
   //startOthello(self);
   //CreateMessageDlg
     //writeln(BinaryWS(12));
  //CharCountS( const S : ShortString; C : AnsiChar) : Byte');
  //WordCountS( const S, WordDelims : ShortString) : Cardinal');

     //writeln('CharCountS '+inttoStr(CharCountS('this is maxbox out of the box','x')));
     writeln('CharCountS '+inttoStr(CharCountS(TEXTTEST+'x','x')));
     writeln('CharCountS '+inttoStr(CharCountS(TEXTTEST,'x')));
     assert(CharCountS(TEXTTEST,'x')=3,'count failed');
     
     writeln('WordCountS '+inttostr(WordCountS(TEXTTEST,' ')));
     writeln(BooltoStr(CharExistsS('123456mX','m'),true));
     //writeln(TrimCharsS(TEXTTEST,'x'));
     //writeln(CommaizeS(1234567));

     
     //writeln(Long2StrS(123456));

   CreateTextFile('classfiletest.txt');
   OpenDoc(Exepath+'classfiletest.txt');
   
   with TThreadSortForm.create(self) do begin
     showmodal;
     free;
   end;  
   
   
END. 


If we should draw on conclusion from this disaster, let us remember one thing: Nuclear Power is Unsafe by Design. Even after shutdown, a reactor and the spent fuel rods need constant active cooling in order to prevent a disaster. This is the real problem. The technology does not fail safely: It fails deadly. A nuclear reactor left alone is an extreme danger.


 type
  TFileMode = fmClosed..fmOutput;
  TFileExt = string[3]; 
//Pattern: mediator
  TTrigger = array of boolean;
  TTriggerEvent = procedure (Sender: TObject; Trigger: TTrigger) of object;

  TTxtFile = class (TObject)
  private
    FDefaultExt: TFileExt;
    FTextFile: TextFile;
    function GetActive: Boolean;
    function GetEof: Boolean;
    function GetEoln: Boolean;
    function GetMode: TFileMode;
    function GetName: string;
    function GetSeekEoln: Boolean;
    procedure SetActive(state: Boolean);
    procedure SetMode(const NewMode: TFileMode);
  public
    constructor Create(Name : TFileName);
    destructor Destroy; override;
    procedure Append;
    procedure Assign(FName: string);
    procedure Close; virtual;
    procedure Flush;
    //function loadfromStreamFile(const aFileName: string; memStream:
    //                                  TMemoryStream ): Boolean;
    procedure ReadLn(var S : string);
    procedure ReSet; virtual;
    procedure ReWrite; virtual;
    procedure SetTextBuf(var Buf; Size : Word);
    procedure Write(const S : string);
    procedure WriteLn(const S : String);
    property Active: Boolean read GetActive write SetActive;
    property DefaultExt: TFileExt read FDefaultExt write FDefaultExt;
    property Eof: Boolean read GetEof;
    property Eoln: Boolean read GetEoln;
    property FileName: string read GetName write Assign;
    property SeekEoln: Boolean read GetSeekEoln;
    property state: TFileMode read GetMode write SetMode;
  end;
  
  def:  or ref: is in preparation
  



implementation

//############################################################################
// TApplication
//############################################################################

 
  http://i1-win.softpedia-static.com/screenshots/maXbox_5.png?1381322021
  
    RegisterMethod('Constructor Create(AOwner: TComponent)');
    RegisterConstructor(@TJvMail.Create, 'Create');
  
  
   RegisterMethod('Procedure Free');
   RegisterMethod(@TJvMail.Destroy, 'Free');
   
//5.6.7.

----app_template_loaded_code----