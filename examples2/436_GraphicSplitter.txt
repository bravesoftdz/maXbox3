PROGRAM GraphicSplitter_Spiral;

//////////////////////////////////////////////////////////////////////
//  #sign:max: APSN21: 24.01.2014 00:25:56 
//  Purpose: Grabs picture out of and splits it                     //
//  #path>ples\E:\maxbox\maxbox3\examples\                          //
//  Lines of Code #locs:315
//////////////////////////////////////////////////////////////////////

Const TEXTOUT = 'hi world of code coverage with cover age';
      PICPATH= 'D:\kleiner2005\entwickler\gl\Archipelago\Data';
      PICMAIN= 'D:\kleiner2005\entwickler\gl\Archipelago\Data\TextureMap.jpg';

//############################################################################
// Archimedes Spiral Architect
//############################################################################
//TODO: Button with stop event, change color and save bitmap as png
  //TODO: transfer the App to a Pic Matrix!

{type  
  PROCESS_MEMORY_COUNTERS = record
    cb : DWORD;
    PageFaultCount : DWORD;
    PeakWorkingSetSize : DWORD;
    WorkingSetSize : DWORD; //Task managers MemUsage number
    QuotaPeakPagedPoolUsage : DWORD;
    QuotaPagedPoolUsage : DWORD;
    QuotaPeakNonPagedPoolUsage : DWORD;
    QuotaNonPagedPoolUsage : DWORD;
    PagefileUsage : DWORD; //TaskMan's VM Size number
    PeakPagefileUsage : DWORD;
  end;
  TProcessMemoryCounters = PROCESS_MEMORY_COUNTERS; }

  
  
//  function  {**************************************************}
function GetProcessMemoryInfo(Process: THandle; var MemoryCounters: TProcessMemoryCounters;
                                    cb: DWORD): BOOL; //stdcall;; 
     External 'GetProcessMemoryInfo@psapi.dll stdcall';
     
 Function OpenProcess(dwDesiredAccess: DWORD; bInheritHandle:BOOL; dwProcessId: DWORD):THandle;
     External  'OpenProcess@kernel32.dll stdcall';


{TYPE <Type declarations>} 

  var aform: TForm;
      FWait, switch: Boolean;
      FValueA: Float;
      FValueB: Float;


//<FUNCTION>
//<PROCEDURE> 

{**************************************************}
//function GetProcessMemoryInfo; external 'psapi.dll';
{****************************************************}

function ProcessMemoryUsage(ProcessID : DWORD): DWORD;
var ProcessHandle : THandle;
    MemCounters   : TProcessMemoryCounters;
begin
  Result:= 0;
  ProcessHandle:= OpenProcess(PROCESS_QUERY_INFORMATION or PROCESS_VM_READ,
                               false, ProcessID);
  try
    if GetProcessMemoryInfo(ProcessHandle,
                            MemCounters,
                            sizeof(MemCounters))
    then Result:= MemCounters.WorkingSetSize;
  finally
    CloseHandle(ProcessHandle);
  end;
end;

function ProcessPageUsage(ProcessID : DWORD): DWORD;
var ProcessHandle : THandle;
    MemCounters   : TProcessMemoryCounters;
begin
  Result:= 0;
  ProcessHandle:= OpenProcess(PROCESS_QUERY_INFORMATION or PROCESS_VM_READ,
                               false, ProcessID);
  try
    if GetProcessMemoryInfo(ProcessHandle,
                            MemCounters,
                            sizeof(MemCounters))
    then Result:= MemCounters.PagefileUsage;
  finally
    CloseHandle(ProcessHandle);
  end;
end;

function ProcessAllRec(ProcessID : DWORD): TProcessMemoryCounters;
var ProcessHandle : THandle;
    MemCounters   : TProcessMemoryCounters;
begin
  //Result:= NULL;
  ProcessHandle:= OpenProcess(PROCESS_QUERY_INFORMATION or PROCESS_VM_READ,
                               false, ProcessID);
  try
    if GetProcessMemoryInfo(ProcessHandle,
                            MemCounters,
                            sizeof(MemCounters))
    then Result:= MemCounters;
  finally
    CloseHandle(ProcessHandle);
  end;
end;

Procedure OVCInternationalDemoClass;
begin
 with TOvcIntlSup.Create do begin
    //Function InternationalDate( ForceCentury : Boolean) : string');
    writeln('InternationalDate: '+InternationalDate(true));
    //Function InternationalDatePChar( Dest : PChar; ForceCentury : Boolean) : PChar');
    writeln('InternationalLongDate: '+InternationalLongDate(false,false));
  //Function InternationalLongDatePChar( Dest : PChar; ShortNames : Boolean; ExcludeDOW : Boolean) : PChar');
    //Function InternationalTime( ShowSeconds : Boolean) : string');
    writeln('InternationalTime: '+InternationalTime(false));
    //Function InternationalTimePChar( Dest : PChar; ShowSeconds : Boolean) : PChar');
    //Function MonthStringToMonth( const S : string; Width : Byte) : Byte');
    writeln(Country)
    Free;
  end;
  //TFiletime
  //GetBinaryType( lpApplicationName : PChar; var lpBinaryType : DWORD) : BOOL');
  //GetProcessAffinityMask( hProcess : THandle; var lpProcessAffinityMask, lpSystemAffinityMask : DWORD) : BOOL');
  //SetProcessAffinityMask( hProcess : THandle; dwProcessAffinityMask : DWORD) : BOOL');
  //GetProcessTimes( hProcess : THandle; var lpCreationTime, lpExitTime, lpKernelTime, lpUserTime : TFileTime) : BOOL');
  //GetProcessWorkingSetSize( hProcess : THandle; var lpMinimumWorkingSetSize, lpMaximumWorkingSetSize : DWORD) : BOOL');
  //SetProcessWorkingSetSize( hProcess : THandle; dwMinimumWorkingSetSize, dwMaximumWorkingSetSize : DWORD) : BOOL');
  //OpenProcess( dwDesiredAccess : DWORD; bInheritHandle : BOOL; dwProcessId : DWORD) : THandle');
  //GetCurrentProcess : THandle');
 //CL.AddDelphiFunction('Procedure ExitProcess( uExitCode : UINT)');
  //ExitProcess( uExitCode : UINT)');
     //sizeofresource
  //TerminateProcess( hProcess : THandle; uExitCode : UINT) : BOOL');
  //GetExitCodeProcess( hProcess : THandle; var lpExitCode : DWORD) : BOOL');
 //FatalExit( ExitCode : Integer)');
  //GlobalDeleteAtom( nAtom : ATOM) : ATOM');
  //InitAtomTable( nSize : DWORD) : BOOL');
  //DeleteAtom( nAtom : ATOM) : ATOM');
  //SetHandleCount( uNumber : UINT) : UINT');
  //GetLogicalDrives : DWORD');
  //LockFile( hFile : THandle; dwFileOffsetLow, dwFileOffsetHigh : DWORD; nNumberOfBytesToLockLow, nNumberOfBytesToLockHigh : DWORD) : BOOL');
  //UnlockFile( hFile : THandle; dwFileOffsetLow, dwFileOffsetHigh : DWORD; nNumberOfBytesToUnlockLow, nNumberOfBytesToUnlockHigh : DWORD) : BOOL');


end;    

procedure TApplication_PaintView(Canvas: TCanvas);
var
  cx, cy, i: Integer;
  angle,x,y: Float;

begin
  if FWait then Exit;
   FValueB:= FValueB + 0.001;
   // Clear background
   //Canvas.FillStyle := 'rgba(0,0,99,0.08)';
   if switch then
     Canvas.FillRect(rect(0,90, aForm.Width, aForm.Height));
   //Draw our framerate on the screen
    cx:= aForm.width div 2;
    cy:= aForm.Height div 2;

  //Canvas.BeginPath;
  for i:= 42 downto 0 do begin
    angle:= FValueB * i;
    x:= cx + (FValueA + FValueB * angle) * Cos(angle);
    y:= cy + (FValueA + FValueB * angle) * Sin(angle);
    if i = 42 then Canvas.MoveTo(round(x), round(y)) 
      else Canvas.LineTo(round(x),round(y));
  end;
  //Canvas.StrokeStyle := '#FFF';
  //Canvas.Stroke;
end;



function CheckIEStartCommand: string;
begin
  Application.ProcessMessages;
  with TRegistry.Create do try
     rootkey:= HKey_Classes_Root;
     OpenKey('\htmlfile\shell\open\command',false);
     try 
       result:= ReadString('');
     except
       result:= ''; 
     end;
     CloseKey;
  finally
     Free;
  end;
end;

function SplitToken(const Text: string; SplitChar: Char;
    var First, Last: string): Boolean;
var  SplitPos: Integer;
begin
  Result:= False;
  SplitPos:= Pos(SplitChar, Text);
  if SplitPos = 0 then Exit;
  First:= Trim(Copy(Text, 1, SplitPos -1));
  Last:= Trim(Copy(Text, SplitPos +1, Length(Text) -SplitPos));
  Result:= (First <>'') and (Last <>'');
end;

procedure SplitImages(Sender: TObject);
var
   pic: TPicture;
   bmp, bmp2: TBitmap;
   s, sd, f : Integer;
   x, y, cnt : Integer;
begin
   SetCurrentDir(PICPATH);
   //ExtractFilePath(Application.ExeName));
   s:= StrToInt('1024'); //(EDTileSize.Text);
   pic:= TPicture.Create;
   cnt:= 0;

   {if RBHalf.Checked then
      f:=2
   else if RBLow.Checked then
      f:=4
   else} 
   f:=1;
   sd:=s div f;

   //ProgressBar.Position:=0;
   Screen.Cursor:=crHourGlass;

   bmp:= TBitmap.Create;
   bmp.PixelFormat:=pf24bit;
   bmp.Width:= sd;
   bmp.Height:= sd;

   if f<>1 then begin
      bmp2:=TBitmap.Create;
      bmp2.PixelFormat:=pf24bit;
      bmp2.Width:=s;
      bmp2.Height:=s;
   end else bmp2:=nil;

   //LAAction.Caption:='Loading Jpeg texture...';
   //LAAction.Visible:=True;
   //Refresh;
   pic.LoadFromFile(PICMAIN);
   x:=0; while x<pic.Width do begin
      y:=0; while y<pic.Height do begin
         if sd<>s then begin
            bmp2.Canvas.Draw(-x, -y, pic.Graphic);
            bmp.Canvas.StretchDraw(Rect(0, 0, sd, sd), bmp2);
         end else bmp.Canvas.Draw(-x, -y, pic.Graphic);
         //LAAction.Caption:=Format('Generating tile %d-%d...', [x div s, y div s]);
         //Refresh;
           bmp.SaveToFile(Format('Tex_%d_%d.bmp', [x div s, y div s]));
         //ProgressBar.StepBy(1);
         Inc(cnt);
         y:= y + s;
      end; //Inc(x, s);
      x:= x+s;
   end;
   if assigned(bmp2) then
      bmp2.Free;
   bmp.Free;
   pic.Free;
   Screen.Cursor:= crDefault;
   //LAAction.Caption:='Completed';
   ShowMessage(inttoStr(cnt)+' Picture Splits Done!');
end;



Begin  //Main
//<Executable statements>
  //TOutlookExport_Spy;
  Writeln('');
  Writeln('Start Command of IE: '+CheckIEStartCommand);  
//<Definitions>  
   //ares:= TResolver.create;
 { with TResolver.create do begin
   //writeln(inttostr(GetHostByName(gethostname)));
    Free;   end;  }
    {repeat 
     TApplication_PaintView(aform.canvas);
     switch:= NOT switch;
     Sleep(20);
   until isKeyPressed or FWait;}
    {with TledForm.create(self) do begin
    showmodal;
    free;
   end;} 
 // function GetMacAddresses(const Machine: string; const Addresses: TStrings):Integer;
 OVCInternationalDemoClass;
 //MemoLoadXmlWithALXmlDocument.Lines.Add('Number
 
 //GetProcessMemoryInfo(Process 
     writeln('mem from dll '+inttostr(ProcessMemoryUsage(GetCurrentProcessID)));
     writeln('page from dll '+inttostr(ProcessPageUsage(GetCurrentProcessID)));
     writeln('proc all from dll '
                 +inttostr(ProcessAllRec(GetCurrentProcessID).workingsetsize));
     writeln('proc all from workingset '
                 +inttostr(ProcessAllRec(GetCurrentProcessID).PeakWorkingSetSize div 1024));
     writeln('proc peak paged use '
                 +inttostr(ProcessAllRec(GetCurrentProcessID).QuotaPeakPagedPoolUsage));
     writeln('proc page peak file '
                 +inttostr(ProcessAllRec(GetCurrentProcessID).PeakPagefileUsage div 1024));
 
     SplitImages(self);
     //deletefiles(PICPATH,'*.bmp');
END. 


unit FSplitterMain;

interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, ComCtrls;

type
  TForm1 = class(TForm)
    EDFile: TEdit;
    Button1: TButton;
    EDTileSize: TEdit;
    EDMask: TEdit;
    ProgressBar: TProgressBar;
    Label1: TLabel;
    LAAction: TLabel;
    RBFull: TRadioButton;
    RBHalf: TRadioButton;
    RBLow: TRadioButton;
    procedure Button1Click(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form1: TForm1;

implementation

//{$R *.dfm}

uses Jpeg, VectorLists;

procedure TForm1.Button1Click(Sender: TObject);
var
   pic : TPicture;
   bmp, bmp2 : TBitmap;
   s, sd, f : Integer;
   x, y : Integer;
begin
   SetCurrentDir(ExtractFilePath(Application.ExeName));

   s:=StrToInt(EDTileSize.Text);
   pic:=TPicture.Create;

   if RBHalf.Checked then
      f:=2
   else if RBLow.Checked then
      f:=4
   else f:=1;
   sd:=s div f;

   ProgressBar.Position:=0;
   Screen.Cursor:=crHourGlass;

   bmp:=TBitmap.Create;
   bmp.PixelFormat:=pf24bit;
   bmp.Width:=sd;
   bmp.Height:=sd;

   if f<>1 then begin
      bmp2:=TBitmap.Create;
      bmp2.PixelFormat:=pf24bit;
      bmp2.Width:=s;
      bmp2.Height:=s;
   end else bmp2:=nil;

   LAAction.Caption:='Loading Jpeg texture...';
   LAAction.Visible:=True;
   Refresh;
   pic.LoadFromFile(EDFile.Text);
   x:=0; while x<pic.Width do begin
      y:=0; while y<pic.Height do begin

         if sd<>s then begin
            bmp2.Canvas.Draw(-x, -y, pic.Graphic);
            bmp.Canvas.StretchDraw(Rect(0, 0, sd, sd), bmp2);
         end else bmp.Canvas.Draw(-x, -y, pic.Graphic);
         LAAction.Caption:=Format('Generating tile %d-%d...', [x div s, y div s]);
         Refresh;
         bmp.SaveToFile(Format(EDMask.Text, [x div s, y div s]));
         ProgressBar.StepBy(1);

         Inc(y, s);
      end;
      Inc(x, s);
   end;

   bmp2.Free;
   bmp.Free;
   pic.Free;

   Screen.Cursor:=crDefault;
   LAAction.Caption:='Completed';
   ShowMessage('Done!');
   Application.Terminate;
end;

end.



//############################################################################
// Archimedes Spiral App
//############################################################################

procedure SIRegister_TOvcIntlSup(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TOvcIntlSup') do
  with CL.AddClassN(CL.FindClass('TObject'),'TOvcIntlSup') do begin
    RegisterMethod('Constructor Create');
    Procedure Free');
    Function CurrentDateString( const Picture : string; Pack : Boolean) : string');
    Function CurrentDatePChar( Dest : PChar; Picture : PChar; Pack : Boolean) : PChar');
    Function CurrentTimeString( const Picture : string; Pack : Boolean) : string');
    Function CurrentTimePChar( Dest : PChar; Picture : PChar; Pack : Boolean) : PChar');
    Function DateToDateString(const Picture: string; Julian : TStDate; Pack : Boolean) : string');
    Function DateToDatePChar( Dest : PChar; Picture : PChar; Julian : TStDate; Pack : Boolean) : PChar');
    Function DateTimeToDatePChar( Dest : PChar; Picture : PChar; DT : TDateTime; Pack : Boolean) : PChar');
    Function DateStringToDMY( const Picture, S : string; var Day, Month, Year : Integer; Epoch : Integer) : Boolean');
    Function DatePCharToDMY( Picture, S : PChar; var Day, Month, Year : Integer; Epoch : Integer) : Boolean');
    Function DateStringIsBlank( const Picture, S : string) : Boolean');
    Function DatePCharIsBlank( Picture, S : PChar) : Boolean');
    Function DateStringToDate( const Picture, S : string; Epoch : Integer) : TStDate');
    Function DatePCharToDate( Picture, S : PChar; Epoch : Integer) : TStDate');
    Function DayOfWeekToString( WeekDay : TDayType) : string');
    Function DayOfWeekToPChar( Dest : PChar; WeekDay : TDayType) : PChar');
    Function DMYtoDateString( const Picture : string; Day, Month, Year : Integer; Pack : Boolean; Epoch : Integer) : string');
    Function DMYtoDatePChar( Dest : PChar; Picture : PChar; Day, Month, Year : Integer; Pack : Boolean; Epoch : Integer) : PChar');
    Function InternationalCurrency( FormChar : Char; MaxDigits : Byte; Float, AddCommas, IsNumeric : Boolean) : string');
    Function InternationalCurrencyPChar( Dest : PChar; FormChar : Char; MaxDigits : Byte; Float, AddCommas, IsNumeric : Boolean) : PChar');
    Function InternationalDate( ForceCentury : Boolean) : string');
    Function InternationalDatePChar( Dest : PChar; ForceCentury : Boolean) : PChar');
    Function InternationalLongDate( ShortNames : Boolean; ExcludeDOW : Boolean) : string');
    Function InternationalLongDatePChar( Dest : PChar; ShortNames : Boolean; ExcludeDOW : Boolean) : PChar');
    Function InternationalTime( ShowSeconds : Boolean) : string');
    Function InternationalTimePChar( Dest : PChar; ShowSeconds : Boolean) : PChar');
    Function MonthStringToMonth( const S : string; Width : Byte) : Byte');
    Function MonthPCharToMonth( S : PChar; Width : Byte) : Byte');
    Function MonthToString( Month : Integer) : string');
    Function MonthToPChar( Dest : PChar; Month : Integer) : PChar');
    Procedure ResetInternationalInfo');
    Function TimeStringToHMS( const Picture, S : string; var Hour, Minute, Second : Integer) : Boolean');
    Function TimePCharToHMS( Picture, S : PChar; var Hour, Minute, Second : Integer) : Boolean');
    Function TimeStringToTime( const Picture, S : string) : TStTime');
    Function TimePCharToTime( Picture, S : PChar) : TStTime');
    Function TimeToTimeString( const Picture : string; T : TStTime; Pack : Boolean) : string');
    Function TimeToTimePChar(Dest: PChar; Picture : PChar; T : TStTime; Pack : Boolean) : PChar');
    Function TimeToAmPmString( const Picture : string; T : TStTime; Pack : Boolean) : string');
    Function TimeToAmPmPChar(Dest: PChar; Picture : PChar; T : TStTime; Pack : Boolean) : PChar');
    RegisterProperty('AutoUpdate', 'Boolean', iptrw);
    RegisterProperty('CurrencyLtStr', 'string', iptrw);
    RegisterProperty('CurrencyRtStr', 'string', iptrw);
    RegisterProperty('DecimalChar', 'Char', iptrw);
    RegisterProperty('CommaChar', 'Char', iptrw);
    RegisterProperty('Country', 'string', iptr);
    RegisterProperty('CurrencyDigits', 'Byte', iptrw);
    RegisterProperty('ListChar', 'Char', iptrw);
    RegisterProperty('SlashChar', 'Char', iptrw);
    RegisterProperty('TrueChar', 'Char', iptrw);
    RegisterProperty('FalseChar', 'Char', iptrw);
    RegisterProperty('YesChar', 'Char', iptrw);
    RegisterProperty('NoChar', 'Char', iptrw);
    RegisterProperty('OnWinIniChange', 'TNotifyEvent', iptrw);
  end;
end;


----app_template_loaded_code----