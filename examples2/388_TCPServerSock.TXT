PROGRAM cHTTPUtils_TCPServerSocket;
// dont 
//#sign max: APSN21: 29.09.2013 17:22:49 
//#path:E:\maxbox\maxbox3\examples\
//from E:\maxbox\maxbox3\examples\385_cHTTPUtils.TXT  , #locs>212
//uses IdBaseComponent, IdComponent, IdTCPServer;

// {$ Start the Client on 388_TCPServerSockClient.TXT end }
                               
Const
  //change to your OS TCP Server
  TCPPORT= 6000;
  SFILE = 'zipcodes.txt';
  
  REG_KEY_TEAMVIEWER8 = '\SOFTWARE\Wow6432Node\TeamViewer\Version8';
  REG_VAL_CLIENTID = 'ClientID';
  
  // HTTP/1.1  Tests
  TestReq1 =
      'GET / HTTP/1.1'#13#10 +
      'Host: www.example.com'#13#10 +
      'Date: Mon 1 Jan 2010 12:23:34 GMT'#13#10 +
      'Connection: close'#13#10 +
      'Cookie: id=123'#13#10 +
      #13#10;

  // HTTP/1.0; Empty field values; Unknown field values; LWS
  TestReq2 =
      'GET / HTTP/1.0'#13#10 +
      'Host: abc'#13#10 +
      'Date: '#13#10 +
      'Connection: '#13#10' invalid'#13#10 +
      'Cookie: invalid'#13#10 +
      #13#10;
   // Pre-HTTP/1.0 response; Incomplete request
   // HTTP/1.1
  TestResp1 =
      'HTTP/1.1 200 OK'#13#10 +
      'Server: Fundamentals'#13#10 +
      'Date: Monday, 2 Jan 2010 12:23:34 GMT'#13#10 +
      'Last-Modified: Monday, 2 Jan 2010 12:23:30 GMT'#13#10 +
      'Content-Type: text/html; charset=iso123'#13#10 +
      'Content-Length: 1'#13#10 +
      'Content-Encoding: gzip'#13#10 +
      'Age: 15'#13#10 +
      'Connection: Keep-Alive'#13#10 +
      'Set-Cookie: Domain=www.example.com; id=123'#13#10 +
      'Set-Cookie: Domain=www.example.com; id=222'#13#10 +
      #13#10 +
      '1';

  // HTTP/1.0; LWS; Empty field value; Custom field
  TestResp2 =
      'HTTP/1.0 401 Bad'#13#10 +
      'Server: '#13#10#9'Fundamentals'#13#10 +
      'Content-Type: text/abc;'#13#10' charset=iso123'#13#10 +
      'Content-Length: 1'#13#10 +
      'Connection: '#13#10 +
      'My-Field: abc'#13#10 +
      #13#10 +
      '1';


function getTeamViewerID: string; forward;

//implementation

function getTeamViewerID: string;
var
  Reg: TRegistry;
  TeamViewerID: String;
begin
  TeamViewerID:='';
  Reg:= TRegistry.Create;
  try
    Reg.RootKey:=HKEY_LOCAL_MACHINE;
    if Reg.OpenKey(REG_KEY_TEAMVIEWER8, False) then begin
      TeamViewerID:=Format('%d',[Reg.ReadInteger(REG_VAL_CLIENTID)]);
    end;
    Reg.CloseKey;
  finally
    Result:= TeamViewerID;
    Reg.Free; //FreeAndNil(Reg);
  end;
end;

procedure SelfTest_Reader;
var //T : THTTPContentReader_TestObj;
    T : THTTPContentReader;
    R : THTTPContentDecoder;
    H : THTTPCommonHeaders;
begin
  //T := THTTPContentReader_TestObj.Create;
  //R := THTTPContentDecoder.Create(T.ReaderRead, T.ReaderContentBuf, T.ReaderContentComplete);
  try
    //FillChar(H, SizeOf(H), 0);
    H.TransferEncoding.Value := hteChunked;
     R.InitDecoder(H);
    //T.SetTestStr(TestChunked1);
    {repeat
      R.Process;
    until T.FComplete; }
    //Assert(T.FBufPos >= Length(T.FBuf));
    //Assert(T.FContent = '123451234567890123456');
    Assert(R.ContentReceived = 21,'');
    Assert(R.ContentReceived = 1025,'');  
  finally
    R.Free;
    //T.Free;
  end;
end;


procedure indySocks_directtester;
var fTPClient: TidFTP;
    idTCPClient1: TIdTCPClient;
begin
    FTPClient := TidFTP.create(self);
    IdTCPClient1:= TIdTCPClient.create(self);
    //IdTCPClient1.SocksInfo.Host := [the DNS name of the proxy server or its IP address]
//IdTCPClient1.socket.SocksInfo.Protocol:= [svNoSocks for no SOCKS support,svSocks4 for SOCKS 4, //svSocks4A for SOCKS 4 with protocol extension, and svSocks5 for SOCKS 5 protocol]
//IdTCPClient1.SocksInfo.Authentication:= [saNoAuthentication for no SOCKS authentication or saUsernamePassword for username and password authentication]

with {ftpclient.Socket.SocksInfo,} FTPClient.ProxySettings do begin
{ if ProxyLogin then
ftpclient.Socket.SocksInfo.Authentication:=saUsernamePassword
else
ftpclient.Socket.SocksInfo.Authentication:=saNoAuthentication;  }
//Host:=ProxyServer;
//Password:=ProxyPassword;
//Port:=ProxyPort;
//UserName:=ProxyUser;
// ftpclient.Socket.SocksInfo.Version:=TSocksVersion(ProxyType);
end;
IdTCPClient1.Free;
{I commented out the SocksInfo because it would A/V on me. I tried to do the
following and still had problems:
ftpclient.Socket.SocksInfo.create(FTPClient);
How do you decided whether to use socks or the proxy stuff? If I just set}
end;

//////////////////////////// TCPServer /////////////////////////////////////////

 var  ZipCodeList: TStrings;
      IdTCPServer1: TIdTCPServer;

procedure TCPServer_IdTCPServer1Connect(AThread: TIdPeerThread);
begin
  AThread.Connection.WriteLn('Indy Hanoi Zip Code mXServer Ready.');
end;

procedure TCPServer_IdTCPServer1Execute(AThread: TIdPeerThread);
var
  sCommand: string;
begin
  with AThread.Connection do begin
 //('Function ReadLn(ATerminator: string; const ATimeout,AMaxLineLength:Integer):string');
    sCommand:= Readln('',1000,80);
    if SameText(sCommand, 'QUIT') then begin
      Disconnect;
    end else if SameText(Copy(sCommand,1,8), 'ZipCode ') then begin
      WriteLn(ZipCodeList.Values[Copy(sCommand, 9, MaxInt)]);
    end;
  //end;
    PrintF('Command %s at %-10s received from %s:%d',[sCommand, 
              DateTimeToStr(Now), socket.binding.PeerIP, socket.binding.PeerPort]);
  end; {with}
end;


procedure TCPServer_Destroy(Sender: TObject);
begin
  ZipCodeList.Free;
  writeln('let ZipCodeList.Free; done');
end;

procedure TCPServerMain_Create(Sender: TObject);
begin
  ZipCodeList:= TStringList.Create;
  ZipCodeList.LoadFromFile(ExePath+'Examples\'+SFILE);
  IdTCPServer1:= TIdTCPServer.Create(self);
  with IdTCPServer1 do begin
    defaultPort:= TCPPORT;
    active:= true;
    onConnect:= @TCPServer_IdTCPServer1Connect;
    OnExecute:= @TCPServer_IdTCPServer1Execute;
    //getIP(getHostName);
    PrintF('Listening TCPServer on %s:%d.',[getIP(getHostName),Bindings[0].Port]);
    ShowmessageBig('Close OK to shutdown TCP Server listen on: '+intToStr(Bindings[0].Port));
    active:= false;
    Free;
    TCPServer_Destroy(self);
  end;
  Writeln('Server Stopped at '+DateTimeToInternetStr(Now, true))

//ShellExecute3(ExePath+'maxbox3.exe',Exepath+'examples\388_TCPServerSockClient.TXT',seCmdOpen)
end;

begin   //main app
  writeln('TeamViewerID: '+getTeamViewerID);
  //SelfTestcHTTPUtils;
  SelfTestcTLSUtils;
  //SelfTestcXMLFunction;
  //SelfTestcXMLUtils;
  //maxForm1.close1click(self);
  //Application.terminate;
  //maxform1.NewInstance1Click(self);
  
  TCPServerMain_Create(self);
  Sleep(1000);
  //TformMain_Connect1Click(Self);
End. 



  SFILE = 'zipcodes.txt';
--------------------------------
01001=AGAWAM, MA
01002=CUSHMAN, MA
01005=BARRE, MA
01007=BELCHERTOWN, MA
01008=BLANDFORD, MA
01010=BRIMFIELD, MA
01011=CHESTER, MA
01012=CHESTERFIELD, MA
01013=CHICOPEE, MA
01020=CHICOPEE, MA
01022=WESTOVER AFB, MA
01026=CUMMINGTON, MA
01027=MOUNT TOM, MA
01028=EAST LONGMEADOW, MA
01030=FEEDING HILLS, MA
01031=GILBERTVILLE, MA
01032=GOSHEN, MA
01033=GRANBY, MA
01034=TOLLAND, MA
01035=HADLEY, MA
01036=HAMPDEN, MA
01038=HATFIELD, MA
01039=HAYDENVILLE, MA
01040=HOLYOKE, MA
01050=HUNTINGTON, MA
01053=LEEDS, MA
01054=LEVERETT, MA
01056=LUDLOW, MA
 


The last slash might be optional. Right?

How about something like this:

$url =~ m|([^/]+)/?$|;
my $end_of_url = $1;

The $ on the end anchors the regular expression to the end of the string. The [^/] means anything that's not a slash and the + after means I want one or more things that are not slashes. Notice that this is in a capture group which are marked with parentheses.

I end the regular expression with /? which means that there may or may not be a slash on the very end of the string. I've put my regular expression between m| and |, so I can use forward slashes without having to constantly escape them.

The last part of the URL is now in $1 and I can set my own scalar variable to save this result.
share|improve this answer


http://www.swissdelphicenter.ch/en/showarticle.php?id=4
 

----app_template_loaded_code----
-- No entry found for this zip code.
-- No entry found for this zip code.
-- No entry found for this zip code.
-- No entry found for this zip code.
-- No entry found for this zip code.
-- No entry found for this zip code.
-- No entry found for this zip code.
-- No entry found for this zip code.
