PROGRAM Callback_StringList_To_HTML;
// dont 
//#sign max: APSN21: 09.09.2013 18:31:58 
//#path:E:\maxbox\maxbox3\examples\
//try also the class TJvStringListToHtml

                               
//uses
  //TJvStringListToHtml

const
  //change to your OS
  REG_KEY_TEAMVIEWER8 = '\SOFTWARE\Wow6432Node\TeamViewer\Version8';
  REG_VAL_CLIENTID = 'ClientID';
//  resourcestring
  RC_Html1 = '<HTML>';
  RC_Html2 = '<TITLE>TStringList converted with JEDI-VCL Component</TITLE>';
  RC_Html3 = '<BODY>';
  RC_Html4 = '<BR>';
  RC_Html5 = '</BODY>';
  RC_Html6 = '</HTML>';


function Endian64(x: Int64): Int64;
begin
  Result:= (x and $00000000000000FF) shl 56;
  Result:= Result + (x and $000000000000FF00) shl 40;
  Result:= Result + (x and $0000000000FF0000) shl 24;
  Result:= Result + (x and $00000000FF000000) shl 8;
  Result:= Result + (x and $000000FF00000000) shr 8;
  Result:= Result + (x and $0000FF0000000000) shr 24;
  Result:= Result + (x and $00FF000000000000) shr 40;
  Result:= Result + (x and $FF00000000000000) shr 56;
end;

//type bool = boolean;

FUNCTION FileTimeGMT2 (FileName: STRING): TDateTime;
         // Returns the Date and Time of the last modification of the given File
         // The Result is zero if the file could not be found
         // The Result is given in UTC (GMT) time zone
VAR
  Handle         : THandle;
  FindData       : TWin32FindData;
  SystemFileTime : TSystemTime;
  mf: TFileTime;
begin
  Result := 0.0;
  Handle := FindFirstFile (PChar (FileName), FindData);
  IF Handle <> INVALID_HANDLE_VALUE THEN BEGIN
    WFindClose (Handle);
    IF (FindData.dwFileAttributes AND FILE_ATTRIBUTE_DIRECTORY) = 0 THEN
      // FileTimeToSystemTime(FindData.ftLastWriteTime, SystemFileTime); 
      IF FileTimeToSystemTime(FindData.ftLastWriteTime, SystemFileTime) THEN BEGIN
        with SystemFileTime do begin
          if messagebeep(4) then 
            Result:= EncodeDate (wYear, wMonth, wDay) +
          EncodeTime (wHour, wMinute, wSecond, wMilliseconds);
        end;
      END;
    END;
END;


procedure TrimStrings(const Strings: TStrings);
var i: Integer;
begin 
  for i:= 0 to Strings.Count -1 do
    Strings[i]:= Trim(Strings[i]);
end; 


function TJvstringListToHtml_ConvertToHtmlStringList(Value: TStringList): TStringList;
var
  I: Integer;
begin
  Result:= TStringList.Create;
  Result.Add(RC_Html1);
  Result.Add(RC_Html2);
  Result.Add(RC_Html3);
  for I:= 0 to Value.Count - 1 do
    Result.Add(RC_Html4 + Value[I]);
  Result.Add(RC_Html5);
  Result.Add(RC_Html6);
end;


procedure TJvstringListToHtml_ConvertToHtml(Value: TStringList; Path: string);
var
  List: TStringList;
begin
  // (rom) classic memory leak fixed
  List:= TJvstringListToHtml_ConvertToHtmlStringList(Value);
  try
    List.SaveToFile(Path);
  finally
    List.Free;
  end;
end;

Procedure RecurseDir(Dir: String; IncludeSubs: boolean;callback: TFileCallbackProcedure);
var
  //SearchRec :TSearchRec;
  aResult : LongInt;
begin
  aResult := FindFirst(Dir+'\*.*', faAnyFile);
  while aResult = 0 do begin
    { This makes sure its not the . or .. directorys}
    if not(SearchRecname[1]='.') then begin
      if (SearchRecattr and faDirectory) <> 0 then begin
      { its a dir so do a recursive call
        if subdirectories wanted }
        if IncludeSubs then
          RecurseDir(Dir + SearchRecname+'\',
                           IncludeSubs, callback);
      end
      else
        { Call are callback function}
        callback(dir+SearchRecname);
      end; //if . ..
    aResult:= FindNext;  //(SearchRec);
  end;
end;



type 
    Tmyfcallback = TFileCallbackProcedure;
                         // TFileCallbackProcedure = procedure(filename:string);
    procedure letdataOut(filename: string);
    begin
       writeln(filename) 
    end;   

var mybackout:  Tmyfcallback;
    stlist: TStringlist;
    i: integer;

begin
  writeln('TeamViewerID: '+getTeamViewerID);
  writeln('addressinfo '+addressinfo($71A90000));
  writeln(datetimetostr(FileTimeGMT(exepath+'maxbox3.exe')));
  writeln(datetimetostr(FileTimeGMT2(exepath+'maxbox3.exe')));
 //Procedure RecurseDirectory2(Dir : String; IncludeSubs : boolean);
  
  RecurseDirectory2(Exepath,false);
  
  stlist:= TStringlist.create;
  //stlist.add(memo2.text);
  for i:= 1 to memo2.lines.count - 1 do 
    stlist.add(memo2.lines[i]);
  TJvstringListToHtml_ConvertToHtml(stlist, Exepath+'stlist.htm')
  OpenFile(Exepath+'stlist.htm');
  stlist.Free;
 
  mybackout:= @letdataOut;
  
  //RecurseDirectory(Exepath,false, @letdataout);
  //RecurseDirectory(Exepath,false, mybackout);
  Writeln('');
  Writeln('****************************Callback Out ***********************')
  //RecurseDir(Exepath,false, mybackout);
  RecurseDir(Exepath,true, @letdataout);
 
 
end. 


(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvStringListToHtml(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJvComponent', 'TJvStringListToHtml') do
  with CL.AddClassN(CL.FindClass('TJvComponent'),'TJvStringListToHtml') do begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
      RegisterMethod('Procedure Free');
    RegisterMethod('Procedure ConvertToHTML( Source : TStrings; const FileName : string)');
    RegisterMethod('Procedure ConvertToHTMLStrings( Source, Destination : TStrings)');
    RegisterProperty('HTML', 'TStrings', iptrw);
    RegisterProperty('Strings', 'TStrings', iptrw);
    RegisterProperty('HTMLLineBreak', 'string', iptrw);
    RegisterProperty('HTMLTitle', 'string', iptrw);
    RegisterProperty('IncludeHeader', 'Boolean', iptrw);
  end;
end;
 


TTarArchive Usage
-----------------
- Choose a constructor
- Make an instance of TTarArchive                  TA := TTarArchive.Create (Filename);
- Scan through the archive                         TA.Reset;
                                                   WHILE TA.FindNext (DirRec) DO BEGIN
- Evaluate the DirRec for each file                  ListBox.Items.Add (DirRec.Name);
- Read out the current file                          TA.ReadFile (DestFilename);
  (You can ommit this if you want to
  read in the directory only)                        END;
- You're done                                      TA.Free;


TTarWriter Usage
----------------
- Choose a constructor
- Make an instance of TTarWriter                   TW := TTarWriter.Create ('my.tar');
- Add a file to the tar archive                    TW.AddFile ('foobar.txt');
- Add a string as a file                           TW.AddString (SL.Text, 'joe.txt', Now);
- Destroy TarWriter instance                       TW.Free;
- Now your tar file is ready.




The last slash might be optional. Right?

How about something like this:

$url =~ m|([^/]+)/?$|;
my $end_of_url = $1;

The $ on the end anchors the regular expression to the end of the string. The [^/] means anything that's not a slash and the + after means I want one or more things that are not slashes. Notice that this is in a capture group which are marked with parentheses.

I end the regular expression with /? which means that there may or may not be a slash on the very end of the string. I've put my regular expression between m| and |, so I can use forward slashes without having to constantly escape them.

The last part of the URL is now in $1 and I can set my own scalar variable to save this result.
share|improve this answer
 

----app_template_loaded_code----