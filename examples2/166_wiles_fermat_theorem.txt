PROGRAM FermatWilesDemo_App_mX;

//http://en.wikipedia.org/wiki/Fermat%27s_Last_Theorem
//unit uPSI_xrtl_math_Integer;


CONST 
//<Constant declarations> 
  TEXTOUT = 'hi world of fermat code rage2';

{TYPE 
<Type declarations>} 

//Var 
//<Variable declarations>
  //i: integer;

//<FUNCTION>
//<PROCEDURE> 

function GetBigIntPower2(aval, exp: integer): string;
  //unit mybigint
var mbResult: TMyBigInt;
     i: integer;
begin
  mbResult:= TMyBigInt.Create(1);
  try
    for i:= 1 to exp do 
      //mbResult.Multiply(mbresult, mbresult);
      mbResult.Multiply1(mbresult, aval);
    Result:= mbResult.ToString;
  finally 
    //FreeAndNil(mbResult);
    mbResult.Free;
  end;
end;

function GetBigAddObj(aval, aexp: integer): TMybigint;
  //unit mybigint
var mbResult: TMyBigInt;
     i: integer;
begin
  mbResult:= TMyBigInt.Create(1);
  try
    for i:= 1 to aexp do 
        //mbResult.Multiply(mbresult, mbresult);
      mbResult.Multiply1(mbresult, aval);
    Result:= mbResult;
  finally 
    //FreeAndNil(mbResult);
    //mbResult.Free;
  end;
end;

procedure bigdecimal_fermatdemo;
//var adig: TDigits;
begin
    with TStDecimal.create do begin
      AsInt(rmnormal)
      //addone;
      asstring:= '1782';
      addone;
      //RaiseToPower(12)
      writeln(asString)
      Free;
    end;  
end;

function BigAdd2(aone, atwo: string): string;
var bigint, bigint1, bigintres: TXRTLInteger;
begin
  XRTLFromString(aone, bigint, 10);
  XRTLFromString(atwo, bigint1, 10);
  XRTLAdd(bigint,bigint1,bigintres);
  result:= XRTLToString(bigintres,10,10);
end;
    



  var sumferm,sumtot: string;
      big1, big2, sum3: TMyBigInt;

BEGIN  //Main
//<Executable statements>
  for it:= 1 to 3 do 
    //if it > 1 then begin
    Writeln(TEXTOUT+CRLF);
    //Writeln(TEXTOUT+CRLF);
  //end;  
  maXcalcF('2^64 /(60*60*24*365)') 
  //opendoc('C:\maXbook\maxbox3\newtemplateifthen.psb')  
//<Definitions>  

  //2.541210259E+39    CASIO FX-880P
  maXcalcF('1782^12 + 1841^12')  //2.54121025861459E39

   writeln(powerbig(3987,12));
   writeln(powerbig(4365,12));
   writeln(powerbig(4472,12));
   writeln(bigexp('4472','12'));
   writeln(bigadd(powerbig(3987,12),powerbig(4365,12)));
   maXcalcF('3987^12 + 4365^12')  //6.39766563496986E43
   maXcalcF('4472^12')            //6.39766563484867E43
   maXcalcF('(3987^12 + 4365^12)^(1/12)')  //4472.00000000706
  
   writeln('sim proof 2:')
   
   maXcalcF('1782^12 + 1841^12')  //2.54121025861459E39
   writeln(powerbig(1782,12));
   writeln(powerbig(1841,12));
   writeln(powerbig(1922,12));
   writeln(bigexp('1922','12'));
   big1:=  GetBigAddObj(1782,12)
   big2:=  GetBigAddObj(1841,12)
   sum3:=  TMyBigInt.Create(0);
     sum3.add(big1, big2)
     writeln('sum3: ');
     writeln('A:'+sum3.ToString);   //10 positions precise!
   big1.free; 
   big2.free;
   sum3.free;  
   
   sumferm:= (powerbig(1922,12));
   //sumtot:= bigadd(powerbig(12,1782),powerbig(12,1841));
   sumtot:= bigadd(powerbig(1782,12),powerbig(1841,12));
   writeln('B:'+sumtot);
   sumtot:= bigadd2(powerbig(1782,12),powerbig(1841,12));
   writeln('C:'+sumtot);
   
   writeln('');
   writeln(inttostr(length(sumferm)))
   writeln(inttostr(length(sumtot))) 
   writeln(sumtot);
   writeln(powerbig(1922,12));
   
   bigdecimal_fermatdemo;
   writeln(getbigPI)
  
END. 


Hier die zwei Gegenbeispiele für den Wiles'schen Beweis des Fermatschen Satzes zwecks rechnerischer Nachprüfung:
1) 3987^12 + 4365^12 = 4472^12 und
2) 1782^12 + 1841^12 = 1922^12
falsch ist: 3987 12 + 4365 12 = 4472 12 . 

   writeln(getbigadd('1025397835622633634807550462948226174976','1515812422991955541481119495194202351681')))


1782^12
1025397835622633634807550462948226174976
1841^12
1515812422991955541481119495194202351681
1922^12
2541210259314801410819278649643651567616



12^1782


12^1841


12^1922


 type
  TMyBigInt = class
  private
    Len: Integer;
    Value: AnsiString;
    procedure Trim;
    procedure Shift(k: Integer);
    procedure MultiplyAtom(Multiplier1: TMyBigInt; Multiplier2: Integer);
  public
    constructor Create(iValue: Integer = 0);
    procedure Add(Addend1, Addend2: TMyBigInt);
    procedure Multiply(Multiplier1, Multiplier2: TMyBigInt); overload;
    procedure Multiply(Multiplier1: TMyBigInt; Multiplier2: Integer); overload;
    function ToString: string;
    procedure CopyFrom(mbCopy: TMyBigInt);
  end;

implementation

constructor TMyBigInt.Create(iValue: Integer = 0);
var 
  sTmp: ShortString; 
  i: Integer;
begin
  inherited Create;
  sTmp := IntToStr(abs(iValue));
  Len  := Length(sTmp);
  SetLength(Value, Len);
  for i := 1 to Len do Value[i] := Chr(StrToInt(sTmp[Len - i + 1]));
end;

procedure TMyBigInt.Add(Addend1, Addend2: TMyBigInt);
  { zwei TMyBigInt miteinander addieren }
var 
  i, iCarry, iTemp: Integer;
begin
  // Länge der Wert-Strings angleichen
  iTemp := max(Addend1.Len, Addend2.Len);
  SetLength(Value, iTemp);
  for i := Len + 1 to iTemp do Value[i] := #0; // Für den Fall Addend1/Addend2=Self
  Len := iTemp;
  // Berechnung von Übertrag und Summe
  iCarry := 0;
  for i := 1 to Len do begin
    iTemp := iCarry;
    if i <= Addend1.Len then iTemp := iTemp + Ord(Addend1.Value[i]);
    if i <= Addend2.Len then iTemp := iTemp + Ord(Addend2.Value[i]);
    Value[i] := Char(iTemp mod Base);
    iCarry   := iTemp div Base;
  end;
  if iCarry > 0 then begin
    Len := Len + 1;
    SetLength(Value, Len);
    Value[Len] := Char(iCarry);
  end;
end;

procedure TMyBigInt.Multiply(Multiplier1, Multiplier2: TMyBigInt);
  { zwei TMyBigInt miteinander multipliziren }
var 
  mbResult, mbTemp: TMyBigInt; 
  i: Integer;
begin
  mbResult := TMyBigInt.Create;
  try
    mbTemp := TMyBigInt.Create;
    try
      for i := 1 to Multiplier2.Len do begin
        // Multiplizieren nach der "Schulmethode"
        mbTemp.MultiplyAtom(Multiplier1, Ord(Multiplier2.Value[i]));
        mbTemp.Shift(i - 1);
        mbResult.Add(mbResult, mbTemp);
      end;
    finally 
      FreeAndNil(mbTemp);
    end;
    CopyFrom(mbResult);
  finally 
    FreeAndNil(mbResult);
  end;
end;

procedure SIRegister_TStDecimal(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TStDecimal') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TStDecimal') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Function Compare( X : TStDecimal) : integer');
    RegisterMethod('Function IsNegative : boolean');
    RegisterMethod('Function IsOne : boolean');
    RegisterMethod('Function IsPositive : boolean');
    RegisterMethod('Function IsZero : boolean');
    RegisterMethod('Procedure SetToOne');
    RegisterMethod('Procedure SetToZero');
    RegisterMethod('Procedure Assign( X : TStDecimal)');
    RegisterMethod('Procedure AssignFromFloat( aValue : double)');
    RegisterMethod('Procedure AssignFromInt( aValue : integer)');
    RegisterMethod('Function AsFloat : double');
    RegisterMethod('Function AsInt( aRound : TStRoundMethod) : integer');
    RegisterMethod('Procedure Abs');
    RegisterMethod('Procedure Add( X : TStDecimal)');
    RegisterMethod('Procedure AddOne');
    RegisterMethod('Procedure ChangeSign');
    RegisterMethod('Procedure Divide( X : TStDecimal)');
    RegisterMethod('Procedure Multiply( X : TStDecimal)');
    RegisterMethod('Procedure RaiseToPower( N : integer)');
    RegisterMethod('Procedure Round( aRound : TStRoundMethod; aDecPl : integer)');
    RegisterMethod('Procedure Subtract( X : TStDecimal)');
    RegisterMethod('Procedure SubtractOne');
    RegisterProperty('AsString', 'AnsiString', iptrw);
  end;
end;

 CL.AddDelphiFunction('function BigMulu(aone, atwo: string): string;');
 function BigNumber(aone, atwo: string): string;');
 function BigExp(aone, atwo: string): string;');
 function BigMul(aone, atwo: string): string;');
 function BigAdd(aone, atwo: string): string;');
 function BigSub(aone, atwo: string): string;');
 function BigFactorial(aone: string): string;');
 function BigFact(aone: string): string;');





[PROCS]
Proc [0] Export: !MAIN -1
 [0] ASSIGN GlobalVar[13], [1]
 [15] PUSHTYPE 27(U8) // 1
 [20] COMPARE into Base[1]: GlobalVar[13] <= [3]
 [41] COND_NOT_GOTO currpos + 60 Base[1] [111]
 [51] PUSHTYPE 18(String) // 2
 [56] ASSIGN Base[2], ['hi world of code rage'#13#10]
 [94] CALL 1
 [99] POP // 1
 [100] INC GlobalVar[13]
 [106] GOTO currpos + 4294967205 [20]
 [111] POP // 0
 [112] PUSHTYPE 18(String) // 1
 [117] ASSIGN Base[1], ['2^64 /(60*60*24*365)']
 [152] CALL 2
 [157] POP // 0
 [158] RET
Proc [1]: External Decl: \00\00 WRITELN
Proc [2]: External Decl: \00\00 MAXCALCF
Proc [3] Export: !MASTERPROC -1
 [0] CALL 0
 [5] RET
Decompiled Code maXbox: newtemplateifthen.txt

Proc [0] Export: !MAIN -1
 [0] ASSIGN GlobalVar[8], [1]
 [15] PUSHTYPE 27(U8) // 1
 [20] COMPARE into Base[1]: GlobalVar[8] <= [3]
 [41] COND_NOT_GOTO currpos + 60 Base[1] [111]
 [51] PUSHTYPE 18(String) // 2
 [56] ASSIGN Base[2], ['hi world of code rage'#13#10]
 [94] CALL 1
 [99] POP // 1
 [100] INC GlobalVar[8]
 [106] GOTO currpos + 4294967205 [20]
 [111] POP // 0

----app_template_loaded_code----
----File newtemplate.txt not exists - now saved!----


Marco and I agreed to maintain in the first step the following components, maybe we will add further in the future:

1. Orpheus (Win32 and Win64)
2. Abbrevia (Win32, Win64, MacOSX, iOS and Android)
3. Virtual Tree (Win32 and Win64)
4. SynEdit (Win32 and Win64)
5. LockBox (Win32, Win64, MacOSX, iOS and Android)
6. Async Professional (Win32)
7. PowerPDF (Win32 and Win64)