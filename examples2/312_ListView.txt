{****************************************************************
 *
 * Project  : ListView Dataset maXbase SeriesSystem Information Series
 * App Name : 312_ListView.txt, loc's = 142
 * Purpose  : DB Access via BDE Alias Access
 * History  : system for mX3.9.6 ,need: OLEDB BDE Alias or Database3.mdb in /examples
 ****************************************************************}
program ListView;

function MyGetTickCount: Longint;
  external 'GetTickCount@kernel32.dll stdcall';
  
const KEYPATH = 'crypt\';
      ALIASPATH = 'SAS';
      
  
var
  ws: TWideStrings;
  i: integer;
  dbform: TForm;
    

procedure CreateDBGridForm(dblist: TStringList);
 //diaform:= CreateMessageDialog('my fast form perform',mtconfirmation, []);
var 
    DlgType1: TMsgDlgType;  
    //dbform: TForm;
    ard: TRadioGroup;
    options : TSelectDirOpts; 
begin
   dbform:= CreateMessageDialog('My Fast Form XML Converter - FFP',mtwarning,
                                        [mball, mbyes, mbhelp, mbok, mbAbort]);
   dbform.caption:= 'Listview FFP XML Demo';
   dbform.setBounds(50,50,800,600)
   dbform.Formstyle:= fsStayontop;
   dbform.Color:= 193;
   dbform.autoscroll:= true;                                                        
   with TLabel.Create(self) do begin
     parent:= dbform;
     SetBounds(400,50,500,600)
     font.size:= 14;
     dblist.Add('All Converted to...XML test')
     caption:= dblist.text;
   end;  
   with TRadioGroup.Create(self) do begin
     parent:= dbform;
     top:= 150;
     left:= 115;
     font.size:= 14;
     items.add('first comp of');
     items.add('second comp off');
     items.add('third comp off');
     ItemIndex:= 2; 
     writeln('classname of radio group '+classname);
   writeln(Items.Strings[ItemIndex]); 
   end;
   dbform.show; 
   //SelectDirectory
end;

    //type tnames2 = array [0..1] of string;
procedure TFormPopulatListview(Sender: TObject); 
    //type tnames2 = array [0..1] of string;
 var 
      Names: array[0..6] of array[0..1] of string;
      NewItem : TListItem; 
      ListItem : TListItem; 
      ListView1: TListView; 
      NewColumn: TListColumn; 
      I: Integer; 
      
    begin               
       names[0][0]:= 'Rubble'; names[0][1]:= 'Barney'; 
       names[1][0]:= 'Michael'; names[1][1]:= 'Johnson'; 
       names[2][0]:= 'Bunny'; names[2][1]:= 'Bugs'; 
       names[3][0]:= 'Silver'; names[3][1]:= 'HiHo'; 
       names[4][0]:= 'Simpson'; names[4][1]:= 'Bart'; 
       names[5][0]:= 'Squirrel'; names[5][1]:= 'Rocky'; 
       names[6][0]:= 'Box'; names[6][1]:= 'Max'; 
      
       listview1:= Tlistview.create(self);
       //NewColumn:= TListColumn.create(listitem);
       //ListItem:= TListItem.create(self);  
      
      with ListView1 do begin 
        parent:= dbform;
        gridlines:= true;
        SetBounds(40,320,300,200);
        ViewStyle:= vsReport; 
        font.size:= 12;
        readonly:= false;
        RowSelect:= True; 
        NewColumn:= Columns.Add; 
         NewColumn.width:= 120; 
        //Column[1]:= 
        NewColumn.Caption := 'Last Name'; 
        NewColumn:= Columns.Add; 
        NewColumn.width:= 90; 
        //NewColumn.height:= 90; 
        NewColumn.Caption:= 'First Name';
        //ondblclick:=
         
        for i:= Low(Names) to High(Names) do begin 
          //Listitem.parent
          ListItem:= Items.Add; 
          //items[1]:=;
          ListItem.Caption:= Names[I][0]; 
          ListItem.SubItems.Add(Names[I][1]); 
        end;
        addItem('a new one',NIL) 
        items[7].subitems.Add('test the rest');
       // ItemFocused;
       //sleep(2000); 
       //Free; 
      end;
    end; 



    procedure SelectDir(Sender: TObject); 
    var 
      chosenDirectory : string; 
      options : TSelectDirOpts; 
    begin 
      chosenDirectory:= 'C:\'; 
      if SelectDirectory(chosenDirectory, options, 0) then 
        writeln(chosenDirectory + '\'); 
    end;  


//const
  //MinSingle   : Single   = 1.5E-45;
  //MaxSingle   : Single   = 3.4E+38;
  //MinDouble   : Double   = 5.0E-324;
  //MaxDouble   : Double   = 1.7E+308;
  //{$IFDEF CLR}
  //MinExtended : Extended = 5.0E-324;
  //MaxExtended : Extended = 1.7E+308;
  //{$ELSE}
  //MinExtended : Extended = 3.4E-4932;
  //MaxExtended : Extended = 1.1E+4932;
  //{$ENDIF}
  //MinCurrency : Currency = -922337203685477.5807;
  //MaxCurrency : Currency = 922337203685477.5807;


var
  ast: TStringlist;
  chset: Charset;

begin
  //SetAdoQuery;
  //SetAdoSet;
  //SetADOSETAccess;
  //DB_XML_AliasConverter;
  //SetADO_SETAccess2;
  Writeln('Data Link Dir is: '+ DataLinkDir);
  writeln('machine name is: '+getHostName)
  writeln('user name is: '+getUserName)
  writeln('tick count from func ' +IntToStr(GetTickCount));
  Writeln('Host is: '+getHostbyName('www.softwareschule.ch'))
  //CreateFileFromString(ExePath+'mycopy.txt',memo2.text);
  //WriteLog(ExePath+'mylog.txt',memo2.text)
  
  ws:= TWideStringList.create;
  getProviderNames(ws)
  ast:= TStringlist.create; 
  //getProviderNames((ast));
  for i:= 1 to ws.count-1 do
    ast.add(ws.strings[i]);
  //ast.assign(Tstringlist(ws));
  
  CreateDBGridForm(TStringlist(ast));

  ast.free;

  TFormPopulatListview(self)

  for i:= 1 to ws.count -1 do 
    writeln(inttostr(i) +' '+ws.strings[i]);
  ws.free;
  
  //getProviderNames(ws) 
  //SelectDir(self); 
    //with tstatuspanel.create(self) do begin
    //parent:= dbform;
    //setbounds
 //end;   
 
  SelftestPEM;
  SelfTestCFundamentUtils;
  
  //chset:=   ['A']..['Z']//
  chset:=   ['a','b','1']//
  chset:= ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']
  //'abcdefghijklmnopqrstuvwxyz0123456789+/'];
 
  Writeln('CharCounter of alfabet: '+inttostr(cCharCount(chset)));

//    MinI(const A, B: Integer): Integer;   {$IFDEF UseInline}inline;{$ENDIF}
//function  MaxI(const A, B: Integer): Integer;   {$IFDEF UseInline}inline;{$ENDIF}
//function  MinC(const A, B: Cardinal): Cardinal; {$IFDEF UseInline}inline;{$ENDIF}
//function  MaxC(const A, B: Cardinal): Cardinal; {$IFDEF UseInline}inline;{$ENDIF}

{ Clip returns Value if in Low..High range, otherwise Low or High              }
//function  SumClipI(const A, I: Integer): Integer;
//function  SumClipC(const A: Cardinal; const I: Integer): Cardinal;

{ InXXXRange returns True if A in range of type XXX                            }
  //InByteRange(const A: Int64): Boolean;     {$IFDEF UseInline}inline;{$ENDIF}
//function  InWordRange(const A: Int64): Boolean;     {$IFDEF UseInline}inline;{$ENDIF}
//function  InLongWordRange(const A: Int64): Boolean; {$IFDEF UseInline}inline;{$ENDIF}
//function  InShortIntRange(const A: Int64): Boolean; {$IFDEF UseInline}inline;{$ENDIF}
//function  InSmallIntRange(const A: Int64): Boolean; {$IFDEF UseInline}inline;{$ENDIF}
//function  InLongIntRange(const A: Int64): Boolean;  {$IFDEF UseInline}inline;{$ENDIF}



{                                                                              }
{ Boolean types                                                                }
{                                                                              }
{   Boolean    -        -                                                      }
{   ByteBool   Bool8    8 bits                                                 }
{   WordBool   Bool16   16 bits                                                }
{   LongBool   Bool32   32 bits                                                }
{                                                                              }
{                                                                              }
{ Comparison                                                                   }
{                                                                              }


{                                                                              }
{ Real types                                                                   }
{                                                                              }
{   Floating point                                                             }
{     Single    32 bits  7-8 significant digits                                }
{     Double    64 bits  15-16 significant digits                              }
{     Extended  80 bits  19-20 significant digits (mapped to Double in .NET)   }
{                                                                              }
{   Fixed point                                                                }
{     Currency  64 bits  19-20 significant digits, 4 after the decimal point.  }
{                                                                              }

{ Min returns smallest of A and B                                              }
{ Max returns greatest of A and B                                              }
{ Clip returns Value if in Low..High range, otherwise Low or High              }
(*function  MinF(const A, B: Float): Float; {$IFDEF UseInline}inline;{$ENDIF}
function  MaxF(const A, B: Float): Float; {$IFDEF UseInline}inline;{$ENDIF}
function  ClipF(const Value: Float; const Low, High: Float): Float;

{ InXXXRange returns True if A in range of type XXX                            }
function  InSingleRange(const A: Float): Boolean; {$IFDEF UseInline}inline;{$ENDIF}
function  InDoubleRange(const A: Float): Boolean; {$IFDEF UseInline}inline;{$ENDIF}
{$IFNDEF CLR}
function  InCurrencyRange(const A: Float): Boolean; overload;
function  InCurrencyRange(const A: Int64): Boolean; overload;
{$ENDIF}

{ FloatExponent returns the exponent component of an Extended value            }
function  FloatExponentBase2(const A: Extended; var Exponent: Integer): Boolean;
function  FloatExponentBase10(const A: Extended; var Exponent: Integer): Boolean;

{ FloatIsInfinity is True if A is a positive or negative infinity.             }
{ FloatIsNaN is True if A is Not-a-Number.                                     }  *)
  //FloatIsInfinity(const A: Extended): Boolean;
   //FloatIsNaN(const A: Extended): Boolean;



 (* SingleCompareDelta   = 1.0E-34;
  DoubleCompareDelta   = 1.0E-280;
  {$IFDEF CLR}
  ExtendedCompareDelta = DoubleCompareDelta;
  {$ELSE}
  ExtendedCompareDelta = 1.0E-4400;
  {$ENDIF}   *)

  // Default CompareDelta is set to SingleCompareDelta. This allows any type
  // of floating-point value to be compared with any other.
//  DefaultCompareDelta = SingleCompareDelta;


{ Bit functions                                                                }
{                                                                              }
  //ClearBit(const Value, BitIndex: LongWord): LongWord;
  //SetBit(const Value, BitIndex: LongWord): LongWord;
  //IsBitSet(const Value, BitIndex: LongWord): Boolean;
  //ToggleBit(const Value, BitIndex: LongWord): LongWord;
  //IsHighBitSet(const Value: LongWord): Boolean;

  (*SetBitScanForward(const Value: LongWord): Integer; overload;
  SetBitScanForward(const Value, BitIndex: LongWord): Integer; overload;
  SetBitScanReverse(const Value: LongWord): Integer; overload;
  SetBitScanReverse(const Value, BitIndex: LongWord): Integer; overload;
  ClearBitScanForward(const Value: LongWord): Integer; overload;
  ClearBitScanForward(const Value, BitIndex: LongWord): Integer; overload;
  ClearBitScanReverse(const Value: LongWord): Integer; overload;
  ClearBitScanReverse(const Value, BitIndex: LongWord): Integer; overload;

  ReverseBits(const Value: LongWord): LongWord; overload;
  ReverseBits(const Value: LongWord; const BitCount: Integer): LongWord; overload;
  SwapEndian(const Value: LongWord): LongWord;

  RotateLeftBits16(const Value: Word; const Bits: Byte): Word;
  RotateLeftBits32(const Value: LongWord; const Bits: Byte): LongWord;
  RotateRightBits16(const Value: Word; const Bits: Byte): Word;
  RotateRightBits32(const Value: LongWord; const Bits: Byte): LongWord;

  BitCount(const Value: LongWord): LongWord;
  IsPowerOfTwo(const Value: LongWord): Boolean;

  LowBitMask(const HighBitIndex: LongWord): LongWord;
  HighBitMask(const LowBitIndex: LongWord): LongWord;
  RangeBitMask(const LowBitIndex, HighBitIndex: LongWord): LongWord;

  SetBitRange(const Value: LongWord;
          const LowBitIndex, HighBitIndex: LongWord): LongWord;
  ClearBitRange(const Value: LongWord;
          const LowBitIndex, HighBitIndex: LongWord): LongWord;
  ToggleBitRange(const Value: LongWord;
          const LowBitIndex, HighBitIndex: LongWord): LongWord;
  IsBitRangeSet(const Value: LongWord;
          const LowBitIndex, HighBitIndex: LongWord): Boolean;
  IsBitRangeClear(const Value: LongWord;
          const LowBitIndex, HighBitIndex: LongWord): Boolean;   *)


 //compare

 //csgn
 //ComplementChar(var C: CharSet; const Ch: AnsiChar);
 //ClearCharSet(var C: CharSet);
 //FillCharSet(var C: CharSet);
 //ComplementCharSet(var C: CharSet);
 //AssignCharSet(var DestSet: CharSet; const SourceSet: CharSet); overload;
 //Union(var DestSet: CharSet; const SourceSet: CharSet); overload;
 //Difference(var DestSet: CharSet; const SourceSet: CharSet); overload;
 //Intersection(var DestSet: CharSet; const SourceSet: CharSet); overload;
 //XORCharSet(var DestSet: CharSet; const SourceSet: CharSet);
  //IsSubSet(const A, B: CharSet): Boolean;
  //IsEqual(const A, B: CharSet): Boolean; overload;
  //IsEmpty(const C: CharSet): Boolean;
  //IsComplete(const C: CharSet): Boolean;
  //CharCount(const C: CharSet): Integer; overload;
 //ConvertCaseInsensitive(var C: CharSet);
  //CaseInsensitiveCharSet(const C: CharSet): CharSet;



{                                                                              }
{ Range functions                                                              }
{                                                                              }
{   RangeLength      Length of a range                                         }
{   RangeAdjacent    True if ranges are adjacent                               }
{   RangeOverlap     True if ranges overlap                                    }
{   RangeHasElement  True if element is in range                               }
{                                                                              }
(*function  IntRangeLength(const Low, High: Integer): Int64;
function  IntRangeAdjacent(const Low1, High1, Low2, High2: Integer): Boolean;
function  IntRangeOverlap(const Low1, High1, Low2, High2: Integer): Boolean;
function  IntRangeHasElement(const Low, High, Element: Integer): Boolean;

function  IntRangeIncludeElement(var Low, High: Integer;
          const Element: Integer): Boolean;
function  IntRangeIncludeElementRange(var Low, High: Integer;
          const LowElement, HighElement: Integer): Boolean;

function  CardRangeLength(const Low, High: Cardinal): Int64;
function  CardRangeAdjacent(const Low1, High1, Low2, High2: Cardinal): Boolean;
function  CardRangeOverlap(const Low1, High1, Low2, High2: Cardinal): Boolean;
function  CardRangeHasElement(const Low, High, Element: Cardinal): Boolean;

function  CardRangeIncludeElement(var Low, High: Cardinal;
          const Element: Cardinal): Boolean;
function  CardRangeIncludeElementRange(var Low, High: Cardinal;
          const LowElement, HighElement: Cardinal): Boolean;*)


{                                                                              }
{ Direct comparison                                                            }
{                                                                              }
{   Compare(I1, I2) returns crLess if I1 < I2, crEqual if I1 = I2 or           }
{   crGreater if I1 > I2.                                                      }
{                                                                              }
(*function  Compare(const I1, I2: Boolean): TCompareResult; overload;
function  Compare(const I1, I2: Integer): TCompareResult; overload;
function  Compare(const I1, I2: Int64): TCompareResult; overload;
function  Compare(const I1, I2: Extended): TCompareResult; overload;
function  CompareA(const I1, I2: AnsiString): TCompareResult;
function  CompareW(const I1, I2: WideString): TCompareResult;
function  CompareU(const I1, I2: UnicodeString): TCompareResult;

function  Sgn(const A: LongInt): Integer; overload;
function  Sgn(const A: Int64): Integer; overload;
function  Sgn(const A: Extended): Integer; overload;*)



{                                                                              }
{ Convert result                                                               }
{                                                                              }

 {                                                                              }
{ Integer-String conversions                                                   }
{                                                                              }

//widechar
 (*AnsiCharToInt(const A: AnsiChar): Integer;                            {$IFDEF UseInline}inline;{$ENDIF}
  WideCharToInt(const A: WideChar): Integer;                            {$IFDEF UseInline}inline;{$ENDIF}
  CharToInt(const A: Char): Integer;                                    {$IFDEF UseInline}inline;{$ENDIF}

  IntToAnsiChar(const A: Integer): AnsiChar;                            {$IFDEF UseInline}inline;{$ENDIF}
  IntToWideChar(const A: Integer): WideChar;                            {$IFDEF UseInline}inline;{$ENDIF}
  IntToChar(const A: Integer): Char;                                    {$IFDEF UseInline}inline;{$ENDIF}

  IsHexAnsiChar(const Ch: AnsiChar): Boolean;
  IsHexWideChar(const Ch: WideChar): Boolean;
  IsHexChar(const Ch: Char): Boolean;                                   {$IFDEF UseInline}inline;{$ENDIF}

  HexAnsiCharToInt(const A: AnsiChar): Integer;
  HexWideCharToInt(const A: WideChar): Integer;
  HexCharToInt(const A: Char): Integer;                                 {$IFDEF UseInline}inline;{$ENDIF}

  IntToUpperHexAnsiChar(const A: Integer): AnsiChar;
  IntToUpperHexWideChar(const A: Integer): WideChar;
  IntToUpperHexChar(const A: Integer): Char;                            {$IFDEF UseInline}inline;{$ENDIF}

  IntToLowerHexAnsiChar(const A: Integer): AnsiChar;
  IntToLowerHexWideChar(const A: Integer): WideChar;
  IntToLowerHexChar(const A: Integer): Char;                            {$IFDEF UseInline}inline;{$ENDIF}

  IntToStringA(const A: Int64): AnsiString;
  IntToStringW(const A: Int64): WideString;
  IntToStringU(const A: Int64): UnicodeString;
  IntToString(const A: Int64): String;

  UIntToStringA(const A: NativeUInt): AnsiString;
  UIntToStringW(const A: NativeUInt): WideString;
  UIntToStringU(const A: NativeUInt): UnicodeString;
  UIntToString(const A: NativeUInt): String;

  LongWordToStrA(const A: LongWord; const Digits: Integer = 0): AnsiString;
  LongWordToStrW(const A: LongWord; const Digits: Integer = 0): WideString;
  LongWordToStrU(const A: LongWord; const Digits: Integer = 0): UnicodeString;
  LongWordToStr(const A: LongWord; const Digits: Integer = 0): String;

  LongWordToHexA(const A: LongWord; const Digits: Integer = 0; const UpperCase: Boolean = True): AnsiString;
  LongWordToHexW(const A: LongWord; const Digits: Integer = 0; const UpperCase: Boolean = True): WideString;
  LongWordToHexU(const A: LongWord; const Digits: Integer = 0; const UpperCase: Boolean = True): UnicodeString;
  LongWordToHex(const A: LongWord; const Digits: Integer = 0; const UpperCase: Boolean = True): String;

  LongWordToOctA(const A: LongWord; const Digits: Integer = 0): AnsiString;
  LongWordToOctW(const A: LongWord; const Digits: Integer = 0): WideString;
  LongWordToOctU(const A: LongWord; const Digits: Integer = 0): UnicodeString;
  LongWordToOct(const A: LongWord; const Digits: Integer = 0): String;

  LongWordToBinA(const A: LongWord; const Digits: Integer = 0): AnsiString;
  LongWordToBinW(const A: LongWord; const Digits: Integer = 0): WideString;
  LongWordToBinU(const A: LongWord; const Digits: Integer = 0): UnicodeString;
  LongWordToBin(const A: LongWord; const Digits: Integer = 0): String;

  TryStringToInt64PA(const BufP: Pointer; const BufLen: Integer; out Value: Int64; out StrLen: Integer): TConvertResult;
  TryStringToInt64PW(const BufP: Pointer; const BufLen: Integer; out Value: Int64; out StrLen: Integer): TConvertResult;
  TryStringToInt64P(const BufP: Pointer; const BufLen: Integer; out Value: Int64; out StrLen: Integer): TConvertResult;

  TryStringToInt64A(const S: AnsiString; out A: Int64): Boolean;
  TryStringToInt64W(const S: WideString; out A: Int64): Boolean;
  TryStringToInt64U(const S: UnicodeString; out A: Int64): Boolean;
  TryStringToInt64(const S: String; out A: Int64): Boolean;

  StringToInt64DefA(const S: AnsiString; const Default: Int64): Int64;
  StringToInt64DefW(const S: WideString; const Default: Int64): Int64;
  StringToInt64DefU(const S: UnicodeString; const Default: Int64): Int64;
  StringToInt64Def(const S: String; const Default: Int64): Int64;

  StringToInt64A(const S: AnsiString): Int64;
  StringToInt64W(const S: WideString): Int64;
  StringToInt64U(const S: UnicodeString): Int64;
  StringToInt64(const S: String): Int64;

  TryStringToIntA(const S: AnsiString; out A: Integer): Boolean;
  TryStringToIntW(const S: WideString; out A: Integer): Boolean;
  TryStringToIntU(const S: UnicodeString; out A: Integer): Boolean;
  TryStringToInt(const S: String; out A: Integer): Boolean;

  StringToIntDefA(const S: AnsiString; const Default: Integer): Integer;
  StringToIntDefW(const S: WideString; const Default: Integer): Integer;
  StringToIntDefU(const S: UnicodeString; const Default: Integer): Integer;
  StringToIntDef(const S: String; const Default: Integer): Integer;

  StringToIntA(const S: AnsiString): Integer;
  StringToIntW(const S: WideString): Integer;
  StringToIntU(const S: UnicodeString): Integer;
  StringToInt(const S: String): Integer;

  TryStringToLongWordA(const S: AnsiString; out A: LongWord): Boolean;
  TryStringToLongWordW(const S: WideString; out A: LongWord): Boolean;
  TryStringToLongWordU(const S: UnicodeString; out A: LongWord): Boolean;
  TryStringToLongWord(const S: String; out A: LongWord): Boolean;

  StringToLongWordA(const S: AnsiString): LongWord;
  StringToLongWordW(const S: WideString): LongWord;
  StringToLongWordU(const S: UnicodeString): LongWord;
  StringToLongWord(const S: String): LongWord;

  HexToUIntA(const S: AnsiString): NativeUInt;
  HexToUIntW(const S: WideString): NativeUInt;
  HexToUIntU(const S: UnicodeString): NativeUInt;
  HexToUInt(const S: String): NativeUInt;

  TryHexToLongWordA(const S: AnsiString; out A: LongWord): Boolean;
  TryHexToLongWordW(const S: WideString; out A: LongWord): Boolean;
  TryHexToLongWordU(const S: UnicodeString; out A: LongWord): Boolean;
  TryHexToLongWord(const S: String; out A: LongWord): Boolean;

  HexToLongWordA(const S: AnsiString): LongWord;
  HexToLongWordW(const S: WideString): LongWord;
  HexToLongWordU(const S: UnicodeString): LongWord;
  HexToLongWord(const S: String): LongWord;

  TryOctToLongWordA(const S: AnsiString; out A: LongWord): Boolean;
  TryOctToLongWordW(const S: WideString; out A: LongWord): Boolean;
  TryOctToLongWordU(const S: UnicodeString; out A: LongWord): Boolean;
  TryOctToLongWord(const S: String; out A: LongWord): Boolean;

  OctToLongWordA(const S: AnsiString): LongWord;
  OctToLongWordW(const S: WideString): LongWord;
  OctToLongWordU(const S: UnicodeString): LongWord;
  OctToLongWord(const S: String): LongWord;

  TryBinToLongWordA(const S: AnsiString; out A: LongWord): Boolean;
  TryBinToLongWordW(const S: WideString; out A: LongWord): Boolean;
  TryBinToLongWordU(const S: UnicodeString; out A: LongWord): Boolean;
  TryBinToLongWord(const S: String; out A: LongWord): Boolean;

  BinToLongWordA(const S: AnsiString): LongWord;
  BinToLongWordW(const S: WideString): LongWord;
  BinToLongWordU(const S: UnicodeString): LongWord;        *)
  //BinToLongWord(const S: String): LongWord;



{                                                                              }
{ Base64                                                                       }
{                                                                              }
{   EncodeBase64 converts a binary string (S) to a base 64 string using        }
{   Alphabet. if Pad is True, the result will be padded with PadChar to be a   }
{   multiple of PadMultiple.                                                   }
{                                                                              }
{   DecodeBase64 converts a base 64 string using Alphabet (64 characters for   }
{   values 0-63) to a binary string.                                           }
{                                                                              }
 (* EncodeBase64(const S, Alphabet: AnsiString;
          const Pad: Boolean = False;
          const PadMultiple: Integer = 4;
          const PadChar: AnsiChar = '='): AnsiString;

  DecodeBase64(const S, Alphabet: AnsiString;
          const PadSet: CharSet{$IFNDEF CLR} = []{$ENDIF}): AnsiString;

   *)
  //ObjectToStr(const O: TObject): String;
  //CharSetToStr(const C: CharSet): AnsiString;
    //StrToCharSet(const S: AnsiString): CharSet;




  //HashInteger(const I: Integer; const Slots: LongWord = 0): LongWord;
  //HashLongWord(const I: LongWord; const Slots: LongWord = 0): LongWord;



(*const
  Bytes1KB  = 1024;
  Bytes1MB  = 1024 * Bytes1KB;
  Bytes1GB  = 1024 * Bytes1MB;
  Bytes64KB = 64 * Bytes1KB;
  Bytes64MB = 64 * Bytes1MB;
  Bytes2GB  = 2 * LongWord(Bytes1GB);*)
  
  //bytestohex

 // SelfTestCFundamentUtils;
 
 
end.   


*******************************************************
There is no place like 127.0.0.1 

Exception: Access violation at address 4DE2F83C in module 'msado15.dll'. Read of address 78742E67 at 0.1057


[Microsoft][ODBC Driver Manager] Data source name not found and no default driver specified at 35.440

[Microsoft][ODBC Microsoft Access Driver] Query is too complex at 35.607


[Microsoft][ODBC Microsoft Access Driver] The Microsoft Jet database engine cannot find the input table or query 'Table1d'.  Make sure it exists and that its name is spelled correctly at 35.556

[Microsoft][ODBC Microsoft Access Driver] Syntax error (missing operator) in query expression '031-333 77 88' at 41.356

[Microsoft][ODBC Microsoft Access Driver] Too few parameters. Expected 2 at 41.354


The syntax for the INSERT statement is:

    INSERT INTO table
    (column-1, column-2, ... column-n)
    VALUES
    (value-1, value-2, ... value-n);
    
dbs.Execute " INSERT INTO Employees " _
        & "(FirstName,LastName, Title) VALUES " _
        & "('Harry', 'Washington', 'Trainee');"
        
        
ADOConnection1.Open;
ADOQuery1.Close;
ADOQuery1.SQL.Text := 'SELECT * FROM database1 WHERE
value1=1 AND value2= ' + inttostr(array[3]);
        
QuotedStr rather than ''''    

CommandText does not return a result set at 41.360

ADOQuery1.SQL.Clear;
ADOQuery1.SQL.Add('Insert into Score ([Score],[Round],[FighterID],[FightID])
Values('+quotedstr(cbrf1.text)+','+QuotedStr(inttostr(countround))+', )');
ADOQuery1. ExecSQL;
ADOQuery1.SQL.Clear;



In my program, I instansiate a TDataModule at RunTime and put it in a
variable named FData.
I then want to assign one of the TDataSources found in FData to a DBGrid's
DataSource property. So I do this :
MyGrid.DataSource := FData.DataSource1;
Of cource, the DataSource is linked to a DataSet (actualy, a Memory table).
Each time I call FData.DataSet1.Append() I receive a List out of bound
(0).
I traced the program and found out that the error is raised in
TDataSet.DataEvent(Event: TDataEvent; Info: Longint);
the code is
for I := 0 to FDataSources.Count - 1 do
TDataSource(FDataSources[I]).DataEvent(Event, Info);
I don't know why it raises this error.
Anyone have any idea ?
Thanks in advance.


