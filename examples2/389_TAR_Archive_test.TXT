PROGRAM TAR_Archive;
// dont 
//#sign max: APSN21: 26.09.2013 07:44:04 
//#path:E:\maxbox\maxbox3\examples\
                               
//uses
  //System.SysUtils, // FreeAndNil
  //System.Win.Registry, // TRegistry
  //Winapi.Windows; // HKEY_LOCAL_MACHINE

const
  //change to your OS
  REG_KEY_TEAMVIEWER8 = '\SOFTWARE\Wow6432Node\TeamViewer\Version8';
  REG_VAL_CLIENTID = 'ClientID';

function Endian64(x: Int64): Int64;
begin
  Result:= (x and $00000000000000FF) shl 56;
  Result:= Result + (x and $000000000000FF00) shl 40;
  Result:= Result + (x and $0000000000FF0000) shl 24;
  Result:= Result + (x and $00000000FF000000) shl 8;
  Result:= Result + (x and $000000FF00000000) shr 8;
  Result:= Result + (x and $0000FF0000000000) shr 24;
  Result:= Result + (x and $00FF000000000000) shr 40;
  Result:= Result + (x and $FF00000000000000) shr 56;
  //Get_USB_Device_Status;
end;

//type bool = boolean;

function FileTimeGMT2 (FileName: STRING): TDateTime;
         // Returns the Date and Time of the last modification of the given File
         // The Result is zero if the file could not be found
         // The Result is given in UTC (GMT) time zone
VAR
  Handle         : THandle;
  FindData       : TWin32FindData;
  SystemFileTime : TSystemTime;
  mf: TFileTime;
begin
  Result := 0.0;
  Handle := FindFirstFile (PChar (FileName), FindData);
  IF Handle <> INVALID_HANDLE_VALUE THEN BEGIN
    WFindClose (Handle);
    IF (FindData.dwFileAttributes AND FILE_ATTRIBUTE_DIRECTORY) = 0 THEN
      // FileTimeToSystemTime(FindData.ftLastWriteTime, SystemFileTime); 
      IF FileTimeToSystemTime(FindData.ftLastWriteTime, SystemFileTime) THEN BEGIN
        with SystemFileTime do begin
          if messagebeep(4) then 
            Result:= EncodeDate (wYear, wMonth, wDay) +
          EncodeTime (wHour, wMinute, wSecond, wMilliseconds);
        end;
      END;
    END;
END;

Procedure SetTAR;
var TA : TTarArchive;
    DirRec : TTarDirRec;
    mjpeg: TJpegImage;
begin
  TA:= TTarArchive.Create1('tarFilename',fmOpenRead OR fmShareDenyWrite);   
  TA.Reset;                              
WHILE TA.FindNext (DirRec) DO BEGIN    
  //ListBox.Items.Add (DirRec.Name);     
  TA.ReadFile2('DestFilename');          
  TA.Free;                                       
  END;
end;  


Procedure CreateUpdateTAR;
var TW: TTarWriter;
begin
    //TW:= TTarWriter.CreateEmpty;    
    //TW:= TTarWriter.Create1(Exepath+'clxtetris.tar',fmCreate);    
    TW:= TTarWriter.Create1(Exepath+'myex.tar',fmCreate);    
    TW.AddFile(ExePath+'firstdemo3.uc','');             
    TW.AddFile(ExePath+'firstdemo.txt','');             
    TW.AddString('this is a text test', 'max.txt', Now);
    TW.Free;                               
end;  

var
  XMLEncodingData: Array [0..22] of
      record
        Encoding: TXmlString;
        CodePage: Word;
      end; // = ((Encoding: 'UTF-8';        CodePage: CP_UTF8),

     { end = ((Encoding: 'UTF-8';        CodePage: CP_UTF8),
             (Encoding: 'WINDOWS-1250'; CodePage:  1250),
             (Encoding: 'WINDOWS-1251'; CodePage:  1251),
             (Encoding: 'WINDOWS-1252'; CodePage:  1252),
             (Encoding: 'WINDOWS-1253'; CodePage:  1253),
             (Encoding: 'WINDOWS-1254'; CodePage:  1254),
             (Encoding: 'WINDOWS-1255'; CodePage:  1255),
             (Encoding: 'WINDOWS-1256'; CodePage:  1256),
             (Encoding: 'WINDOWS-1257'; CodePage:  1257),
             (Encoding: 'WINDOWS-1258'; CodePage:  1258),
             (Encoding: 'ISO-8859-1';   CodePage: 28591),
             (Encoding: 'ISO-8859-2';   CodePage: 28592),
             (Encoding: 'ISO-8859-3';   CodePage: 28593),
             (Encoding: 'ISO-8859-4';   CodePage: 28594),
             (Encoding: 'ISO-8859-5';   CodePage: 28595),
             (Encoding: 'ISO-8859-6';   CodePage: 28596),
             (Encoding: 'ISO-8859-7';   CodePage: 28597),
             (Encoding: 'ISO-8859-8';   CodePage: 28598),
             (Encoding: 'ISO-8859-9';   CodePage: 28599),
             (Encoding: 'ISO-8859-13';  CodePage: 28603),
             (Encoding: 'ISO-8859-15';  CodePage: 28605),
             (Encoding: 'KOI8-R';       CodePage: 20866),
             (Encoding: 'KOI8-U';       CodePage: 21866)); }


function FindCodepage(const s: TXmlString): Word;
var 
  i: Integer;
begin
  Result := 0;
  for i := 0 to High(XMLEncodingData) do begin
    if SameText(s, XMLEncodingData[i].Encoding)
    then begin
      Result := XMLEncodingData[i].CodePage;
      break;
    end;
  end;
end;
  

procedure AddNodes(Child: TTreeNode; aNode: IXmlNode);
  var
    i: Integer;
    treeview: TTreeview;
    asi: ansistring;
    XmlNodeList: IXmlNodeList;
  begin
    //Child := TreeView.Items.AddChild(Child, aNode.NodeName, Pointer(aNode));
    //XmlNodeList := aNode.ChildNodes;
    {for i:=0 to XmlNodeList.Count-1 do
    begin
      AddNodes(Child, XmlNodeList.Item[i]);
    end;}
  end;

  //TODO: maXML check the description
  
procedure TMainForm_DoOpenFile(const Filename: String);
var ffilename: string;
     afilename: rawbytestring;
  XmlDocument: IXmlDocument;
  xelem: IXmlElement;
  //Encoding : TJclStringEncoding;
  //StringStream : TJclStringStream;
  aser: TJvgXMLSerializer;
  atree: TJvXMLTree;
  aft: TFilename;
  atp: TProcessTimer;
begin
  //AttributMemo.Clear;
  //ValueMemo.Clear;
  FFilename := 'Filename';
  afilename:= Exepath+'IVCLScanner.xml';
  //Caption := Filename + ' - ' + Application.Title;
  XmlDocument:= CreateXmlDocument('rootml','1.1','UTF-8',NIL);
  //xmldocument:= XMLDocument.create;
  xmldocument.save1(Exepath+'IVCLNewCreate.xml');
  
  if IsXmlDataString(afilename) then writeln('is XML ');
  XmlDocument:= LoadXmlDocument1(aFilename);
  xmldocument.save1(Exepath+'IVCLScannerSave.xml');
  //OpenFile(Exepath+'IVCLScannerSave.xml');
  //CreateTreeView;
  
  writeln(TextToXML(afilename));
  
  with TJclSimpleXML.create do begin
    LoadFromFile(afilename);
    free;
  end;  
  
  with TJvSimpleXML.create(self) do begin
    LoadFromFile(afilename);
    writeln(SaveToString);  //(Exepath+'IVCLScannerSave.xml');
    prolog;
    Free;
  end;  
  //I64ToCardinals
  //CardinalsToI64
    //SysErrorMessage
    //StringListCustomSort
    //PreProcessXML
    //FileTimeToDateTime
      //FileTimeToStr
        //FirstWeekDay
        //EncodeDate
        //WinColorToOpenGLColor
       //WinExec32AndRedirectOutput 
         //WinExec32AndWait
           //IniWriteStrings
           //IniWriteInteger
            // IniWriteString
             // IniReadBool
            // tinifile
              //CharHex
           
           //StrQuote
             //StrReplace
               //twidestringds;
                 //integertotext
                 //texttointeger
          //TJclAddr64    
          
          //nullstamp   
          
        Writeln(strtoHex('65'));  
        // writeln(filetostring(exepath+'firstdemo.txt'));        
                 
                 
                 
                 
                 
           
end; 
                                   
                                 
var i, k, z: integer;  
  begin
  writeln('TeamViewerID: '+getTeamViewerID);
  writeln('addressinfo '+addressinfo($71A90000));
  writeln(datetimetostr(FileTimeGMT(exepath+'maxbox3.exe')));
  writeln(datetimetostr(FileTimeGMT2(exepath+'maxbox3.exe')));
  //Grep
  //Procedure RecurseDirectory2(Dir : String; IncludeSubs : boolean);
  //RecurseDirectory2(Exepath,false);
  CreateUpdateTAR;
  //CopyDirTree(exepath+'\source\devtools',exepath+'crypt',[]);
   //TODO>: some of the copydirtree doesnt' work!
    // maxform1.TodoList1click(self);
   for i:= 1 to Screen.Fonts.count -1 do
      writeln(inttostr(i)+ ' '+Screen.fonts.strings[i]);
      
      k:= 31
      for i:= 1 to 4 do begin
        //if k mod 2 = 0 then begin
        k:= (k div 2);
        writeln(inttostr(i)+ '  '+inttoStr(k))
        //end;
     end; 
     writeln('');
     i:= 0
     k:= 32;
     while k > 1 do begin
         inc(i)
         k:= (k div 2);
        writeln(inttostr(i)+ '  '+inttoStr(k))
     end;
     //writeln(inttostr(9 div 2)) 

      { z:= 10000;
       for i:= 1 to 13 do begin
        //if k mod 2 = 0 then begin
        z:= (z div 2);
        writeln(inttostr(i)+ '  '+inttoStr(z))
        //end;
     end;
      z:= 20;
       for i:= 1 to 4 do begin
        //if k mod 2 = 0 then begin
        z:= (z div 2);
        writeln(inttostr(i)+ '  '+inttoStr(z))
        //end;
     end; }
     
     TMainForm_DoOpenFile('');
     writeln('milliseconds per day '+floattoStr(MILLISECOND_Length))   
     writeln('milliseconds per day test: '+floattoStr(60*60*1000*24*MILLISECOND_Length))   
      
     
end.  

http://www.delphi-central.com/callback.aspx


TTarArchive Usage
-----------------
- Choose a constructor
- Make an instance of TTarArchive                  TA := TTarArchive.Create (Filename);
- Scan through the archive                         TA.Reset;
                                                   WHILE TA.FindNext (DirRec) DO BEGIN
- Evaluate the DirRec for each file                  ListBox.Items.Add (DirRec.Name);
- Read out the current file                          TA.ReadFile (DestFilename);
  (You can ommit this if you want to
  read in the directory only)                        END;
- You're done                                      TA.Free;


TTarWriter Usage
----------------
- Choose a constructor
- Make an instance of TTarWriter                   TW := TTarWriter.Create ('my.tar');
- Add a file to the tar archive                    TW.AddFile ('foobar.txt');
- Add a string as a file                           TW.AddString (SL.Text, 'joe.txt', Now);
- Destroy TarWriter instance                       TW.Free;
- Now your tar file is ready.


// --- The TAR Archive CLASS
  TTarArchive = CLASS
                PROTECTED
                  FOwnsStream : BOOLEAN;   // True if FStream is owned by the TTarArchive instance
                  FBytesToGo  : INT64;     // Bytes until the next Header Record
                PUBLIC
                  FStream     : TStream;   // Internal Stream
                  CONSTRUCTOR Create (Stream   : TStream);                                OVERLOAD;
                  CONSTRUCTOR Create (Filename : STRING;
                                      FileMode : WORD = fmOpenRead OR fmShareDenyWrite);  OVERLOAD;
                  DESTRUCTOR Destroy;                                       OVERRIDE;
                  PROCEDURE Reset;                                         // Reset File Pointer
                  function  FindNext (VAR DirRec : TTarDirRec) : BOOLEAN;  // Reads next Directory Info Record. FALSE if EOF reached
                  PROCEDURE ReadFile (Buffer   : POINTER); OVERLOAD;       // Reads file data for last Directory Record
                  PROCEDURE ReadFile (Stream   : TStream); OVERLOAD;       // -;-
                  PROCEDURE ReadFile (Filename : STRING);  OVERLOAD;       // -;-
                  function  ReadFile : STRING;           OVERLOAD;         // -;-

                  PROCEDURE GetFilePos (VAR Current, Size : INT64);        // Current File Position
                  PROCEDURE SetFilePos (NewPos : INT64);                   // Set new Current File Position
                END;

  // --- The TAR Archive Writer CLASS
  TTarWriter = CLASS
               PROTECTED
                 FStream      : TStream;
                 FOwnsStream  : BOOLEAN;
                 FFinalized   : BOOLEAN;
                                                   // --- Used at the next "Add" method call: ---
                 FPermissions : TTarPermissions;   // Access permissions
                 FUID         : INTEGER;           // User ID
                 FGID         : INTEGER;           // Group ID
                 FUserName    : STRING;            // User name
                 FGroupName   : STRING;            // Group name
                 FMode        : TTarModes;         // Mode
                 FMagic       : STRING;            // Contents of the "Magic" field
                 CONSTRUCTOR CreateEmpty;
               PUBLIC
                 CONSTRUCTOR Create (TargetStream   : TStream);                            OVERLOAD;
                 CONSTRUCTOR Create (TargetFilename : STRING; Mode : INTEGER = fmCreate);  OVERLOAD;
                 DESTRUCTOR Destroy; OVERRIDE;                   // Writes End-Of-File Tag
                 PROCEDURE AddFile   (Filename : STRING;  TarFilename : STRING = '');
                 PROCEDURE AddStream (Stream   : TStream; TarFilename : STRING; FileDateGmt : TDateTime);
                 PROCEDURE AddString (Contents : STRING;  TarFilename : STRING; FileDateGmt : TDateTime);
                 PROCEDURE AddDir          (Dirname            : STRING; DateGmt : TDateTime; MaxDirSize : INT64 = 0);
                 PROCEDURE AddSymbolicLink (Filename, Linkname : STRING; DateGmt : TDateTime);
                 PROCEDURE AddLink         (Filename, Linkname : STRING; DateGmt : TDateTime);
                 PROCEDURE AddVolumeHeader (VolumeId           : STRING; DateGmt : TDateTime);
                 PROCEDURE Finalize;
                 PROPERTY Permissions : TTarPermissions READ FPermissions WRITE FPermissions;   // Access permissions
                 PROPERTY UID         : INTEGER         READ FUID         WRITE FUID;           // User ID
                 PROPERTY GID         : INTEGER         READ FGID         WRITE FGID;           // Group ID
                 PROPERTY UserName    : STRING          READ FUserName    WRITE FUserName;      // User name
                 PROPERTY GroupName   : STRING          READ FGroupName   WRITE FGroupName;     // Group name
                 PROPERTY Mode        : TTarModes       READ FMode        WRITE FMode;          // Mode
                 PROPERTY Magic       : STRING          READ FMagic       WRITE FMagic;         // Contents of the "Magic" field
               END;




The last slash might be optional. Right?

How about something like this:

$url =~ m|([^/]+)/?$|;
my $end_of_url = $1;

The $ on the end anchors the regular expression to the end of the string. The [^/] means anything that's not a slash and the + after means I want one or more things that are not slashes. Notice that this is in a capture group which are marked with parentheses.

I end the regular expression with /? which means that there may or may not be a slash on the very end of the string. I've put my regular expression between m| and |, so I can use forward slashes without having to constantly escape them.

The last part of the URL is now in $1 and I can set my own scalar variable to save this Result.
share|improve this answer
 

----app_template_loaded_code----