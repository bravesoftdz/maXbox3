{***************************************************************
 * Project  : Service Manager Procedure API
 * App Name :  569_ServiceMgr2.TXT, #locs=209
 * Purpose  : Starts and Stops Services Routines with origin API
 * Date     : #sign>Administrator: PC08: 18/02/2015 05:28:21 PM 
 * History  : convert service unit to maXbox Aug 2014
 *          : add REGEX time routines and tickcount to LED
 ****************************************************************}
 //TODO: transfer service to network host func
 //E:\maxbox3\mXGit39988\maxbox3\source\WinSvc.pas
 //ref: maXbox3/source/REST/uPSI_ServiceMgr.pas of unit ServiceMgr;
   
 Program ServiceManager_REGEX;
                        
{ The following class TServiceManager can be used to manage your NT-Services.
  You can do things like start, stop, pause or querying a services status.
}

  function ReadUntil(const ReadFrom, len: Integer; const C: Char; s: string): Integer;
  var
    j: Integer;
  begin
    for j := ReadFrom to Len do
      if (s[j] = C) then begin
        Result := j;
        Exit;
      end;
    Result := Len+1;
  end;
 
function StripTags2(const S: string): string;
var
  Len: Integer;
  i, APos: Integer;
begin
  Len := Length(S);
  i := 0;
  Result := '';
  while (i <= Len) do begin
    Inc(i);
    APos := ReadUntil(i, len, '<', s);
    Result := Result + Copy(S, i, APos-i);
    i := ReadUntil(APos+1,len, '>',s);
  end;
end;

FUNCTION Strip(const SubString: String; MainString: String): String;
{ =================================================================== }
VAR i,j: Integer;

BEGIN{Strip}
    j := length(SubString);
    If j <> 0 Then Begin
       i := Pos(SubString,MainString);
       While i <> 0 Do Begin
           Delete(MainString, i, j);
           i := Pos(SubString,MainString);
       End;
   End;
   result:= MainString;
END{Strip};


FUNCTION StripAny(const SubString: String; MainString: String): String;
{ =================================================================== }
VAR i,j: Integer;
      s: char;
BEGIN{Strip}
    //j := Ord(SubString[0]);
     j := length(SubString);
    While j > 0 Do Begin
       s := SubString[j];
       i := Pos(s,MainString);
       While i <> 0 Do Begin
           Delete(MainString,i,1);
           i := Pos(s,MainString);
       End;
       Dec(j);
   End;
   result:= MainString;
END{Strip};

  
procedure AppendValueToStrings(const SL: TStrings; StartingValue: Integer);
var
  i: Integer;
begin
  Assert(Assigned(SL),'not assigned');  // Make sure valid TStrings has been passed in
  for i := 0 to SL.Count - 1 do begin
    SL[i] := IntToStr(StartingValue) + ' ' + SL[i];
    Inc(StartingValue);
  end;
end;

function GrabLine2(const s: string; ALine: Integer): string;
var
  sl: TStringList;
begin
  sl := TStringList.Create;
  try
    sl.LoadFromFile(s);
    Result := sl[ALine - 1]; // index off by one
  finally
    sl.Free;
  end;
end;

function GetLinesCount(sFileName : String): Integer;
var
oSL : TStringlist;
begin
   oSL := TStringlist.Create;
   oSL.LoadFromFile(sFileName);
   result := oSL.Count;
   oSL.Free;
end; //[/DELPHI]

procedure STEXpressionPattern;
begin
    with TStExpression.create(self) do begin
      AddConstant('MPI',3.14159);
      srlist:= TStringlist.create;
      GetIdentList(srlist);
      for it:= 0 to srlist.count-1 do 
        writeln(srlist.strings[it]);
      srlist.Free;  
      Expression:= '2^10 * ln(8 +MPI)';
      writeln(floattoStr(AnalyzeExpression))
      free;
    end;  
end;    

  

Const SC_MANAGER_ALL_ACCESS = $F003F;

procedure ServiceManagerDemo;
var
  ServiceManager: TServiceManager;
begin
  ServiceManager:= TServiceManager.Create('','');
  try
    ServiceManager.Connect('','',SC_MANAGER_ALL_ACCESS); 
    // Connects to the local Service-Manger
    //ServiceManager.OpenServiceConnection('W3SVC');  // Touch the IIS-Webservice
    //ServiceManager.OpenServiceConnection('WebClient');  // Touch the IIS-Webservice
    ServiceManager.OpenServiceConnection('WinDefend');  // Touch the IIS-Webservice
 
    // Stoping Service if it is running
    if ServiceManager.ServiceRunning then begin
      ServiceManager.StopService();
    // Restart Service if it is not running
      writeln('W3Start Stop Success to restart...');
    end;
    if ServiceManager.ServiceStopped then begin
      ServiceManager.StartService();
      writeln('W3Start Strt Success');
    end;  
  finally
    //FreeAndNil(ServiceManager);
    ServiceManager.Free;
  end;
end;

//http://www.idev.ch/content/how-use-tservicemanager-manage-windows-services

Const FName = 'maxboxlog2.log'; //'firstdemo3.txt';
      Testtext = 'goodbye! lovely, harsh world!..?';
var   FormLab3D: TFormLab3D;
      myfunc: TStMethod1Param;
      uuint: uint64;
Type
  TEnum = (Zero, One, Two, Three, Four);
   var anum: TEnum;

Begin               //main

//OpenDoc(exepath+FName)
{Memo1.Lines.LoadFromFile(YourFileNameHere);
AppendValueToStrings(Memo1.Lines, 10);
Memo1.Lines.SaveToFile(YourFileNameHere);}
  //maxform1.N3dlab1click(self);

  writeln(Strip('<br/>','<p>This is text.<br/>This is line 2</p>'))
  writeln(StripString('<p>This is text.<br/>This is line 2</p>','<br/>'))
  writeln(StripAny('<br/>','<p>This is text.<br/>This is line 2</p>'))
  writeln(Strip('!',testtext));
  writeln(StripAny('!,.?',testtext));
 
  sr:= StripTags2('<p>This is text.<br/> This is line 2</p>');
  //ShowMessage(s);   // will display 'This is text.This is line 2'
  writeln(sr);   // will display 'This is text.This is line 2'
  
  Writeln(ReplaceRegExpr ('([</pbr>])*',
                          '<p>This is text.<br/> This is line 2</p>','', True))
  Writeln(ReplaceRegExpr ('<[^>]*>',
                          '<p>This is text.<br/> This is line 2</p>','', True))
 //  CL.AddDelphiFunction('Function AnalyzeExpr( const Expr : AnsiString) : Double');
    writeln(floattostr(AnalyzeExpr('2^10 * ln(8)')))
    //add a function at runtime!
    
      // TbtString //= {$IFDEF DELPHI2009UP}AnsiString{$ELSE}String{$ENDIF};
     //TPSPascalParser
     //TPSUnitList
     //TPSStringList
   
     ServiceManagerDemo;

End.  // ServiceStripUtils

Doc:
procedure SIRegister_ServiceMgr(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('SERVICE_KERNEL_DRIVER','LongWord').SetUInt( $00000001);
 CL.AddConstantN('SERVICE_FILE_SYSTEM_DRIVER','LongWord').SetUInt( $00000002);
 CL.AddConstantN('SERVICE_ADAPTER','LongWord').SetUInt( $00000004);
 CL.AddConstantN('SERVICE_RECOGNIZER_DRIVER','LongWord').SetUInt( $00000008);
 CL.AddConstantN('SERVICE_WIN32_OWN_PROCESS','LongWord').SetUInt( $00000010);
 CL.AddConstantN('SERVICE_WIN32_SHARE_PROCESS','LongWord').SetUInt( $00000020);
 CL.AddConstantN('SERVICE_INTERACTIVE_PROCESS','LongWord').SetUInt( $00000100);
  //CL.AddTypeS('PTStrings', '^TStrings // will not work');
  SIRegister_TServiceManager(CL);
end;



 try
    UpdateExeResource('C:\Users\Dexter\Documents\RAD Studio\Projects\Debug\Win32\Data.txt','C:\Users\Dexter\Documents\RAD Studio\Projects\Debug\Win32\project86.exe');
  except
    on E: Exception do
      Writeln(E.ClassName, ': ', E.Message);
  end;


procedure SIRegister_TStExpression(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TStComponent', 'TStExpression') do
  with CL.AddClassN(CL.FindClass('TStComponent'),'TStExpression') do
  begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Function AnalyzeExpression : TStFloat');
    RegisterMethod('Procedure AddConstant( const Name : AnsiString; Value : TStFloat)');
    RegisterMethod('Procedure AddFunction0Param( const Name : AnsiString; FunctionAddr : TStFunction0Param)');
    RegisterMethod('Procedure AddFunction1Param( const Name : AnsiString; FunctionAddr : TStFunction1Param)');
    RegisterMethod('Procedure AddFunction2Param( const Name : AnsiString; FunctionAddr : TStFunction2Param)');
    RegisterMethod('Procedure AddFunction3Param( const Name : AnsiString; FunctionAddr : TStFunction3Param)');
    RegisterMethod('Procedure AddInternalFunctions');
    RegisterMethod('Procedure AddMethod0Param( const Name : AnsiString; MethodAddr : TStMethod0Param)');
    RegisterMethod('Procedure AddMethod1Param( const Name : AnsiString; MethodAddr : TStMethod1Param)');
    RegisterMethod('Procedure AddMethod2Param( const Name : AnsiString; MethodAddr : TStMethod2Param)');
    RegisterMethod('Procedure AddMethod3Param( const Name : AnsiString; MethodAddr : TStMethod3Param)');
    RegisterMethod('Procedure AddVariable(const Name:AnsiString;VariableAddr:PStFloat)');
    RegisterMethod('Procedure ClearIdentifiers');
    RegisterMethod('Procedure GetIdentList( S : TStrings)');
    RegisterMethod('Procedure RemoveIdentifier( const Name : AnsiString)');
    RegisterProperty('AsInteger', 'Integer', iptr);
    RegisterProperty('AsFloat', 'TStFloat', iptr);
    RegisterProperty('AsString', 'AnsiString', iptr);
    RegisterProperty('ErrorPosition', 'Integer', iptr);
    RegisterProperty('Expression', 'AnsiString', iptrw);
    RegisterProperty('LastError', 'Integer', iptr);
    RegisterProperty('AllowEqual', 'Boolean', iptrw);
    RegisterProperty('OnAddIdentifier', 'TNotifyEvent', iptrw);
    RegisterProperty('OnGetIdentValue', 'TStGetIdentValueEvent', iptrw);
  end;
end;


//#sign:Administrator: PC08: 18/02/2015 05:28:21 PM 
//#tech:9.180perf: 0:0:1.52 threads: 8 192.168.1.40 05:28:21 PM 3.9.9.180


ref:

http://stackoverflow.com/questions/11229831/regular-expression-to-remove-html-tags-from-a-string

http://www.delphipages.com/forum/showthread.php?t=201629
http://useruploadedfiles.programmersheaven.com/48584/NMEA.pas


    Program SpammersAreParasites;
    var
      l1,l2: Srting;
    begin
      l1:='70';
      l2:='0';
      Bxo:=l1 + l2;
      Bxo:=(Bxo)
    (*
      l1:=97;
      l2:=9
     Bxo:=(l1 + l2);
    *)
    //end.

(*? Value of Bxo:    *)

{"There is a theory which states that if ever anybody discovers
exactly what the Universe is for and why it is here, it will
instantly disappear and be replaced by something even more
bizarre and inexplicable. There is another theory which states
that this has already happened."
-- Douglas Adams }


