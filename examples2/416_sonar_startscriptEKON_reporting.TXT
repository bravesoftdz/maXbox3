//EKON Code Review Project Config Logger 3
{***************************************************************
 *            SONAR bITbox metric scanner maXbox
 * Project  : metric & keyword logger
 * Unit Name: #file:416_sonar_startscriptEKON_reporting.TXT
 * Purpose  : Start Sonar-runner, checks project files with RegEx logic
 * Date     : 18/02/2013  -  14:38:56, loc's=466, 4 intf, #locs=454
 * Release  : check all extension in subversion
            : open file with keywords
            : stat analysis regex range sort
            : error codes, project overview
            : keyword check on all files with regEx
            : autoconfig to start sonar runnner
 * last changed 25.11.2013  - 11:03:2013, max
 * to EKON17 #file:416_sonar_startscriptEKON_reporting.TXT
 * #sign:3:06 max: APSN21: 07.01.2014 08:57:12  41:51 
 * #path>ples\E:\maxbox\maxbox3\examples\iew\
 ****************************************************************}



Const AWORKPATH = 'D:\tzpasreview\';
      AMACHINE = 'maxbox7012';
      AWORKPATH2 = 'D:\tzpas\review\';
      PicPath = '\examples\images\';
      
      //**************EKON17********************************
      
      //SONARBAT = 'D:\software\sonar-3.4.1\bin\windows-x86-32\StartSonar.bat';
    SONARBAT = 'C:\maXbox\sonar-3.4.1\sonar-3.7.1\sonar-3.7.1\bin\windows-x86-32\StartSonar.bat';
      
    SONARRUN = 'C:\maXbox\sonar-3.4.1\sonar-3.7.1\sonar-runner-dist-2.3\sonar-runner-2.3\bin\sonar-runner.bat';                               
       
      SONPROJECTFILE = 'C:\maXbox\sonar-3.4.1\sonar-3.7.1\sonar-runner-dist-2.3\sonar-runner-2.3\bin\sonar-project.properties';
      
      SONARDB = 'C:\maXbox\sonar-3.4.1\sonar-3.7.1\sonar-3.7.1\data\sonar.h2.db';
      
     
      //**************EKON17  END********************************
      
      FIREFOXPATH = 'C:\Program Files (x86)\Mozilla Firefox\firefox.exe';
      AWORKPATHNET = '\\172.31.40.110\general\PasReview\codereview2013_sonar_start.TXT';
      //TypeName="AbstractTypesShouldNotHaveConstructors" Category="M.Design" CheckId=

const codestr1 ='2001, 2002, 200001, 2004, 1000000';
const helpfile = 'D:\pas\review\src_exportsvn\04_colla\pasHelpSolution\pasHelp\Original\1031\HelpSuper';
const COLLABCODEHELP = 'D:\pas\review\src_exportsvn\04_colla\Sandcastle\Help\CollaCodeDokumentation.chm';
 
// var idHTTP: TIDHTTP;

   var S_SonarServer, S_SonarRunning: boolean;
   

procedure StartSonarBat;
begin   
  if FileExists(SONARBAT) then begin
    ShellExecute3(SONARBAT,'',seCMDOpen);
    S_SonarServer:= true;
  end;
end;    

 
procedure openSonarWebStart(aport: string);
  var idHTTP: TIDHTTP;
  begin
    idHTTP:= TIdHTTP.create(NIL)
  try
    //memo2.lines.text:= idhttp.get2('http://www.softwareschule.ch/maxbox.htm')
    if (isValidIP('127.0.0.1') and (S_SonarServer = true)) then
    //memo2.lines.text:= 
    //sonar default port:9000
    idhttp.get2('http://localhost:'+aport);
    //idhttp.get2('http://www.softwareschule.ch')
    ShellExecute3('http://127.0.0.1:'+aport+'/dashboard','',seCMDOPen)
  finally
    idHTTP.Free
    //maxform1.color:= clyellow; 
  end;
 end;     
 


procedure StartSonarRunnerBat;
begin   
  if FileExists(SONARRUN) then begin
    ShellExecute3(SONARRUN,'',seCMDOpen);
    S_SonarRunning:= true;
  end;
end;    
 
 
function Join(List: TStrings; Str: string): string;
var I: Integer;
begin
  if List.Count = 0 then
    Result:= Str
  else
    Result:= List[0];
  for I:= 1 to List.Count - 1 do
     Result:= Result + Str + List[I];
end;

procedure Split(Str: string;  SubStr: string; List: TStrings);
var I: Integer;
  S, Tmp: string;
begin
  List.Clear;
  S:= Str;
  while Length(S) > 0 do begin
    I:= Pos(SubStr, S);
    if I = 0 then begin
      List.Add(S);
      S:= '';
    end
    else begin
      if I = 1 then begin
        List.Add('');
        Delete(S, 1, Length(SubStr));
      end
      else begin
        Tmp:= S;
        Delete(Tmp, I, Length(Tmp));
        List.Add(Tmp);
        Delete(S, 1, I + Length(SubStr) - 1);
        if Length(S) = 0 then
          List.Add('');
      end;
    end;
  end;
end;

function Head(Str: string; SubStr: string; var TailStr: string): string;
var I: Integer;
begin
  I:= Pos(SubStr, Str);
  if I = 0 then begin
    Result:= Str;
    TailStr:= '';
  end
  else begin
    TailStr:= Str;
    Delete(TailStr, 1, I + Length(SubStr) - 1);
    Delete(Str, I, Length(Str));
    Result:= Str;
  end;
end;

function Tail(Str: string; SubStr: string): string;
var I: Integer;
begin
  I:= Pos(SubStr, Str);
  if I = 0 then
    Result:= ''
  else begin
    Delete(Str, 1, I + Length(SubStr) - 1);
    Result:= Str;
  end;
end;

 
 
procedure SourceCoreCodeRegEx2;
var list: Tstringlist;
   parser: TPerlRegex;
   found: boolean;
   it: integer;
   E: Exception;
begin
  try
    { #TODO: -oUser -cConsole Main : Insert code here }
    list:= TStringList.Create;
    try
      parser:= TPerlRegEx.Create;
      try
        parser.RegEx:= '\b(\d{4})(?!\d)';
        parser.Subject:= codeStr1;
        found:= parser.Match;
        while found do begin
            list.Add(parser.Groups[1]);
            found:= parser.MatchAgain;
          end;
        //for str in List do
          //WriteLn('Matched: ',str);
        for it:= 0 to list.count-1 do 
           WriteLn('Matched: '+list.strings[it]);
         WriteLn('Total Matches: '+inttoStr(list.Count));
        //ReadLn;
      finally
        parser.Free;
      end;
    finally
      list.Free;
    end;
  except
    //on E: Exception do
      raiseLastException;
      Writeln(+ ' : '+ E.Message);
  end;
end; 


  //Test bed
 //2 TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId=
 //2 TypeName="AvoidExcessiveLocals" Category="Microsoft.Performance" CheckId=
 //  44 AvoidNamespacesWithFewTypes     Cat Design
 // 19 AvoidOutParameters
 // 3 AvoidUnsealedAttributes" Category="Microsoft.Performance" CheckId=
 // 60 AvoidUnusedPrivateFields
 

procedure findSVNDirectoriesFilesandOpen(Path: string);
//Find all directories above and including the current one
      //then ShowMessage(searchrecName);
var
  dirList: TStringList;
  i: integer;
  fstr, gstr: string;
  //fstr:= loadFileasString(AWORKPATH+'svn_struct_mini.txt');

begin
  screen.cursor:= CRhourglass;
  dirList:= TStringList.Create;
  try
    //FindDirectories(dirList, ExePath);
     GetDirList(path,dirlist,true)
    //dirList.saveToFile(ExePath+'examples\dir_files.txt');
  for i:= 0 to dirlist.count - 1 do begin
      fstr:= loadFileasString(dirlist[i]);
      memo2.lines.add(fstr);
      gstr:= dirlist[i];
      S_ShellExecute(exepath+'maxbox3.exe',pchar(gstr),seCMDOpen);
      sleep(50);
     //S_ShellExecute(exepath+'maxbox3.exe',dirlist[i],seCMDOpen);
    writeln('opened '+dirlist[i]);
    end;
  finally 
    dirList.Free;
    screen.cursor:= CRdefault;
  end;
end;  


  const CODESEARCHOUT2 = 'CodeSearchOut.txt';


procedure findSVNDirectoriesFilesRegExCheckandOpen(Path: string; firstp, secondp: string);
//Find all directories above and including the current one
      //then ShowMessage(searchrecName);
var
  dirList, rlist: TStringList;
  i: integer;
  fstr, gstr, gstr2: string;
  cntr: integer;
  extback: pchar; //string; //pchar;
  //fstr:= loadFileasString(AWORKPATH+'svn_struct_mini.txt');

begin
  screen.cursor:= CRhourglass;
  dirList:= TStringList.Create;
  try
    //FindDirectories(dirList, ExePath);
     GetDirList(path,dirlist,true)
    //dirList.saveToFile(ExePath+'examples\dir_files.txt');
    rlist:= TStringlist.create;
 
  for i:= 0 to dirlist.count - 1 do begin
      fstr:= loadFileasString(dirlist[i]);
      memo2.lines.add(fstr);
      {extback:= PathFindExtension(dirlist[i]);
      if (extback = StrPCopy(extback, '.png')) 
        then showmessage('png found');}
      savestring('D:\pas\review\backtest\'+inttostr(i)+extractfilename(dirlist[i])+'.txt',fstr);
      //S_ShellExecute(exepath+'maxbox3.exe',dirlist[i],seCMDOpen);
   
    with TRegExpr.Create do try 
      //gstr:= 'System';
      gstr:= firstp; //'extends';  //public
      //gstr2:= ' Category, CheckId, Status, Created';
      gstr2:= secondp; //'implements'; //gstr2:= 'AvoidUnusedPrivateFields';
      modifierS:= false; //non greedy  code around the clock
      modifierI:= true;  //case insens
      //Expression:= gstr+'.*(ca2201.*'+gstr2+').';      //standard copFX search
      //Expression:= gstr+'.*('+gstr2+').*';      //standard copFX search
      Expression:= '.*('+gstr+').*('+gstr2+').*';      //standard copFX search
      //Expression:= '[0123456789],.*'
      cntr:= 0;
      rlist.Sorted:= true;   //before dup!
      rlist.duplicates:= true; //NOT dupIgnore;
      //rlist.Add(Format('File of Search: %s ',[dirlist[i]]));
    
      if Exec(fstr) then 
       try
         Repeat 
          rlist.add(Match[0]+' git'); 
          inc(cntr);
         Until Not ExecNext; 
         //rlist.Add(Format('File of Search: %s ',[dirlist[i]]));
            with rlist do begin    //save console out count categories
         //for i:= 0 to count-2 do 
           //writeln(rlist[i]);
         Add(Format('Distinct Sort Metrics: %d of Total %d',[rlist.count,cntr]));
         Add(Format('File of Search: %s ',[dirlist[i]]));
        end;
       except
         showmessage(')writeln(''exception in svnnavi'')');
       end;    
    finally 
      writeln(inttostr(cntr)+ ' search total of '+gstr+' '+gstr2);
      Free;
      //rlist.Free;
    end; //with try
    //S_ShellExecute(exepath+'maxbox3.exe',dirlist[i],seCMDOpen);
    rlist.SavetoFile(AWORKPATH2+CODESEARCHOUT2);
    writeln('***********************saved and opened '+dirlist[i]);
    //memo2.lines.add(fstr);
    //dirlist.savetofile(D:\pas\review\backtest\dirlist.txt
    end;
  finally 
    dirList.Free;
    rlist.Free;
    screen.cursor:= CRdefault;
  end;//for
end;  



procedure testdecimal;
// collection-list-vector-stack (list, map, set)
var tf: extended;
begin                       
  tf:= 0.99999999999999999;
  tf:= 10.0 * tf;
  printF('more prec %.18f ',[tf]);
  writeln(floattoStr(tf))
  writeln('total qual: '+floatToStr(maxCalc('100 - (225/6790*100)')));
end;  
  
procedure listAllWinProcesses;
var myproclist: TStringlist;
     i: integer;
begin
    myProclist:= TStringList.Create;
    GetApplicationsRunning(myProclist);     //Jedi
    for i:= 1 to myProclist.count - 1 do 
       Writeln(inttoStr(i)+' '+myProclist[i]);
    myProclist.Free; 
end;

  type rgbc = (fr, fg, fb);

   var pstring, regdata: string;
       dirlist: TStringlist;
       f1, f2, f3: set of rgbc;
       fx1, fx2: set of byte;


Begin  //main app

  
  //writeln(inttostr(ord(rgbc)))

  if iswin64  then writeln(' is win64 machine: '+ gethostname);
  if DirectoryExists(AWORKPATH) then writeln(AWORKPATH+ ' existst');
                                        
  dirlist:= TStringlist.create;
  GetDirList(AWORKPATH+'\src_exportsvn\04_collab\',dirlist,true)
  PrintF('file number check of ..04_collab: %d',[dirlist.count]);
  dirlist.Free;
  
  listAllWinProcesses;
  
   //ExecuteCommand('cmd','/c D:\software\sonar-3.4.1\bin\windows-x86-32\StartSonar.bat')
   //1 Async Start Sonar ************************
   //Function RunFile( FileToRun : string; Params : string; Dir : string; Wait : boolean) : cardinal');
   //Function RunFile_( Cmd, WorkDir : string; Wait : boolean) : Boolean');
  //if RunFile_(Exepath+'maxbox3.exe',ExtractFilePath(Exepath+'maxbox3.exe'),true) then 
      // showmessagebig('mX4 runs');
      
    
    //**************EKON17******************************** //

   S_SonarRunning:= false;
   
  // StartSonarBat;
   
    //with TDebugoutput.Create(self) do begin
   { with debugout.output do begin
      clear;
      lines.add(FileToString(SONARBAT))
      Show;
    end; }
   //debugout(writeln(FileToString(SONARBAT))
   //OpenDoc(SONARBAT)
   
   {Sleep(30000)    //workaround of missing async wait
   openSonarWebStart('9000');         }
      
  //if isTCPPortOpen(9000,'127.0.0.1') then
    if IsTCPPortOpen(9000,getIP(getHostName)) then
 
     StartSonarRunnerBat;
     
     //showmessagebig('end or sonnar runtime setup');
   
    //**************EKON17 END******************************** //
   
   
   //if Not IsApplicationRunning('MozillaWindowClass', '') AND
      //Not IsApplicationRunning('ConsoleWindowClass','') then begin
       //if RunFile(SONARBAT,'',ExtractFilePath(SONARBAT),true) > 0 then 
     //if RunFile(SONARBAT,'','',true) > 0 then 
     //ExecuteCommand('cmd','/c '+SONARBAT)
     //if RunFile_(SONARBAT,ExtractFilePath(SONARBAT),true) then 
     //SearchAndOpenDoc(ExePath+'examples\index.htm');
      //Sleep(30000)    //workaround of missing async wait
     
    //3 open the sonar http start page - procedure call
    //if IsApplicationRunning('ConsoleWindowClass','') AND IsApplicationRunning('Shell_TrayWnd','')
       //AND S_SonarRunning then	
       //openSonarStart;     
   
    //ShellExecute3('http://127.0.0.1:9000/dashboard','',seCMDOPen)
    //Runfile_('http://127.0.0.1:9000/dashboard','',true)
    //S_ShellExecute('D:\software\sonar-3.4.1\bin\windows-x86-32\StartSonar.bat -forceAnalysis=true','',seCMDOpen);
   //SearchandopenDoc('http://localhost:9000/dashboard/index/1?did=1:9000');
   //ExecuteCommand('cmd','/k http://localhost/:9000');
    //D:\software\sonar-3.4.1\bin\windows-x86-32\StartSonar.bat
   //ExecuteCommand('cmd','/k D:\software\sonar-3.4.1\sonar_runner_home\bin\sonar-runner.bat')
   
   //2 Async Start Sonar Runner**************************
 //S_ShellExecute('D:\software\sonar-3.4.1\sonar_runner_home\bin\sonar-runner.bat','',seCMDOpen);
    // output:= StringReplace(input, #9, '',[rfReplaceAll, rfIgnoreCase]); 
    
   writeln(StringReplace('D:/pas/review/src_exportsvn\02_server\prj\eclipse\trunk\pas\pas-biz-sensor-impl\src\main\java\ch\business\sensorelement\impl','\','/',[rfReplaceAll]));
    
  //S_ShellExecute(exepath+'maxbox3.exe','',seCMDOpen);
   regdata:= 'https://eace01srvsvn003.pas.pugfu.admin.ch/svn/trunk/_src/04_collab/src2010/pasHelpSolution/elements.xml';
    writeln('regex test: '+BooleanToString(ExecRegExpr('^http[s]?://[-a-zA-Z0-9_.:]+[-a-zA-Z0-9_:@&?=+,.!/\~*''%$]*$',regdata)));
    
    // ant reinstall
    Testdecimal;
    
  f1:= [fr, fg];
  f2:= [fb,fg];
  
  //fx1:= (1);
  
  f3:= f1+f2;
  
  if fr in f3 then writeln('is in one');
  f3:= f1*f2; //intersection
  if fg in f3 then writeln('is in two');
  
End.


Process ID: 4424
MemoryLoad: 36% used
Free Mem: -1614880MB


11.2.2013
Source has been set in SVN Turtoise
31301 add file, 1.525 GByte, transfer 7 min. at revision 211

Total Files Listed:
      23205 File(s)  3'519'959'913 bytes
      24287 Dir(s)  53'073'997'824 bytes free



Set up for SONAR Java, C#, PL/SQL

Link StartSonar - Shortcut
D:\software\sonar-3.4.1\bin\windows-x86-32\StartSonar.bat
add rule checked exceptions
add path to sonar runner in environment variables
//C:\maXbox\sonar-3.4.1\bin\windows-x86-64\StartSonar.bat
C:\maXbox\sonar-3.4.1\sonar_runner_home\sonar-runner.bat

http://www.ifunky.net/Blog/post/Install-and-Configure-Sonar-on-Windows-2008.aspx




I'm currently looking at integrating Sonar into our build environment which intially didn't go too well interms of installation so I thought I'd document what I did and what was required for future reference.  In this first part I will show you how to configure Sonar to run with a basic out of the box setup that uses the inbuilt Derby database, localhost web and Core/Squid C# plugins.

PREREQUISITES - VERY IMPORTANT!

    Download Java JDK, it's works with 1.5+ but I installed 1.7.  
    http://www.oracle.com/technetwork/java/javase/downloads/java-se-jdk-7-download-432154.html

INSTALL SONAR

    Download Sonar:
    http://sonar.codehaus.org/downloads/
    Extract to a directory i.e. c:\Sonar
    Run \bin\windows-x86-32\StartSonar.bat or \bin\windows-x86-64\StartSonar.bat depending on your OS
    Navigate to http://localhost:9000 to view the default console

    At this point Sonar is configured to use the default database.

CONFIGURE SONAR WITH VS2010

    Download the "C# Plugins Ecosystem" 
    - Version 1.0 http://docs.codehaus.org/download/attachments/201228384/CSharpPluginsEcosystem-1.0-RC2.zip
    (Lastest version can be found on the top right here: http://docs.codehaus.org/display/SONAR/C-Sharp+Plugins+Ecosystem)
    Extract to the plugins directory C:\Sonar\sonar-2.9\extensions\plugins


INSTALL JAVA RUNNER

Rather than using Mavern it's much easier to to use the Java Runner to kick off Sonar.

    Download the Java Runner: http://docs.codehaus.org/display/SONAR/Analyse+with+a+simple+Java+Runner#AnalysewithasimpleJavaRunner-Installation
    Extract to dir i.e. c:\Sonar\sonar-runner-1.1
    Modify C:\Sonar\sonar-runner-1.1\conf\sonar-runner.properties to enble the default site and Derby DB
    My modifed file looks like this:

     #----- Default directory layout  
     sources=src/main/java  
     tests=src/test/java  
     binaries=target/classes  
     sonar.sourceEncoding=UTF-8  
     #----- Default Sonar server  
     sonar.host.url=http://localhost:9000  
     #----- Global database settings  
     sonar.jdbc.username=sonar  
     sonar.jdbc.password=sonar  

    Make sure you have the following environment varaibles:
    JAVA_HOME = C:\Program Files\Java\jdk1.6.0_23
    SONAR_RUNNER_HOME = C:\Sonar\sonar-runner-1.1
    Add the sonar runner bin path to your PATH environment (for my install this is C:\Sonar\sonar-runner-1.1\bin)
    There are two ways to tell Sonar where your .sln file is located
    a) You can create a sonar-project.properties file in the same directory as your solution file, Sonar will find it OR
    b) Create a sonar-project.properties file but use the sonar.dotnet.visualstudio.solution.file property to specify the path (this is my prefered option)
    Create a file called "sonar-project.properties" as descrivbed in the above step (literally as it is don't replace project with your project name!) placing it 
    Here's my sample properties file located on the root of my application:

    AppName
    ---->BuildTools
    ---->Lib
    ---->src
    --------->AppName.sln
    build.proj
    sonar-project.properties

       
     # Project identification  
     sonar.projectKey=DMG:AppName
     sonar.projectVersion=1.0-SNAPSHOT  
     sonar.projectName=AppName
       
     # Info required for Sonar  
     sources=.  
     sonar.language=cs  
       
     #Core C# Settings  
     sonar.dotnet.visualstudio.solution.file=\src\\AppName.sln  
       
     #Gendarme  
     sonar.gendarme.assemblies=\build\\DmgTech*.*  
     sonar.gendarme.mode=skip  
       
     # Gallio  
     sonar.gallio.mode=skip  
       
     # FXCop  
     sonar.fxcop.mode=skip  
       
     #StyleCop  
     sonar.stylecop.mode=skip  
       

    To run Sonar-Runner against your project
    - Shell out to DOS
    - Change directory to the location of your "sonar-project.properties" file
    - Execute "sonar-runner"
    View your reports at http://localhost:9000


Troubleshooting

    If you receive something like: Fail to connect to database: undefined method `getActiveRecordDialectCode' for nil
    Check the JDK version you are running
    If you receive a maintenance warning then try http://localhost:9000\setup
    View the logs \logs\sonar.log
    If you receive the following error make sure the path to Java is in the environment path (I had to put C:\Program Files\Java\jdk1.7.0\bin).  To test head to DOS and type java
    
    
    http://www.digital-metaphors.com/products/data_access/
    
    http://www.digital-metaphors.com/products/data_access/bde_alternatives.html