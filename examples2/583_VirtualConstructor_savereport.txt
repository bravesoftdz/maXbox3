Program TestVirtualConstructor;

//#sign:Administrator: PC08: 12/03/2015 09:23:47 AM 
//#tech>perf: 0:0:1.794 threads: 21 192.168.1.40 09:23:47 AM 3.9.9.180

type {[const}
  Table =  array[0..31] of Char;
  
  //NUMBERS;
  //Const('NUMBERS','String'0123456789');
 // Const('LETTERS','String'ABCDEFGHIJKLMNOPQRSTUVWXYZ');
  
  //array[0..31] of Char; // = '0123456789ABCDEFGHIJKLMNOPQRSTUV';
  
   //var SoapClient: TIdHTTPRIO;
  //  https://www.scribd.com/doc/179659625/6550904-Indy-Soap-Web-Services-in-Delphi

function IntToBase32(Number: Longint): String;
var
  I: Integer;
  att: Table;
  NUMBLETT: string;
begin
  NUMBLETT:= NUMBERS+LETTERS;
  {for i:= 0 to 9 do
    att[i]:= NUMBERS[i+1];
  for i:= 10 to 31 do
    att[i]:= LETTERS[i-9]; }
  for i:= 0 to 31 do 
    att[i]:= NUMBLETT[i+1];
//StrScan
  Result := '';
  for I := 0 to 4 do begin
  //TTTable[Number and 31];
    Insert(att[Number and 31], Result, 1);
    Number := Number shr 5;
  end;
end;

function IntToBase32_Refact(Numb: Longint): String;
var NUMLETT: string;
begin
  NUMLETT:= NUMBERS+LETTERS;
  Result:= '';
  for It:= 0 to 4 do begin
    Insert(NUMLETT[(Numb And 31)+1], Result, 1);
    Numb:= Numb Shr 5;
  end;
end;

procedure TIdSoapHTTPServer_DoCommandGet(AThread: TIdPeerThread; ARequestInfo: TIdHTTPRequestInfo; AResponseInfo: TIdHTTPResponseInfo);
//var
//Request: TIDWebRequest;
//Response: TIdWebResponse;
begin
 {Request:= TIdWebRequest.Create(Self, ARequestInfo, aResponseInfo);
try
   Response := TIdWebResponse.Create(Request, AResponseInfo);
try
   TIdWebApplication(Owner).HandleRequest(Request, Response);
finally
       Response.Free;
end;
finally
       Request.Free;
end; }
//inherited;
end; 

begin
//********** File 1: C:\maXbook\maxbox3\mX3999\maxbox3\source2\source\IFSI_IdHTTP.pas
//  with CL.Add(EIdHTTPProtocolException) do begin
//546:  RegisterVirtualConstructor(@EIdHTTPProtocolException.CreateError, 'CreateError');

  writeln(IntToBase32(1000))
  writeln(IntToBase32_Refact(1000))
  
  with TIdCustomHTTP.Create(self) do begin
    ProxyParams;
    //DoRequest
    free;
  end;  

  with TIdHTTPRequest.Create(NIL) do begin
      URL:='';
      free
   end;   
 
 with TIdHTTPResponse.Create(NIL) do begin
      //KeepAlive;
      free
   end;   

     with TComponent.Create(self) do begin
      owner
      DestroyComponents;
      free
   end;   
    
// ********** File 5: C:\maXbook\maxbox3\mX3999\maxbox3\source2\source\uPSI_HTTPApp.pas
    with TAbstractContentParser.Create(NIL) do begin
      CanParse(NIL);
      free
    end; 
    
    {with TWebRequest.Create do begin
      URL;
      //ExtractFields
      //readstring(20)
      //free
    end; } 
    
     //abstract   
    //with TWebResponse.Create(TWebRequest.create) do begin
    {with TWebResponse.Create(NIL) do begin
  
      //URL;
      //Server;
      //ExtractFields
      //readstring(20)
      free
    end; } 
    


//********** File 2: C:\maXbook\maxbox3\mX3999\maxbox3\source2\source\uPSI_ADODB.pas
  with tADODataSet.Create(self) do begin
    Free
  end;
  


//********** File 4: C:\maXbook\maxbox3\mX3999\maxbox3\source2\source\uPSI_DBTables.pas

  with TUpdateSQL.Create(self) do begin
  Free
  end;
  with TStoredProc.Create(self) do begin
    Free;
  end;  
  with TBatchMove.Create(self) do begin
     Free;
   end;  

  

//********** File 6: C:\maXbook\maxbox3\mX3999\maxbox3\source2\source\uPSI_IdCustomHTTPServer.pas

  with TInterval.create do begin
     Start
  with TIdHTTPSession.Create(NIL) do begin
    //CreateInitialized
    Lock
    sleep(50)
    Free
  end;  
     Stop
    writeln('Perf: TIdHTTPSession Lock '+ToString) 
  end;
  
//********** File 8: C:\maXbook\maxbox3\mX3999\maxbox3\source2\source\uPSI_IdGlobal.pas
    with TIdMimeTable.Create(true) do begin
       //SaveToStrings(nil,'m')
       Free;
     end;  

  
     //check header geoinfo!
     //http://www.e-iter.net/Knowledge/Indy9/007651.html
     
//********** File 9: C:\maXbook\maxbox3\mX3999\maxbox3\source2\source\uPSI_IdHTTPHeaderInfo.pas

    with TIdEntityHeaderInfo.Create do begin
       //SaveToStrings(nil,'m')
       Clear;
       writeln('HasContentLength '+botostr(HasContentLength))
       Free;
     end;  

  

//********** File 10: C:\maXbook\maxbox3\mX3999\maxbox3\source2\source\uPSI_IdLogFile.pas
  with TIdLogFile.Create(self) do begin
    Free;
    end;


//*** File 11: C:\maXbook\maxbox3\mX3999\maxbox3\source2\source\uPSI_IdSSLOpenSSL.pas
  with TIdX509.Create do begin
    //Fingerprint;
    free
  end;  


//***** File 12: C:\maXbook\maxbox3\mX3999\maxbox3\source2\source\uPSI_IdStack.pas


//**** File 13: C:\maXbook\maxbox3\mX3999\maxbox3\source2\source\uPSI_IdTCPServer.pas
  with TIdCommand.Create do begin
     free;
  end;   

  
 {  with TIdThread.Create(NIL) do begin
     free;
  end; }  
  
//********** File 14: C:\maXbook\maxbox3\mX3999\maxbox3\source2\source\uPSI_IdThread.pas


//**** File 15: C:\maXbook\maxbox3\mX3999\maxbox3\source2\source\uPSI_JclSimpleXml.pas
   // Fail 
  {with TJclSimpleXMLElem.Create(NIL) do begin
     //free;
  end; }  


//* File 18: C:\maXbook\maxbox3\mX3999\maxbox3\source2\source\uPSI_JvgCommClasses.pas

  with TJvgCustomListBoxItemStyle.Create do begin
     free;
  end;   

  
//** File 19: C:\maXbook\maxbox3\mX3999\maxbox3\source2\source\uPSI_Provider.pas
  with TCustomPacketWriter.Create do begin
     free
   end;  

//*** File 20: C:\maXbook\maxbox3\mX3999\maxbox3\source2\source\uPSI_ShadowWnd.pas
    
  {  with TShadowWindow.CreateShadow(nil, nil) do begin
       control
       free
     end;  
   }

//** File 21: C:\maXbook\maxbox3\mX3999\maxbox3\source2\source\uPSI_StDict.pas
  with TStDictionary.Create(100) do begin
       //DoEqual
       //clear
       free                               //large memory leak !!
     end;

    (*  missing fail { procedure LoadFromStream(S : TStream); override;
      {-Read a dictionary and its data from a stream}
    procedure StoreToStream(S : TStream); override;
      {-Write a dictionary and its data to a stream}

    procedure Clear; override;
      *)

   with TStString.Create do begin       
       //DoEqual
       //appendpchar
       free
     end;
   
     
   //Fail 
   {with TVCLScanner.Create do begin
       //DoEqual
       //appendpchar
       //free
     end; }

// File 23: C:\maXbook\maxbox3\mX3999\maxbox3\source2\source\uPSI_VCLScannerImpl.pas


//* File 25: C:\maXbook\maxbox3\mX3999\maxbox3\source2\source\uPSR_classes.pas
    with TDataModule.Create(self) do begin
       writeln('GetNamePath: '+GetNamePath)
       Free
     end; 

//********** File 26: C:\maXbook\maxbox3\mX3999\maxbox3\source2\source\uPSR_controls.pas
  with TControl.Create(self) do begin
    Free
  end;     
  


// File 29: C:\maXbook\maxbox3\mX3999\maxbox3\source2\source\uPSR_graphics.pas
  with TGraphic.Create do begin
    //LoadFromFile('')
    free
   end; 


//*** File 31: C:\maXbook\maxbox3\mX3999\maxbox3\source2\source\fundamentals_lib\uPSI_Chart.pas

   {with TChartTheme.Create_P do begin
      Apply
      free
    end;}  

 
//** File 32: C:\maXbook\maxbox3\mX3999\maxbox3\source2\source\fundamentals_lib\uPSI_DSUtil.pas
  
   //Fail 
  {  with TPersistentMemory.Create do begin
      free
  end;}

//***** File 34: C:\maXbook\maxbox3\mX3999\maxbox3\source2\source\fundamentals_lib
  with TIdMessageEncoderInfo.Create do begin
     //InitializeHeaders
     free
   end;

  with TJclPrintSet.Create do begin
     //InitializeHeaders
     GetBinSourceList
     free
   end;  

   
//* File 38: C:\maXbook\maxbox3\mX3999\maxbox3\source2\source\fundamentals_lib\uPSI_JvSearchFiles.pas
  with TJvSearchParams.Create do  begin
    Free;
   end; 

//**** File 39: C:\maXbook\maxbox3\mX3999\maxbox3\source2\source\fundamentals_lib\uPSI_OleAuto.pas
  with TAutoObject.Create do begin
     Free
   end;  

  
  // File 40: C:\maXbook\maxbox3\mX3999\maxbox3\source2\source\fundamentals_lib\uPSI_StBarC.pas
  with TStBarCodeInfo.Create do begin
    //add
    free
  end;

  with TSynMethodChain.Create do begin
    //add
    free
  end;


  {with ALBaseAVLBinaryTree.Create do begin
     Iterate
     free
   end; }
     
  with TALHTTPClient.Create do begin
    //add
    //execute
    free
  end;

  with TALNewsArticleHeader.Create do begin
    //add
    //execute
    clear
    free
  end;

  with TALBaseAVLList.Create do begin
    //add
    //execute
    clear
    free
  end;

  with TDataFile.Create(self) do begin
    //add
    //execute
    //clear
    free
  end;


//********** File 60: C:\maXbook\maxbox3\mX3999\maxbox3\source2\source\REST\uPSI_ApplicationFileIO.pas


 with TBoldFileHandler.Create do begin
    Free
  end;  

 {with TBoldXMLRequest.CreateFromXML('') do begin
    Free
  end;  
  Exception: XML document must have a top level element.
  }

   with TcyBgPicture.Create(self) do begin
     free
   end;
   with TcyFileAttributes.Create(self) do begin
     archive
     free
   end;

// C:\maXbook\maxbox3\mX3999\maxbox3\source2\source\REST\uPSI_cySearchFiles.pas

    //FileType2MimeType

  //  unit uPSI_IdExtHTTPServer;   fail missing

   {with TIdExtSession.Create(self) do begin
     //archive
     free
   end;}


   with TIpBasePersistent.Create do begin
     //archive
     free
   end;

   with TJclLinearTransformation.Create do begin
     //archive
     clear
     free
   end;

//********** File 74: C:\maXbook\maxbox3\mX3999\maxbox3\source2\source\REST\uPSI_JclGraphics.pas         failed missing

  {destructor Destroy; override;
    procedure Assign(Source: TPersistent); override;
    function  Empty: Boolean; override;
   }

(*  with CL.Add(TJclLinearTransformation) do begin
759:     RegisterVirtualConstructor(@TJclLinearTransformation.Create, 'Create');
    RegisterMethod(@TJclLinearTransformation.Clear, 'Clear');
  begin
909:     RegisterVirtualConstructor(@TJclThreadPersistent.Create, 'Create');
    RegisterVirtualMethod(@TJclThreadPersistent.Changing, 'Changing');

*)


  { with TJvBaseReader.Create('') do begin
     //archive
     //clear
     free
   end;
   }

//********** File 78: C:\maXbook\maxbox3\mX3999\maxbox3\source2\source\REST\uPSI_JvCreateProcess.pas


   (*with TStList.Create(nil) do begin
     //archive
     //clear
     free
   end; *)


      with TThemeServices.Create do begin
     //archive
     free
   end;



//********** File 88: C:\maXbook\maxbox3\mX3999\maxbox3\source2\source\REST\uPSI_WaveStorage.pas
  
  {   with TWaveItemsAdapter.Create do begin
     //archive
     add
     free
   end;}

      with TXCollection.Create(self) do begin
     //archive
     loaded
     free
   end;

(*
********** File 89: C:\maXbook\maxbox3\mX3999\maxbox3\source2\source\REST\uPSI_XCollection.pas
  begin
173:     RegisterVirtualConstructor(@TXCollection.Create, 'Create');
    RegisterMethod(@TXCollection.Loaded, 'Loaded');

Found 89 files of: 05:03:2015
"Search and Found for RegisterVirtualConstructor
"Search Total Count of Files/Words: 2237
"Found of Words: 144
"Found of Files: 89
0 h run time is: 00:37:112
 *)
 
 end.
 
 
 ref:
 
 procedure SIRegister_TWebRequest(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TWebRequest') do
  with CL.AddClassN(CL.FindClass('TObject'),'TWebRequest') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Function ReadClient( var Buffer, Count : Integer) : Integer');
    RegisterMethod('Function ReadString( Count : Integer) : string');
    RegisterMethod('Function TranslateURI( const URI : string) : string');
    RegisterMethod('Function WriteClient( var Buffer, Count : Integer) : Integer');
    RegisterMethod('Function WriteString( const AString : string) : Boolean');
    RegisterMethod('Function WriteHeaders( StatusCode : Integer; const ReasonString, Headers : string) : Boolean');
    RegisterMethod('Procedure ExtractFields( Separators, WhiteSpace : TSysCharSet; Content : PChar; Strings : TStrings)');
    RegisterMethod('Procedure ExtractContentFields( Strings : TStrings)');
    RegisterMethod('Procedure ExtractCookieFields( Strings : TStrings)');
    RegisterMethod('Procedure ExtractQueryFields( Strings : TStrings)');
    RegisterMethod('Function GetFieldByName( const Name : string) : string');
    RegisterProperty('MethodType', 'TMethodType', iptr);
    RegisterProperty('ContentParser', 'TAbstractContentParser', iptr);
    RegisterProperty('ContentFields', 'TStrings', iptr);
    RegisterProperty('CookieFields', 'TStrings', iptr);
    RegisterProperty('QueryFields', 'TStrings', iptr);
    RegisterProperty('Method', 'string', iptr);
    RegisterProperty('ProtocolVersion', 'string', iptr);
    RegisterProperty('URL', 'string', iptr);
    RegisterProperty('Query', 'string', iptr);
    RegisterProperty('PathInfo', 'string', iptr);
    RegisterProperty('PathTranslated', 'string', iptr);
    RegisterProperty('Authorization', 'string', iptr);
    RegisterProperty('CacheControl', 'string', iptr);
    RegisterProperty('Cookie', 'string', iptr);
    RegisterProperty('Date', 'TDateTime', iptr);
    RegisterProperty('Accept', 'string', iptr);
    RegisterProperty('From', 'string', iptr);
    RegisterProperty('Host', 'string', iptr);
    RegisterProperty('IfModifiedSince', 'TDateTime', iptr);
    RegisterProperty('Referer', 'string', iptr);
    RegisterProperty('UserAgent', 'string', iptr);
    RegisterProperty('ContentEncoding', 'string', iptr);
    RegisterProperty('ContentType', 'string', iptr);
    RegisterProperty('ContentLength', 'Integer', iptr);
    RegisterProperty('ContentVersion', 'string', iptr);
    RegisterProperty('Content', 'string', iptr);
    RegisterProperty('Connection', 'string', iptr);
    RegisterProperty('DerivedFrom', 'string', iptr);
    RegisterProperty('Expires', 'TDateTime', iptr);
    RegisterProperty('Title', 'string', iptr);
    RegisterProperty('RemoteAddr', 'string', iptr);
    RegisterProperty('RemoteHost', 'string', iptr);
    RegisterProperty('ScriptName', 'string', iptr);
    RegisterProperty('ServerPort', 'Integer', iptr);
    RegisterProperty('InternalPathInfo', 'string', iptr);
    RegisterProperty('InternalScriptName', 'string', iptr);
    RegisterProperty('Files', 'TAbstractWebRequestFiles', iptr);
  end;
end;

procedure SIRegister_TWebResponse(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TWebResponse') do
  with CL.AddClassN(CL.FindClass('TObject'),'TWebResponse') do
  begin
    RegisterMethod('Constructor Create( HTTPRequest : TWebRequest)');
    RegisterMethod('Function GetCustomHeader( const Name : string) : String');
    RegisterMethod('Procedure SendResponse');
    RegisterMethod('Procedure SendRedirect( const URI : string)');
    RegisterMethod('Procedure SendStream( AStream : TStream)');
    RegisterMethod('Function Sent : Boolean');
    RegisterMethod('Procedure SetCookieField( Values : TStrings; const ADomain, APath : string; AExpires : TDateTime; ASecure : Boolean)');
    RegisterMethod('Procedure SetCustomHeader( const Name, Value : string)');
    RegisterProperty('Cookies', 'TCookieCollection', iptr);
    RegisterProperty('HTTPRequest', 'TWebRequest', iptr);
    RegisterProperty('Version', 'string', iptrw);
    RegisterProperty('ReasonString', 'string', iptrw);
    RegisterProperty('Server', 'string', iptrw);
    RegisterProperty('WWWAuthenticate', 'string', iptrw);
    RegisterProperty('Realm', 'string', iptrw);
    RegisterProperty('Allow', 'string', iptrw);
    RegisterProperty('Location', 'string', iptrw);
    RegisterProperty('ContentEncoding', 'string', iptrw);
    RegisterProperty('ContentType', 'string', iptrw);
    RegisterProperty('ContentVersion', 'string', iptrw);
    RegisterProperty('DerivedFrom', 'string', iptrw);
    RegisterProperty('Title', 'string', iptrw);
    RegisterProperty('StatusCode', 'Integer', iptrw);
    RegisterProperty('ContentLength', 'Integer', iptrw);
    RegisterProperty('Date', 'TDateTime', iptrw);
    RegisterProperty('Expires', 'TDateTime', iptrw);
    RegisterProperty('LastModified', 'TDateTime', iptrw);
    RegisterProperty('Content', 'string', iptrw);
    RegisterProperty('ContentStream', 'TStream', iptrw);
    RegisterProperty('LogMessage', 'string', iptrw);
    RegisterProperty('CustomHeaders', 'TStrings', iptrw);
  end;
end;

