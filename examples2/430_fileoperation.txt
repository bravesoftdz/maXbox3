PROGRAM File_Operation;

//////////////////////////////////////////////////////////////////////
//  #sign:max: MAXBOX8: 27.12.2014 23:06:43 
//  Purpose: demo of TJvSHFileOperation type                        //
//  #path>ples\C:\maXbook\maxbox3\mX3999\maxbox3\examples\          //
//  precondition: file test text in data directory                  //
//  Lines of Code #locs:234
//
//////////////////////////////////////////////////////////////////////

Const TEXTOUT = 'hi world of code coverage with cover age';

//############################################################################
// TEXTFILE CLASS App       mX4 Script Studio
//############################################################################
//TODO: set more operations to backup bitmaps
//TODO: transfer the Algo to a LED Matrix on Arduino ex. I^2C Adafruit Shield!!

{TYPE <Type declarations>} 

  var FWait, switch: Boolean;
      ComPorts: TStrings;

//<FUNCTION>
//<PROCEDURE> 

procedure CopyTextFile(afilename: string);
var fo: TJvSHFileOperation;
    src, dest:  TStrings; //TClientDirectory;
    tmpname: string;
    myipctimeout: byte;
    //ast: //TdevMonitorThread;//TEvent;//THandledObject; //TIPCTracer; //TSharedMem; //TEvent;
begin
  //showmessage(afilename);

  afilename:= extractfilename(afilename);
  showmessage('copy that: '+afilename);
  src:= TStringlist.create;
  src.add(Exepath+afilename);
  dest:= TStringlist.create;
  dest.add(Exepath+'copy'+afilename);
  fo:= TJvSHFileOperation.Create(self);
  with fo do begin
  //qt.active:= true;
    operation:= foCopy;
    sourcefiles:= src;
    destfiles:= dest;
    Execute;
    Free;
  end; 
  src.Free;
  dest.Free; 
  //ResolveEpoch
end; 


procedure startOthello(sender: TObject);
begin
  FWait:= false;
  writeln('othello demo started...');
    screen.cursor:= CRHandpoint;
    //maxform1.cursor:= CRHandpoint;;
    maxform1.reversi1click(sender);
    screen.cursor:= CRDefault;
  writeln('othello demo stopped...');
  FWait:= true;
end; 

procedure SIRegister_IPCThrdTest;
begin
  //SIRegister_THandledObject(CL);
  //7SIRegister_TEvent(CL);
  //7SIRegister_TMutex(CL);
  //SIRegister_TSharedMem(CL);
 //TRACE_BUF_SIZE','LongInt').SetInt( 200 * 1024);
 //TRACE_BUFFER','String').SetString( 'TRACE_BUFFER');
 //TRACE_MUTEX','String').SetString( 'TRACE_MUTEX');
  //CL.AddTypeS('PTraceEntry', '^TTraceEntry // will not work');
  //SIRegister_TIPCTracer(CL);
 //MAX_CLIENTS','LongInt').SetInt( 6);
 //IPCTIMEOUT','LongInt').SetInt( 2000);
 //IPCBUFFER_NAME','String').SetString( 'BUFFER_NAME');
 //BUFFER_MUTEX_NAME','String').SetString( 'BUFFER_MUTEX');
 //MONITOR_EVENT_NAME','String').SetString( 'MONITOR_EVENT');
 //CLIENT_EVENT_NAME','String').SetString( 'CLIENT_EVENT');
 //CONNECT_EVENT_NAME','String').SetString( 'CONNECT_EVENT');
 //CLIENT_DIR_NAME','String').SetString( 'CLIENT_DIRECTORY');
 //CLIENT_DIR_MUTEX','String').SetString( 'DIRECTORY_MUTEX');
  //CL.AddClassN(CL.FindClass('TOBJECT'),'EMonitorActive');
  //CL.AddClassN(CL.FindClass('TOBJECT'),'TIPCThread');
  //TEventKind', '( evMonitorAttach, evMonitorDetach, evMonitorSigna'
   //+'l, evMonitorExit, evClientStart, evClientStop, evClientAttach, evClientDet'
   //+'ach, evClientSwitch, evClientSignal, evClientExit )');
  //TClientFlag', '( cfError, cfMouseMove, cfMouseDown, cfResize, cfAttach )');
  //TClientFlags', 'set of TClientFlag');
  //PEventData', '^TEventData // will not work');
  //TEventData', 'record X : SmallInt; Y : SmallInt; Flag : TClientF'
   //+'lag; Flags : TClientFlags; end');
  //TConnectEvent', 'Procedure ( Sender : TIPCThread; Connecting : Boolean)');
  //TDirUpdateEvent', 'Procedure ( Sender : TIPCThread)');
  //TIPCNotifyEvent', 'Procedure ( Sender : TIPCThread; Data : TEventData)');
  //PIPCEventInfo', '^TIPCEventInfo // will not work');
  //TIPCEventInfo','record FID:Integer; FKind: TEventKind; FData: TEventData; end');
  //SIRegister_TIPCEvent(CL);
  //PClientDirRecords', '^TClientDirRecords // will not work');
  //SIRegister_TClientDirectory(CL);
  //TIPCState', '( stInActive, stDisconnected, stConnected )');
  //SIRegister_TIPCThread(CL);
  //SIRegister_TIPCMonitor(CL);
  //SIRegister_TIPCClient(CL);
 //CL.AddDelphiFunction('Function IsMonitorRunning( var Hndl : THandle) : Boolean');
 //CurrentDateString
   //DateToDateString
     //CurrentTimeString
   //FormatSettings 
 
end;

function IntToStr(Int : Int64) : String;
begin
  //Str(Int, result);
  //result:= StrPas(Int);
end;

function StrPas(const Str : PChar) : String;
begin
  Result := Str;
end;

function RenameFile(const OldName, NewName : String) : Boolean;
begin
  //Result := MoveFile(PChar(OldName), PChar(NewName));
end;

function CutFileName(s : String) : String;
var
  i : Integer;
begin
  Result := s;
  for i := Length(s) downto 1 do
    if s[i] = '\' then begin
        Result := Copy(s, 1, i);
        Break;
      end;
end;

function FormatTime(t : Cardinal) : String;
begin
  t := t div 1000;
  Result := IntToStr(t mod 60);
  case t mod 60 < 10 of
    TRUE : Result := '0' + Result;
  end;
  t := t div 60;
  Result := IntToStr(t mod 60) + ':' + Result;
  case t mod 60 < 10 of
    TRUE : Result := '0' + Result;
  end;
  t := t div 60;
  Result := IntToStr(t mod 24) + ':' + Result;
  case t mod 60 < 10 of
    TRUE : Result := '0' + Result;
  end;
end;

function CreateDir(const Dir : String) : Boolean;
begin
  Result:= wCreateDirectory(PChar(Dir), 0);
end;

function SetAutoRun(NeedAutoRun : Boolean; AppName : String) : Boolean;
var
  Key : HKEY;
  Buff : String;
begin
  Result := False;
  (*if RegCreateKey{RegOpenKeyEx}(HKEY_CURRENT_USER,
    'Software\Microsoft\Windows\CurrentVersion\Run',
    0, KEY_WRITE, Key) = ERROR_SUCCESS then
  try
    if NeedAutoRun then
    begin
      Buff := ParamStr(0);
      Result := RegSetValueEx(Key, PChar(AppName), 0,
        REG_SZ, @Buff[1], Length(Buff)) = ERROR_SUCCESS;
    end
    else
      Result := RegDeleteValue(Key, PChar(AppName)) = ERROR_SUCCESS;
  finally
    RegCloseKey(Key);
  end;*)
end;

function SetTreeViewStyle(const hTV : HWND; dwNewStyle : DWORD) : DWORD;
var
  dwStyle : dword;
begin
  dwStyle := GetWindowLong(hTV, GWL_STYLE);
  if(dwStyle and dwNewStyle = 0) then
    SetWindowLong(hTV, GWL_STYLE, dwStyle or dwNewStyle)
  else
    SetWindowLong(hTV, GWL_STYLE, dwStyle and not dwNewStyle);
  Result := GetWindowLong(hTV, GWL_STYLE);
end;


Begin  //Main
//<Executable statements>
  //TOutlookExport_Spy;
  Writeln('');
  ComPorts:= TStringlist.Create;
  try
    EnumComPorts(ComPorts);
    Writeln('Start COM Port Command of Arduino COM: '+ComPorts[0]);  
  except
    Writeln('No COM Ports');
  end;    
  ComPorts.Free;
//<Definitions>  

  //ares:= TResolver.create;
 { with TResolver.create do begin
   //writeln(inttostr(GetHostByName(gethostname)));
    Free;
   end;  }
   //startOthello(self);
   //CreateTextFile('classfiletest.txt');
   //OpenDoc(Exepath+'classfiletest.txt');
   //CopyTextFile(Exepath+'firstdemo.txt');
   CopyTextFile(Exepath+'firstdemo.txt');
   OpenDoc(Exepath+'copyfirstdemo.txt');
   //ParseDelphiDeclaration
END. 


(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TJvSHFileOperation(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJvCommonDialog', 'TJvSHFileOperation') do
  with CL.AddClassN(CL.FindClass('TJvCommonDialog'),'TJvSHFileOperation') do begin
    RegisterMethod('Function Execute : Boolean');
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Procedure Free');
    RegisterProperty('LastErrorMsg', 'string', iptr);
    RegisterProperty('SourceFiles', 'TStrings', iptrw);
    RegisterProperty('DestFiles', 'TStrings', iptrw);
    RegisterProperty('Operation', 'TJvSHFileOpType', iptrw);
    RegisterProperty('Options', 'TJvSHFileOptions', iptrw);
    RegisterProperty('Title', 'string', iptrw);
    RegisterProperty('OnFileMapping', 'TJvShFileMappingEvent', iptrw);
  end;
end;



 type
  TFileMode = fmClosed..fmOutput;
  TFileExt = string[3]; 
//Pattern: mediator
  TTrigger = array of boolean;
  TTriggerEvent = procedure (Sender: TObject; Trigger: TTrigger) of object;

  TTxtFile = class (TObject)
  private
    FDefaultExt: TFileExt;
    FTextFile: TextFile;
    function GetActive: Boolean;
    function GetEof: Boolean;
    function GetEoln: Boolean;
    function GetMode: TFileMode;
    function GetName: string;
    function GetSeekEoln: Boolean;
    procedure SetActive(state: Boolean);
    procedure SetMode(const NewMode: TFileMode);
  public
    constructor Create(Name : TFileName);
    destructor Destroy; override;
    procedure Append;
    procedure Assign(FName: string);
    procedure Close; virtual;
    procedure Flush;
    //function loadfromStreamFile(const aFileName: string; memStream:
    //                                  TMemoryStream ): Boolean;
    procedure ReadLn(var S : string);
    procedure ReSet; virtual;
    procedure ReWrite; virtual;
    procedure SetTextBuf(var Buf; Size : Word);
    procedure Write(const S : string);
    procedure WriteLn(const S : String);
    property Active: Boolean read GetActive write SetActive;
    property DefaultExt: TFileExt read FDefaultExt write FDefaultExt;
    property Eof: Boolean read GetEof;
    property Eoln: Boolean read GetEoln;
    property FileName: string read GetName write Assign;
    property SeekEoln: Boolean read GetSeekEoln;
    property state: TFileMode read GetMode write SetMode;
  end;
  



implementation

//############################################################################
// TApplication
//############################################################################

 
  http://i1-win.softpedia-static.com/screenshots/maXbox_5.png?1381322021
  
    RegisterMethod('Constructor Create(AOwner: TComponent)');
    RegisterConstructor(@TJvMail.Create, 'Create');
  
  
   RegisterMethod('Procedure Free');
   RegisterMethod(@TJvMail.Destroy, 'Free');
   


----app_template_loaded_code----