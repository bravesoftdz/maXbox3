{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Courier New;}}
{\colortbl\red0\green0\blue0;\red128\green0\blue128;\red0\green0\blue128;\red0\green128\blue128;\red255\green0\blue0;\red0\green102\blue204;\red255\green99\blue71;}
{\info{\comment Generated by the SynEdit RTF exporter}
{\title Untitled}}
\deflang1033\pard\plain\f0\fs20 \cf0\b program\b0  Motion_HTTPServer_Arduino42_RGB_LED_Light\cf1 ;
\par 
\par \cf0   \cf2\i // Fourth httpserver script & arduino control of webmax internet series
\par \i0\cf0   \cf2\i // Send the RGB command LED and DEL to shine on a LED on Arduino Board, #locs=492
\par \i0\cf0   \cf2\i // #sign:max: MAXBOX8: 28/01/2014 20:02:19 
\par \i0\cf0   \cf2\i // update: just the RGB Color table, toogle web switch
\par \i0\cf0   \cf2\i // V4.2 small version with RGB LED to switch 3 colors independent
\par \i0\cf0   \cf2\i // TODO: check the sleep or delay difference in loop!
\par \i0\cf0   
\par \b Const
\par \b0   BACKMAP \cf1 =\cf0  \cf3 'examples\\images\\bmp37.bmp'\cf1 ;
\par \cf0   SIG \cf1 =\cf3 '<--------->'\cf1 ;
\par \cf0   APORT \cf1 =\cf0  \cf4 8080\cf1 ;
\par \cf0   COMPORT \cf1 =\cf3 'COM3'\cf1 ;
\par \cf0   R_EXCEPTMESS \cf1 =\cf0  \cf3 'Comport not in use - Connect first^!'\cf1 ;
\par \cf0   
\par   
\par \b var\b0   HTTPSrv\cf1 :\cf0  TIdCustomHTTPServer\cf1 ;
\par \cf0      \cf2\i //ends: TOnSessionEndEvent;
\par \i0\cf0      cPort\cf1 :\cf0  TComPort\cf1 ;
\par \cf0      webswitch\cf1 :\cf0  boolean\cf1 ;
\par \cf0    
\par \b Function\b0  getHTMLContentString\cf1 (\cf0 lastline\cf1 :\cf0  \b shortstring\b0\cf1 ):\cf0  \b string\b0\cf1 ;
\par \cf0\b begin\b0    
\par   result\cf1 :=\cf0  \cf3 '<html><head><title>maXbox WebConnect Arduino</title></head><body><h1>Welcome to LED WebBox3 *** Shine on you Crazy Diamond ***</h1>'\cf5\ul #13\ul0\cf1 +
\par \cf0     \cf3 'Check script 305_webserver_arduino3 to discover more:<br><ul><li>Search for '\cf5\ul #13\ul0\cf0  \cf1 +
\par \cf0     \cf3 '<b>a LED</b> to <b>light Event OnCommandGet and tag R/G/B or switch ON/OFF</b>!'\cf1 +
\par \cf0     \cf3 '<br> Example: 192.168.48.126:8000/R'\cf1 +
\par \cf0     \cf3 '<br><br><b>'\cf1 +\cf0 lastline\cf1 +\cf3 '</b>'\cf1 +
\par \cf0     \cf3 '<p align="center"><a href="http://www.opensource.org/"target=""><img src="OSLogo.gif"></a>'\cf1 +
\par \cf0     \cf3 '</ul></body></html>'\cf1 ;
\par \cf0\b end\b0\cf1 ;\cf0  
\par 
\par 
\par \b procedure\b0  AOpenBrowser\cf1 ;
\par \cf0\b begin
\par \b0    S_ShellExecute\cf1 (\cf3 'http:'\cf1 +\cf0 getHostIP\cf1 +\cf3 ':'\cf1 +\cf0 IntToStr\cf1 (\cf0 APORT\cf1 )+\cf3 '/'\cf1 ,\cf3 ''\cf1 ,\cf0 seCmdOpen\cf1 )
\par \cf0\b end\b0\cf1 ;
\par 
\par 
\par \cf2\i //******************************* HTTP Server *****************************//
\par \i0\cf0\b procedure\b0  HTTPServerGet\cf1 (\cf0 aThr\cf1 :\cf0  TIdPeerThread\cf1 ;\cf0  reqInfo\cf1 :\cf0  TIdHTTPRequestInfo\cf1 ;
\par \cf0                                        respInfo\cf1 :\cf0  TIdHTTPResponseInfo\cf1 );
\par \cf0\b var\b0  loccom\cf1 :\cf0  \b string\b0\cf1 ;
\par \cf0\b begin
\par \b0    PrintF\cf1 (\cf3 'Cmd %s %s at %-10s received from %s:%d'\cf1 ,[\cf0 ReqInfo\cf1 .\cf0 Command\cf1 ,\cf0  ReqInfo\cf1 .\cf0 Document\cf1 ,\cf0  DateTimeToStr\cf1 (\cf0 Now\cf1 ),\cf0  aThr\cf1 .\cf0 Connection\cf1 .\cf0 socket\cf1 .\cf0 binding\cf1 .\cf0 PeerIP\cf1 ,
\par \cf0                            aThr\cf1 .\cf0 Connection\cf1 .\cf0 socket\cf1 .\cf0 binding\cf1 .\cf0 PeerPort\cf1 ]);
\par \cf0    loccom\cf1 :=\cf0  ReqInfo\cf1 .\cf0 Document\cf1 ;
\par \cf0    writeln\cf1 (\cf3 'web debug: '\cf1 +\cf0 loccom\cf1 )
\par \cf0    \b if\b0  ReqInfo\cf1 .\cf0 Document \cf1 =\cf0  \cf3 '/'\cf0  \b then\b0  \b begin
\par \b0      RespInfo\cf1 .\cf0 ContentText\cf1 :=\cf0  
\par        getHTMLContentString\cf1 (\cf3 'Switch LED ON with /LED or OFF with /DEL in URL'\cf1 )
\par \cf0        respinfo\cf1 .\cf0 writeheader\cf1 ;
\par \cf0    \b end\b0  \b else
\par \b0    \b if\b0  uppercase\cf1 (\cf0 loccom\cf1 )=\cf0 uppercase\cf1 (\cf3 '/LED'\cf1 )\cf0  \b then\b0  \b begin
\par \b0       cPort\cf1 .\cf0 WriteStr\cf1 (\cf3 '1'\cf1 )
\par \cf0       writeln\cf1 (\cf0 loccom\cf1 +\cf0  \cf3 ': LED on'\cf1 );
\par \cf0       RespInfo\cf1 .\cf0 ContentText\cf1 :=\cf0 getHTMLContentString\cf1 (\cf3 'LED is:  ON'\cf1 );
\par \cf0    \b end\b0  \b else
\par \b0    \b if\b0  uppercase\cf1 (\cf0 loccom\cf1 )=\cf0 uppercase\cf1 (\cf3 '/DEL'\cf1 )\cf0  \b then\b0  \b begin
\par \b0       cPort\cf1 .\cf0 WriteStr\cf1 (\cf3 'A'\cf1 );
\par \cf0       writeln\cf1 (\cf0 loccom\cf1 +\cf0  \cf3 ': LED off'\cf1 );
\par \cf0       RespInfo\cf1 .\cf0 ContentText\cf1 :=\cf0 getHTMLContentString\cf1 (\cf3 'LED is:  OFF'\cf1 )
\par \cf0    \b end\b0  \b else\b0  
\par     \b if\b0  \cf1 (\cf0 uppercase\cf1 (\cf0 loccom\cf1 )=\cf0 uppercase\cf1 (\cf3 '/ON'\cf1 ))\cf0  \b or\b0  
\par                        \cf1 (\cf0 uppercase\cf1 (\cf0 loccom\cf1 )=\cf0 uppercase\cf1 (\cf3 '/R'\cf1 ))\cf0  \b then\b0  \b begin
\par \b0       webswitch\cf1 :=\cf0  \b NOT\b0  webswitch\cf1 ;
\par \cf0       \b if\b0  webswitch \b then\b0  \b begin
\par \b0         cPort\cf1 .\cf0 WriteStr\cf1 (\cf3 '1'\cf1 )
\par \cf0         RespInfo\cf1 .\cf0 ContentText\cf1 :=\cf0 getHTMLContentString\cf1 (\cf3 'LED Red is: ON Switch'\cf1 );
\par \cf0       \b end\b0  \b else\b0  \b begin
\par \b0         cPort\cf1 .\cf0 WriteStr\cf1 (\cf3 'A'\cf1 );
\par \cf0         RespInfo\cf1 .\cf0 ContentText\cf1 :=\cf0 getHTMLContentString\cf1 (\cf3 'LED Red is: OFF Switch'\cf1 )
\par \cf0       \b end
\par \b0      \b end\b0  \b else
\par \b0     \b if\b0  uppercase\cf1 (\cf0 loccom\cf1 )=\cf0 uppercase\cf1 (\cf3 '/G'\cf1 )\cf0  \b then\b0  \b begin
\par \b0       webswitch\cf1 :=\cf0  \b NOT\b0  webswitch\cf1 ;
\par \cf0       \b if\b0  webswitch \b then\b0  \b begin
\par \b0         cPort\cf1 .\cf0 WriteStr\cf1 (\cf3 '2'\cf1 )
\par \cf0         RespInfo\cf1 .\cf0 ContentText\cf1 :=\cf0 getHTMLContentString\cf1 (\cf3 'LED is: Green'\cf1 );
\par \cf0       \b end\b0  \b else\b0  \b begin
\par \b0         cPort\cf1 .\cf0 WriteStr\cf1 (\cf3 'B'\cf1 );
\par \cf0         RespInfo\cf1 .\cf0 ContentText\cf1 :=\cf0 getHTMLContentString\cf1 (\cf3 'LED is: Green OFF Switch'\cf1 )
\par \cf0       \b end
\par \b0      \b end\b0  \b else
\par \b0     \b if\b0  uppercase\cf1 (\cf0 loccom\cf1 )=\cf0 uppercase\cf1 (\cf3 '/B'\cf1 )\cf0  \b then\b0  \b begin
\par \b0       webswitch\cf1 :=\cf0  \b NOT\b0  webswitch\cf1 ;
\par \cf0       \b if\b0  webswitch \b then\b0  \b begin
\par \b0         cPort\cf1 .\cf0 WriteStr\cf1 (\cf3 '3'\cf1 )
\par \cf0         RespInfo\cf1 .\cf0 ContentText\cf1 :=\cf0 getHTMLContentString\cf1 (\cf3 'LED is: Blue'\cf1 );
\par \cf0       \b end\b0  \b else\b0  \b begin
\par \b0         cPort\cf1 .\cf0 WriteStr\cf1 (\cf3 'C'\cf1 );
\par \cf0         RespInfo\cf1 .\cf0 ContentText\cf1 :=\cf0 getHTMLContentString\cf1 (\cf3 'LED is: Blue OFF Switch'\cf1 )
\par \cf0       \b end
\par \b0      \b end\b0  \b else\b0  
\par     \b if\b0  uppercase\cf1 (\cf0 loccom\cf1 )=\cf0 uppercase\cf1 (\cf3 '/RGB'\cf1 )\cf0  \b then\b0  \b begin
\par \b0       webswitch\cf1 :=\cf0  \b NOT\b0  webswitch\cf1 ;
\par \cf0       \b if\b0  webswitch \b then\b0  \b begin
\par \b0         cPort\cf1 .\cf0 WriteStr\cf1 (\cf3 '1'\cf1 )
\par \cf0         cPort\cf1 .\cf0 WriteStr\cf1 (\cf3 '2'\cf1 )
\par \cf0         cPort\cf1 .\cf0 WriteStr\cf1 (\cf3 '3'\cf1 )
\par \cf0         RespInfo\cf1 .\cf0 ContentText\cf1 :=\cf0 getHTMLContentString\cf1 (\cf3 'LED is: RGB ON'\cf1 );
\par \cf0       \b end\b0  \b else\b0  \b begin
\par \b0         cPort\cf1 .\cf0 WriteStr\cf1 (\cf3 'A'\cf1 )
\par \cf0         cPort\cf1 .\cf0 WriteStr\cf1 (\cf3 'B'\cf1 )
\par \cf0         cPort\cf1 .\cf0 WriteStr\cf1 (\cf3 'C'\cf1 );
\par \cf0         RespInfo\cf1 .\cf0 ContentText\cf1 :=\cf0 getHTMLContentString\cf1 (\cf3 'LED is: RGB OFF'\cf1 )
\par \cf0       \b end
\par \b0      \b end\b0  
\par   \b else\b0  \b begin
\par \b0       RespInfo\cf1 .\cf0 ResponseNo\cf1 :=\cf0  \cf4 404\cf1 ;\cf0  \cf2\i //Not found round
\par \i0\cf0       RespInfo\cf1 .\cf0 ContentText\cf1 :=
\par \cf0         \cf3 '<html><head><title>Sorry WebBox3 Error</title></head><body><h1>'\cf0  \cf1 +
\par \cf0       RespInfo\cf1 .\cf0 ResponseText \cf1 +\cf0  \cf3 '</h1></body></html>'\cf1 ;
\par \cf0    \b end\b0\cf1 ;\cf0  
\par \b end\b0\cf1 ;
\par \cf0     
\par     
\par \b procedure\b0  HTTPServerStartExecute\cf1 (\cf0 Sender\cf1 :\cf0  TObject\cf1 );
\par \cf0\b begin
\par \b0   HTTPSrv\cf1 :=\cf0  TIdCustomHTTPServer\cf1 .\cf0 Create\cf1 (\cf0 self\cf1 )
\par \cf0   \b with\b0  HTTPSrv \b do\b0  \b begin
\par \b0     \b if\b0  Active \b then\b0  Free\cf1 ;
\par \cf0     \b if\b0  \b not\b0  Active \b then\b0  \b begin
\par \b0       Bindings\cf1 .\cf0 Clear\cf1 ;
\par \cf0       bindings\cf1 .\cf0 Add\cf1 ;
\par \cf0       bindings\cf1 .\cf0 items\cf1 [\cf4 0\cf1 ].\cf0 Port\cf1 :=\cf0  APORT\cf1 ;
\par \cf0       bindings\cf1 .\cf0 items\cf1 [\cf4 0\cf1 ].\cf0 IP\cf1 :=\cf0  GetHostIP\cf1 ;\cf0  \cf2\i //IPADDR; //'127.0.0.1';
\par \i0\cf0       Active\cf1 :=\cf0  true\cf1 ;
\par \cf0       onCommandGet\cf1 :=\cf0  \cf1 @\cf0 HTTPServerGet\cf1 ;
\par \cf0       PrintF\cf1 (\cf3 'Listening HTTP on %s:%d.'\cf1 ,[\cf0 Bindings\cf1 [\cf4 0\cf1 ].\cf0 IP\cf1 ,\cf0 Bindings\cf1 [\cf4 0\cf1 ].\cf0 Port\cf1 ]);
\par \cf0     \b end\b0\cf1 ;
\par \cf0       PrintF\cf1 (\cf3 'Server Started at %s '\cf1 ,[\cf0 DateTimeToInternetStr\cf1 (\cf0 Now\cf1 ,\cf0  true\cf1 )])
\par \cf0     \cf2\i //HTTPServer.Free; in close
\par \i0\cf0   \b end\b0\cf1 ;
\par \cf0\b end\b0\cf1 ;
\par 
\par \cf2\i //*******************************COM Port Arduino*****************************//
\par \i0\cf0  \b var
\par \b0   chk_led1\cf1 ,\cf0  chk_led2\cf1 ,\cf0  chk_led3\cf1 ,\cf0  chk_led4\cf1 :\cf0  TCheckBox\cf1 ;
\par \cf0   btn_connect\cf1 ,\cf0  btn_Setup\cf1 ,\cf0  btn_loopsos\cf1 :\cf0  TBitBtn\cf1 ;
\par \cf0   statBar\cf1 :\cf0  TStatusBar\cf1 ;
\par \cf0   comFrm\cf1 :\cf0  TForm\cf1 ;
\par \cf0  
\par \b procedure\b0  LED_Checker\cf1 (\cf0 ab\cf1 :\cf0  boolean\cf1 ;\cf0  checker\cf1 :\cf0  boolean\cf1 );
\par \cf0\b begin
\par \b0   \b if\b0  checker \b then\b0  \b begin
\par \b0     chk_led1\cf1 .\cf0 Checked\cf1 :=\cf0  ab\cf1 ;
\par \cf0     chk_led2\cf1 .\cf0 Checked\cf1 :=\cf0  ab\cf1 ;
\par \cf0     chk_led3\cf1 .\cf0 Checked\cf1 :=\cf0  ab\cf1 ;
\par \cf0     chk_led4\cf1 .\cf0 Checked\cf1 :=\cf0  ab\cf1 ;
\par \cf0   \b end\b0  \b else\b0  \b begin\b0   
\par     chk_led1\cf1 .\cf0 Enabled\cf1 :=\cf0  ab\cf1 ;
\par \cf0     chk_led2\cf1 .\cf0 Enabled\cf1 :=\cf0  ab\cf1 ;
\par \cf0     chk_led3\cf1 .\cf0 Enabled\cf1 :=\cf0  ab\cf1 ;
\par \cf0     chk_led4\cf1 .\cf0 Enabled\cf1 :=\cf0  ab\cf1 ;
\par \cf0   \b end\b0\cf1 ;
\par \cf0\b end\b0\cf1 ;\cf0   
\par 
\par \b procedure\b0  TForm1_connectClick\cf1 (\cf0 Sender\cf1 :\cf0  TObject\cf1 );
\par \cf0\b begin
\par \b0   \b if\b0  cPort\cf1 .\cf0 Connected \b then\b0  \b begin
\par \b0      btn_connect\cf1 .\cf0 Caption\cf1 :=\cf0  \cf3 'Connect'\cf1 ;\cf0   \cf2\i // Toggle caption of Connection Button !
\par \i0\cf0      btn_Setup\cf1 .\cf0 Enabled\cf1 :=\cf0  True\cf1 ;\cf0          \cf2\i // If not connected, lets enable Setup Button
\par \i0\cf0      btn_loopsos\cf1 .\cf0 Enabled\cf1 :=\cf0  false\cf1 ;
\par \cf0       \cf2\i // This block resets the state of all Leds to Off
\par \i0\cf0       \cf2\i // According to ArduinoC the Chars A,B,C,D,E are used to set DigitalPins(2-6) to LOW
\par \i0\cf0      \b with\b0  cPort \b do\b0  \b begin
\par \b0         WriteStr\cf1 (\cf3 'A'\cf1 );
\par \cf0         WriteStr\cf1 (\cf3 'B'\cf1 );
\par \cf0         WriteStr\cf1 (\cf3 'C'\cf1 );
\par \cf0         WriteStr\cf1 (\cf3 'D'\cf1 );
\par \cf0      \b end\b0\cf1 ;\cf0   
\par       LED_Checker\cf1 (\cf0 false\cf1 ,\cf0  true\cf1 );
\par \cf0       cPort\cf1 .\cf0 Close\cf1 ;\cf0               
\par       statBar\cf1 .\cf0 Panels\cf1 [\cf4 1\cf1 ].\cf0 Text\cf1 :=\cf3 'Disconnected'\cf1 ;\cf0   
\par       LED_Checker\cf1 (\cf0 false\cf1 ,\cf0  false\cf1 );\cf0  \cf2\i //enabler
\par \i0\cf0       statBar\cf1 .\cf0 Panels\cf1 [\cf4 0\cf1 ].\cf0 Text\cf1 :=\cf3 ' Port closed '\cf1 +\cf0  cPort\cf1 .\cf0 Port\cf1 ;
\par \cf0     \b end\b0  \b else\b0  \b begin
\par \b0       btn_connect\cf1 .\cf0 Caption\cf1 :=\cf3 'Disconnect'\cf1 ;\cf0    \cf2\i // Toggle the caption of Connection Button
\par \i0\cf0       btn_Setup\cf1 .\cf0 Enabled\cf1 :=\cf0 false\cf1 ;\cf0             \cf2\i // If not connected, lets disable Setup Button
\par \i0\cf0       btn_loopsos\cf1 .\cf0 Enabled\cf1 :=\cf0 true\cf1 ;\cf0            \cf2\i // Now Rider demo button is enabled
\par \i0\cf0       cPort\cf1 .\cf0 Open\cf1 ;\cf0                           \cf2\i // COM Port is finally opened
\par \i0\cf0       statBar\cf1 .\cf0 Panels\cf1 [\cf4 1\cf1 ].\cf0 Text\cf1 :=\cf3 'Connected and '\cf0   
\par                         \cf1 +\cf0 Format\cf1 (\cf3 'Listening on http %s:%d'\cf1 ,
\par \cf0                          \cf1 [\cf0 HTTPSrv\cf1 .\cf0 Bindings\cf1 [\cf4 0\cf1 ].\cf0 IP\cf1 ,\cf0 HTTPSrv\cf1 .\cf0 Bindings\cf1 [\cf4 0\cf1 ].\cf0 Port\cf1 ]);
\par \cf0       statBar\cf1 .\cf0 Panels\cf1 [\cf4 0\cf1 ].\cf0 Text\cf1 :=\cf0  \cf3 'Port in use '\cf1 +\cf0  cPort\cf1 .\cf0 Port\cf1 ;\cf0  
\par       \cf2\i // This block enables check boxes
\par \i0\cf0       \cf2\i // so a user can change them to set LED states when COM Port is connected
\par \i0\cf0       LED_Checker\cf1 (\cf0 true\cf1 ,\cf0  false\cf1 );
\par \cf0     \b end
\par end\b0\cf1 ;
\par 
\par \cf0\b procedure\b0  TForm1_SetupClick\cf1 (\cf0 Sender\cf1 :\cf0  TObject\cf1 );
\par \cf0\b begin
\par \b0   cPort\cf1 .\cf0 ShowSetupDialog\cf1 ;\cf0         \cf2\i //Opens predefined Setup Dialog (part of ComPort component)
\par \i0\cf0   statBar\cf1 .\cf0 Panels\cf1 [\cf4 0\cf1 ].\cf0 Text\cf1 :=\cf3 'Port in use '\cf0  \cf1 +\cf0  cPort\cf1 .\cf0 Port\cf1 ;\cf0   
\par \b end\b0\cf1 ;
\par 
\par \cf2\i // Next are procedures to turning ON and OFF each led using the variables
\par // Ports are turned ON by sending it corresponding var 1,2,3,4,5
\par // and they are turned OFF by sending it corresponding var A,B,C,D,E
\par 
\par \i0\cf0\b procedure\b0  chk_led1Click\cf1 (\cf0 Sender\cf1 :\cf0  TObject\cf1 );
\par \cf0\b var\b0  strback\cf1 :\cf0  \b string\b0\cf1 ;
\par \cf0\b begin
\par \b0   \b if\b0  chk_led1\cf1 .\cf0 Checked\cf1 =\cf0 true \b then
\par \b0     cPort\cf1 .\cf0 WriteStr\cf1 (\cf3 '1'\cf1 )
\par \cf0   \b else
\par \b0     cPort\cf1 .\cf0 WriteStr\cf1 (\cf3 'A'\cf1 );
\par \cf0   \b if\b0  cPort\cf1 .\cf0 ReadStr\cf1 (\cf0 strback\cf1 ,\cf4 1\cf1 )\cf0  \cf1 >\cf0  \cf4 0\cf0  \b then
\par \b0     writeln\cf1 (\cf3 'debug: com back led 1 signal '\cf0  \cf1 +\cf0 strback\cf1 );
\par \cf0\b end\b0\cf1 ;
\par 
\par \cf0\b procedure\b0  chk_led2Click\cf1 (\cf0 Sender\cf1 :\cf0  TObject\cf1 );
\par \cf0\b begin
\par \b0   \b if\b0  chk_led2\cf1 .\cf0 Checked\cf1 =\cf0 true \b then
\par \b0     cPort\cf1 .\cf0 WriteStr\cf1 (\cf3 '2'\cf1 )
\par \cf0   \b else\b0  cPort\cf1 .\cf0 WriteStr\cf1 (\cf3 'B'\cf1 );
\par \cf0\b end\b0\cf1 ;
\par 
\par \cf0\b procedure\b0  chk_led3Click\cf1 (\cf0 Sender\cf1 :\cf0  TObject\cf1 );
\par \cf0\b begin
\par \b0   \b if\b0  chk_led3\cf1 .\cf0 Checked\cf1 =\cf0 true \b then
\par \b0     cPort\cf1 .\cf0 WriteStr\cf1 (\cf3 '3'\cf1 )
\par \cf0   \b else\b0  cPort\cf1 .\cf0 WriteStr\cf1 (\cf3 'C'\cf1 )
\par \cf0\b end\b0\cf1 ;
\par 
\par \cf2\i //special piezo sound
\par \i0\cf0\b procedure\b0  chk_led4Click\cf1 (\cf0 Sender\cf1 :\cf0  TObject\cf1 );\cf0   
\par \b var\b0  i\cf1 :\cf0  integer\cf1 ;
\par \cf0\b begin
\par \b0   \b if\b0  chk_led4\cf1 .\cf0 Checked\cf1 =\cf0 true \b then
\par \b0     \b for\b0  i\cf1 :=\cf0  \cf4 1\cf0  \b to\b0  \cf4 200\cf0  \b do\b0  \b begin\b0  
\par       cPort\cf1 .\cf0 WriteStr\cf1 (\cf3 '4'\cf1 )
\par \cf0       sleep\cf1 (\cf0 random\cf1 (\cf4 5\cf1 ))\cf0            
\par       cPort\cf1 .\cf0 WriteStr\cf1 (\cf3 'D'\cf1 )
\par \cf0       sleep\cf1 (\cf4 2\cf1 )\cf0            
\par     \b end
\par \b0   \b else\b0  cPort\cf1 .\cf0 WriteStr\cf1 (\cf3 'D'\cf1 )
\par \cf0\b end\b0\cf1 ;
\par 
\par 
\par \cf2\i //**************** map of digitalWrite()************************
\par \i0\cf0  \b Const\b0  AHIGH \cf1 =\cf0  \cf4 1\cf1 ;\cf0  ALOW \cf1 =\cf0  \cf4 0\cf1 ;
\par \cf0  \b type\b0  cEnum \cf1 =(\cf0 red\cf1 ,\cf0  green\cf1 ,\cf0  blue\cf1 );
\par 
\par \cf0\b procedure\b0  digitalWrite\cf1 (\cf0 enum\cf1 :\cf0  cEnum\cf1 ;\cf0  level\cf1 :\cf0  byte\cf1 );
\par \cf0\b begin
\par \b0   \b case\b0  enum \b of
\par \b0     red\cf1 :\cf0  \b if\b0  level\cf1 =\cf4 1\cf0  \b then\b0  
\par            cport\cf1 .\cf0 WriteStr\cf1 (\cf3 '1'\cf1 )\cf0         \cf2\i //ON
\par \i0\cf0            \b else\b0  cport\cf1 .\cf0 WriteStr\cf1 (\cf3 'A'\cf1 );\cf0   \cf2\i //OFF
\par \i0\cf0     green\cf1 :\cf0  \b if\b0  level\cf1 =\cf4 1\cf0  \b then
\par \b0              cport\cf1 .\cf0 WriteStr\cf1 (\cf3 '2'\cf1 )
\par \cf0              \b else\b0  cport\cf1 .\cf0 WriteStr\cf1 (\cf3 'B'\cf1 );
\par \cf0     blue\cf1 :\cf0  \b if\b0  level\cf1 =\cf4 1\cf0  \b then\b0  
\par             cport\cf1 .\cf0 WriteStr\cf1 (\cf3 '3'\cf1 )
\par \cf0             \b else\b0  cport\cf1 .\cf0 WriteStr\cf1 (\cf3 'C'\cf1 );
\par \cf0   \b end\b0\cf1 ;
\par \cf0\b end\b0\cf1 ;\cf0     
\par 
\par \b procedure\b0  TForm1_Rainbowloop\cf1 (\cf0 Sender\cf1 :\cf0  TObject\cf1 );
\par \cf0\b var\b0  mtime\cf1 ,\cf0  multiple\cf1 :\cf0  integer\cf1 ;
\par \cf0\b begin
\par \b0    LED_Checker\cf1 (\cf0 false\cf1 ,\cf0  true\cf1 );
\par \cf0   \cf2\i \{Color Spectrum from Red to White code (r,y,g,c,b,m,w...\}
\par \i0\cf0    mtime\cf1 :=\cf0  \cf4 500\cf1 ;\cf0  \cf2\i //1000; 
\par \i0\cf0    multiple\cf1 :=\cf0  \cf4 2\cf1 ;\cf0   
\par    statBar\cf1 .\cf0 Panels\cf1 [\cf4 1\cf1 ].\cf0 Text\cf1 :=\cf3 'Rainbow - Click LED4 checkbox to end the loop!'\cf1 ;\cf0   
\par    \b try
\par \b0      \b with\b0  cPort \b do\b0  \b begin\b0    \cf2\i //using
\par \i0\cf0        \b repeat\b0        
\par         \cf2\i //WriteStr('1'); Sleep(mtime);
\par \i0\cf0          digitalWrite\cf1 (\cf0 red\cf1 ,\cf0  AHIGH\cf1 );\cf0     \cf2\i // red 
\par \i0\cf0          delay\cf1 (\cf0 mtime\cf1 );\cf0                      
\par          digitalWrite\cf1 (\cf0 green\cf1 ,\cf0  AHIGH\cf1 );\cf0   \cf2\i // yellow
\par \i0\cf0          delay\cf1 (\cf0 mtime\cf1 );
\par \cf0          digitalWrite\cf1 (\cf0 red\cf1 ,\cf0  ALOW\cf1 );\cf0      \cf2\i // green 
\par \i0\cf0          delay\cf1 (\cf0 mtime\cf1 );
\par \cf0          digitalWrite\cf1 (\cf0 blue\cf1 ,\cf0  AHIGH\cf1 );\cf0    \cf2\i // cyan
\par \i0\cf0          delay\cf1 (\cf0 mtime\cf1 );
\par \cf0          digitalWrite\cf1 (\cf0 green\cf1 ,\cf0  ALOW\cf1 );\cf0    \cf2\i // blue
\par \i0\cf0          delay\cf1 (\cf0 mtime\cf1 );
\par \cf0          digitalWrite\cf1 (\cf0 red\cf1 ,\cf0  AHIGH\cf1 );\cf0     \cf2\i // magenta 
\par \i0\cf0          delay\cf1 (\cf0 mtime\cf1 );
\par \cf0          digitalWrite\cf1 (\cf0 green\cf1 ,\cf0  AHIGH\cf1 );\cf0   \cf2\i // white 
\par \i0\cf0          mtime\cf1 :=\cf0  mtime \cf1 *\cf0  multiple\cf1 ;
\par \cf0          delay\cf1 (\cf0 mtime\cf1 );
\par \cf0          digitalWrite\cf1 (\cf0 blue\cf1 ,\cf0  ALOW\cf1 );\cf0     \cf2\i // reset
\par \i0\cf0          digitalWrite\cf1 (\cf0 green\cf1 ,\cf0  ALOW\cf1 );
\par \cf0          digitalWrite\cf1 (\cf0 red\cf1 ,\cf0  ALOW\cf1 );
\par \cf0          mtime\cf1 :=\cf0  mtime \b div\b0  multiple\cf1 ;\cf0   \cf2\i //time/=multiple;  
\par \i0\cf0        \b until\b0  chk_led4\cf1 .\cf0 Checked\cf1 =\cf0 true\cf1 ;
\par \cf0        chk_led4\cf1 .\cf0 Checked\cf1 :=\cf0  false\cf1 ;
\par \cf0      \b end\b0\cf1 ;
\par \cf0    \b except
\par \b0       Showmessage\cf1 (\cf0 R_EXCEPTMESS\cf1 );\cf0  
\par    \b end\b0\cf1 ;\cf0     
\par \b end\b0\cf1 ;
\par 
\par \cf0\b procedure\b0  TForm1_FormClose\cf1 (\cf0 Sender\cf1 :\cf0  TObject\cf1 ;\cf0  \b var\b0  Action\cf1 :\cf0  TCloseAction\cf1 );
\par \cf0\b begin
\par \b0   \b if\b0  cPort\cf1 .\cf0 Connected \b then\b0  \b begin
\par \b0     cPort\cf1 .\cf0 WriteStr\cf1 (\cf3 'A'\cf1 );\cf0      \cf2\i // If the application is closed, its good to leave
\par \i0\cf0     cPort\cf1 .\cf0 WriteStr\cf1 (\cf3 'B'\cf1 );\cf0      \cf2\i // everything as we found it at start.
\par \i0\cf0     cPort\cf1 .\cf0 WriteStr\cf1 (\cf3 'C'\cf1 );\cf0      \cf2\i // So we reset all the leds to OFF
\par \i0\cf0     cPort\cf1 .\cf0 WriteStr\cf1 (\cf3 'D'\cf1 );
\par \cf0     cPort\cf1 .\cf0 Close\cf1 ;
\par \cf0   \b end\b0\cf1 ;
\par \cf0   HTTPSrv\cf1 .\cf0 Free\cf1 ;
\par \cf0   Writeln\cf1 (\cf3 'Server Stopped at '\cf1 +\cf0 DateTimeToInternetStr\cf1 (\cf0 Now\cf1 ,\cf0  true\cf1 ))
\par \cf0\b end\b0\cf1 ;
\par 
\par \cf0\b Procedure\b0  LabelFactory\cf1 (\cf0 a\cf1 ,\cf0 b\cf1 ,\cf0 c\cf1 ,\cf0 d\cf1 :\cf0  byte\cf1 ;\cf0  title\cf1 :\cf0  \b shortstring\b0\cf1 );
\par \cf0\b begin
\par \b0   \b with\b0  TLabel\cf1 .\cf0 create\cf1 (\cf0 self\cf1 )\cf0  \b do\b0  \b begin
\par \b0     parent\cf1 :=\cf0  comfrm\cf1 ;
\par \cf0     SetBounds\cf1 (\cf0 a\cf1 ,\cf0 b\cf1 ,\cf0 c\cf1 ,\cf0 d\cf1 );
\par \cf0     Caption\cf1 :=\cf0  title
\par   \b end\b0\cf1 ;
\par \cf0\b end\b0\cf1 ;
\par 
\par \cf0\b Procedure\b0  CheckBoxFactory\cf1 (\cf0 a\cf1 ,\cf0 b\cf1 ,\cf0 c\cf1 ,\cf0 d\cf1 :\cf0  byte\cf1 ;\cf0  title\cf1 :\cf0  \b shortstring\b0\cf1 ;
\par \cf0                           abox\cf1 :\cf0  TCheckbox\cf1 ;\cf0  anevent\cf1 :\cf0  TNotifyEvent\cf1 );
\par \cf0\b begin
\par \b0   \b with\b0  abox \b do\b0  \b begin
\par \b0     parent\cf1 :=\cf0  comfrm\cf1 ;
\par \cf0     SetBounds\cf1 (\cf0 a\cf1 ,\cf0 b\cf1 ,\cf0 c\cf1 ,\cf0 d\cf1 )
\par \cf0     Caption\cf1 :=\cf0  title\cf1 ;
\par \cf0     Enabled\cf1 :=\cf0  False\cf1 ;
\par \cf0   \b end\b0\cf1 ;
\par \cf0\b end\b0\cf1 ;
\par 
\par \cf0\b Procedure\b0  BtnFactory\cf1 (\cf0 a\cf1 ,\cf0 b\cf1 ,\cf0 c\cf1 ,\cf0 d\cf1 :\cf0  smallint\cf1 ;\cf0  title\cf1 :\cf0  \b shortstring\b0\cf1 ;\cf0  apic\cf1 :\cf0  \b shortstring\b0\cf1 ;
\par \cf0                           abtn\cf1 :\cf0  TBitBtn\cf1 ;\cf0  anevent\cf1 :\cf0  TNotifyEvent\cf1 );
\par \cf0\b begin
\par \b0  \b with\b0  abtn \b do\b0  \b begin
\par \b0    parent\cf1 :=\cf0  comfrm\cf1 ;
\par \cf0    setBounds\cf1 (\cf0 a\cf1 ,\cf0 b\cf1 ,\cf0 c\cf1 ,\cf0 d\cf1 )
\par \cf0    font\cf1 .\cf0 size\cf1 :=\cf0  \cf4 12\cf1 ;
\par \cf0    glyph\cf1 .\cf0 LoadFromResourceName\cf1 (\cf0 HINSTANCE\cf1 ,\cf0  apic\cf1 );\cf0  
\par    mXButton\cf1 (\cf4 05\cf1 ,\cf4 05\cf1 ,\cf0 width\cf1 ,\cf0  height\cf1 ,\cf4 12\cf1 ,\cf4 12\cf1 ,\cf0 handle\cf1 );
\par \cf0    caption\cf1 :=\cf0  title\cf1 ;
\par \cf0    \cf2\i //onClick:= anevent;
\par \i0\cf0  \b end\b0\cf1 ;
\par \cf0\b end\b0\cf1 ;\cf0  
\par 
\par \b procedure\b0  ACreateComPort\cf1 (\cf0 Sender\cf1 :\cf0  TObject\cf1 );
\par \cf0\b begin
\par \b0   cPort\cf1 :=\cf0  TComPort\cf1 .\cf0 Create\cf1 (\cf0 self\cf1 );
\par \cf0   \b with\b0  cPort \b do\b0  \b begin
\par \b0     BaudRate\cf1 :=\cf0  br9600\cf1 ;
\par \cf0     Port\cf1 :=\cf0  COMPORT\cf1 ;\cf0  \cf2\i //'COM5';
\par \i0\cf0     Parity\cf1 .\cf0 Bits\cf1 :=\cf0  prNone\cf1 ;
\par \cf0     StopBits\cf1 :=\cf0  sbOneStopBit\cf1 ;
\par \cf0     DataBits\cf1 :=\cf0  dbEight\cf1 ;
\par \cf0    \cf2\i \{FlowControl.OutCTSFlow:= False;
\par     FlowControl.OutDSRFlow:= False;
\par     FlowControl.XonXoffOut:= False;
\par     FlowControl.XonXoffIn:= False;\}
\par \i0\cf0   \b end\b0\cf1 ;
\par \cf0   statBar\cf1 .\cf0 Panels\cf1 [\cf4 0\cf1 ].\cf0 Text\cf1 :=\cf3 'Pre Port in use '\cf1 +\cf0  cPort\cf1 .\cf0 Port\cf1 ;\cf0  \cf2\i //predefined Port at start
\par \i0\cf0   \b if\b0  cPort\cf1 .\cf0 Connected\cf1 =\cf0 true \b then\b0  \b begin
\par \b0     statBar\cf1 .\cf0 Panels\cf1 [\cf4 1\cf1 ].\cf0 Text\cf1 :=\cf3 'Connected'\cf0    
\par     statBar\cf1 .\cf0 Panels\cf1 [\cf4 0\cf1 ].\cf0 Text\cf1 :=\cf3 ' Port in use '\cf1 +\cf0  cPort\cf1 .\cf0 Port\cf1 ;\cf0       
\par   \b end\b0  \b else\b0  \b begin
\par \b0     statBar\cf1 .\cf0 Panels\cf1 [\cf4 1\cf1 ].\cf0 Text\cf1 :=\cf3 'Disconnected'
\par \cf0     statBar\cf1 .\cf0 Panels\cf1 [\cf4 0\cf1 ].\cf0 Text\cf1 :=\cf3 ' Port closed '\cf1 +\cf0  cPort\cf1 .\cf0 Port\cf1 ;
\par \cf0   \b end\b0\cf1 ;\cf0         
\par \b end\b0\cf1 ;
\par 
\par \cf0    
\par \cf2\i //******************************* Form Build********************************
\par \i0\cf0\b procedure\b0  AInitComPortForm\cf1 ;
\par \cf0\b var\b0  img\cf1 :\cf0  TImage\cf1 ;
\par \cf0\b begin
\par \b0  comFrm\cf1 :=\cf0  TForm\cf1 .\cf0 create\cf1 (\cf0 self\cf1 );
\par \cf0  img\cf1 :=\cf0  TImage\cf1 .\cf0 Create\cf1 (\cf0 comFrm\cf1 );
\par \cf0  \b with\b0  img \b do\b0  \b begin
\par \b0    parent\cf1 :=\cf0  comFrm\cf1 ;
\par \cf0    setbounds\cf1 (\cf4 250\cf1 ,\cf4 100\cf1 ,\cf4 400\cf1 ,\cf4 300\cf1 )
\par \cf0  \b end\b0\cf1 ;
\par \cf0  \b with\b0  comFrm \b do\b0  \b begin
\par \b0    FormStyle\cf1 :=\cf0  fsStayOnTop\cf1 ;
\par \cf0    Position\cf1 :=\cf0  poScreenCenter\cf1 ;
\par \cf0    caption\cf1 :=\cf3 'COM & Arduino RGB LED'\cf1 ;
\par \cf0    width\cf1 :=\cf0  \cf4 700\cf1 ;\cf0  height\cf1 :=\cf0  \cf4 570\cf1 ;
\par \cf0    \cf2\i //onCreate:= @TForm1_FormCreate;        
\par \i0\cf0    onClose\cf1 :=\cf0  \cf1 @\cf0 TForm1_FormClose\cf1 ;
\par \cf0    Show\cf1 ;
\par \cf0    img\cf1 .\cf0 Canvas\cf1 .\cf0 brush\cf1 .\cf0 bitmap\cf1 :=\cf0  getBitmapObject\cf1 (\cf0 Exepath\cf1 +\cf0 BACKMAP\cf1 );
\par \cf0    img\cf1 .\cf0 Canvas\cf1 .\cf0 FillRect\cf1 (\cf0 Rect\cf1 (\cf4 420\cf1 ,\cf4 300\cf1 ,\cf4 0\cf1 ,\cf4 0\cf1 ))
\par \cf0  \b end\b0\cf1 ;
\par 
\par \cf0  btn_Setup\cf1 :=\cf0 TBitBtn\cf1 .\cf0 create\cf1 (\cf0 comfrm\cf1 );\cf0    \cf2\i //Constructors
\par \i0\cf0  btn_connect\cf1 :=\cf0 TBitBtn\cf1 .\cf0 create\cf1 (\cf0 comfrm\cf1 );
\par \cf0  btn_loopsos\cf1 :=\cf0 TBitBtn\cf1 .\cf0 create\cf1 (\cf0 comfrm\cf1 );
\par \cf0  btn_loopsos\cf1 .\cf0 Enabled\cf1 :=\cf0 false\cf1 ;\cf0           
\par  btn_Setup\cf1 .\cf0 onClick\cf1 :=\cf0  \cf1 @\cf0 TForm1_SetupClick\cf1 ;
\par \cf0  BtnFactory\cf1 (\cf4 20\cf1 ,\cf4 440\cf1 ,\cf4 150\cf1 ,\cf4 55\cf1 ,\cf0  \cf3 '&COM Settings'\cf1 ,\cf3 'LEDbulbon'\cf1 ,\cf0 btn_Setup\cf1 ,\cf0  \b NIL\b0\cf1 );
\par \cf0  btn_connect\cf1 .\cf0 onClick\cf1 :=\cf0  \cf1 @\cf0 TForm1_connectClick\cf1 ;
\par \cf0  BtnFactory\cf1 (\cf4 180\cf1 ,\cf4 440\cf1 ,\cf4 150\cf1 ,\cf4 55\cf1 ,\cf0  \cf3 'C&onnect Node'\cf1 ,\cf3 'CL_MPNEXT'\cf1 ,\cf0 btn_connect\cf1 ,\cf0  \b NIL\b0\cf1 );
\par \cf0  btn_loopsos\cf1 .\cf0 onClick\cf1 :=\cf0  \cf1 @\cf0 TForm1_Rainbowloop\cf1 ;
\par \cf0  BtnFactory\cf1 (\cf4 500\cf1 ,\cf4 440\cf1 ,\cf4 150\cf1 ,\cf4 55\cf1 ,\cf0  \cf3 '&Rainbow Rising'\cf1 ,\cf3 'CL_MPRECORD'\cf1 ,\cf0 btn_loopsos\cf1 ,\cf0  \b NIL\b0\cf1 );
\par 
\par \cf0   chk_led1\cf1 :=\cf0  TCheckBox\cf1 .\cf0 create\cf1 (\cf0 self\cf1 )
\par \cf0   chk_led1\cf1 .\cf0 OnClick\cf1 :=\cf0  \cf1 @\cf0 chk_led1Click\cf1 ;
\par \cf0   CheckBoxFactory\cf1 (\cf4 16\cf1 ,\cf4 42\cf1 ,\cf4 57\cf1 ,\cf4 17\cf1 ,\cf0  \cf3 'Led 1'\cf1 ,\cf0 chk_led1\cf1 ,\cf0\b NIL\b0\cf1 );
\par \cf0   chk_led2\cf1 :=\cf0  TCheckBox\cf1 .\cf0 create\cf1 (\cf0 self\cf1 )
\par \cf0   chk_led2\cf1 .\cf0 OnClick\cf1 :=\cf0  \cf1 @\cf0 chk_led2Click\cf1 ;
\par \cf0   CheckBoxFactory\cf1 (\cf4 16\cf1 ,\cf4 66\cf1 ,\cf4 57\cf1 ,\cf4 17\cf1 ,\cf0  \cf3 'Led 2'\cf1 ,\cf0 chk_led2\cf1 ,\cf0\b NIL\b0\cf1 );
\par \cf0   chk_led3\cf1 :=\cf0  TCheckBox\cf1 .\cf0 create\cf1 (\cf0 self\cf1 )
\par \cf0   chk_led3\cf1 .\cf0 OnClick\cf1 :=\cf0  \cf1 @\cf0 chk_led3Click\cf1 ;
\par \cf0   CheckBoxFactory\cf1 (\cf4 16\cf1 ,\cf4 90\cf1 ,\cf4 57\cf1 ,\cf4 17\cf1 ,\cf0  \cf3 'Led 3'\cf1 ,\cf0 chk_led3\cf1 ,\cf0\b NIL\b0\cf1 );
\par \cf0   chk_led4\cf1 :=\cf0  TCheckBox\cf1 .\cf0 create\cf1 (\cf0 self\cf1 )
\par \cf0   chk_led4\cf1 .\cf0 OnClick\cf1 :=\cf0  \cf1 @\cf0 chk_led4Click\cf1 ;
\par \cf0   CheckBoxFactory\cf1 (\cf4 16\cf1 ,\cf4 114\cf1 ,\cf4 57\cf1 ,\cf4 17\cf1 ,\cf0  \cf3 'Led 4'\cf1 ,\cf0 chk_led4\cf1 ,\cf0\b NIL\b0\cf1 );
\par 
\par \cf0   \b with\b0  TLabel\cf1 .\cf0 create\cf1 (\cf0 self\cf1 )\cf0  \b do\b0  \b begin
\par \b0     parent\cf1 :=\cf0  comfrm\cf1 ;
\par \cf0     setBounds\cf1 (\cf4 16\cf1 ,\cf4 12\cf1 ,\cf4 69\cf1 ,\cf4 13\cf1 )
\par \cf0     Caption\cf1 :=\cf0  \cf3 'LED Control'\cf1 ;
\par \cf0     Font\cf1 .\cf0 Color\cf1 :=\cf0  clMaroon\cf1 ;
\par \cf0     Font\cf1 .\cf0 Size\cf1 :=\cf0  \cf4 14\cf1 ;
\par \cf0   \b end\b0\cf1 ;
\par \cf0   \b with\b0  TLabel\cf1 .\cf0 create\cf1 (\cf0 self\cf1 )\cf0  \b do\b0  \b begin
\par \b0     parent\cf1 :=\cf0  comfrm\cf1 ;
\par \cf0     setBounds\cf1 (\cf4 155\cf1 ,\cf4 12\cf1 ,\cf4 69\cf1 ,\cf4 13\cf1 )
\par \cf0     Caption\cf1 :=\cf0  \cf3 'Arduino PIN'\cf1 ;
\par \cf0     Font\cf1 .\cf0 Color\cf1 :=\cf0  clNavy\cf1 ;
\par \cf0     Font\cf1 .\cf0 Size\cf1 :=\cf0  \cf4 14\cf1 ;
\par \cf0   \b end\b0\cf1 ;
\par \cf0   LabelFactory\cf1 (\cf4 80\cf1 ,\cf4 42\cf1 ,\cf4 39\cf1 ,\cf4 13\cf1 ,\cf0  SIG\cf1 )
\par \cf0   LabelFactory\cf1 (\cf4 80\cf1 ,\cf4 66\cf1 ,\cf4 39\cf1 ,\cf4 13\cf1 ,\cf0  SIG\cf1 )
\par \cf0   LabelFactory\cf1 (\cf4 80\cf1 ,\cf4 90\cf1 ,\cf4 39\cf1 ,\cf4 13\cf1 ,\cf0  SIG\cf1 )
\par \cf0   LabelFactory\cf1 (\cf4 80\cf1 ,\cf4 114\cf1 ,\cf4 39\cf1 ,\cf4 13\cf1 ,\cf0  SIG\cf1 )
\par \cf0   LabelFactory\cf1 (\cf4 156\cf1 ,\cf4 42\cf1 ,\cf4 38\cf1 ,\cf4 13\cf1 ,\cf0  \cf3 'Dig 11 Red'\cf1 )
\par \cf0   LabelFactory\cf1 (\cf4 156\cf1 ,\cf4 66\cf1 ,\cf4 38\cf1 ,\cf4 13\cf1 ,\cf0  \cf3 'Dig 12 Green'\cf1 )
\par \cf0   LabelFactory\cf1 (\cf4 156\cf1 ,\cf4 90\cf1 ,\cf4 38\cf1 ,\cf4 13\cf1 ,\cf0  \cf3 'Dig 13 Int Blue'\cf1 )
\par \cf0   LabelFactory\cf1 (\cf4 156\cf1 ,\cf4 114\cf1 ,\cf4 38\cf1 ,\cf4 13\cf1 ,\cf0  \cf3 'Dig 6 Extra'\cf1 )
\par \cf0  
\par   \b with\b0  TDateTimePicker\cf1 .\cf0 Create\cf1 (\cf0 self\cf1 )\cf0  \b do\b0  \b begin
\par \b0     parent\cf1 :=\cf0  comfrm\cf1 ;
\par \cf0     Date\cf1 ;
\par \cf0     top\cf1 :=\cf0  \cf4 190\cf1 ;\cf0  left\cf1 :=\cf0  \cf4 15\cf1 ;
\par \cf0     calAlignment\cf1 :=\cf0  albottom\cf1 ;
\par \cf0   \b end\b0\cf1 ;
\par \cf0   statBar\cf1 :=\cf0  TStatusBar\cf1 .\cf0 create\cf1 (\cf0 self\cf1 );
\par \cf0   \b with\b0  statBar \b do\b0  \b begin
\par \b0     parent\cf1 :=\cf0  comFrm\cf1 ;
\par \cf0     Panels\cf1 .\cf0 add\cf1 ;
\par \cf0     panels\cf1 .\cf0 items\cf1 [\cf4 0\cf1 ].\cf0 width\cf1 :=\cf0  \cf4 200\cf1 ;
\par \cf0     Panels\cf1 .\cf0 add\cf1 ;
\par \cf0     panels\cf1 .\cf0 items\cf1 [\cf4 1\cf1 ].\cf0 width\cf1 :=\cf0  \cf4 150\cf1 ;
\par \cf0   \b end\b0\cf1 ;
\par \cf0   \cf2\i //TForm1_FormCreateCom(self); 
\par \i0\cf0\b end\b0\cf1 ;\cf0   \cf2\i //***********************End Form Build************************
\par 
\par 
\par \i0\cf0\b function\b0  CheckComPort\cf1 :\cf0  boolean\cf1 ;
\par \cf0\b var\b0  ComPorts\cf1 :\cf0  TStringlist\cf1 ;
\par \cf0\b begin
\par \b0   result\cf1 :=\cf0  false\cf1 ;
\par \cf0   ComPorts\cf1 :=\cf0  TStringlist\cf1 .\cf0 Create\cf1 ;
\par \cf0   \b try
\par \b0     EnumComPorts\cf1 (\cf0 ComPorts\cf1 );
\par \cf0     PrintF\cf1 (\cf3 'COM Port Check of Arduino %d COM: '\cf1 ,[\cf0 ComPorts\cf1 [\cf4 0\cf1 ]]);\cf0   
\par   \b except
\par \b0     PrintF\cf1 (\cf3 'No COM Ports'\cf1 ,[]);
\par \cf0   \b end\b0\cf1 ;\cf0     
\par   ComPorts\cf1 .\cf0 Free\cf1 ;
\par \cf0   result\cf1 :=\cf0  true\cf1 ;
\par \cf0\b end\b0\cf1 ;\cf0   
\par 
\par 
\par \b Begin\b0  \cf2\i //Main Server App 
\par \i0\cf0    writeln\cf1 (\cf3 'machine IP: '\cf1 +\cf0 GetIpAddress\cf1 (\cf0 getHostName\cf1 ))
\par \cf0    writeln\cf1 (\cf3 'Thread ID :'\cf1 +\cf0 intToStr\cf1 (\cf0 CurrentThreadID\cf1 ))
\par \cf0    writeln\cf1 (\cf3 'Process ID :'\cf1 +\cf0 intToStr\cf1 (\cf0 CurrentProcessID\cf1 ))
\par \cf0    writeln\cf1 (\cf3 'Machine name is: '\cf1 +\cf0 getHostName\cf1 )
\par \cf0    writeln\cf1 (\cf3 'User name is: '\cf1 +\cf0 getUserName\cf1 )
\par 
\par \cf0    \b if\b0  \b Not\b0  IsTCPPortOpen\cf1 (\cf0 APORT\cf1 ,\cf0 getHostIP\cf1 )\cf0  \b then\b0   \cf2\i //firewall?
\par \i0\cf0      HTTPServerStartExecute\cf1 (\cf0 self\cf1 );
\par 
\par \cf0    CheckComPort 
\par    AInitComPortForm\cf1 ;\cf0  
\par    ACreateComPort\cf1 (\cf0 self\cf1 );\cf0  
\par    AOpenBrowser\cf1 ;
\par \cf0   \cf2\i //GetTimeZoneInformation
\par \i0\cf0\b End\b0\cf1 .
\par 
\par 
\par \cf0\b def\b0  Docu \b and\b0  \b Arduino\b0  Code below tested \b with\b0  \b Android\b0  seekBar \b and\b0  Chrome
\par \cf2\i //***********************************Web Code Snippets******************
\par \i0\cf0  \cf2\i (*procedure AccessDenied;
\par   begin
\par     ResponseInfo.ContentText:=
\par       '<html><head><title>Error</title></head><body><h1>Access denied</h1>'#13 +
\par       'You do not have sufficient priviligies to access this document.</body></html>';
\par     ResponseInfo.ResponseNo:= 403;
\par   end;*)
\par \i0\cf0   
\par    \cf2\i (*procedure AuthFailed;
\par      begin
\par       ResponseInfo.ContentText:=
\par       '<html><head><title>Error</title></head><body><h1>Authentication failed</h1>'#13 +
\par       'Check the file ip_a.ini to discover the demo password:<br><ul><li>Search for '#13 +
\par       '<b>AuthUsername</b> in <b>maXboxMain.pas</b>!</ul></body></html>';
\par     ResponseInfo.AuthRealm:= CAUTHENTICATIONREALM; *)
\par 
\par \i0\cf0     \cf2\i (*if not HTTPServer.Active then begin
\par     HTTPServer.Bindings.Clear;
\par     Binding := HTTPServer.Bindings.Add;
\par     Binding.Port := StrToIntDef(edPort.text, 80);
\par     Binding.IP := '127.0.0.1';
\par   end;*)
\par \i0\cf0     \cf2\i //statusbar1.SimpleText:= 'http active on v1.9';
\par \i0\cf0      \cf2\i //+ [IdServerInterceptOpenSSL.SSLOptions.Method]
\par \i0\cf0     \cf2\i //DisplayMessage(Format('OpenSSLVersion is: %s', [getOpenSSLVersion]))
\par \i0\cf0      
\par  \b procedure\b0  TfrmServer\cf1 .\cf0 pgpEHTMLHTMLTag\cf1 (\cf0 Sender\cf1 :\cf0  TObject\cf1 ;\cf0  Tag\cf1 :\cf0  TTag\cf1 ;
\par \cf0   \b const\b0  TagString\cf1 :\cf0  \b string\b0\cf1 ;\cf0  TagParams\cf1 :\cf0  TStrings\cf1 ;\cf0  \b var\b0  ReplaceText\cf1 :\cf0  \b string\b0\cf1 );
\par \cf0\b var
\par \b0   LTag\cf1 :\cf0  \b string\b0\cf1 ;
\par \cf0\b begin
\par \b0   LTag \cf1 :=\cf0  LowerCase\cf1 (\cf0 TagString\cf1 );
\par \cf0   \b if\b0  LTag \cf1 =\cf0  \cf3 'date'\cf0  \b then
\par \b0     ReplaceText \cf1 :=\cf0  DateToStr\cf1 (\cf0 Now\cf1 )
\par \cf0   \b else\b0  \b if\b0  LTag \cf1 =\cf0  \cf3 'time'\cf0  \b then
\par \b0     ReplaceText \cf1 :=\cf0  TimeToStr\cf1 (\cf0 Now\cf1 )
\par \cf0   \b else\b0  \b if\b0  LTag \cf1 =\cf0  \cf3 'datetime'\cf0  \b then
\par \b0     ReplaceText \cf1 :=\cf0  DateTimeToStr\cf1 (\cf0 Now\cf1 )
\par \cf0   \b else\b0  \b if\b0  LTag \cf1 =\cf0  \cf3 'server'\cf0  \b then
\par \b0     ReplaceText \cf1 :=\cf0  httpServer\cf1 .\cf0 ServerSoftware\cf1 ;
\par \cf0\b end\b0\cf1 ;
\par 
\par \cf0 Port \b Not\b0  Open\cf1 .\cf0 Fault \cf1 :\cf0  Port \b Not\b0  Open\cf1 .\cf0  Date\cf1 /\cf0 time \cf1 :\cf0  \cf6 30.09.2012\cf0  \cf4 17\cf1 :\cf4 53\cf1 :\cf4 52\cf0  Stack dump \cf1 ----------\cf0  \cf4 0055632\cf0 D \cf4 00556\cf0 DB4 \cf6 00556E\cf0 FF \cf4 00556\cf0 F71 \cf6 0010E\cf0 A73 \cf4 0010\cf0 FA01 \cf4 0001\cf0 A20A \cf4 00103\cf0 D2F \cf4 000024\cf0 DA \cf4 000055\cf0 C5 \cf4 00005608\cf0  \cf6 000056E5\cf0  \cf4 000\cf0 FF62D \cf4 00101499\cf0  \cf4 00111208\cf0  \cf4 0070\cf0 F174 \cf6 00109E7E\cf0  \cf4 0000\cf0 BC4C \cf4 00108\cf0 D45 \cf4 00004489\cf0  \cf6 00113E79\cf0  \cf4 00113923\cf0  \cf4 0046\cf0 A014 \cf4 0046\cf0 A7B7 \cf4 0046\cf0 A90C \cf4 00308923\cf0  \cf6 002228E\cf0 D \cf6 0022293E\cf0  \cf4 0022295\cf0 B \cf4 00222985\cf0  \cf4 0003644\cf0 F \cf4 00005466\cf0  Fault \cf1 :\cf0  Port \b Not\b0  Open\cf1 .\cf0 Fault \cf1 :\cf0  Port \b Not\b0  Open\cf1 .\cf0  Date\cf1 /\cf0 time \cf1 :\cf0  \cf6 30.09.2012\cf0  \cf4 17\cf1 :\cf4 53\cf1 :\cf4 52\cf0  Stack dump \cf1 ----------\cf0  \cf4 0055632\cf0 D \cf4 00556\cf0 DB4 \cf6 00556E\cf0 FF \cf4 00556\cf0 F71 \cf6 0010E\cf0 A73 \cf4 0010\cf0 FA01 \cf4 0001\cf0 A20A \cf4 00103\cf0 D2F \cf4 000024\cf0 DA \cf4 000055\cf0 C5 \cf4 00005608\cf0  \cf6 000056E5\cf0  \cf4 000\cf0 FF62D \cf4 00101499\cf0  \cf4 00111208\cf0  \cf4 0070\cf0 F174 \cf6 00109E7E\cf0  \cf4 0000\cf0 BC4C \cf4 00108\cf0 D45 \cf4 00004489\cf0  \cf6 00113E79\cf0  \cf4 00113923\cf0  \cf4 0046\cf0 A014 \cf4 0046\cf0 A7B7 \cf4 0046\cf0 A90C \cf4 00308923\cf0  \cf6 002228E\cf0 D \cf6 0022293E\cf0  \cf4 0022295\cf0 B \cf4 00222985\cf0  \cf4 0003644\cf0 F \cf4 00005466\cf0  Date\cf1 /\cf0 time \cf1 :\cf0  \cf6 30.09.2012\cf0  \cf4 17\cf1 :\cf4 53\cf1 :\cf4 52\cf0  Stack dump 
\par 
\par \cf2\i //*******************************************Arduino Code**********************
\par \i0\cf1 /*
\par \cf0  \cf1 *\cf0  Delphi LEDs Control
\par  \cf1 *\cf0  \cf1 -----------------
\par \cf0  \cf1 *\cf0  Turns \b on\b0  \b and\b0  off \cf4 5\cf0  light emitting diodes\cf1 (\cf0 LED\cf1 )\cf0  connected \b to\b0  digital  
\par  \cf1 *\cf0  pins \cf4 2\cf0  thru \cf6 6.\cf0  The LEDs will be controlled \b using\b0  check boxes \b on\b0  \b maXbox
\par \b0  \cf1 *\cf0  that sends serial data \b to\b0  \b Arduino\b0  Board\cf1 .
\par \cf0  \cf1 *
\par \cf0  \cf1 *\cf0  IMPORTANT\cf1 !!:\cf0  Don\cf3 't forget to download the Example 305_webserver_arduino3.txt that controls the leds connected to arduino board.
\par \cf0  \cf1 *
\par \cf0  \cf1 *\cf0  Created April \cf4 02\cf0  \cf4 2009
\par \cf0  \cf1 *\cf0  copyleft \cf4 2009\cf0  Roberto Ramirez \cf1 <\cf0 beta\cf1 @\cf0 thepenguincult\cf1 .\cf0 com\cf1 >
\par \cf0  \cf1 *\cf0  Full Source code at http\cf1 :\cf2\i //www.thepenguincult.com/proyectos/arduino-delphi-control/
\par \i0\cf0  \cf1 *\cf0  
\par  \cf1 */
\par 
\par \cf0 int val \cf1 =\cf0  \cf4 0\cf1 ;\cf0        \cf2\i // variable to store the data from the serial port
\par \i0\cf0 int ledPin1 \cf1 =\cf0  \cf4 2\cf1 ;\cf0    \cf2\i // LED connected to digital pin 2
\par \i0\cf0 int ledPin2 \cf1 =\cf0  \cf4 3\cf1 ;\cf0    \cf2\i // LED connected to digital pin 3
\par \i0\cf0 int ledPin3 \cf1 =\cf0  \cf4 4\cf1 ;\cf0    \cf2\i // LED connected to digital pin 4
\par \i0\cf0 int ledPin4 \cf1 =\cf0  \cf4 5\cf1 ;\cf0    \cf2\i // LED connected to digital pin 5
\par \i0\cf0 int ledPin5 \cf1 =\cf0  \cf4 6\cf1 ;\cf0    \cf2\i // LED connected to digital pin 6
\par 
\par \i0\cf0 void setup\cf1 ()\cf0  \cf2\i \{
\par 
\par   pinMode(ledPin1,OUTPUT);    // declare the LED's pin as output
\par   pinMode(ledPin2,OUTPUT);    // declare the LED's pin as output
\par   pinMode(ledPin3,OUTPUT);    // declare the LED's pin as output
\par   pinMode(ledPin4,OUTPUT);    // declare the LED's pin as output
\par   pinMode(ledPin5,OUTPUT);    // declare the LED's pin as output
\par   Serial.begin(9600);        // connect to the serial port
\par \}
\par 
\par \i0\cf0 void loop \cf1 ()\cf0  \cf2\i \{
\par   val = Serial.read();      // read the serial port
\par 
\par   if (val !=-1)\{
\par 
\par     if (val=='1')\{
\par       digitalWrite(ledPin1,HIGH);
\par     \}
\par \i0\cf0     
\par     \b else\b0  \b if\b0  \cf1 (\cf0 val\cf1 ==\cf3 'A'\cf1 )\cf2\i \{
\par       digitalWrite(ledPin1,LOW);
\par       \}
\par \i0\cf0     \b if\b0  \cf1 (\cf0 val\cf1 ==\cf3 '2'\cf1 )\cf2\i \{
\par       digitalWrite(ledPin2,HIGH);
\par     \}
\par \i0\cf0     \b else\b0  \b if\b0  \cf1 (\cf0 val\cf1 ==\cf3 'B'\cf1 )\cf2\i \{
\par       digitalWrite(ledPin2,LOW);
\par       \}
\par \i0\cf0     \b if\b0  \cf1 (\cf0 val\cf1 ==\cf3 '3'\cf1 )\cf2\i \{
\par       digitalWrite(ledPin3,HIGH);
\par     \}
\par \i0\cf0     \b else\b0  \b if\b0  \cf1 (\cf0 val\cf1 ==\cf3 'C'\cf1 )\cf2\i \{
\par       digitalWrite(ledPin3,LOW);
\par       \}
\par \i0\cf0     \b if\b0  \cf1 (\cf0 val\cf1 ==\cf3 '4'\cf1 )\cf2\i \{
\par       digitalWrite(ledPin4,HIGH);
\par     \}
\par \i0\cf0     \b else\b0  \b if\b0  \cf1 (\cf0 val\cf1 ==\cf3 'D'\cf1 )\cf2\i \{
\par       digitalWrite(ledPin4,LOW);
\par       \}
\par \i0\cf0     \b if\b0  \cf1 (\cf0 val\cf1 ==\cf3 '5'\cf1 )\cf2\i \{
\par       digitalWrite(ledPin5,HIGH);
\par     \}
\par \i0\cf0     \b else\b0  \b if\b0  \cf1 (\cf0 val\cf1 ==\cf3 'E'\cf1 )\cf2\i \{
\par       digitalWrite(ledPin5,LOW);
\par       \}
\par \i0\cf0     \cf2\i //Serial.println();
\par \i0\cf0   \cf1 \}
\par \}
\par 
\par 
\par \cf2\i //Second Edition RGB LED ***************************************
\par //Binary sketch size: 1944 bytes (of a 32256 byte maximum)
\par 
\par \i0\cf1 /*
\par \cf0   Blink LEDMAX___WebofThings2
\par   Turns \b on\b0  an LED \b on\b0  \b for\b0  one second\cf1 ,\cf0  \b then\b0  off \b for\b0  one second\cf1 ,\cf0  repeatedly\cf1 .
\par \cf0  
\par   This example code \b of\b0  \b maXbox\b0  \b is\b0  \b in\b0  the \b public\b0  domain\cf1 .
\par \cf0  \cf1 */
\par \cf0  
\par   int ledPin11 \cf1 =\cf0  \cf4 11\cf1 ;
\par \cf0   int ledPin12 \cf1 =\cf0  \cf4 12\cf1 ;
\par \cf0   int ledPin13 \cf1 =\cf0  \cf4 13\cf1 ;
\par \cf0   int ledPin6Spec \cf1 =\cf0  \cf4 6\cf1 ;
\par \cf0   
\par   int counter \cf1 =\cf4 0\cf1 ;
\par \cf0   int change \cf1 =\cf0  \cf4 1\cf1 ;
\par \cf0   int val \cf1 =\cf0  \cf4 0\cf1 ;\cf0        \cf2\i // variable to store the data from the serial port
\par \i0\cf0    
\par 
\par void setup\cf1 ()\cf0  \cf2\i \{                
\par   // initialize the digital pin as an output.
\par   // Pin 13 has an LED connected on most Arduino boards:
\par  
\par  Serial.begin(9600);  
\par   //pinMode(ledPin1, OUTPUT);     
\par   pinMode(ledPin11, OUTPUT);     
\par   pinMode(ledPin12, OUTPUT);     
\par   pinMode(ledPin13, OUTPUT);     
\par   pinMode(ledPin6Spec, OUTPUT);     
\par \}
\par 
\par \i0\cf0 int changeCounter\cf1 ()\cf0  \cf2\i \{
\par   if (counter ==255)
\par        change=-1;
\par   if (counter ==0)
\par        change= 1;
\par   counter = counter + change;
\par return counter;
\par \}
\par \i0\cf0        
\par void ledmax\cf1 ()\cf2\i \{
\par   digitalWrite(ledPin11, HIGH);   // set the LED on
\par   delay(500);              // wait for a second
\par   digitalWrite(ledPin11, LOW);    // set the LED off
\par   delay(500);              // wait for a second
\par   digitalWrite(ledPin11, HIGH);   // set the LED on
\par   delay(500);              // wait for a second
\par   digitalWrite(ledPin11, LOW);    // set the LED off
\par   delay(500);              // wait for a second
\par  \}
\par 
\par \i0\cf0 void loop\cf1 ()\cf0  \cf2\i \{
\par   //digitalWrite(ledPin1, HIGH);   // set the LED on
\par   //delay(4000);              // wait for a second
\par   //digitalWrite(ledPin1, LOW);    // set the LED off
\par   //delay(1000);              // wait for a second
\par 
\par val = Serial.read();      // read the serial port
\par 
\par   if (val !=-1)\{
\par     if (val=='1')\{
\par       digitalWrite(ledPin11,HIGH);
\par     \}
\par \i0\cf0     \b else\b0  \b if\b0  \cf1 (\cf0 val\cf1 ==\cf3 'A'\cf1 )\cf2\i \{
\par       digitalWrite(ledPin11,LOW);
\par       \}
\par \i0\cf0     \b if\b0  \cf1 (\cf0 val\cf1 ==\cf3 '2'\cf1 )\cf2\i \{
\par       digitalWrite(ledPin12,HIGH);
\par     \}
\par \i0\cf0     \b else\b0  \b if\b0  \cf1 (\cf0 val\cf1 ==\cf3 'B'\cf1 )\cf2\i \{
\par       digitalWrite(ledPin12,LOW);
\par       \}
\par \i0\cf0     \b if\b0  \cf1 (\cf0 val\cf1 ==\cf3 '3'\cf1 )\cf2\i \{
\par       digitalWrite(ledPin13,HIGH);
\par     \}
\par \i0\cf0     \b else\b0  \b if\b0  \cf1 (\cf0 val\cf1 ==\cf3 'C'\cf1 )\cf2\i \{
\par       digitalWrite(ledPin13,LOW);
\par       \}
\par \i0\cf0     \b if\b0  \cf1 (\cf0 val\cf1 ==\cf3 '4'\cf1 )\cf2\i \{
\par       digitalWrite(ledPin6Spec,HIGH);
\par     \}
\par \i0\cf0     \b else\b0  \b if\b0  \cf1 (\cf0 val\cf1 ==\cf3 'D'\cf1 )\cf2\i \{
\par       digitalWrite(ledPin6Spec,LOW);
\par       \}
\par \i0\cf0    \cf2\i //Serial.write('X');
\par \i0\cf0    Serial\cf1 .\cf0 write\cf1 (\cf0 val\cf1 );
\par \cf0   \cf1 \}
\par \cf0   \cf2\i //counter = changeCounter();
\par \i0\cf0   \cf2\i //analogWrite(ledPin2, counter);
\par \i0\cf0   \cf2\i //delay(10);
\par \i0\cf0   \cf2\i //ledmax();
\par \i0\cf0   \cf2\i // digitalWrite(13, HIGH);    // set the LED off
\par \i0\cf0   \cf2\i //delay(100);              // wait for a second
\par \i0\cf0  \cf2\i //digitalWrite(13, LOW);    // set the LED off
\par \i0\cf0   \cf2\i //delay(100);              // wait for a second
\par \i0\cf0   \cf2\i // digitalWrite(13, LOW);    // set the LED off
\par \i0\cf0   \cf2\i //delay(1000);              // wait for a second
\par \i0\cf1 \}
\par 
\par \cf2\i //all colors test routine in Rainbow loop on client site!
\par 
\par \i0\cf0\b const\b0  int red \cf1 =\cf0  \cf4 9\cf1 ;\cf0  \b const\b0  int green \cf1 =\cf0  \cf4 10\cf1 ;\cf0  \b const\b0  int blue \cf1 =\cf0  \cf4 11\cf1 ;\cf0   
\par int time \cf1 =\cf0  \cf4 1000\cf1 ;\cf0  int multiple \cf1 =\cf0  \cf4 2\cf1 ;\cf0   
\par void setup\cf1 ()\cf0  
\par \cf2\i \{pinMode(red, OUTPUT);   pinMode(green, OUTPUT);   pinMode(blue, OUTPUT); \}\i0\cf0  
\par 
\par void loop\cf1 ()\cf0  
\par \cf2\i \{    digitalWrite(red, HIGH);     // red 
\par      delay(time);   
\par      digitalWrite(green, HIGH);   // yellow
\par        delay(time);
\par      digitalWrite(red, LOW);      // green 
\par        delay(time);
\par      digitalWrite(blue, HIGH);    // cyan
\par      delay(time);
\par      digitalWrite(green, LOW);    // blue
\par      delay(time);
\par      digitalWrite(red, HIGH);     // magenta 
\par      delay(time);
\par      digitalWrite(green, HIGH);   // white 
\par      delay(time*=multiple);
\par      digitalWrite(blue, LOW);     // reset
\par         digitalWrite(green, LOW);
\par            time/=multiple; \}\i0\cf0  
\par 
\par  
\par }