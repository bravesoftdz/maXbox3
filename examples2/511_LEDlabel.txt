program LED_HTTP_Image_Show_Exhibition;
// Composition DEMO for mX3  maXbox3 !! _113, locs=133;
// this is some welcome kind of a internet exhibition

var 
  myImage, myImage2, myImage3, myImage4: TImage;
  inFrm: TForm;
  myURL1, myURL2, myURL3, myURL4: string;


procedure FormClose(Sender: TObject; var Action: TCloseAction);
begin
  myImage.Free;
  myImage2.Free;
  myImage3.Free;
  myImage4.Free;
  
  inFrm.Free;
end;
  
procedure buildImageForm;
begin
  inFrm:= TForm.create(self)
  with inFrm do begin
    position:= poScreenCenter;
    FormStyle:= fsStayOnTop;
    color:= clpurple;
    borderStyle:= bsDialog;
    caption:= 'mX3 StreamDreamCream'
    width:= 990; height:= 450;
    OnClose:= @FormClose;
    Show;
  end;
  
  with TLEDNumber.create(inFrm) do begin
    Parent:= inFrm;
    left:= 400;
    caption:= 'MAXBOX Lab 4';
    columns:= 12;
    size:= 3;
    //top:= 20;
    width:= 455; 
    height:= 400;
  end;
  with TLEDNumber.create(inFrm) do begin
    Parent:= inFrm;
    left:= 400;
    caption:= 'MAXBOX Lab 4';
    columns:= 12;
    size:= 3;
    //top:= 20;
    width:= 455; 
    height:= 400;
  end;
  with TLEDNumber.create(inFrm) do begin
    Parent:= inFrm;
    left:= 20;
    top:= 300;
    caption:= 'OPEN MAPX 3';
    columns:= 12;
    size:= 3;
    //top:= 20;
    width:= 455; 
    height:= 70;
  end;

  with TLEDNumber.create(inFrm) do begin
    Parent:= inFrm;
    left:= 460;
    top:= 100;
    caption:= '3.9.9.98.3.141596';
    columns:= 16;
    size:= 3;
    //top:= 20;
    //width:= 455; 
    //height:= 70;
  end;
  
  myImage:= TImage.Create(inFrm);
  with myImage do begin
    Parent:= inFrm;
    width:= inFrm.width; 
    height:= inFrm.height;
    Left:= 10;
    Top:= 10;
  end;
  myImage2:= TImage.Create(inFrm);
  with myImage2 do begin
    Parent:= inFrm;
    width:= inFrm.width; 
    height:= inFrm.height;
    Left:= 220;
    Top:= 90;
  end;
  myImage3:= TImage.Create(inFrm);
  with myImage3 do begin
    Parent:= inFrm;
    width:= inFrm.width; 
    height:= inFrm.height;
    Left:= 420;
    Top:= 140;
  end;
  myImage4:= TImage.Create(inFrm);
  with myImage4 do begin
    Parent:= inFrm;
    width:= inFrm.width; 
    height:= inFrm.height;
    Left:= 680;
    Top:= 210;
  end;

end;  

procedure getHTTP_PNG(vimage, vimage2, vimage3, vimage4: TImage); 
var
  idHTTP: TIDHTTP;
  pngStream, pngStream2, pngStream3, pngStream4: TMemoryStream;
begin
  myURL1:= 'http://www.kleiner.ch/kleiner/images/envy.gif';
  myURL2:= 'http://www.kleiner.ch/kleiner/images/greed.gif';
  myURL3:= 'http://www.kleiner.ch/kleiner/images/pride.gif'
  myURL4:= 'http://www.kleiner.ch/kleiner/images/anger.gif';
  myURL4:= 'http://www.kleiner.ch/kleiner/images/tee_ani.gif';
  //myURL5:= 'http://www.kleiner.ch/kleiner/images/gottardo_klein.jpg';

  with TLinearBitmap.Create do
  try
    idHTTP:= TIdHTTP.Create(NIL)
    pngStream:= TMemoryStream.create;
    //OptimizeMem
    //idHTTP.Get1(myURL1, pngStream)
    HttpGet(myURL1, pngStream)
    //idHTTP.Get1(myURL2, pngStream)
    pngStream.Position:= 0;
    LoadFromStream2(pngstream,'GIF');
    vimage.Picture:= NIL;
    AssignTo(vimage.Picture.Bitmap);
 
    pngStream2:= TMemoryStream.create;
    //idHTTP.Get1(myURL2, pngStream2)
    HttpGet(myURL2, pngStream2);
   
      pngStream2.Position:= 0;
    LoadFromStream2(pngstream2,'GIF');
    AssignTo(vimage2.Picture.Bitmap);

    pngStream3:= TMemoryStream.create;
    //idHTTP.Get1(myURL3, pngStream3)
     HttpGet(myURL3, pngStream3);
   
      pngStream3.Position:= 0;
    LoadFromStream2(pngstream3,'GIF');
    AssignTo(vimage3.Picture.Bitmap);


    pngStream4:= TMemoryStream.create;
    //idHTTP.Get1(myURL4, pngStream4)
     HttpGet(myURL4, pngStream4)
   
      pngStream4.Position:= 0;
    LoadFromStream2(pngstream4,'GIF');
    AssignTo(vimage4.Picture.Bitmap);
     //SaveToFile(ExePath+'mX3GUI.jpg');
  finally
    Dispose;
    Free;
    idHTTP.Free
    pngStream.Free;
    pngStream2.Free;
    pngStream3.Free;
    pngStream4.Free;
  end; 
end;  

Procedure GetSongAndPlay;
var 
  mp3Stream: TFileStream;
  idHTTP: TIDHTTP;
  myURL, mp3song: string;
begin
  mp3song:= 'airmaxloop3.mp3';
  myURL:= 'http://www.softwareschule.ch/download/airmaxloop3.mp3';
  if not FileExists(ExePath+mp3song) then begin
    mp3Stream:= TFileStream.create(ExePath+mp3song, fmCreate)
    idHTTP:= TIdHTTP.create(NIL)
    try
      idhttp.get1(myURL, mp3Stream)
    finally
      idHTTP.Free
      mp3Stream.Free;
      maxform1.color:= clRed;
    end;
  end;      
  closeMP3;
  //showmessage(mSecToTime(lengthMP3(mXpath+mp3song)));
  playMP3(ExePath+mp3song);
end;

begin
  buildImageForm;
  GetSongAndPlay;
  getHTTP_PNG(myImage, myImage2, myImage3, myImage4);
  //DownloadFile
  //Speak('Welcome to the maxbox Dome, you are not alone!')
  //searchAndOpenDoc(ExePath+'mX3GUI.jpg')
end.


Doc:

  TCustomLEDNumber = class(TGraphicControl)
  private
    FBorderStyle: TLedNumberBorderStyle;
    FTransparent: boolean;
    procedure SetBorderStyle(AValue: TLedNumberBorderStyle);
    procedure SetTransparent(AValue: boolean);
  protected{private}
    FBgColor   : TColor;
    FOffColor  : TColor;
    FOnColor   : TColor;
    FColumns   : Integer;
    FRows      : Integer;
    FSize      : TSegmentSize;
    lbDrawBmp  : TBitmap;
    procedure CMTextChanged(var Message: TLMessage); message CM_TEXTCHANGED;
    procedure Initialize(var Points: array of TPoint);
    function  NewOffset(xOry: char; OldOffset: Integer): Integer;
    procedure ProcessCaption(Points: array of TPoint);
    procedure PaintSegment(Segment: Integer; TheColor: TColor;
                           Points: array of TPoint; OffsetX, OffsetY: Integer);
    procedure ResizeControl(Row, Col, Size: Integer);
    function  GetAbout: string;
    procedure SetAbout(const Value: string);
    procedure SetSize(Value: TSegmentSize);
    procedure SetOnColor(Value: TColor);
    procedure SetOffColor(Value: TColor);
    procedure SetRows(Value: Integer);
    procedure SetColumns(Value: Integer);
    procedure SetbgColor(Value: TColor);
    procedure SelectSegments(Segment: Word; Points: array of TPoint;
                             OffsetX, OffsetY: Integer);
  protected
    procedure Paint; override;
  public
    constructor Create(AOwner:TComponent);override;
    destructor Destroy; override;
    {properties}
    property Version: string  read GetAbout write SetAbout stored False;
    property BorderStyle: TLedNumberBorderStyle read FBorderStyle write SetBorderStyle default lnbNone; {Draws border around segments.}
    property Columns: Integer read FColumns write SetColumns default 10;
    property Rows: Integer    read FRows write SetRows default 1;
    property BgColor: TColor  read FbgColor write SetbgColor default clBlack;
    property OffColor: TColor read FOffColor write SetOffColor default $00104E4A;
    property OnColor: TColor  read FOnColor write SetOnColor default clYellow;
    property Size: TSegmentSize read FSize write SetSize default 2;
    property Transparent: boolean read FTransparent write SetTransparent default false; {Draws segments with transparent background.BgColor is used as mask color.}
    {Inherited properties}
    property Caption;
    property OnClick;
    property OnDblClick;
    property OnDragDrop;
    property OnDragOver;
    property OnEndDrag;
    property OnMouseDown;
    property OnMouseMove;
    property OnMouseUp;
    property ParentShowHint;
    property PopupMenu;
    property ShowHint;
    property Visible;
  end;


//**************************************************program HTTP_PNG_Streamer;
//**************************************************