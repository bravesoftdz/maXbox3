PROGRAM Conversions;

 
//Uses 
  
  //uses
    //Forms,
    //Unit1 in 'Unit1.pas' {Form1};
     //unittest in unittest.pas;

 
 
CONST 
//<Constant declarations>   locs=70
  TEXTOUT = ' hi time traveler ';
  FILENAME = 'maxbox3.exe';

{TYPE 
<Type declarations>} 

VAR 
//<Variable declarations>
  i, N, SN: integer;
  getlist: TStringList;

//procedure StrtoList(s: string; const List: TStrings; const delimiter: char=';');
procedure StrtoList(s: string; const List: TStrings; const delimiter: char);
var tmp : string;
    i   : integer;
begin
  List.BeginUpdate;
  if delimiter = '' then delimiter:= ';';
  try
   List.Clear;
   while pos(delimiter, s) > 0 do begin
     i := pos(delimiter, s);
     tmp := Copy(s, 1, i - 1);
     Delete(s, 1, i);
     List.Add(tmp);
   end;
   if s <> '' then
     List.Add(s);
  finally
   List.EndUpdate;
  end;
end;

function TForm1_ceNeedFile(Sender: TObject; const OrginFileName: String;
var FileName, Output: String): Boolean;
var
  path: string;
  f: TFileStream;
begin
  Path:= ExtractFilePath(ParamStr(0)) + FileName;
  try
    F:= TFileStream.Create(Path, fmOpenRead or fmShareDenyWrite);
  except
    Result:= false;
    exit;
  end;
  try
    SetLength(Output, f.Size);
    f.Read(Output[1], Length(Output));
  finally
    f.Free;
  end;
  Result:= True;
end;

Procedure Conversions;
begin
//Function HowAOneLinerCanBiteYou( const Step, Max : Longint) : Longint');
  {MakePercentage( const Step, Max : Longint) : Longint');
  CelsiusToKelvin( const T : double) : double');
  CelsiusToFahrenheit2( const T : double) : double');
  KelvinToCelsius( const T : double) : double');
  KelvinToFahrenheit( const T : double) : double');
  FahrenheitToCelsius2( const T : double) : double');
  FahrenheitToKelvin( const T : double) : double'); }
  writeln(floattoStr(CycleToDegJ(47.5)));
  writeln(floattoStr(CycleToGradJ(47.5)));
  writeln(floattoStr(DegToCycleJ(47.5)));
  writeln(floattoStr(CycleToDeg(47.5)));
  writeln(floattoStr(CycleToGrad(47.5)));
  writeln(floattoStr(DegToCycle(47.5)));
 
  //CycleToGradJ( const Cycles : double) : double');
  //CycleToRadJ( const Cycles : double) : double');
  //DegToCycleJ( const Degrees : double) : double');
  //DegToGradJ( const Degrees : double) : double');
  //DegToRadJ( const Degrees : double) : double');
  //GradToCycleJ( const Grads : double) : double');
  //GradToDegJ( const Grads : double) : double');
  //GradToRadJ( const Grads : double) : double');
  //RadToCycleJ( const Radians : double) : double');
  //RadToDegJ( const Radians : double) : double');
  //RadToGradJ( const Radians : double) : double');
  writeln(floattoStr(RadToCycleJ(47.5)));
  writeln(floattoStr(RadToDegJ(47.5)));
  writeln(floattoStr(RadToGradJ(47.5)));
  writeln(floattoStr(RadToCycle(47.5)));
  writeln(floattoStr(RadToDeg(47.5)));
  writeln(floattoStr(RadToGrad(47.5)));
 
 { DmsToDeg( const D, M : Integer; const S : double) : double');
  DmsToRad( const D, M : Integer; const S : double) : double');
 Procedure DegToDms( const Degrees : double; out D, M : Integer; out S : double)');
  DegToDmsStr( const Degrees : double; const SecondPrecision : Cardinal) : string');
 Procedure CartesianToPolar( const X, Y : double; out R, Phi : double)');
 Procedure PolarToCartesian( const R, Phi : double; out X, Y : double)');
 Procedure CartesianToCylinder( const X, Y, Z : double; out R, Phi, Zeta : double)');
 Procedure CartesianToSpheric( const X, Y, Z : double; out Rho, Phi, Theta : double)');
 Procedure CylinderToCartesian( const R, Phi, Zeta : double; out X, Y, Z : double)');
 Procedure SphericToCartesian( const Rho, Theta, Phi : double; out X, Y, Z : double)');}
  {CmToInch( const Cm : double) : double');
  InchToCm( const Inch : double) : double');
  FeetToMetre( const Feet : double) : double');
  MetreToFeet( const Metre : double) : double');
  YardToMetre( const Yard : double) : double');
  MetreToYard( const Metre : double) : double');
  NmToKm( const Nm : double) : double');
  KmToNm( const Km : double) : double');
  KmToSm( const Km : double) : double');
  SmToKm( const Sm : double) : double');
  LitreToGalUs( const Litre : double) : double');
  GalUsToLitre( const GalUs : double) : double');
  GalUsToGalCan( const GalUs : double) : double');
  GalCanToGalUs( const GalCan : double) : double');
  GalUsToGalUk( const GalUs : double) : double');
  GalUkToGalUs( const GalUk : double) : double');
  LitreToGalCan( const Litre : double) : double');
  GalCanToLitre( const GalCan : double) : double');
  LitreToGalUk( const Litre : double) : double');
  GalUkToLitre( const GalUk : double) : double');
  KgToLb( const Kg : double) : double');
  LbToKg( const Lb : double) : double');
  KgToOz( const Kg : double) : double');
  OzToKg( const Oz : double) : double');
  CwtUsToKg( const Cwt : double) : double');
  CwtUkToKg( const Cwt : double) : double');
  KaratToKg( const Karat : double) : double');
  KgToCwtUs( const Kg : double) : double');
  KgToCwtUk( const Kg : double) : double');
  KgToKarat( const Kg : double) : double');
  KgToSton( const Kg : double) : double');
  KgToLton( const Kg : double) : double');
  StonToKg( const STon : double) : double');
  LtonToKg( const Lton : double) : double');
  QrUsToKg( const Qr : double) : double');
  QrUkToKg( const Qr : double) : double');
  KgToQrUs( const Kg : double) : double');
  KgToQrUk( const Kg : double) : double');}
  
  writeln('PascalToBar  '+floattoStr(PascalToBar(47.5)));
  writeln('PascalToAt   '+floattoStr(PascalToAt(47.5)));
  writeln('PascalToTorr '+floattoStr(PascalToTorr(47.5)));

  {PascalToBar( const Pa : double) : double');
  PascalToAt( const Pa : double) : double');
  PascalToTorr( const Pa : double) : double');
  BarToPascal( const Bar : double) : double');
  AtToPascal( const At : double) : double');
  TorrToPascal( const Torr : double) : double');
  KnotToMs( const Knot : double) : double');
  HpElectricToWatt( const HpE : double) : double');
  HpMetricToWatt( const HpM : double) : double');
  MsToKnot( const ms : double) : double');
  WattToHpElectric( const W : double) : double');
  WattToHpMetric( const W : double) : double'); }
end;




BEGIN  //Main
//<Executable statements>

 writeln(floattostr(kmtonm(23.3)))
 writeln(floattostr(AttoPascal(10.3)))
 writeln(floattostr(metretoFeet(10.0)))
 
  N:= 2; SN:= 1000;
  {for i:= 1 to round(power(2,N)) do begin 
    Writeln(intToStr(i)+TEXTOUT + DateTimeToStr(AddHours(Now,-i)));
    Delay(SN);   //speed of time machine
  end;}
  getList:= TStringlist.create;
     if IsValidPeFile(Exepath+FILENAME) then writeln ('Valid PE File!');
     if PeVerifyCheckSum(Exepath+FILENAME) then writeln ('Valid CheckSum File!');
     
     if PeExportedFunctions(Exepath+FILENAME,  getList) then
       for i:= 1 to getList.count-1 do 
         writeln(getlist.strings[i]);
     getList.Clear; 
     if PeExportedNames(Exepath+FILENAME, getList) then
       for i:= 1 to getList.count-1 do 
         writeln(getlist.strings[i]);
     getList.Clear; 
     if PeBorFormNames(Exepath+FILENAME, getList) then
       for i:= 1 to getList.count-1 do 
         writeln(getlist.strings[i]);
     getList.Clear; 
     if PeResourceKindNames(Exepath+FILENAME, rtIcon, getList) then
       for i:= 1 to getList.count-1 do 
         writeln(getlist.strings[i]);
      if PeDoesImportLibrary(Exepath+FILENAME,Exepath+'dmath.dll',false)
       then writeln ('Import Lib!');
    getList.Free;
   Writeln(TEXTOUT + DateTimeToStr(AddHours(Now,-(round(power(2,24))))));
//<Definitions>  

   Conversions;
   writeln((cgetVersionString(exepath+'maxbox3.exe')))
   writeln((MBVERSION))

END. 



----app_template_loaded_code----

CL.AddDelphiFunction('Function PeExportedFunctions( const FileName : TFileName; const FunctionsList : TStrings) : Boolean');
 CL.AddDelphiFunction('Function PeExportedNames( const FileName : TFileName; const FunctionsList : TStrings) : Boolean');
 CL.AddDelphiFunction('Function PeExportedVariables( const FileName : TFileName; const FunctionsList : TStrings) : Boolean');
 CL.AddDelphiFunction('Function PeResourceKindNames( const FileName : TFileName; ResourceType : TJclPeResourceKind; const NamesList : TStrings) : Boolean');
 CL.AddDelphiFunction('Function PeBorFormNames( const FileName : TFileName; const NamesList : TStrings) : Boolean');
 CL.AddDelphiFunction('Function PeBorDependedPackages( const FileName : TFileName; PackagesList : TStrings; FullPathName, Descriptions : Boolean) : Boolean');
 CL.AddDelphiFunction('Function PeVerifyCheckSum( const FileName : TFileName) : Boolean');
 CL.AddDelphiFunction('Function PeDoesImportLibrary( const FileName : TFileName; const LibraryName : string; Recursive : Boolean) : Boolean');
 
 CL.AddTypeS('TJclPeResourceKind', '( rtUnknown0, rtCursorEntry, rtBitmap, rtI'
   +'conEntry, rtMenu, rtDialog, rtString, rtFontDir, rtFont, rtAccelerators, r'
   +'tRCData, rtMessageTable, rtCursor, rtUnknown13, rtIcon, rtUnknown15, rtVer'
   +'sion, rtDlgInclude, rtUnknown18, rtPlugPlay, rtVxd, rtAniCursor, rtAniIcon'
   +', rtHmtl, rtManifest, rtUserDefined )');
  


http://www.softwareschule.ch/download/maxbox_blix_the_programmer.pdf

  
  timec:= round(power(2,30)/24);
  writeln(inttoStr(timec div 365));
  writeln(intToStr(Round(Power(2,30)/24/365)));
  writeln(inttoStr(round(power(2,12)) div 24));
  maxcalcF('170*24');
  
  Energy = MemC * Work
  W = KEt - KEº


http://petshopboxstudio.com/goodies/free-vector-character-the-programmer/
http://lifehacker.com/5401954/programmer-101-teach-yourself-how-to-code

----code_cleared_checked----

 

There are a lot of opinions out there, but there's no 88not one “best” language. Here's the thing to
consider: In the end, language doesn't matter THAT much. Understanding data and control
structures, algorithms, metrics, modelling and design patterns does matter very much. Every
language, even a simple scripting language, will have elements that you'll use in other languages
as well and will help 88your understanding. maXbox is build on Object Pascal and is similar to Java or C++ 88, a
well known and mighty language.
Script: Examples/336_digiclock2.txt
Feedback @
max@kleiner.com
Literature:
Kleiner et al., Patterns konkret, 2003, Software & Support
Links of maXbox Tutorials:
http://www.softwareschule.ch/maxbox.htm
http://sourceforge.net/projects/maxbox
http://sourceforge.net/apps/mediawiki/maxbox/
http://en.wikipedia.org/wiki/Time_travel

