PROGRAM Bug_Form;

//////////////////////////////////////////////////////////////////////
//  #sign:Administrator: PC08: 14/03/2015 09:41:20 PM 
//  Purpose: set a bug form without close                           //
//  #path>ples\E:\maxbox3\mXGit39991\maxbox3\examples\les\          //
//  Lines of Code #locs:888
//////////////////////////////////////////////////////////////////////

Const TEXTOUT = 'Hi world of softbug';

//############################################################################
// Archimedes Spiral Function Fun CODEsign
//############################################################################
//TODO: Solve the Bug


Function IntToBase32X(Numb: Longint): String;
begin
  Result:= '';
  for It:= 0 to 4 do begin
    Insert(NUMBLETTS[(Numb And 31)+1], Result, 1);
    Numb:= Numb Shr 5;
  end;
end;

function CountPos(const subtxt: string; Text: string): Integer;
begin
  if (Length(subtxt)= 0) Or (Length(Text)= 0) Or (Pos(subtxt,Text)= 0) then
    result:= 0
  else
    result:= (Length(Text)- Length(StringReplace(Text,subtxt,'',
      [rfReplaceAll]))) div Length(subtxt);
end;


procedure LoadBug_fromResName(Sender: TObject);
var BitMap1: TBitMap;
    aform: TForm;
begin
  aform:= TForm.create(self);
  BitMap1:= TBitMap.Create;
  bitmap1.transparent:= true;
  aform.SetBounds(0,0,302,250)
  aform.borderstyle:= bsNone; //bsDialog;
  writeln('instance size: '+itoa(aform.instancesize)+aform.classname);
  try
    aform.Show;
    BitMap1.LoadFromResourceName(HInstance,'Live');
    aform.Canvas.Draw(22,22,BitMap1);
    BitMap1.LoadFromResourceName(HInstance,'Dead');
    aform.Canvas.Draw(120,102,BitMap1);
    aform.canvas.textout(10,10,getBigPI)
     //aform.Show;
  finally
    BitMap1.Free;
  end;
end;

var
  StartDT: TDateTime;
  StopDT: TDateTime;

 // GetFormatDT - Output = formated DateTime String
function GetFormatDT(aDateTime: TDateTime): string;
begin
  Result:= FormatDateTime('dd.mm.yy hh:nn:ss zzz', aDateTime);
end;

// _DebugStringStart - internal: Debug string at start time
Procedure _DebugStringStart(aCaption, aText: string);
begin
  StartDT:= Now;
  OutputDebugString(PChar(Format('[%s][%s] %s',
    [aCaption, GetFormatDT(StartDT), aText])));
end;


Begin  //main
 writeln('IntToBase32 of 1000: '+IntToBase32X(1000))
 PrintF('CountPos: %d',[CountPos('max','this is max of maXbox a max numbermax')])
 
  //writeln(getFormRes('TMaxForm1'))
  LoadBug_fromResName(self)
  Reverseplay(exepath+'examples\maxbox.wav')
    //getbigPI
  // Example: RoundTime('07.08.02 10:41', '15', True) -- > 07.08.02 10:45
End. 

Ref:
  RegisterMethod('Constructor Create(AOwner: TComponent)');
  RegisterConstructor(@TJvMail.Create, 'Create');
   RegisterMethod('Procedure Free');
   RegisterMethod(@TJvMail.Destroy, 'Free');

Doc:   
   Der Microsoft-Fehlerberichterstattungsdienst unterstützt Microsoft und deren Partner beim Diagnostizieren von Problemen in der von Ihnen verwendeten Software und beim Bereitstellen von Lösungen. Nicht für alle Probleme können Lösungen bereitgestellt werden. Falls jedoch Lösungen verfügbar sind, werden sie in Form von schrittweisen Anleitungen zur Lösung des gemeldeten Problems oder in Form von zu installierenden Updates bereitgestellt. Um Probleme zu verhindern und die Zuverlässigkeit der Software zu erhöhen, sind einige Lösungen auch in Service Packs und zukünftigen Versionen der Software enthalten.

 Der Microsoft-Fehlerberichtbestattungsdienst unterstützt Microsoft und deren Partner beim   

----app_template_loaded_code----