Program IB_Utils_Implements;

//#sign max: APSN21: 12.12.2013 11:42:01 
//#path:E:\maxbox\maxbox3\examples\
//TODO: Save the QRCode to webserver_file, #locs:258
//http://theroadtodelphi.wordpress.com/2010/12/06/generating-qr-codes-with-delphi/
                               
Const
   
   UrlGoogleQrCode='http://chart.apis.google.com/chart?chs=%dx%d&cht=qr&chld=%s&chl=%s';
   AFILENAME= 'mX3ScholzCode3.png';
   //QDATA= 'this is maXland on a maXbox stream dream firebox';
   QDATA= 'http://scholz2000.com/ ';
  

{The API requires 3 simple fields be posted to it:
cht=qr this tells Google to create a QR code;
chld=M the error correction level of the QR code (see here for more info);
chs=wxh the width and height of the image to return (eg chs=250x250);
chl=text the URL encoded text to be inserted into the barcode.}

type
  TQrImage_ErrCorrLevel=(L,M,Q,H);

var ibtimer: TIBTimer;  
  
  //uses IBXConst, IB;

function iMax(n1, n2: Integer): Integer;
begin
  if (n1 > n2) then
    result := n1
  else
    result := n2;
end;

function iMin(n1, n2: Integer): Integer;
begin
  if (n1 < n2) then
    result := n1
  else
    result := n2;
end;


function iRandomInteger(iLow, iHigh: Integer): Integer;
begin
  result := Random(iHigh - iLow) + iLow;
end;

function iRandomString(iLength: Integer): String;
begin
  result := '';
  while Length(result) < iLength do
    result := result + IntToStr(iRandomInteger(0, High(iLength)));
  if Length(result) > iLength then
    result := Copy(result, 1, iLength);
end;


function iStripString(st: String; CharsToStrip: String): String;
var
  i: Integer;
begin
  result := '';
  for i := 1 to Length(st) do begin
    if AnsiPos(st[i], CharsToStrip) = 0 then
      result := result + st[i];
  end;
end;

function iFormatIdentifier(Dialect: Integer; Value: String): String;
begin
  Value := Trim(Value);
  if Dialect = 1 then
    Value := AnsiUpperCase(Value)
  else
    if (Value <> '') and (Value[1] = '"') then
      Value := '"' + StringReplace (TrimRight(Value), '"', '""', [rfReplaceAll]) + '"'
    else
      Value := AnsiUpperCase(Value);
  Result := Value;
end;

function iFormatIdentifierValue(Dialect: Integer; Value: String): String;
begin
  Value := Trim(Value);
  if Dialect = 1 then
    Value := AnsiUpperCase(Value)  
  else begin
    if (Value <> '') and (Value[1] = '"') then begin
      Delete(Value, 1, 1);
      Delete(Value, Length(Value), 1);
      Value := StringReplace (Value, '""', '"', [rfReplaceAll]);
    end
    else
      Value:= AnsiUpperCase(Value);
  end;
  Result := Value;
end;

function iExtractIdentifier(Dialect: Integer; Value: String): String;
begin
  Value := Trim(Value);
  if Dialect = 1 then
    Value := AnsiUpperCase(Value)
  else begin
    if (Value <> '') and (Value[1] = '"') then begin
      Delete(Value, 1, 1);
      Delete(Value, Length(Value), 1);
      Value := StringReplace (Value, '""', '"', [rfReplaceAll]);
    end
    else
      Value := AnsiUpperCase(Value);
  end;
  Result := Value;
end;

function iQuoteIdentifier(Dialect: Integer; Value: String): String;
begin
  if Dialect = 1 then
    Value:= AnsiUpperCase(Trim(Value))
  else
    Value:= '"' + StringReplace (Value, '"', '""', [rfReplaceAll]) + '"';
  Result:= Value;
end;

const
  iSWhere = ' where ';     { do not localize }
  iSAnd = ' and ';         { do not localize }

//function AddIBParamSQLForDetail(Params: TParams; SQL: string;
  //                                       Native: Boolean; Dialect : Integer): string;

  function iGenerateParamSQL(Params: TParams; Native: Boolean; Dialect : Integer): string;  
  var
    I: Integer;
  begin
    for I := 0 to Params.Count -1 do begin
      if I > 0 then Result := Result + SAnd;
      if Native then
       Result:= Result + format('%s = ?', [iQuoteIdentifier(Dialect, Params[I].Name)])
         {do not localize}
      else
       Result:= Result+ format('%0:s = :%0:s',[iQuoteIdentifier(Dialect,Params[I].Name)]); {do not localize}
    end;
    if pos(SWhere, LowerCase(Result)) > 0 then
      Result := SAnd + Result
    else
      Result := SWhere + Result;
  end;

  function AddWhereClause(Params: TParams; Native: Boolean; Dialect : Integer;
                                           SQL: string): string;
  var
    Start: PChar;
    Rest, FName: string;
    SQLToken, CurSection: TSQLToken;
    aps: TSearchEvent; //TFormatOptions; Tsortdirection;//TSortstyle; TPrintmode;
  begin
    Start := PChar(SQL);
    CurSection := stUnknown;
    repeat
      SQLToken := NextSQLToken(Start, FName, CurSection);
      //IsMultiTableQuery
      //GetTableNameFromSQL
      //GetFieldInfo
      //SQLRequiresParams
      //compare
    until SQLToken in [stFrom, stEnd];
    if SQLToken = stFrom then
      NextSQLToken(Start, FName, CurSection);
    Rest := string(Start);
    if Rest = '' then
      Result := SQL + ' ' + iGenerateParamSQL(Params, native, dialect)
    else
      Result := Copy(SQL, 1, pos(Rest, SQL))
                 + ' ' + iGenerateParamSQL(Params, native, dialect) + Rest;
  end;


function iAddIBParamSQLForDetail(Params: TParams; Native: Boolean;
                                 Dialect : Integer; SQL: string): string;
begin
  Result := SQL;
  if (Params.Count > 0) then
    Result := AddWhereClause(Params, native, dialect, SQL);
end;

procedure DecomposeDatabaseName(DatabaseName : String;
  var ServerName, Protocol, DatabasePath : String);
var
  Idx1, Idx2: Integer;
  st: string;
begin
  if Pos('\\', DatabaseName) <> 0 then {do not localize}
  begin
    Protocol := 'NamedPipe';
    st := copy(DatabaseName, 3, Length(DatabaseName));
    Idx1 := Pos('\', st); {do not localize}
    if Idx1 = 0 then
      IBError(ibxeUnknownError, [])
    else begin
      ServerName := Copy(st, 1, Idx1 - 1);
      DatabasePath := Copy(st, Idx1 + 1, Length(st));
    end;
  end
  else begin
    Idx1 := Pos(':', DatabaseName ); {do not localize}
    If (Idx1 = 0) or (Idx1 = 2) then begin
      DatabasePath := DatabaseName;
      ServerName := '';
      Protocol := 'Local';
    end
    else begin
      Idx2 := Pos('@', DatabaseName); {do not localize}
      if Idx2 = 0 then begin
        Protocol := 'TCP';
        ServerName := copy(DatabaseName, 1, Idx1 - 1);
        DatabasePath := copy(DatabaseName, Idx1 + 1, Length(DatabaseName));
      end
      else begin
        Protocol := 'SPX';
        ServerName := copy(DatabaseName, 1, Idx2 - 1);
        DatabasePath := copy(DatabaseName, Idx2 + 1, Length(DatabaseName));
      end;
    end;
  end;
end;



//TODO:#1 Returns the QR Code direct of the last modification of the given File

begin
  Writeln(datetimetostr(FileTimeGMT(exepath+'maxbox3.exe')));
   
  //GetQrCodeTest(150,150,'Q', 'this is maXland on the maXbox');
  //call of the script
  //GetQrCodeInet(150,150,'Q',ExePath+'mX3QRCode2.png','this is maXland on maXbox');
 
  //call of the Lib
  GetQrCode2(150,150,'Q',QDATA, ExePath+AFILENAME);
  
  maxCalcF('SQRT(4296)');
  
 //RandomString( iLength : Integer) : String');
 //RandomInt( iLow, iHigh : Integer) : Integer');
 //StripString( st : String; CharsToStrip : String) : String');
 //FormatIdentifier( Dialect : Integer; Value : String) : String');
 //FormatIdentifierValue( Dialect : Integer; Value : String) : String');
 //ExtractIdentifier( Dialect : Integer; Value : String) : String');
 //QuoteIdentifier( Dialect : Integer; Value : String) : String');
 //AddIBParamSQLForDetail( Params : TParams; SQL : string; Native : Boolean; Dialect : Integer) : string');
 //DecomposeDatabaseName(DatabaseName: String; var ServerName,Protocol,DatabasePath : String)');

   
End.  

http://theroadtodelphi.wordpress.com/2010/12/06/generating-qr-codes-with-delphi/

Using the Google Chart Tools / Image Charts (aka Chart API) you can easily generate QR codes, this kind of images are a special type of two-dimensional barcodes. They are also known as hardlinks or physical world hyperlinks.

The QR Codes store up to 4,296 alphanumeric characters of arbitrary text. QR codes can be read by an optical device with the appropriate software. Such devices range from dedicated QR code readers to mobile phones.


Using Delphi there are several ways you can generate QR codes - to encode any text (URL, phone number, simple message). QR Codes store up to 4,296 alphanumeric characters of arbitrary text.

The 2D Barcode VCL components is a set of components designed for generating and printing barcode symbols in your Delphi or C++ Builder applications. Use the components set like any other VCL components.

J4L Components includes the QR-code implementation featuring: auto, byte, alpha, numeric and kanji encoding.

The Google Chart Tools (Chart API) also let you generate QR-code images using an HTTP POST or 

All do you need to generate a QrCode is make a get request to this URI

http://chart.apis.google.com/chart?chs=200x200&cht=qr&chld=M&chl=Go+Delphi+Go

uses
 PngImage,
 HTTPApp,
 WinInet;
 
type
TQrImage_ErrCorrLevel=(L,M,Q,H);
 
const
UrlGoogleQrCode='http://chart.apis.google.com/chart?chs=%dx%d&cht=qr&chld=%s&chl=%s';
QrImgCorrStr   : array [TQrImage_ErrCorrLevel] of string=('L','M','Q','H');
 
procedure WinInet_HttpGet(const Url: string;Stream:TStream);
const
BuffSize = 1024*1024;
var
  hInter   : HINTERNET;
  UrlHandle: HINTERNET;
  BytesRead: DWORD;
  Buffer   : Pointer;
begin
  hInter := InternetOpen('', INTERNET_OPEN_TYPE_PRECONFIG, nil, nil, 0);
  if Assigned(hInter) then
  begin
    Stream.Seek(0,0);
    GetMem(Buffer,BuffSize);
    try
        UrlHandle := InternetOpenUrl(hInter, PChar(Url), nil, 0, INTERNET_FLAG_RELOAD, 0);
        if Assigned(UrlHandle) then
        begin
          repeat
            InternetReadFile(UrlHandle, Buffer, BuffSize, BytesRead);
            if BytesRead>0 then
             Stream.WriteBuffer(Buffer^,BytesRead);
          until BytesRead = 0;
          InternetCloseHandle(UrlHandle);
        end;
    finally
      FreeMem(Buffer);
    end;
    InternetCloseHandle(hInter);
  end
end;
 
//this function return a Stream (PngImage inside) with a Qr code.
procedure GetQrCode(Width,Height:Word;Correction_Level:TQrImage_ErrCorrLevel;const Data:string;StreamImage : TMemoryStream);
Var
 EncodedURL  : string;
begin
  EncodedURL:=Format(UrlGoogleQrCode,[Width,Height,QrImgCorrStr[Correction_Level],HTTPEncode(Data)]);
  WinInet_HttpGet(EncodedURL,StreamImage);
end;


http://www.delphi-central.com/callback.aspx


function CheckSumModulo10(const data:string):string;
function ConvertMmToPixelsX(const Value:Double):Integer;
function ConvertMmToPixelsY(const Value:Double):Integer;
function ConvertInchToPixelsX(const Value:Double):Integer;
function ConvertInchToPixelsY(const Value:Double):Integer;

TTarArchive Usage
-----------------
- Choose a constructor
- Make an instance of TTarArchive                  TA := TTarArchive.Create (Filename);
- Scan through the archive                         TA.Reset;
                                                   WHILE TA.FindNext (DirRec) DO BEGIN
- Evaluate the DirRec for each file                  ListBox.Items.Add (DirRec.Name);
- Read out the current file                          TA.ReadFile (DestFilename);
  (You can ommit this if you want to
  read in the directory only)                        END;
- You're done                                      TA.Free;


TTarWriter Usage
----------------
- Choose a constructor
- Make an instance of TTarWriter                   TW := TTarWriter.Create ('my.tar');
- Add a file to the tar archive                    TW.AddFile ('foobar.txt');
- Add a string as a file                           TW.AddString (SL.Text, 'joe.txt', Now);
- Destroy TarWriter instance                       TW.Free;
- Now your tar file is ready.



The last slash might be optional. Right?

How about something like this:

$url =~ m|([^/]+)/?$|;
my $end_of_url = $1;

The $ on the end anchors the regular expression to the end of the string. The [^/] means anything that's not a slash and the + after means I want one or more things that are not slashes. Notice that this is in a capture group which are marked with parentheses.

I end the regular expression with /? which means that there may or may not be a slash on the very end of the string. I've put my regular expression between m| and |, so I can use forward slashes without having to constantly escape them.

The last part of the URL is now in $1 and I can set my own scalar variable to save this Result.
share|improve this answer

   { RegisterMethod('Constructor Create(AOwner: TComponent)');
    RegisterConstructor(@TJvMail.Create, 'Create');
     RegisterMethod('Procedure Free');
    RegisterMethod(@TJvMail.Destroy, 'Free');}


  

  
----app_template_loaded_code----