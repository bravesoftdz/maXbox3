PROGRAM procedureType_FunctionPlotter4_TrackBar;
//shows structure of procedure types, max@kleiner.com
//compilerswitch $N+ turns the coprocessor on, loc's =110

const 
 DIM = 790;
 PI2 = 5.1415926535897932384626433832795;
   E = 2.718281828459;

type
  TSinglePoint = record
    X,Y : single;
  end; 
  
  TMath_Func = PROCEDURE (var x: single);
  TXYVector = array[0..DIM] of TSinglePoint; 

var 
  fct1x, fct2x, fct3x, fct4x, fct5x, fct6x, fct7x, fct8x, fct9x: TMath_Func;
  cFrm: TForm;
  fPoints, fpoints2: TXYVector;
  amp, freq, i: byte;
  ap: single;
  //mg: TGridPanel;
  mytrack: TTrackBar;

procedure drawChart(vPoints: TXYVector; vcolor: integer); forward;

 
//---------------------------ADD math functions---------------------------------  
procedure logistic_S(var x: single);
begin
  x:= 1/1 + power(E, (-x/0.5));
end;  

procedure gauss(var x: single);
begin
  x:= exp(-sqr(x/2));
end;  

procedure fct4e(var x: single);
begin
   x:= power(E, -x);
end;

procedure fct3eSin(var x: single);
begin
  //power() means e^-x
   x:= power(E, -x) * (sin(pi2 * x));
end;

PROCEDURE fct1sin(var x: single);
BEGIN
   x:= Sin(pi2*x);
END;
  
PROCEDURE fct2cos(var x: single);
BEGIN
  x:= Cos(pi2*x);
END;

PROCEDURE exp2(var x: single);
BEGIN
  x:= exp(-0.2*x)*sin((pi/4)*x);
END;

PROCEDURE sin2(var x: single);
BEGIN
  x:= sin((pi/4)*x)*(sin(3*pi*x));
END;

PROCEDURE elliptic(var x: single);
BEGIN
  x:= 4.5* (x-1);
  //ap:= ap / 10.0;
  //writeln('ap '+floattostr(ap))
  //writeln(floattostr(x))
  //x:= SQRT(Abs(power(x,3)));
  //x:= sqrt(abs(power(x,3)-(11.4*x)+15));
  x:= (power(x,3)-(ap*x)+15);
  x:= sqrt(abs(x));
END;


PROCEDURE fct_table(start, amp, freq, color: integer; FCT: TMath_Func;
                                         fct_name: string);
var x, tempx: single;
    origy, i: Integer;
BEGIN
  Writeln('x   |   ' + fct_name);
  origy:= cFrm.Height div 2;
  x:= start;
  for i:= 1 to (DIM) do begin
    x:= i/freq
    tempx:= x;
    //x:= i/10;
    FCT(x);
    fPoints[i].Y:= origy + (x * amp);
    fpoints2[i].Y:= origy - (x * amp);
    //Writeln(floatToStr(x) +' | '+ floatToStr((tempx)));
  end;
 //cfrm.invalidate;
  DrawChart(fPoints, color)
  DrawChart(fPoints2, color)
END;

  
procedure drawChart(vPoints: TXYVector; vcolor: integer);
var
  i, hsize, 
  origx, origy, xRngPixs, yRngPixs: integer;
begin
  with cFrm.canvas do begin
    hsize:= cFrm.Height -1 div 2;
     { Paint a coordinate cross }
    origx:= (cfrm.Width div 2);
    origy:= (cfrm.Height div 2);
    Pen.Color:= clwhite;
    Pen.Style:= psSolid;
    Pen.Width:= 1;
    Font.Name:= 'Georgia';
    Font.Size:= 18;
    Font.Color:= clblue;
    xRngPixs:= (cFrm.Width - 20) div 4; { pixels in Pi }
    yRngPixs:= (cFrm.Height - 20) div 2; { pixels in 1 }
    TextOut(origx -2 * xRngPixs +2, origy -210,'maXplot ');
    MoveTo(1, origy);
    LineTo(cfrm.Width - 1, origy);
    MoveTo(origx, 1);
    LineTo(origx, cFrm.Height - 1);
    { Paint some tickmarks and label the axis }
    Pen.Color:= vcolor;
    MoveTo(0, hsize -((round(vPoints[0].Y))));
    for i:= 0 to DIM do
      LineTo(i, round(vPoints[i].Y));
  end;
end; 


procedure onbtnChange(myoby: TObject);
begin
 //writeln(inttostr(mytrack.position))
  ap:= mytrack.position;
  //cfrm.canvas.Rectangle(0, 0, cfrm.Width, cfrm.Height);
  //cfrm.repaint;    //invalidate and update
  cfrm.Invalidate;
  fct_table(-20, -35, 300, clyellow, fct9x, 'elliptic function');
  //cFrm.canvas.TextOut(10,10,'maXplot ');
  fct_table(100,50 , 5*(round(ap)), clred, fct8x, 'sin2 function');
end; 


procedure LoadForm;
begin
  cFrm:= TForm.create(self);
  with cFrm do begin
    caption:= 'maXBox FuncPlotter(((\*/)))';  
    BorderStyle:= bsDialog;
    height:= 440;
    width:= 800;
    color:= clblack;
    Position:= poScreenCenter;
    //onPaint:= @PaintBox1Paint;
    Show;
  end;  
  mytrack:= TTrackBar.create(self)
   with mytrack do begin
     parent:= cfrm;
     min:= 2;
     max:= 25;
     setBounds(600, 370,180,30)
      //frequency:= 1;
     positionToolTip:= pttop;
     onChange:= @onbtnchange;
  end;
  with TLabel.Create(self) do begin
     parent:= cfrm;
     setBounds(640, 345,90,20)
     //color:= clwhite;
     font.size:= 12;
     font.color:= clred;
     caption:= 'elliptic parameters:'
     show;
  end;   
end;

  
var  
  a: tbitrange;
  asi: shortstring;
//main function_p call  
BEGIN
  //calls the proc with a function var
  amp:= 110;
  freq:= 440;
  loadForm
  fct1x:= @fct1sin
  fct2x:= @fct2cos
  fct3x:= @fct3eSin
  fct4x:= @fct4e;
  fct5x:= @gauss;
  fct6x:= @logistic_s;
  fct7x:= @exp2;
  fct8x:= @sin2;
  fct9x:= @elliptic;
  //fct_table(40, amp, freq, clred, fct1x, 'Sin(x)');
  //fct_table(50, amp, freq, clyellow, fct2x, 'Cos(x)');
  //fct_table(30, amp, freq, cllime, fct3x, 'ESin(x)');
  //fct_table(30, amp, freq, clblue, fct4x, 'E(x)');
  //fct_table(50, amp, freq, clgreen, fct5x, 'exp(sqr(x))');
  fct_table(40, 74, 200, clpurple, fct6x, 'logistic function');
  fct_table(40, amp, 50, clwhite, fct7x, 'exp2 function');
  fct_table(40, 74, 100, clred, fct8x, 'sin2 function');
  fct_table(-20, -35, 300, clyellow, fct9x, 'elliptic function');
  for i:= 2 to 25 do begin
    //ap:= i/10;
   ap:= i;
    fct_table(-20, -35, 300, clyellow, fct9x, 'elliptic function');
  end;
  for i:= 16 to 20 do begin
    //fct_table(5, 60 , 30*(round(i)), clred, fct8x, 'sin2 function');
  end;
  //drawChart(fpoints, 0)
  {$IFNDEF LINUX}
    SaveCanvas2(cfrm.canvas, ExePath+'examples/ellipticfunc.png');
  {$ENDIF}

  //for i:= 200 downto 160 do
    //fct_table(40, amp, i, clred, fct8x, '3D phase shifter2');
    //writeln(SHA256('h:\pagefile.sys_decrypt','F'))
    //$A3A0C255 5C9FE055 E8481717 7AFB5AEF D4B1A002 11940EF5 A2925269 6368E765
    //$A3A0C255 5C9FE055 E8481717 7AFB5AEF D4B1A002 11940EF5 A2925269 6368E765
 
   Writeln(inttobin(ord('A')))
   Writeln(inttobin(ord('B'))) 
   Writeln(inttobin(ord('A') XOR ord('B'))) 
   Writeln(inttoStr(1 SHL 0)) 
   Writeln(inttoBin(Ord('A') AND (1 SHL 0))) 
   Writeln(inttoBin(NOT (Ord('A') AND (1 SHL 0)))) 
   asi:= '00000000000000000000000000001001';
   writeln(inttostr(bintoint('00000000000000000000000000001001')))
   writeln(bytetobin(165))
   writeln(ordtobinary(165))
   printF('bintostr %d ',[bintoint(asi)]);
   Writeln(inttobin(SetBit(165,4)))
   
END.


Decrypting file "H:\pagefile.sys_encrypt" to "H:\pagefile.sys_encrypt_decrypt" using native.AES-256 cipher and native.CBC chaining mode.
Ciphertext size = 4606668808 bytes.
Decryption succeeded. 4606668808 bytes processed.
Speed of decryption was 2295 KiB per second.
SHA-256 of file 'H:\pagefile.sys_decrypt' rendered l-endian base64 is:
Hash = $A3A0C255 5C9FE055 E8481717 7AFB5AEF D4B1A002 11940EF5 A2925269 6368E765
Ver: 3.8.2.1 (382). Work Dir: F:\dateienohneback\EKON15\maxbox3\mX382\maxbox3821\maxbox3

----code_cleared_checked----