{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Courier New;}}
{\colortbl\red0\green0\blue0;\red128\green0\blue128;\red0\green0\blue128;\red255\green0\blue0;\red255\green99\blue71;\red0\green128\blue128;}
{\info{\comment Generated by the SynEdit RTF exporter}
{\title Untitled}}
\deflang1033\pard\plain\f0\fs20 \cf0\b PROGRAM\b0  BIT_Operators_App\cf1 ;
\par 
\par \cf2\i \{TYPE 
\par <Type declarations>\}\i0\cf0  
\par 
\par \b VAR\b0  
\par \cf2\i //<Variable declarations>
\par \i0\cf0     div_dbl\cf1 :\cf0  double\cf1 ;
\par \cf0     a\cf1 ,\cf0 b\cf1 ,\cf0  i\cf1 ,\cf0  bin1\cf1 ,\cf0  bin2\cf1 ,\cf0  bin3\cf1 :\cf0  integer\cf1 ;
\par \cf0     wd\cf1 :\cf0  word\cf1 ;
\par \cf0     lnumber\cf1 :\cf0  extended\cf1 ;
\par \cf0     ltext\cf1 :\cf0  \b string\b0\cf1 ;
\par \cf0     ltext2\cf1 :\cf0  PChar\cf1 ;
\par \cf2\i //<FUNCTION>
\par //<PROCEDURE> 
\par 
\par 
\par \i0\cf0\b function\b0  exchangeOneVar\cf1 (\cf0\b var\b0  a\cf1 ,\cf0  b\cf1 :\cf0  integer\cf1 ):\cf0  bool\cf1 ;
\par \cf0\b begin
\par \b0   a\cf1 :=\cf0  a\cf1 +\cf0 b\cf1 ;
\par \cf0   b\cf1 :=\cf0  a\cf1 -\cf0 b\cf1 ;
\par \cf0   a\cf1 :=\cf0  a\cf1 -\cf0 b\cf1 ;
\par \cf0   result\cf1 :=\cf0  true\cf1 ;
\par \cf0\b end\b0\cf1 ;
\par 
\par \cf0\b var\b0  change\cf1 ,\cf0  counter\cf1 :\cf0  integer\cf1 ;
\par 
\par \cf0\b function\b0  changeCounter\cf1 :\cf0  integer\cf1 ;
\par \cf0\b begin
\par \b0   \b if\b0  counter \cf1 =\cf0  \cf3 255\cf0  \b then
\par \b0     dec\cf1 (\cf0 change\cf1 );
\par \cf0   \b if\b0  counter \cf1 =\cf0  \cf3 0\cf0  \b then\b0  
\par     change\cf1 :=\cf0  \cf3 1\cf1 ;\cf0   
\par   counter\cf1 :=\cf0 counter\cf1 +\cf0 change\cf1 ;
\par \cf0   result\cf1 :=\cf0  counter\cf1 ;
\par \cf0\b end\b0\cf1 ;
\par 
\par \cf2\i (*int changeCounter() \{
\par   if (counter ==255)
\par        change=-1;
\par   if (counter ==0)
\par        change= 1;
\par   counter = counter + change;
\par return counter;
\par \} *)
\par 
\par \i0\cf0\b BEGIN\b0   \cf2\i //Main
\par //<Executable statements>
\par \i0\cf0   
\par    div_dbl\cf1 :=\cf0  \cf4 5.0\cf0  \cf1 /\cf0  \cf4 2.1\cf1 ;\cf0  \cf2\i // 2.500000
\par \i0\cf0    writeln\cf1 (\cf0 Format\cf1 (\cf5 '%0.6f'\cf1 ,\cf0  \cf1 [\cf0 div_dbl\cf1 ]))
\par \cf0    div_dbl\cf1 :=\cf0  \cf3 20\cf0  \b mod\b0  \cf3 3\cf1 ;\cf0   \cf2\i // 2.00000
\par \i0\cf0    writeln\cf1 (\cf0 Format\cf1 (\cf5 '%f'\cf1 ,\cf0  \cf1 [\cf0 div_dbl\cf1 ]))
\par \cf0    a\cf1 :=\cf0  \cf3 5
\par \cf0    b\cf1 :=\cf0  \cf3 6
\par \cf0    \b if\b0  \b not\b0  \cf1 (\cf0 A\cf1 <>\cf0 B\cf1 )\cf0  \b then\b0  writeln\cf1 (\cf5 'even'\cf1 )\cf0  \b else
\par \b0                     writeln\cf1 (\cf5 'odd'\cf1 );\cf0    
\par    \b if\b0  \cf1 (\cf0 A\cf1 =\cf0 B\cf1 )\cf0  \b then\b0  writeln\cf1 (\cf5 'even'\cf1 )\cf0  \b else
\par \b0                     writeln\cf1 (\cf5 'odd'\cf1 );\cf0    
\par 
\par    \cf2\i // wholee ASCII Table
\par \i0\cf0    \cf2\i \{ writeln(Chr(67))
\par    for i:= 0 to 255 do
\par      writeln(format('wert %d %s',[i, Chr(i)]))\}
\par 
\par \i0\cf0     writeln\cf1 (\cf0 Format\cf1 (\cf5 '%s'\cf1 ,[\cf0 inttobin\cf1 (\cf3 97\cf1 )]))
\par \cf0     writeln\cf1 (\cf0 Format\cf1 (\cf5 '%s'\cf1 ,[\cf0 inttobin\cf1 (\cf3 223\cf1 )]))
\par \cf0     writeln\cf1 (\cf0 Format\cf1 (\cf5 '%s'\cf1 ,[\cf0 inttobin\cf1 (\cf3 97\cf0  \b XOR\b0  \cf3 223\cf1 )]))
\par \cf0     
\par     bin1\cf1 :=\cf0  \cf3 97\cf1 ;
\par \cf0     bin2\cf1 :=\cf0  \cf3 223\cf1 ;
\par \cf0     bin3\cf1 :=\cf0  bin1 \b XOR\b0  bin2\cf1 ;
\par \cf0     writeln\cf1 (\cf0 Format\cf1 (\cf5 '%s'\cf1 ,[\cf0 IntToBin\cf1 (\cf0 bin3\cf1 )]))
\par \cf0     
\par     writeln\cf1 (\cf5 ' '\cf1 );
\par \cf0     wd\cf1 :=\cf0  \cf3 150\cf1 ;
\par \cf0     writeln\cf1 (\cf5 'first     '\cf1 +\cf0 IntToBin\cf1 (\cf0 wd\cf1 ))
\par \cf0     writeln\cf1 (\cf0 IntToStr\cf1 (\cf0 wd\cf1 ))
\par \cf0     
\par     \cf2\i //double the value
\par \i0\cf0     wd\cf1 :=\cf0  wd \b SHL\b0  \cf3 1
\par \cf0     writeln\cf1 (\cf5 'double '\cf1 +\cf0 IntToBin\cf1 (\cf0 wd\cf1 ))
\par \cf0     writeln\cf1 (\cf0 IntToStr\cf1 (\cf0 wd\cf1 ))
\par \cf0     
\par     \cf2\i //half the value
\par \i0\cf0     wd\cf1 :=\cf0  wd \b SHR\b0  \cf3 1
\par \cf0     writeln\cf1 (\cf5 'half     '\cf1 +\cf0 IntToBin\cf1 (\cf0 wd\cf1 ))
\par \cf0     writeln\cf1 (\cf0 IntToStr\cf1 (\cf0 wd\cf1 ))
\par \cf0     
\par     \cf2\i //init the value
\par \i0\cf0     writeln\cf1 (\cf5 'init      '\cf1 +\cf0 IntToBin\cf1 (\cf0 wd\cf1 ))
\par \cf0     writeln\cf1 (\cf5 '          '\cf1 +\cf0 IntToBin\cf1 (\cf0 wd \b XOR\b0  wd\cf1 ));
\par \cf0     
\par     \cf2\i //buffer test
\par \i0\cf0     \cf2\i \{ Call the TextToFloat method to convert the string value to a double. \}
\par \i0\cf0     LText\cf1 :=\cf0  \cf5 '3.1415'\cf1 ;
\par \cf0     TextToFloat\cf1 (\cf0 LText\cf1 ,\cf0  LNumber\cf1 ,\cf0  fvExtended\cf1 );
\par \cf0     writeln\cf1 (\cf0 floattostr\cf1 (\cf0 LNumber\cf1 ));
\par \cf0  
\par     SetLength\cf1 (\cf0 LText\cf1 ,\cf0  \cf3 64\cf1 );
\par \cf0     \cf2\i //FloatToText(pchar(ltext), Lnumber, fvExtended, ffGeneral, 15, 0);
\par \i0\cf0     \cf2\i //SetLength(ltext, FloatToText((ltext), PI, fvExtended, ffGeneral, 15, 0));
\par \i0\cf0     writeln\cf1 (\cf0 ltext\cf1 );
\par \cf0     \cf2\i //writeln(maxform1.actualfilename)
\par \i0\cf0     writeln\cf1 (\cf0 maxform1\cf1 .\cf0 getactfilename\cf1 )
\par \cf0     a\cf1 :=\cf3 10\cf1 ;\cf0  b\cf1 :=\cf3 20\cf1 ;
\par \cf0     \b if\b0  exchangeOneVar\cf1 (\cf0 a\cf1 ,\cf0 b\cf1 )\cf0  \b then
\par \b0      \cf2\i //printF('exchange of %d %d',[a,b,exchangeone(a,b)]);
\par \i0\cf0      printF\cf1 (\cf5 'exchange of %d %d'\cf1 ,[\cf0 a\cf1 ,\cf0 b\cf1 ]);
\par \cf0     writeln\cf1 (\cf5 ''\cf1 );\cf0  
\par    counter\cf1 :=\cf3 0\cf1 ;
\par \cf0    change\cf1 :=\cf3 1\cf1 ;
\par 
\par \cf0      \cf2\i //for i:= 1 to 1022 do
\par \i0\cf0        \cf2\i //write(inttoStr(changeCounter)+':');
\par \i0\cf0      \cf2\i //writeln(inttoStr(changeCounter));
\par \i0\cf0     
\par     
\par \b END\b0\cf1 .\cf0  
\par 
\par 
\par        \cf1 (\cf0 A\cf1 <>\cf0 B\cf1 )\cf0   \b NOT\b0  \cf1 -->\cf0  A\cf1 =\cf0 B
\par         \cf3 0\cf0   \cf3 0\cf0  \cf3 0\cf0  \cf3 1\cf0        \cf3 0\cf0  \cf3 0
\par \cf0         \cf3 0\cf0   \cf3 1\cf0  \cf3 1\cf0  \cf3 0
\par \cf0         \cf3 1\cf0   \cf3 0\cf0  \cf3 1\cf0  \cf3 0
\par \cf0         \cf3 1\cf0   \cf3 1\cf0  \cf3 0\cf0  \cf3 1\cf0        \cf3 1\cf0  \cf3 1
\par \cf0         
\par         \cf2\i //19.8. um 16 Uhr PT1 Update
\par \i0\cf0         
\par   \b XOR\b0  App      
\par   \cf3 0110\cf0  \cf3 0001
\par \cf1 ^\cf0  \cf3 1101\cf0  \cf3 1111
\par \cf1 -----------
\par \cf0   \cf3 1011\cf0  \cf3 1110
\par \cf0         
\par         
\par   \cf3 00000000000000000000000100101100\cf0  \b XOR
\par \b0   \cf3 00000000000000000000000100101100
\par \cf0                          \cf3 000000000
\par 
\par \cf1 ----\cf0 app_template_loaded\cf1 ----
\par }