program korrel1;   (* P.Krahmer, WÅrzburg, 10. 2.91 AT Version  adapt max *)

//uses crt,graph;  _62, locs=196


type 
  messreihe1= array[1..8] of double;
  messreihe2= array[1..27] of messreihe1;

var xx,ss:array[1..27] of double;
    rr:array[1..8] of messreihe1;
    pp:array[1..8] of messreihe1;
    xm,sxy,sx,sy,ym,p,rxy,tr: double;
    x                      : messreihe2;
    n,df,i,j                   : integer;


procedure summationen(var sum_x,sum_y,sum_xx,sum_yy,sum_xy: double; ii, jj: integer);
   var i      :  integer;
       xi,yi  :  double;
   begin 
   sum_x:=0; sum_y:=0; sum_xx:=0; sum_yy:=0; sum_xy:=0;
         for i:=1 to n do
             begin xi:=x[i][ii]; yi:=x[i][jj];
                   sum_x:=sum_x+xi; sum_xx:=sum_xx+xi*xi;
                   sum_y:=sum_y+yi; sum_yy:=sum_yy+yi*yi;
                                    sum_xy:=sum_xy+xi*yi
             end;
   end;



procedure regression(ii,jj:integer);
   var sum_x,sum_y,sum_xx,sum_yy,sum_xy,help: double;

   
   begin
       summationen(sum_x,sum_y,sum_xx,sum_yy,sum_xy, ii, jj);
       xm:=sum_x/n; ym:=sum_y/n;
       sx :=sqrt((sum_xx-n*xm*xm)/(n-1));
       sy :=sqrt((sum_yy-n*ym*ym)/(n-1));
       sxy:=(sum_xy-sum_x*sum_y/n)/(n-1);
       if sx*sy<>0 then begin
                           rxy:=sxy/sx/sy;
                        end;
          end;


procedure eingabe;
   begin
     n:=27;
     x[1][1]:=3; x[1][2]:=3; x[1][3]:=4; x[1][4]:=2;
     x[1][5]:=2; x[1][6]:=2; x[1][7]:=3; x[1][8]:=2;

     x[2][1]:=3; x[2][2]:=3; x[2][3]:=3; x[2][4]:=3;
     x[2][5]:=3; x[2][6]:=3; x[2][7]:=2; x[2][8]:=2;

     x[3][1]:=2; x[3][2]:=5; x[3][3]:=4; x[3][4]:=4;
     x[3][5]:=4; x[3][6]:=3; x[3][7]:=3; x[3][8]:=2;

     x[4][1]:=3; x[4][2]:=3; x[4][3]:=2; x[4][4]:=2;
     x[4][5]:=3; x[4][6]:=2; x[4][7]:=3; x[4][8]:=3;

     x[5][1]:=3; x[5][2]:=4; x[5][3]:=4; x[5][4]:=2;
     x[5][5]:=4; x[5][6]:=4; x[5][7]:=3; x[5][8]:=2;

     x[6][1]:=2; x[6][2]:=3; x[6][3]:=3; x[6][4]:=3;
     x[6][5]:=4; x[6][6]:=2; x[6][7]:=3; x[6][8]:=2;

     x[7][1]:=3; x[7][2]:=3; x[7][3]:=2; x[7][4]:=1;
     x[7][5]:=2; x[7][6]:=1; x[7][7]:=2; x[7][8]:=2;

     x[8][1]:=4; x[8][2]:=4; x[8][3]:=4; x[8][4]:=3;
     x[8][5]:=3; x[8][6]:=3; x[8][7]:=5; x[8][8]:=2;

     x[9][1]:=4; x[9][2]:=5; x[9][3]:=5; x[9][4]:=3;
     x[9][5]:=3; x[9][6]:=2; x[9][7]:=4; x[9][8]:=3;

     x[10][1]:=3; x[10][2]:=3; x[10][3]:=2; x[10][4]:=4;
     x[10][5]:=4; x[10][6]:=4; x[10][7]:=2; x[10][8]:=1;

     x[11][1]:=3; x[11][2]:=3; x[11][3]:=3; x[11][4]:=2;
     x[11][5]:=3; x[11][6]:=3; x[11][7]:=2; x[11][8]:=2;

     x[12][1]:=2; x[12][2]:=3; x[12][3]:=3; x[12][4]:=1;
     x[12][5]:=2; x[12][6]:=1; x[12][7]:=3; x[12][8]:=1;

     x[13][1]:=3; x[13][2]:=4; x[13][3]:=3; x[13][4]:=3;
     x[13][5]:=4; x[13][6]:=3; x[13][7]:=3; x[13][8]:=2;

     x[14][1]:=2; x[14][2]:=3; x[14][3]:=2; x[14][4]:=2;
     x[14][5]:=1; x[14][6]:=2; x[14][7]:=3; x[14][8]:=2;

     x[15][1]:=4; x[15][2]:=4; x[15][3]:=5; x[15][4]:=4;
     x[15][5]:=2; x[15][6]:=3; x[15][7]:=4; x[15][8]:=2;

     x[16][1]:=2; x[16][2]:=3; x[16][3]:=3; x[16][4]:=2;
     x[16][5]:=2; x[16][6]:=2; x[16][7]:=2; x[16][8]:=1;

     x[17][1]:=4; x[17][2]:=5; x[17][3]:=4; x[17][4]:=3;
     x[17][5]:=4; x[17][6]:=3; x[17][7]:=4; x[17][8]:=3;

     x[18][1]:=2; x[18][2]:=5; x[18][3]:=3; x[18][4]:=2;
     x[18][5]:=3; x[18][6]:=3; x[18][7]:=4; x[18][8]:=2;

     x[19][1]:=2; x[19][2]:=3; x[19][3]:=3; x[19][4]:=1;
     x[19][5]:=2; x[19][6]:=2; x[19][7]:=2; x[19][8]:=1;

     x[20][1]:=2; x[20][2]:=3; x[20][3]:=3; x[20][4]:=1;
     x[20][5]:=3; x[20][6]:=3; x[20][7]:=3; x[20][8]:=2;

     x[21][1]:=3; x[21][2]:=5; x[21][3]:=5; x[21][4]:=3;
     x[21][5]:=4; x[21][6]:=3; x[21][7]:=5; x[21][8]:=2;

     x[22][1]:=2; x[22][2]:=3; x[22][3]:=2; x[22][4]:=2;
     x[22][5]:=2; x[22][6]:=2; x[22][7]:=3; x[22][8]:=2;

     x[23][1]:=1; x[23][2]:=3; x[23][3]:=2; x[23][4]:=2;
     x[23][5]:=3; x[23][6]:=3; x[23][7]:=3; x[23][8]:=2;

     x[24][1]:=3; x[24][2]:=5; x[24][3]:=3; x[24][4]:=4;
     x[24][5]:=3; x[24][6]:=4; x[24][7]:=3; x[24][8]:=4;

     x[25][1]:=4; x[25][2]:=3; x[25][3]:=3; x[25][4]:=2;
     x[25][5]:=2; x[25][6]:=3; x[25][7]:=3; x[25][8]:=2;

     x[26][1]:=3; x[26][2]:=4; x[26][3]:=4; x[26][4]:=3;
     x[26][5]:=3; x[26][6]:=2; x[26][7]:=3; x[26][8]:=1;

     x[27][1]:=3; x[27][2]:=4; x[27][3]:=4; x[27][4]:=4;
     x[27][5]:=2; x[27][6]:=2; x[27][7]:=2; x[27][8]:=1;

   end;

  procedure iteration(var v,r,g: double; var k: integer);
    begin
      repeat
        g:=g*v*k/(k+1);
        r:=r+g;
        k:=k+2
      until k>df-3;
    end;



function s(t: double; df:integer): double;    (* Integral Åber t-Verteilung  *)
  var x,u,v,w,r,g : double; k : integer;
  begin
     x:=t/sqrt(df);
     if df=1 then begin
           //arctan(x)
           result:=2/pi*arctan2(1,x)
         end
             else
         begin
           v:=1/(1+x*x);
           if df mod 2 =0 then
                            begin
                              r:=1; k:=1; g:=1;
                              iteration(v,r,g,k);
                              result:=r*sqrt(1-1/(1+x*x))
                            end
                          else
                            begin
                              w:=sqrt(1/(1+x*x));
                              r:=w; k:=2; g:=w;
                              iteration(v,r,g,k);
                              result:=2/pi*(r*sqrt(1-1/(1+x*x))+arctan2(1,x))
                            end;
         end;
  end;

procedure reg_statistik;
   begin
     df:=n-2;
     tr:=rxy*sqrt(df/(1-rxy*rxy));
     p:=100*s(tr,df);
   end;

begin
  //clrscr;
  eingabe;
  for i:=1 to 8 do begin
      for j:=i+1 to 8 do begin
         regression(i,j);
         reg_statistik;
         rr[i][j]:=rxy; pp[i][j]:=p; xx[i]:=xm; ss[i]:=sx;
         writeln('r[ '+inttostr(i)+', '+inttostr(j)+']= '
                          +floattostr(rr[i][j])+'   '+floattoStr((p))+' %');
      end;
      writeln(floattostr(xx[i])+'    '+floattoStr(ss[i]));
      writeln('');
      //readln;
      end;
    //readln;
end.
//