{***************************************************************
 * Project  : System Time from Internet
 * App Name: time_machine
 * Purpose  : Demonstrates the functions of SNTP time sync
 * Date  : 14/10/2010  -  time slot, locs= 
 * History  : add a voice of result, filter test
 ***************************************************************}
Program Time_Machine;

//{$IFDEF MSWINDOWS}{$R *.dfm}{$ELSE}{$R *.xfm}{$ENDIF}
var
  mySTime: TIdSNTP;
  //mytime: TIDDayTime;
  myindex: integer;

begin
{0.debian.pool.ntp.org
1.debian.pool.ntp.org
2.debian.pool.ntp.org
3.debian.pool.ntp.org}
  MyIndex := LastDelimiter('\.:','c:\filename.ext'); 
  writeln('last delimit test '+inttoStr(myindex))    
  //writeln(TimeToStr(strtotime('14:15:12')))
  writeln(strFilter('this is mX3 filter demo',['m','X','s'])) 

  mySTime:= TIdSNTP.create(self);
  try
    mySTime.host:='0.debian.pool.ntp.org'
    writeln('the internettime '+datetimetoStr(mystime.datetime));
    if mySTime.Synctime then
      writeln('operating system sync now!');
  finally
    mySTime.free;
    Speak('your system time is now sync with the internet time '+TimeToStr(time))
  end;
end.   

 ---------------------------------------------------------------------
-----------------------------------------------------------------------
The Comp (computational) type is native to the Intel CPU and represents a 64-bit integer. A Comp is classified as a real, however, it does not behave like an ordinal type. Comp is maintained for backward compatibility only. Use the Int64  type for better performance.

String quote = “if the facts don’t fit the theory, face the facts. – Albert Einstein”;
<script type="text/javascript" src="http://www.brainyquote.com/link/quotebr.js"></script>

debian.pool.ntp.org

Stack := #0#0#0#0 + Stack;
          Pointer((@Stack[1])^) := VarPtr;

function SafeStr(const s: string): string;
var
 i : Longint;
begin
  Result:= s;
  for i:= 1 to length(s) do begin
    if s[i] in [#0..#31] then begin
      Result := Copy(s, 1, i-1);
      exit;
    end;
  end;
end;

procedure Set_Union(Dest, Src: PByteArray; ByteSize: Integer);
var
  i: Longint;
begin
  for i := ByteSize -1 downto 0 do
    Dest^[i] := Dest^[i] or Src^[i];
end;

procedure Set_Diff(Dest, Src: PByteArray; ByteSize: Integer);
var
  i: Longint;
begin
  for i := ByteSize -1 downto 0 do
    Dest^[i] := Dest^[i] and not Src^[i];
end;

procedure Set_Intersect(Dest, Src: PByteArray; ByteSize: Integer);
var
  i: Longint;
begin
  for i := ByteSize -1 downto 0 do
    Dest^[i] := Dest^[i] and Src^[i];
end;