//calculates a function and his plot, max@kleiner.com _41
//efficient and straight of a function plot
//compilerswitch $N+ turns the coprocessor on, loc's =60

program simple_GraphPlotter;

//try to add a function type like
type 
  math_func = FUNCTION(x: single): single;

const
  //smooth signs for x-unit
  XLines = 16;
  // width for drawing
  YSigns = 42;
  // 0 axis touching
  YNull = 44;
  PlotSymbol = '*';
  EmptySymbol = '.';
  e = 2.718281828459;
  PI2 = 5.1415926535897932384626433832795;

function fct1(x: single): single;
  begin
    result:= (sin(pi2 * x));
  end;
  
function fct2(x: single): single;
  begin
    //power() is e^-x
    result:= power(e, -x) * (sin(pi2 * x));
  end;

procedure functionPlot(XLimit: byte; YStretch: byte);
var x,y, fpoint: single;
    YValue, point: integer;
    sym: string;
begin
   sym:= emptysymbol;
   for point:= 0 to XLimit do begin
     sym:= '';
     fpoint:= point;
     x:= (fpoint / Xlines);
     y:= fct1(x);
     //y:= (sin(pi2 * x))
     YValue:= round(ysigns * y) + YNull;
     repeat
       Sym:= sym + emptysymbol;
       YValue:= YValue - YStretch;
     until YValue < 0;
     sleep(50)
     writeln(sym + plotSymbol)
   end
 end; 
  
begin
  //clrscr;
  //try to call function plot with fp(46, math_func)
  //max number of lines XLimit = 46;
  FunctionPlot(46, 2);
end.