//shows the use of array of records, max@kleiner.com
//does read and sort the records, loc's =78, _46

PROGRAM Consulting_Manager;

const maxAnz = 31;
      nrLaenge = 5;
      
type  KandTyp = record
                 number: longint;
                 name: string;
                 birth: integer;
                end;         
      
      TRecList = record
                    anz: byte;
                    kand: array[1..maxAnz] of KandTyp;
                  end;
var 
  reclist: TRecList;
  
procedure readIn(var records: TRecList);
//true if list is no longer than 255 positions
var i, loop: byte;
begin
  //fill the list with random data
  i:= 0;
  try
     for loop:= 1 to maxAnz do begin
       i:= i + 1;
       records.kand[i].number:= random(250) + 100;
       records.kand[i].name:= 'max klein' +(chr(random(26)+97));
       records.kand[i].birth:= 1900 +random(59);
     end;
     {with records.kand[i] do begin
        number:= 20;
        name:= 'max'
        birth:= 1959
     end;}   
  finally  
     records.Anz:= i;
     //store the count
  end   
end;

procedure WriteOut(var records: TRecList);
var loop: byte;
begin
  //reclist.sort;
  for loop:= 1 to records.Anz do begin
    writeln(inttoStr(records.kand[loop].number) + ' '+records.kand[loop].name +
               ' '+inttoStr(records.kand[loop].birth));
  end; 
  writeln('end of list with ' + inttoStr(records.Anz)+ ' elements');
end;
      
procedure sortRecords(var records: TRecList);
var i, j: byte;
    swap: kandTyp;
begin
  //with records do
  for i:= 1 to records.anz do
   for j:= records.anz-1 downto i do
     if records.kand[j].birth < records.kand[j+1].birth then begin
       swap:= records.kand[j]
       records.kand[j]:= records.kand[j+1]
       records.kand[j+1]:= swap;
     end;   
end; 
 
begin
  //init & generate records
     randomize;
     readIn(reclist)
     sortRecords(reclist)
     writeOut(reclist)
  //task: proof that sort goes also with names     
end.
      
      
