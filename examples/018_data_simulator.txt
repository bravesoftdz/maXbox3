program Chartgenerator;

// first interpreter of datagenerator, _18 ,loc's=85
// chart generator type IEEE and recursion test
// rangevalues from 0..10 or 220..255;

const DAT = 250; 

type 
  
  TMemor= array[1..DAT] of single; //or integer
  //EMovingAverage = class (Exception)

var runners: integer;
    mem: TMemor;
    mylist: TStringList;


function initarray: boolean;
var t: integer;
begin
  result:= false;
  if max (4,6) > 3 then //test
  for t:= 1 to DAT do 
    mem[t]:= 0;
  result:= true
end;

procedure viewnumbers;
var i: integer;
begin
 for i:= 1 to (DAT - 1) do
   writeln(inttostr(i) +': '+ mylist[i]);
 writeln(dateTimeToStr(now));
 mylist.Free;
end;

procedure viewGenstat(vrun: integer);
var whole, average: single;
      tt: integer;
begin
 whole:= 0;
 for tt:= 1 to (vrun -1) do
   whole:= mem[tt] + mem[tt+1];
 average:= whole / vrun;
 writeln('Average of DATAGRAM is : ' + floattostr(average));
end;

function DataGenerator(HBase: byte; count: integer; var vdata: TMemor): 
        Boolean;
var
  slen, x, y: integer;
  MBUS: single;
  dS: String;
begin
  randomize;
  try
   result:= false;
   myList:= TStringlist.create;
    for x:= 1 to count do begin
      slen:= random(HBase)+3;
      setLength(dS, Slen)
      for y:= 1 to Slen do
        dS[y]:= Chr(Random(26)+ Ord('A'));
      MBUS:= random2(0)//-random2(0);
      mem[x]:= (MBUS);
      mylist.add(dS + '::'+floatToStr(MBUS) +'//: ' 
                                +FormatDateTime('hh:nn:ss:zzz', time))
    end;
  finally
   result:= true;
   //y1 := y2;
  end;
end;

// main script
begin
  runners:= DAT;
  if initArray then begin
    randomize;   
    DataGenerator(8, runners, mem)
    viewnumbers;
    viewGenstat(runners);
  end;
end.

