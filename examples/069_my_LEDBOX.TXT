
Program My_LED_Matrix;  // Programmname

//TODO: bettter refresh to takt

const 
  RUNPAUSE = 40; //80; //110;          // geschwindigkeit
  COL = 8;
  ROW = 8;
  SIGNS = 64; //(64_[0..63] Space, A..Z, a..z, 0..9, :,)

var
  ppForm: TForm;             // variabeln global deklariert
  mylabel: TLabel;
  pattern1: string;
  labelList: TStringList;
  psize: integer;
  pattar: array[0..SIGNS] of shortstring;
  doit: integer;
  //ach: TChartValue;
  //pl: TPenLineMode;

procedure LetShowRunVerify(apatt: string);         
 var                                                 
   i,x: integer;
   o: TLabel;
 begin
  for x:= 0 to COL do begin                         // Anzeigen auf dem Fenster
  for i:= 1 to psize do begin
    o:= TLabel(labelList.objects[i-1]);
  if apatt[i] = '1' then o.color:= clred         // anzeige der buchstaben farbe
  else o.color:= (clblack);
 end;  
  for i:= 1 to psize -1  do begin          // Laufschrift
   apatt[i]:= apatt[i+1];
  if (i mod COL = 0) then     
   apatt[i]:= '0'
 end;  
  Sleep(RUNPAUSE) 
 end;
  
end;

Procedure WriteLED_Set(sentence: string);    // den satz anzeigen ( the time is )
  var il,a: byte;
 begin
  for il:= 1 to length(sentence) do begin     // jeder buchstabe einzeln
      a:= Ord(sentence[il]);                    // gibt ascii wert des zeichens
    
  case a of          // wie mehrere if zusammengefasst  (eleganter)
      48..57  : letShowRunVerify(pattar[a-47]);   //ASCII 0=48 9=57
      65..90  : letShowRunVerify(pattar[a-54]);   //ASCII A=65 Z=90
      97..122 : letShowRunVerify(pattar[a-59]);   //ASCII a=97 z=122
      58      :  letShowRunVerify(pattar[37]);    //ASCII :=58
      32      :  letShowRunVerify(pattar[0]);    //ASCII space=32
        
  else letShowRunVerify(pattar[0]);   // ausgabe space wenn nicht erkannt
 end;
  if doit = 0 then break;         //abbruch  vorschleife via esc       
 end; 
end;  

procedure FormKeyPress(Sender: TObject; var Key: Char);//esc taste
 begin
  if Key = #27 then begin;
   doit:= 0;
   ppForm.close;
 end;  
end;

procedure loadPForm(vx, vy: integer);   // fenster laden und grösse
 begin
  psize:= vx*vy
  //constructor
  ppform:= Tform.create(self);
  with ppform do begin
    caption:= 'LEDBOX, ESC to close';  
    width:= (vx*psize)+ 10;       // grösse fenster 
    height:= (vy*psize)+ 30;
    BorderStyle:= bsDialog;
    Position:= poScreenCenter;
    onKeyPress:= @FormKeyPress
  
    Show;               //anzeigen
  end  
end;

procedure InitPuzzle(vx: byte);
 var
  i,x,y: integer;
 begin
  labelList:= TStringList.Create;
  x:= 1;
  y:= 1;
  for i:= 1 to psize do begin          //anfangsfarbe des fensters
    mylabel:= TLabel.Create(ppform);
    with mylabel do begin
      Parent:= ppForm;
      color:= clblack;
      transparent:= false;
      AutoSize:= false;
      layout:= tlcenter;
      alignment:= tacenter;
      font.Size:= (psize div vx) + 12;
      //font.Style:= [fsbold];
      font.Color:= clyellow;             
      width:= psize;      // grösse möckli
      height:= psize;
      Left:= (x-1)*(psize + 1); // position möckli
      Top:= (y-1)*(psize + 1);
      tag:= i;    
    end;
    if (i mod vx = 0) then begin    //zspalteumbruch der möcklis
      x:= 1; 
      inc(y);
    end else
      inc(x);
      labellist.instancesize
      labelList.addObject(inttostr(i), mylabel);
    end;
end;

procedure InitLED_SignPatterns;     
 begin
   pattar[0]:= '0000000000000000000000000000000000000000000000000000000000000000'; //Space;
   pattar[1]:= '0011110001000010010000100100001001000010010000100100001000111100'; //0
   pattar[2]:= '0000010000000100000001000000010000000100000001000000010000000100'; //1
   pattar[3]:= '0011110000000100000001000011110000100000001000000010000000111100'; //2
   pattar[4]:= '0011110000000100000001000011110000000100000001000000010000111100'; //3
   pattar[5]:= '0010010000100100001001000011110000000100000001000000010000000100'; //4
   pattar[6]:= '0011110000100000001000000011110000000100000001000000010000111100'; //5
   pattar[7]:= '0011110000100000001000000011110000100100001001000010010000111100'; //6
   pattar[8]:= '0011110000000100000001000000010000000100000001000000010000000100'; //7
   pattar[9]:= '0011110000100100001001000011110000100100001001000010010000111100'; //8
   pattar[10]:= '0011110000100100001001000011110000000100000001000000010000111100'; //9
   pattar[11]:= '0011110001000010010000100100001001111110010000100100001001000010'; //A;
   pattar[12]:= '0111110001000010010000100111110001000010010000100100001001111100'; //B;
   pattar[13]:= '0011111001000000010000000100000001000000010000000100000000111110'; //C;
   pattar[14]:= '0111110001000010010000100100001001000010010000100100001001111100'; //D;
   pattar[15]:= '0111111001000000010000000111110001000000010000000100000001111110'; //E;
   pattar[16]:= '0111111001000000010000000111110001000000010000000100000001000000'; //F;
   pattar[17]:= '0111111001000000010000000100110001000010010000100100001001111100'; //G;
   pattar[18]:= '0100001001000010010000100111111001000010010000100100001001000010'; //H;
   pattar[19]:= '0111111000011000000110000001100000011000000110000001100001111110'; //I;
   pattar[20]:= '0000001000000010000000100000001001000010010000100100001000111100'; //J;
   pattar[21]:= '0100010001001000010100000110000001010000010010000100010001000010'; //K;
   pattar[22]:= '0100000001000000010000000100000001000000010000000100000001111110'; //L;
   pattar[23]:= '0100001001100110010110100100001001000010010000100100001001000010'; //M;
   pattar[24]:= '0100001001100010010100100100101001000110010000100100001001000010'; //N;
   pattar[25]:= '0011110001000010010000100100001001000010010000100100001000111100'; //O;
   pattar[26]:= '0111110001000010010000100111110001000000010000000100000001000000'; //P;
   pattar[27]:= '0011110001000010010000100100001001000010010010100100011000111100'; //Q;
   pattar[28]:= '0111110001000010010000100111110001010000010010000100010001000010'; //R;
   pattar[29]:= '0011111001000000010000000011110000000010000000100000001001111100'; //S;
   pattar[30]:= '0111111000011000000110000001100000011000000110000001100000011000'; //T;
   pattar[31]:= '0100001001000010010000100100001001000010010000100100001000111100'; //U;
   pattar[32]:= '0100001001000010010000100100001001000010010000100010010000011000'; //V;
   pattar[33]:= '0100001001000010010000100100001001000010010110100110011001000010'; //W;
   pattar[34]:= '0100001001000010001001000001100000100100010000100100001001000010'; //X;
   pattar[35]:= '0100001000100100000110000001100000011000000110000001100000011000'; //Y;
   pattar[36]:= '0111111000000010000001000000100000010000001000000100000001111110'; //Z;
   pattar[37]:= '0000000000011000000110000000000000000000000110000001100000000000'; //:;
   pattar[38]:= '0000000000000000000000000001111000100010001000100010001000011010'; //a;
   pattar[39]:= '0010000000100000001000000011110000100010001000100010001000111100'; //b;
   pattar[40]:= '0000000000000000000000000001111000100000001000000010000000011110'; //c;
   pattar[41]:= '0000001000000010000000100001111000100010001000100010001000011110'; //d;
   pattar[42]:= '0000000000000000000000000001110000100010001111100010000000011110'; //e;
   pattar[43]:= '0001100000100100001000000010000000110000001000000010000000100000'; //f;
   pattar[44]:= '0000000000000000000011100001001000010010000011100001001000001110'; //g;
   pattar[45]:= '0010000000100000001000000010000000111100001000100010001000100010'; //h;
   pattar[46]:= '0000000000000000000010000000000000001000000010000000100000001000'; //i;
   pattar[47]:= '0000000000000010000000000000001000000010000000100001001000001100'; //j;
   pattar[48]:= '0010000000100000001000000010000000101000001100000010100000100100'; //k;
   pattar[49]:= '0010000000100000001000000010000000100000001010000011000000100000'; //l;
   pattar[50]:= '0000000000000000000000000000000000110110001010100010001000100010'; //m;
   pattar[51]:= '0000000000000000000000000010000000111100001000100010001000100010'; //n;
   pattar[52]:= '0000000000000000000000000001110000100010001000100010001000011100'; //o;
   pattar[53]:= '0000000000111100001000100010001000111100001000000010000000100000'; //p;
   pattar[54]:= '0000000000001110000100100001001000010010000011100000001000000010'; //q;
   pattar[55]:= '0000000000000000001000000010110000110000001000000010000000100000'; //r;
   pattar[56]:= '0000000000000000000000000001110000100000000110000000010000111000'; //s;
   pattar[57]:= '0010000000100000001000000011000000100000001000000010000000011100'; //t;
   pattar[58]:= '0000000000000000000100010001000100010001000100010001000100001110'; //u;
   pattar[59]:= '0000000000000000000000000000000001000010010000100010010000011000'; //v;
   pattar[60]:= '0000000000000000000000000000000001000100010001000101010000101000'; //w;
   pattar[61]:= '0000000000000000000000000100010000101000000100000010100001000100'; //x;
   pattar[62]:= '0000000000000000000000000010001000010100000010000001000000100000'; //y;
   pattar[63]:= '0000000000000000000000000011111000000100000010000001000000111110'; //z;
end;
//main of LED HEX BOX
Begin
  loadPForm(COL,ROW);   // gelbes fenster wird geladen
  initPuzzle(COL); 
  InitLED_SignPatterns;   // laden definitionen der buchstaben
  doit:= 1;
  while doit <> 0 do begin;   // hauptschlaufe solange nicht esc
    pattern1:= 'The Time is' + copy(timetostr(time),1,5);  
    WriteLed_Set(pattern1)  //true with animation
  end;
End.
       
    
