//Example of the listbox, thread load and save capabilities of the VCL
//Task: Find and set Easter Date and Epifania Date beside labels!
//Get the text and write your memo memories, locs=321
 
Program Easter_Calendar_Solution_Combobox;

//uses StringGridTools, StdCtrls Class;

const LBASE = 20;
      TBASE = 25; 
      VARRSIZE = 200;
      WIDE = 200;
//**************************************************

type
  //TThreadSortArray = array[0..MaxInt div SizeOf(Integer) - 1] of Integer;
  TmSortArray =  array[0..VARRSIZE] of Integer;

var 
  mymemo: TMemo;
  inFrm: TForm;
  edt: TEdit;  
  stat: TStatusbar;
  selectedFile: string;
  translate: boolean;
  ThreadsRun: byte;
  combox1: TCombobox;
  //Listbox1: TListbox;

  
FUNCTION CalcEasterday(aYear: Word): TDateTime; forward; //of Michael Starke


Function getRandomText: string;
var i, getback: integer;
begin
  for i:= 1 to 1400 do begin
    getback:= Random(58)+65
    if (getback < 91) OR (getback > 96) then
      result:= result + Chr(getback) +Chr(32)
  end;
end;  
  
FUNCTION CalcEasterday(aYear: Word): TDateTime;  
VAR
  A, B, C, D, E, F, G, H, I, J, K, L, M, N: INTEGER;
  vDay, vMonth: WORD;
BEGIN
  A:= aYear MOD 19;
  B:= aYear DIV 100;
  C:= aYear MOD 100;
  D:= B DIV 4;
  E:= B MOD 4;
  F:= (B + 8) DIV 25;
  G:= (B - F + 1) DIV 3;
  H:= (19 * A + B - D - G + 15) MOD 30;
  I:= C DIV 4;
  J:= C MOD 4;
  K:= (32 + 2 * E + 2 * I - H - J) MOD 7;
  L:= (A + 11 * H + 22 * K) DIV 451;
  M:= (H + K - 7 * L + 114) DIV 31;
  N:= (H + K - 7 * L + 114) MOD 31;

  vDay:= N + 1;
  IF M = 3 THEN vMonth:= 3 ELSE vMonth:= 4;
  Result:= EncodeDate(aYear, vMonth, vDay);
END;

//Event Handler - Closure *************************************** 
Procedure GetMediaData(self: TObject);
begin
  if PromptForFileName(selectedFile, 'Text files (*.txt)|*.txt','',
                       'Select your mX3 test file',
                       ExePath+'examples\', False) //Means not a Save dialog !
   then begin
     // Display this full file/path value
     ShowMessage('Selected file = '+selectedFile);
     Stat.simpletext:= selectedFile;
     mymemo.lines.LoadFromFile(selectedFile);
   end;
end; 

procedure btnRemoveDoublesClick(Sender: TObject);
var
  SL: TStringList;
begin
  SL := TStringList.Create;
  SL.Sorted := True; // must be set, otherwise next line has no effect
  SL.Duplicates := dupIgnore; // don't accept duplicates
  SL.AddStrings(combox1.Items);
  combox1.Items.Assign(SL);
  SL.Free;
end;

procedure MergeStrings(Dest, Source: TStrings);
var
  I, DI: Integer;
  begin
  for I := 0 to Source.Count - 1 do begin
    if Pos ('=', Source[I]) > 1 then begin
      DI := Dest.IndexOfName(Source.Names[I]);
      if DI > -1 then Dest[DI] := Source[I];
    end;
  end;
end;

procedure changeinboxtest(self: TObject);
var idx: integer;
    temp: string;
begin 
  idx:= combox1.itemindex;
  temp:= combox1.items[combox1.Items.Count-2];
  combox1.items[combox1.Items.Count-2]:= combox1.items[idx];
  combox1.items[idx]:= temp;
  combox1.ItemIndex:= idx;
end;


procedure BtnStartClick(self: TObject);
VAR
  Easter: TDateTime;
  aYear : WORD;
BEGIN
  combox1.Clear;
  TRY
    aYear:= StrToInt(edt.Text); //aYear:= 2012;
  EXCEPT
    ShowMessage('Wrong Entry of Year! Default 2012 is set');
    aYear:= 2012;
    //Exit;
  END;
  Easter:= CalcEasterday(aYear);
  with combox1.Items do begin
    if translate then begin
      Add('Ash Wednesday:             '+DateToStr(Easter - 46));
      Add('Good Friday:               '+DateToStr(Easter -  2));
      Add('Easter Monday:             '+DateToStr(Easter +  1));
      Add('Ascension Day:             '+DateToStr(Easter + 39));
      Add('Whitsuntide:               '+DateToStr(Easter + 50));
      Add('Corpus Christi:            '+DateToStr(Easter + 60));
      Add('All Saint''s Day:          '+' 1/11/'+intTostr(ayear))
    end else begin
      Add('Mercoledì delle ceneri:'+#09#09+DateToStr(Easter - 46));
      Add('Venerdi Santo:             '+DateToStr(Easter -  2));
      Add('Lunedi di Pasqua:          '+DateToStr(Easter +  1));
      Add('Ascensione:                '+DateToStr(Easter + 39));
      Add('Pentecoste:                '+DateToStr(Easter + 50));
      Add('Corpus Domini:             '+DateToStr(Easter + 60))
      Add('Tutti i Santi:             '+' 1/11/'+intTostr(ayear))
      //Add('name1 = 2000');
     end;
     //combox1.Show;
     //combox1.itemheight;
     //combox1.tabwidth;
      combox1.Showing;
      //combox1.Sorted;
      
     //combox1.SelectAll;
     combox1.ItemIndex:= combox1.Items.Count-1;
     //combox1.ItemIndex:= combox1.Items.IndexOfName('Pentecoste:                '+DateToStr(Easter + 50));
     writeln('index of name '+inttostr(combox1.Items.IndexOfName('name1')));
     //writeln('index of box '+inttostr(combox1.Items.IndexOfName('Pentecoste')));
     writeln('index of box '+inttostr(combox1.Items.IndexOf(combox1.items[6])));
     writeln('drop down of box '+inttostr(combox1.dropdowncount));
     //combox1.focused;
     changeinboxtest(self);
     //combox1.click;
  end;
  mymemo.lines.text:= getRandomText;
  Stat.simpletext:= ' Calculation has been started' ;
END;

procedure GetRandom(self: TObject);
begin
  //mymemo.lines.savetofile(ExePath+'\examples\randthread.txt');
  mymemo.lines.text:= getRandomText;
end; 

procedure BtnTransClick(self: TObject);
begin
  //mymemo.lines.SaveToFile(selectedFile);
  //Stat.simpletext:= selectedFile+ ' has been saved' ;
  translate:= NOT translate;
  btnStartClick(self);
end; 

procedure GeneralClick(Sender: TObject);
 begin
   writeln('you clicked '+objectToStr(sender));
 end;


procedure combox1DrawItem(Control: TWinControl; Index: Integer;
                               ARect: TRect; State: TOwnerDrawState); //State: TOwnerDrawState!
begin
  //combox1.Canvas.TextRect(ARect,ARect.Left+2,ARect.Top-4,combox1.Items[Index]);
  
    //CB1SCList.Canvas.TextRect(ARect,ARect.Left+2,
    //              ARect.Top,ExtractFileName(CB1SCList.Items[Index]));
  //CB1SCList.Canvas.FillRect(aRect);
   // combox1.Font.Size:= 9;               //3.9.6.4
  //combox1.SetBounds(LBASE+20,TBASE,WIDE*2,WIDE+180)
  aRect.Right:= aRect.Left + 26;
  //combox1.height:= 40;
  //combox1.itemheight:= 40;
  combox1.Canvas.TextOut(aRect.Right+2, aRect.Top+2,
     IntToStr(Index)+'  '+combox1.Items[Index]);
  combox1.hint:= combox1.Items[Index];
  combox1.showhint:= true;
  if Index mod 2 = 0 then
    combox1.Canvas.Brush.Color:= clPurple//clNavy           //clPurple
  else
    combox1.Canvas.Brush.Color:= clSilver; //clTeal; clLime
  combox1.Canvas.FillRect(aRect);
 
end;

procedure LabelFactory(l,t,w,h: smallint; atxt: shortstring);
begin
  with TLabel.create(self) do begin
    parent:= infrm;
    setbounds(l,t,w,h);
    font.size:= 15;
    font.color:= clpurple;
    font.style:= [fsitalic];
    caption:= atxt;
  end;  
end; 

//***********************Form Builder*********************************
procedure SetForm;
var
  mi, mi1, mi2: TMenuItem;
  mt: TMainMenu;
  mPanel: TPanel;
begin
  inFrm:= TForm.Create(self);
  stat:= TStatusbar.Create(inFrm);
  mymemo:= TMemo.create(inFrm);
  combox1:= TCombobox.Create(inFrm);
  with inFrm do begin
    caption:= '********Holy Days 3************';  
    height:= 630;
    width:= 1100;
    Position:= poScreenCenter;
    //onClose:= @CloseClick;
    ondblclick:= @generalClick;
   Show;
  end;
  edt:= TEdit.Create(self)
  with edt do begin
    parent:= inFrm;
    SetBounds(LBASE+70,TBASE+40,90,28)
    font.size:= 14;
    text:= '2012';
  end;
  mPanel:= TPanel.Create(infrm);
  with mPanel do begin
    Parent:= inFrm;  
    SetBounds(LBASE+10,TBASE+75,520,364)
    BevelOuter:= bvLowered
  end; 
  LabelFactory(LBASE+15,TBASE+40,WIDE,WIDE*2,'Year: '); 
  LabelFactory(LBASE+220,TBASE+40,WIDE,WIDE*2,'Easter: '); 
  LabelFactory(LBASE+360,TBASE+40,WIDE,WIDE*2,'Epifania: '); 
  with combox1 do begin
    Parent:= mPanel;
    SetBounds(LBASE+20,TBASE,WIDE*2,WIDE+180)
    //height:= 40;
    font.size:= 14;
    //SetBounds(LBASE+20,TBASE,WIDE*2,WIDE+160)
    color:= clsilver;
    font.color:= clwhite;
    //ondblclick
    itemheight:= 25;
    //scrollby
    //scaleby
    //bringtoFront;
    onchange:= @changeinboxtest;
     ondblclick:= @generalClick;
    Style:= csOwnerDrawFixed;
    //Style:= csDropDownList;
  
    //height:= 40;
    onDrawItem:= @combox1DrawItem;
  end;
  with mymemo do begin
    Parent:= inFrm;
    SetBounds(LBASE+620,TBASE+40,WIDE*2,WIDE*2)
    font.size:= 14;
    color:= clsilver;
    font.color:= clwhite;
    wordwrap:= true;
    scrollbars:= ssVertical;
  end;
  with TBitBtn.Create(inFrm) do begin
    Parent:= inFrm;
    setbounds(LBASE+ 610, TBASE+ 460,150, 55);
    caption:= 'Random';
    font.size:= 12;
    glyph.LoadFromResourceName(getHINSTANCE,'CL_MPPAUSE'); 
    mXButton(05,05,width, height,12,12,handle);
    //event handler
    onclick:= @GetRandom;
  end;
  with TBitBtn.Create(inFrm) do begin
    Parent:= inFrm;
    setbounds(LBASE+ 450, TBASE+460,150, 55);
    caption:= 'Translate';
    font.size:= 12;
    glyph.LoadFromResourceName(getHINSTANCE,'CL_MPEJECT');
    mXButton(05,05,width, height,12,12,handle);
    onclick:= @BtnTransClick;
  end;
  with TBitBtn.Create(inFrm) do begin
    Parent:= inFrm;
    setbounds(LBASE+770,TBASE+460,150, 55);
    caption:= 'Start Days';
    font.size:= 12;
    //(getHINSTANCE,'PREVIEWGLYPH'); 
    glyph.LoadFromResourceName(getHINSTANCE,'CL_MPSTEP'); 
    mXButton(05,05,width, height,12,12,handle);
    SetFocus;
    onclick:= @BtnStartClick;
  end;
  with TLabel.create(inFrm) do begin
    parent:= inFrm;
    setbounds(LBASE+15,TBASE-15,180,20);
    font.size:= 28;
    font.color:= clteal;
    font.style:= [fsItalic]
    caption:= 'Holy Days Calculator  ';
  end;  
  with TLabel.create(inFrm) do begin
    parent:= inFrm;
    setbounds(LBASE+622,TBASE,180,20);
    font.size:= 14;
    font.color:= clteal;
    font.style:= [fsitalic]
    caption:= 'Random Text:';
  end;  
  mt:= TMainMenu.Create(infrm)
  with mt do begin
   //parent:= frmMon;
  end;  
  mi:= TMenuItem.Create(mt)
  mi1:= TMenuItem.Create(mt)
  mi2:= TMenuItem.Create(mt)
  with mi do begin
    //parent:= frmMon;
    Caption:='Get New Year';
    Name:='ITEM';
    mt.Items.Add(mi);   
    OnClick:= @BtnStartClick;
  end;
  with mi1 do begin
    Caption:='Show Video';
    Name:='ITEM2';
    mt.Items.Add(mi1) ;
    //OnClick:= @GetVideoData
  end;
  with mi2 do begin
    Caption:='Open CD Player';
    Name:='ITEM3';
    mt.Items.Add(mi2);
  end;
  with Stat do begin
    parent:= inFrm;
    stat.SimplePanel:= true;
  end;
end; 

  var i: integer;

begin
  //memo2.font.size:= 14;
  SetForm;
  mymemo.lines.text:= getRandomText;
  getRandom(self);
  BtnStartClick(self);
  //SearchAndOpenDoc(ExePath+MEDIAPATH)
  //mylistview:= TFormListView.Create(self);
  maxForm1.color:= clteal;
  maxform1.ShellStyle1Click(self);
  memo2.font.size:= 16; 
    
  //ShellExecute Parallels in W64
  //ExecuteCommand('cmd','/k FC /L /N C:\maxbook\maxbox3\maxbox391.exe c:\maxbook\maxbox3\maxbox3.exe')
  //ExecuteCommand('cmd','/k FC /L /N C:\maxbook\maxbox3\maxboxdef1.ini c:\maxbook\maxbox3\maxboxdef2.ini')
  writeln('HEXtester '+#65+' '+chr($41)+' '+chr(65))
  if IsMultiThread then writeln('is multithread');
  //selectimage
  
  with TImageForm.create(self) do begin
    showmodal;
    Free;
  end;  
  {with TFoPatch.create(self) do begin
    //filenamebox1
    //okbtn
    showmodal;
    Free;
  end;}  
  
  with TJvObjectStrings.create do begin
     Free;
   end;  
  
  with TJvCpuUsage.create(self) do begin
    //for i:= 1 to 100 do 
    writeln('cpu use '+usage);
    Free;
    end;
  
  
End.

//-------------------------------------------------

source is tlistview
target is tform

procedure TfMerit.SourceLVStartDrag(Sender: TObject;
var DragObject: TDragObject);
var TargetLV:TListView;
begin
// TargetLV:=nejak urcit dle potreby
  TargetLV.BeginDrag(True)
end;

procedure TfMerit.SourceLVMouseDown(Sender: TObject;
Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
MouseIsDown:=True;
end;

procedure TfMerit.SourceLVMouseUp(Sender: TObject; Button: TMouseButton;
Shift: TShiftState; X, Y: Integer);
begin
MouseIsDown:=False;
if (Sender as TListView).Dragging then
(Sender as TListView).EndDrag(False);
end;

procedure TfMerit.SourceLVMouseMove(Sender: TObject; Shift: TShiftState;
X, Y: Integer);
begin
if (Sender.ClassNameIs('TListView')) then
begin
if MouseIsDown and ((Sender as TListView).SelCount>0) then
(Sender as TListView).BeginDrag(True);
end;
end;


procedure TfMerit.TargetLVDragOver(Sender, Source: TObject; X,
Y: Integer; State: TDragState; var Accept: Boolean);
var T:TListView;
begin
T:=Sender as TListView;
Accept:=Assigned(T.GetItemAt(X,Y));
end;


procedure TfMerit.TargetLVDragDrop(Sender, Source: TObject; X,
Y: Integer);
var It:TListItem;
LV1,LV2:TListView;
begin
LV1:=Source as TListView;
LV2:=Sender as TListview;

It:=LV2.GetItemAt(X,Y);
if Assigned(It) then
begin
// zpracuj polozku ze zdrojoveho listview
end;
end;


procedure TControlParentR(Self: TControl; var T:TWinControl); begin T:= Self.Parent; end;
procedure TControlParentW(Self: TControl; T: TWinControl); begin Self.Parent:= T; end;
    RegisterPropertyHelper(@TControlParentR, @TControlParentW, 'PARENT');
    RegisterProperty('Parent', 'TWinControl', iptRW);

procedure TTXPTool.LVPFFDblClick(Sender: TObject);
var
tmpList : TListItem;
fn ; string;
ft : integer;
fs : integer;
begin
tmpList := LVPFF.Selected;
if tmplist<>nil then
begin
  fn := tmpList.Caption
  ft := tmpList.SubItems.Strings[1];
  fs := tmpList.SubItems.Strings[3];
  if pos('Wave', ft)>0 then
    PlayThisOne1Click(nil);
  if pos('Jpg', ft)>0 then
    ShowJpg1Click(nil);
  if pos('Targa', ft)>0 then
    ShowTga1Click(nil);
  if pos('Pcx', ft)>0 then
    ShowPcx1Click(nil);
  if pos('Mission Sound Collection', ft)>0 then
    ShowPwf1Click(nil);
end;
end;



Changes to V3.9   (five !!)



//NoErrMsg variable
//- Controls whether the application displays an error message when a runtime error
//occurs.

{CompareValue function
- Returns the relationship between two numeric values.}

{SameValue function
- Indicates whether two floating-point values are (approximately) equal.}

{Sign function
- Indicates whether a numeric value is positive, negative, or zero.}

{SimpleRoundTo function
- Rounds a floating-point value to a specified digit or power of ten using
asymmetric arithmetic rounding.}

{AddExitProc procedure
- Add procedure to exit list.}
{ExitCode variable
- Contains the application's exit code.}
{UnicodeToUtf8 function
- Converts a string of Unicode characters into a UTF-8 string.}
{WideCharToStrVar procedure
- Converts Unicode string to a single or multi byte character data.}
{CreateClassID function
- CreateClassID generates a new GUID and returns it as a string.
{OleStrToString function
- Copies data received from a COM interface to a string.
{Supports function
- Indicates whether a given object or interface supports a specified interface.
{VarComplexToPolar procedure
- Computes the polar coordinates that correspond to a custom Variant that
represents a complex number.}
FindDatabaseID function
- Returns the ID of a specified database.

FindFieldID function
- Returns the ID of a specified field.

FindTableID function
- Returns the ID of a specified table.

GetAttrID function
- Returns the ID of the attribute set associated with a field.
{AnsiToNative function
- Converts a string from the ANSI character set to the character set associated
with a given locale.}
{NativeCompareStr function
- Compares strings based on a database locale case sensitively.

NativeCompareStrBuf function
- Compares null-terminated strings based on a database locale case sensitively.
{PasswordDialog function
- Displays a dialog box that prompts the user for the password of a local
password-protected table.}
{CheckSqlTimeStamp procedure
- Checks whether a TSQLTimeStamp value represents a valid date and time.}
{DateTimeToSQLTimeStamp function
- Converts a TDateTime value to a TSQLTimeStamp value.}
{NullSQLTimeStamp constant
- Represents a NULL TSQLTimeStamp value.}
{IsAbortResult function
- Checks the return value from a modal form dialog and indicates whether the user
selected Abort or Cancel.}
{LoginDialog function
- Brings up the database Login dialog to allow the user to connect to a database
server.

LoginDialogEx function
- Brings up the database Login dialog to allow the user to connect to a database
server.    }
{RemoteLoginDialog function
- Brings up the database Login dialog to allow the user to connect to a database
server. }
{StripAllFromResult function
- Converts a TModalResult value from a constant that refers to all to the
corresponding simple constant.}
{AcquireExceptionObject function
- Allows an exception object to persist after the except clause exits.}
(*ExtractShortPathName function
- Converts a file name to the short 8.3 form.

IncludeTrailingBackslash function
- Ensures path name ends with delimiter

IncludeTrailingPathDelimiter function
- Ensures path name ends with delimiter.

IsPathDelimiter function
- Indicates whether the byte at position Index of a string is the path delimiter.*)
{FloatToTextFmt function
- Converts a floating-point value to to an unterminated character string, using
a specified format.    }
(*CreateGrayMappedRes function
- Remaps the standard gray colors in a bitmap resource with the system grays.

CreateMappedBmp function
- Changes the color table in a bitmap.       *)
{GetDefFontCharSet function
- Returns the character set of the default system font.}
{GraphicExtension function
- Returns the default file-name extension of a graphics object.}
{GraphicFilter function
- Returns a file filter compatible with the Filter property of an Open or Save
dialog.}
{GetExtensionVersion function
- Returns the name and version number of an ISAPI or NSAPI application.}
{Rename procedure
- Changes the name of an external file.}  // there are 2 renames!!
{Truncate procedure
- Deletes all the records after the current file position.}
SameFileName function
- Compares file names based on the current locale.*)
{DefaultTextLineBreakStyle variable
- Specifies the characters that are used by default to separate lines in text.}
{GetEnvironmentVariable function
- Returns environment variable value..!!!}
{Slice function
- Returns a sub-section of an array.}
{UnloadPackage procedure
- Unloads a package.         !!!}
{Exclude procedure
- Removes an element from a set.}

{Include procedure
- Adds an element to a set.!!!}
{FindClass function
- Finds and returns a class that is derived from TPersistent.}

{FindClassHInstance function
- Returns the instance handle for the module in which a class type is defined.
{GetClass function
- Returns a registered persistent class given its name.
IntToIdent function
- Uses a mapping array to convert integers into their corresponding string
identifiers.  }
{BeginThread function
- Spawns a separate thread of execution.

CheckSynchronize function
- Allows background threads to synchronize their execution with the main thread.

EndThread function
- Terminates the execution of a thread.

ForegroundTask function
- Indicates whether the current thread is running in the foreground.

IsMultiThread variable
- Indicates whether the application spawned additional threads using BeginThread
or TThread objects.

WakeMainThread variable
- Represents a method (event handler) that is forced into the main threads queue.
{FindCustomVariantType function
- Retrieves the object that implements a custom Variant type.

GetVariantManager procedure
- Returns the entry points of the routines that define variant behavior.

IsVariantManagerSet function
- Indicates whether variant support is implemented in an application.}
{VarToStr function
- Converts a variant to a string.  !!!}
AllocateHwnd function
- Creates a window that implements a specified window procedure.
DestroyMetaPict procedure
- Frees a metafile resource given its handle.
NewStyleControls variable
- Determines whether controls are drawn using the Windows 3.x look.}
SameNamespace function
- Indicates whether a specified node is defined within a specified namespace.


