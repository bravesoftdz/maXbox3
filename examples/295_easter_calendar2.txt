//Example of the listbox, thread load and save capabilities of the VCL
//Task: Find and set Easter Date and Epifania Date beside labels!
//Get the text and write your memo memories, locs=292
 
Program Easter_Calendar_Solution;

//uses StringGridTools, StdCtrls Class;

const LBASE = 20;
      TBASE = 25; 
      VARRSIZE = 200;
      WIDE = 200;
//**************************************************

type
  //TThreadSortArray = array[0..MaxInt div SizeOf(Integer) - 1] of Integer;
  TmSortArray =  array[0..VARRSIZE] of Integer;

var 
  mymemo: TMemo;
  inFrm: TForm;
  edt: TEdit;  
  stat: TStatusbar;
  selectedFile: string;
  translate: boolean;
  ThreadsRun: byte;
  Listbox1: TLISTBOX;
  
FUNCTION CalcEasterday(aYear: Word): TDateTime; forward; //of Michael Starke


Function getRandomText: string;
var i, getback: integer;
begin
  for i:= 1 to 1400 do begin
    getback:= Random(58)+65
    if (getback < 91) OR (getback > 96) then
      result:= result + Chr(getback) +Chr(32)
  end;
end;  
  
FUNCTION CalcEasterday(aYear: Word): TDateTime;  
VAR
  A, B, C, D, E, F, G, H, I, J, K, L, M, N: INTEGER;
  vDay, vMonth: WORD;
BEGIN
  A:= aYear MOD 19;
  B:= aYear DIV 100;
  C:= aYear MOD 100;
  D:= B DIV 4;
  E:= B MOD 4;
  F:= (B + 8) DIV 25;
  G:= (B - F + 1) DIV 3;
  H:= (19 * A + B - D - G + 15) MOD 30;
  I:= C DIV 4;
  J:= C MOD 4;
  K:= (32 + 2 * E + 2 * I - H - J) MOD 7;
  L:= (A + 11 * H + 22 * K) DIV 451;
  M:= (H + K - 7 * L + 114) DIV 31;
  N:= (H + K - 7 * L + 114) MOD 31;

  vDay:= N + 1;
  IF M = 3 THEN vMonth:= 3 ELSE vMonth:= 4;
  Result:= EncodeDate(aYear, vMonth, vDay);
END;

FUNCTION CalcEasterSunday(aYear: Word): TDateTime;  
//year > 1900 and < 2099
VAR
  springmoon: TDatetime;
  j,m: integer;
BEGIN
  if (ayear < 1900) or (ayear > 2099) then begin
    raise Exception.create('Eastersunday Year is invalid');
  end;
  J:= aYear MOD 19;
  M:= (19 * J + 24) MOD 30;
  M:= M - M DIV 28;   //days after spring start
  springmoon:= EncodeDate(aYear, 3, 21)+M;
  Result:= springmoon+8 - DayofWeek(springmoon);
END;


//Event Handler - Closure *************************************** 
Procedure GetMediaData(self: TObject);
begin
  if PromptForFileName(selectedFile, 'Text files (*.txt)|*.txt','',
                       'Select your mX3 test file',
                       ExePath+'examples\', False) //Means not a Save dialog !
   then begin
     // Display this full file/path value
     ShowMessage('Selected file = '+selectedFile);
     Stat.simpletext:= selectedFile;
     mymemo.lines.LoadFromFile(selectedFile);
   end;
end; 

procedure BtnStartClick(self: TObject);
VAR
  Easter: TDateTime;
  aYear : WORD;
BEGIN
  ListBox1.Clear;
  TRY
    aYear:= StrToInt(edt.Text); //aYear:= 2012;
  EXCEPT
    ShowMessage('Wrong Entry of Year! Default 2012 is set');
    aYear:= 2012;
    //Exit;
  END;
  Easter:= CalcEasterday(aYear);
  with ListBox1.Items do begin
    if translate then begin
      Add('Ash Wednesday:             '+DateToStr(Easter - 46));
      Add('Good Friday:               '+DateToStr(Easter -  2));
      Add('Easter Monday:             '+DateToStr(Easter +  1));
      Add('Ascension Day:             '+DateToStr(Easter + 39));
      Add('Whitsuntide:               '+DateToStr(Easter + 50));
      Add('Corpus Christi:            '+DateToStr(Easter + 60));
      Add('All Saint''s Day:          '+' 1/11/'+intTostr(ayear))
    end else begin
      Add('Mercoledì delle ceneri:    '+DateToStr(Easter - 46));
      Add('Venerdi Santo:             '+DateToStr(Easter -  2));
      Add('Lunedi di Pasqua:          '+DateToStr(Easter +  1));
      Add('Ascensione:                '+DateToStr(Easter + 39));
      Add('Pentecoste:                '+DateToStr(Easter + 50));
      Add('Corpus Domini:             '+DateToStr(Easter + 60))
      Add('Tutti i Santi:             '+' 1/11/'+intTostr(ayear))
     end;
  end;
  mymemo.lines.text:= getRandomText;
  Stat.simpletext:= ' Calculation has been started at '+timetostr(time) ;
END;

procedure GetRandom(self: TObject);
begin
  //mymemo.lines.savetofile(ExePath+'\examples\randthread.txt');
  mymemo.lines.text:= getRandomText;
end; 

procedure BtnTransClick(self: TObject);
begin
  //mymemo.lines.SaveToFile(selectedFile);
  //Stat.simpletext:= selectedFile+ ' has been saved' ;
  translate:= NOT translate;
  btnStartClick(self);
end; 

procedure Listbox1DrawItem(Control: TWinControl; Index: Integer;
                               ARect: TRect; State: TOwnerDrawState); //State: TOwnerDrawState!
begin
  Listbox1.Canvas.TextRect(ARect,ARect.Left+2,ARect.Top,Listbox1.Items[Index]);
end;

{********************* CloseBtnClick *************}
procedure TForm1_CloseBtnClick(Sender: TObject);
begin
  inFrm.close;
  //inFrm.Free;
end;

{******************* FormClose *****************}
procedure TForm1_FormClose(Sender: TObject; var Action: TCloseAction);
begin
  //runflag:=false;
  //inFrm.Release;
  action:=cafree;
  //inFrm.release;
  writeln('Moon Form closed... ');
end;


procedure Listbox1MouseMove(sender: TObject; Shift: TShiftstate;
                               x,y: Integer); //choice!
begin
  Listbox1.ItemIndex:= Listbox1.ItemAtPos(point(x,y),true);
  if assigned(listbox1) then
    //writeln(Listbox1.Items[Listbox1.ItemIndex])
    if Listbox1.ItemIndex > 0 then
    writeln(Listbox1.Items[Listbox1.ItemIndex])
    //writeln(inttostr(Listbox1.ItemIndex))

end;

procedure LabelFactory(l,t,w,h: smallint; atxt: shortstring);
begin
  with TLabel.create(self) do begin
    parent:= infrm;
    setbounds(l,t,w,h);
    font.size:= 15;
    font.color:= clpurple;
    font.style:= [fsitalic];
    caption:= atxt;
  end; 
  //TServiceType', '( stWin32, stDevice, stFileSystem )');
  //TCurrentStatus', '( csStopped, csStartPending, csStopPending, cs'
   //+'Running, csContinuePending, csPausePending, csPaused )');
  //TErrorSeverity', '( esIgnore, esNormal, esSevere, esCritical )');
  //TStartType', '( stBoot, stSystem, stAuto, stManual, stDisabled )');
  //TServiceEvent', 'Procedure ( Sender : TService)');
  //TContinueEvent', 'Procedure ( Sender : TService; var Continued : Boolean)');
  //TPauseEvent', 'Procedure ( Sender : TService; var Paused : Boolean)');
  //(TStartEvent', 'Procedure ( Sender : TService; var Started : Boolean)');
  //TmStopEvent', 'Procedure ( Sender : TService; var Stopped : Boolean)');
  
end; 

procedure getRCData;
var stream: TResourceStream;
begin
  //Stream:= TResourceStream.Create(hinstance, 'BACK', 'RT_RCDATA');
  Stream:= TResourceStream.Create(hinstance, 'INFO', 'RCDATA');
     //SetLength(ms, Size);
 stream.Free;   
end;

//var it: string;

//***********************Form Builder*********************************
procedure SetForm;
var
  mi, mi1, mi2: TMenuItem;
  mt: TMainMenu;
  mPanel: TPanel;
  it: string;
begin
  inFrm:= TForm.Create(self);
  stat:= TStatusbar.Create(inFrm);
  mymemo:= TMemo.create(inFrm);
  //Listbox1:= TLISTBOX.Create(inFrm);
  with inFrm do begin
    caption:= '********Holy Days 3************';  
    height:= 630;
    width:= 1100;
    Position:= poScreenCenter;
    onClose:= @TForm1_FormClose;
    Show;
    //canvas.stretchdraw(rect(0,0,width,height), 
      //        getbitmap(Exepath+'\examples\brightfullmoon.bmp'));
    //show;          
  end;
  edt:= TEdit.Create(inFrm)
  with edt do begin
    parent:= inFrm;
    color:= clteal;
    SetBounds(LBASE+70,TBASE+40,90,28)
    font.size:= 14;
    text:= '2014';
  end;
  mPanel:= TPanel.Create(infrm);
  with mPanel do begin
    Parent:= inFrm;  
    SetBounds(LBASE+70,TBASE+85,435,340)
    parentbackground:= false;
    color:= clyellow;
    BevelOuter:= bvLowered
  end; 
  LabelFactory(LBASE+15,TBASE+40,WIDE,WIDE*2,'Year: '); 
  LabelFactory(LBASE+220,TBASE+40,WIDE,WIDE*2,'Easter: '); 
  LabelFactory(LBASE+360,TBASE+40,WIDE,WIDE*2,'Epifania: '); 
    Listbox1:= TLISTBOX.Create(inFrm);
   with listbox1 do begin
    Parent:= mPanel;
    SetBounds(LBASE-10,TBASE-15,WIDE*2+15,WIDE+120)
    font.size:= 14;
    //caption
    color:= clsilver;
    font.color:= clwhite;
    //Style:= csOwnerDrawFixed;
    onDrawItem:= @Listbox1DrawItem;
    onMouseMove:= @Listbox1MouseMove;
  end;
  with mymemo do begin
    Parent:= inFrm;
    SetBounds(LBASE+620,TBASE+40,WIDE*2,WIDE*2)
    font.size:= 14;
    color:= clsilver;
    font.color:= clwhite;
    wordwrap:= true;
    scrollbars:= ssVertical;
    doublebuffered:= true;
  end;
  with TBitBtn.Create(inFrm) do begin
    Parent:= inFrm;
    setbounds(LBASE+ 610, TBASE+ 460,150, 55);
    caption:= 'Random';
    font.size:= 12;
    glyph.LoadFromResourceName(getHINSTANCE,'CL_MPPAUSE'); 
    mXButton(05,05,width, height,12,12,handle);
    //event handler
    onclick:= @GetRandom;
  end;
  with TBitBtn.Create(inFrm) do begin
    Parent:= inFrm;
    setbounds(LBASE+290,TBASE+460,150, 55);
    caption:= '&Close';
    font.size:= 12;
    glyph.LoadFromResourceName(getHINSTANCE,'CL_MPSTOP');
    mXButton(05,05,width, height,12,12,handle);
    onclick:= @TForm1_CloseBtnClick;
  end;

  with TBitBtn.Create(inFrm) do begin
    Parent:= inFrm;
    setbounds(LBASE+450,TBASE+460,150, 55);
    caption:= 'Translate';
    font.size:= 12;
    glyph.LoadFromResourceName(getHINSTANCE,'CL_MPEJECT');
    mXButton(05,05,width, height,12,12,handle);
    onclick:= @BtnTransClick;
  end;
  with TBitBtn.Create(inFrm) do begin
    Parent:= inFrm;
    setbounds(LBASE+770,TBASE+460,150, 55);
    caption:= 'Start Days';
    font.size:= 12;
    //(getHINSTANCE,'PREVIEWGLYPH'); 
    glyph.LoadFromResourceName(getHINSTANCE,'CL_MPSTEP'); 
    mXButton(05,05,width, height,12,12,handle);
    SetFocus;
    onclick:= @BtnStartClick;
  end;
  {  LabelFactory(LBASE+15,TBASE+40,WIDE,WIDE*2,'Year: '); 
  LabelFactory(LBASE+220,TBASE+40,WIDE,WIDE*2,'Easter: '); 
  LabelFactory(LBASE+360,TBASE+40,WIDE,WIDE*2,'Epifania: '); }
           
  with TLabel.create(inFrm) do begin
    parent:= inFrm;
    //setbounds(LBASE+15,TBASE-15,180,20);
    font.size:= 28;
    font.color:= clteal;
    //transparent:= true;
    font.style:= [fsItalic]
    caption:= 'Holy Days Calculator  ';
  end; 

   infrm.canvas.stretchdraw(rect(0,0,infrm.width,infrm.height), 
             getbitmap(Exepath+'\examples\brightfullmoon.bmp'));
   infrm.canvas.font.size:= 36;
   infrm.canvas.font.color:= clteal;
   // infrm.canvas.transparent:= true;
   infrm.Canvas.Font.Name:='Times New Roman'; 
   infrm.canvas.font.style:= [fsItalic]
   infrm.Canvas.Brush.Style:= bsClear;       //transparent
   infrm.canvas.TextOut(LBASE,TBASE-22,'Holy Days Calculator  ');          
   
  {with TLabel.create(inFrm) do begin
    parent:= inFrm;
    setbounds(LBASE+622,TBASE,170,20);
    font.size:= 14;
    font.color:= clteal;
    font.style:= [fsitalic]
    caption:= 'Random Text:';
  end;}  
    //infrm.canvas.stretchdraw(rect(0,0,infrm.width,infrm.height), 
      //        getbitmap(Exepath+'\examples\brightfullmoon.bmp'));
  
  mt:= TMainMenu.Create(infrm)
  with mt do begin
   //parent:= frmMon;
  end;  
  mi:= TMenuItem.Create(mt)
  mi1:= TMenuItem.Create(mt)
  mi2:= TMenuItem.Create(mt)
  with mi do begin
    //parent:= frmMon;
    Caption:='Get New Year';
    Name:='ITEM';
    mt.Items.Add(mi);   
    OnClick:= @BtnStartClick;
  end;
  with mi1 do begin
    Caption:='Show Video';
    Name:='ITEM2';
    mt.Items.Add(mi1) ;
    //OnClick:= @GetVideoData
  end;
  with mi2 do begin
    Caption:='Open CD Player';
    Name:='ITEM3';
    mt.Items.Add(mi2);
  end;
  with Stat do begin
    parent:= inFrm;
    color:= clyellow;
    stat.SimplePanel:= true;
  end;
  
end;

//var E: Exception; 

begin
  //E:= Exception.create('');
  memo2.font.size:= 14;
  SetForm;
  BtnStartClick(self);
  mymemo.lines.text:= getRandomText;
  getRandom(self);
  //SearchAndOpenDoc(ExePath+MEDIAPATH)
  //mylistview:= TFormListView.Create(self);
  maxForm1.color:= clteal;
  //ShellExecute Parallels in W64
  //ExecuteCommand('cmd','/k FC /L /N C:\maxbook\maxbox3\maxbox391.exe c:\maxbook\maxbox3\maxbox3.exe')
  //ExecuteCommand('cmd','/k FC /L /N C:\maxbook\maxbox3\maxboxdef1.ini c:\maxbook\maxbox3\maxboxdef2.ini')
  writeln('HEXtester '+#65+' '+chr($41)+' '+chr(65))
  if IsMultiThread then writeln('is multithread');
  writeln(datetostr(CalcEasterSunday(2012)));
  writeln(datetostr(CalcEasterSunday(2013)));
  writeln(datetostr(CalcEasterSunday(2014)));
  //try
  //writeln(datetostr(CalcEasterSunday(1014)));
  //except
    //writeln(E.message);
  //end;
  //getRCData;
   // IncColor
   //IsItAFilledBitmap
    //TServiceType
      //TService
      //TEventLogger
        //TDependency
          //TServiceThread
    // Procedure SetupPopupCalendar( PopupCalendar : TWinControl; AStartOfWeek : TDayOfWeekName; AWeekends : TDaysOfWeek; AWeekendColor : TColor; BtnHints : TStrings; FourDigitYear : Boolean; MinDate : TDateTime; MaxDate : TDateTime)');
 //SetupPopupCalendar(TWinControl(inFrm),TDayOfWeekName(NIL),[], clred,'', true,now, now);       
    
    //TJvMacros    
    //TJvCreateProcess    
      //TJclFileSummary
      //NtfsGetCompression
    getbox('http://www.softwareschule.ch/arduino_training.pdf','pdf');  
    //writeln('checkbox is: '+checkbox);
    //Xraise
    //MoveFileExRedir
    //FreeandNil
    //TStartupInfo
    PSecurityAttributes
    ///TProcessInformation
    
      
End.


procedure SIRegister_JvPickDate(CL: TPSPascalCompiler);
begin
 Function SelectDate( Sender : TWinControl; var Date : TDateTime; const DlgCaption : TCaption; AStartOfWeek : TDayOfWeekName; AWeekends : TDaysOfWeek; AWeekendColor : TColor; BtnHints : TStrings; MinDate : TDateTime; MaxDate : TDateTime) : Boolean');
 Function SelectDateStr( Sender : TWinControl; var StrDate : string; const DlgCaption : TCaption; AStartOfWeek : TDayOfWeekName; AWeekends : TDaysOfWeek; AWeekendColor : TColor; BtnHints : TStrings; MinDate : TDateTime; MaxDate : TDateTime) : Boolean');
 Function PopupDate( var Date : TDateTime; Edit : TWinControl; MinDate : TDateTime; MaxDate : TDateTime) : Boolean');
 Function CreatePopupCalendar( AOwner : TComponent; ABiDiMode : TBiDiMode; MinDate : TDateTime; MaxDate : TDateTime) : TWinControl');
 Procedure SetupPopupCalendar( PopupCalendar : TWinControl; AStartOfWeek : TDayOfWeekName; AWeekends : TDaysOfWeek; AWeekendColor : TColor; BtnHints : TStrings; FourDigitYear : Boolean; MinDate : TDateTime; MaxDate : TDateTime)');
end;


//-------------------------------------------------

source is tlistview
target is tform

procedure TfMerit.SourceLVStartDrag(Sender: TObject;
var DragObject: TDragObject);
var TargetLV:TListView;
begin
// TargetLV:=nejak urcit dle potreby
  TargetLV.BeginDrag(True)
end;

procedure TfMerit.SourceLVMouseDown(Sender: TObject;
Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
MouseIsDown:=True;
end;

procedure TfMerit.SourceLVMouseUp(Sender: TObject; Button: TMouseButton;
Shift: TShiftState; X, Y: Integer);
begin
MouseIsDown:=False;
if (Sender as TListView).Dragging then
(Sender as TListView).EndDrag(False);
end;

procedure TfMerit.SourceLVMouseMove(Sender: TObject; Shift: TShiftState;
X, Y: Integer);
begin
if (Sender.ClassNameIs('TListView')) then
begin
if MouseIsDown and ((Sender as TListView).SelCount>0) then
(Sender as TListView).BeginDrag(True);
end;
end;


procedure TfMerit.TargetLVDragOver(Sender, Source: TObject; X,
Y: Integer; State: TDragState; var Accept: Boolean);
var T:TListView;
begin
T:=Sender as TListView;
Accept:=Assigned(T.GetItemAt(X,Y));
end;

//var it: integer;

procedure TfMerit.TargetLVDragDrop(Sender, Source: TObject; X,
Y: Integer);
var It:TListItem;
LV1,LV2:TListView;
begin
LV1:=Source as TListView;
LV2:=Sender as TListview;

It:=LV2.GetItemAt(X,Y);
if Assigned(It) then
begin
// zpracuj polozku ze zdrojoveho listview
end;
end;


procedure TControlParentR(Self: TControl; var T:TWinControl); begin T:= Self.Parent; end;
procedure TControlParentW(Self: TControl; T: TWinControl); begin Self.Parent:= T; end;
    RegisterPropertyHelper(@TControlParentR, @TControlParentW, 'PARENT');
    RegisterProperty('Parent', 'TWinControl', iptRW);

procedure TTXPTool.LVPFFDblClick(Sender: TObject);
var
tmpList : TListItem;
fn ; string;
ft : integer;
fs : integer;
begin
tmpList := LVPFF.Selected;
if tmplist<>nil then
begin
  fn := tmpList.Caption
  ft := tmpList.SubItems.Strings[1];
  fs := tmpList.SubItems.Strings[3];
  if pos('Wave', ft)>0 then
    PlayThisOne1Click(nil);
  if pos('Jpg', ft)>0 then
    ShowJpg1Click(nil);
  if pos('Targa', ft)>0 then
    ShowTga1Click(nil);
  if pos('Pcx', ft)>0 then
    ShowPcx1Click(nil);
  if pos('Mission Sound Collection', ft)>0 then
    ShowPwf1Click(nil);
end;
end;



Changes to V3.9   (five !!)



//NoErrMsg variable
//- Controls whether the application displays an error message when a runtime error
//occurs.

{CompareValue function
- Returns the relationship between two numeric values.}

{SameValue function
- Indicates whether two floating-point values are (approximately) equal.}

{Sign function
- Indicates whether a numeric value is positive, negative, or zero.}

{SimpleRoundTo function
- Rounds a floating-point value to a specified digit or power of ten using
asymmetric arithmetic rounding.}

{AddExitProc procedure
- Add procedure to exit list.}
{ExitCode variable
- Contains the application's exit code.}
{UnicodeToUtf8 function
- Converts a string of Unicode characters into a UTF-8 string.}
{WideCharToStrVar procedure
- Converts Unicode string to a single or multi byte character data.}
{CreateClassID function
- CreateClassID generates a new GUID and returns it as a string.
{OleStrToString function
- Copies data received from a COM interface to a string.
{Supports function
- Indicates whether a given object or interface supports a specified interface.
{VarComplexToPolar procedure
- Computes the polar coordinates that correspond to a custom Variant that
represents a complex number.}
FindDatabaseID function
- Returns the ID of a specified database.

FindFieldID function
- Returns the ID of a specified field.

FindTableID function
- Returns the ID of a specified table.

GetAttrID function
- Returns the ID of the attribute set associated with a field.
{AnsiToNative function
- Converts a string from the ANSI character set to the character set associated
with a given locale.}
{NativeCompareStr function
- Compares strings based on a database locale case sensitively.

NativeCompareStrBuf function
- Compares null-terminated strings based on a database locale case sensitively.
{PasswordDialog function
- Displays a dialog box that prompts the user for the password of a local
password-protected table.}
{CheckSqlTimeStamp procedure
- Checks whether a TSQLTimeStamp value represents a valid date and time.}
{DateTimeToSQLTimeStamp function
- Converts a TDateTime value to a TSQLTimeStamp value.}
{NullSQLTimeStamp constant
- Represents a NULL TSQLTimeStamp value.}
{IsAbortResult function
- Checks the return value from a modal form dialog and indicates whether the user
selected Abort or Cancel.}
{LoginDialog function
- Brings up the database Login dialog to allow the user to connect to a database
server.

LoginDialogEx function
- Brings up the database Login dialog to allow the user to connect to a database
server.    }
{RemoteLoginDialog function
- Brings up the database Login dialog to allow the user to connect to a database
server. }
{StripAllFromResult function
- Converts a TModalResult value from a constant that refers to all to the
corresponding simple constant.}
{AcquireExceptionObject function
- Allows an exception object to persist after the except clause exits.}
(*ExtractShortPathName function
- Converts a file name to the short 8.3 form.

IncludeTrailingBackslash function
- Ensures path name ends with delimiter

IncludeTrailingPathDelimiter function
- Ensures path name ends with delimiter.

IsPathDelimiter function
- Indicates whether the byte at position Index of a string is the path delimiter.*)
{FloatToTextFmt function
- Converts a floating-point value to to an unterminated character string, using
a specified format.    }
(*CreateGrayMappedRes function
- Remaps the standard gray colors in a bitmap resource with the system grays.

CreateMappedBmp function
- Changes the color table in a bitmap.       *)
{GetDefFontCharSet function
- Returns the character set of the default system font.}
{GraphicExtension function
- Returns the default file-name extension of a graphics object.}
{GraphicFilter function
- Returns a file filter compatible with the Filter property of an Open or Save
dialog.}
{GetExtensionVersion function
- Returns the name and version number of an ISAPI or NSAPI application.}
{Rename procedure
- Changes the name of an external file.}  // there are 2 renames!!
{Truncate procedure
- Deletes all the records after the current file position.}
SameFileName function
- Compares file names based on the current locale.*)
{DefaultTextLineBreakStyle variable
- Specifies the characters that are used by default to separate lines in text.}
{GetEnvironmentVariable function
- Returns environment variable value..!!!}
{Slice function
- Returns a sub-section of an array.}
{UnloadPackage procedure
- Unloads a package.         !!!}
{Exclude procedure
- Removes an element from a set.}

{Include procedure
- Adds an element to a set.!!!}
{FindClass function
- Finds and returns a class that is derived from TPersistent.}

{FindClassHInstance function
- Returns the instance handle for the module in which a class type is defined.
{GetClass function
- Returns a registered persistent class given its name.
IntToIdent function
- Uses a mapping array to convert integers into their corresponding string
identifiers.  }
{BeginThread function
- Spawns a separate thread of execution.

CheckSynchronize function
- Allows background threads to synchronize their execution with the main thread.

EndThread function
- Terminates the execution of a thread.

ForegroundTask function
- Indicates whether the current thread is running in the foreground.

IsMultiThread variable
- Indicates whether the application spawned additional threads using BeginThread
or TThread objects.

WakeMainThread variable
- Represents a method (event handler) that is forced into the main threads queue.
{FindCustomVariantType function
- Retrieves the object that implements a custom Variant type.

GetVariantManager procedure
- Returns the entry points of the routines that define variant behavior.

IsVariantManagerSet function
- Indicates whether variant support is implemented in an application.}
{VarToStr function
- Converts a variant to a string.  !!!}
AllocateHwnd function
- Creates a window that implements a specified window procedure.
DestroyMetaPict procedure
- Frees a metafile resource given its handle.
NewStyleControls variable
- Determines whether controls are drawn using the Windows 3.x look.}
SameNamespace function
- Indicates whether a specified node is defined within a specified namespace.


 TBitmap =  class(TGraphic)
   procedure LoadFromStream(Stream: TStream);
   procedure SaveToStream(Stream: TStream);
   property Canvas: TCanvas; read write;
   property Handle: HBITMAP; read write;
 end;  
  