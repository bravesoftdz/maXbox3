PROGRAM Bigint_Class_Tester;

//(Fast) binominal coefficient computing of the class TMyBigInt with format
// ------------------------------------------------

//uses Sysutils, MyBigInt; loc's=165

CONST
  SeparationChar = '.';
  
type
  Zahl = shortstring; //[0..9];
  TMyDatentyp = array of byte;

//...
var
  Zahl1, Zahl2, Ergebnis: TMyDatentyp;
  i: integer;
  
function Addition(aZahl1, aZahl2: TMyDatentyp): TMyDatentyp;
var
   i: Integer;
   tp: Tmydatentyp;
begin
  setarraylength(result, 1000);
  writeln(inttostr(high(azahl1)));
  writeln(inttostr(getarraylength(azahl1)));
  for i:= 0 to high(aZahl1) do
    result[i]:= aZahl1[i] + aZahl2[i];
end;



FUNCTION FormatInt64(i: int64): STRING;
VAR
  j : INTEGER;
BEGIN
  Result := IntToStr64(i);
  j := 3;
  WHILE Length(Result) > j DO BEGIN
    Insert(SeparationChar,
           Result,
           Length(Result) - j + 1);
    //Inc(j,4);
    j:= j+4;
  END;
END; 


function GetBigIntDirect: string;
  //unit mybigint
var mbResult: TMyBigInt;
     i: integer;
begin
  mbResult:= TMyBigInt.Create(333);
  try
    // Faktoren im Zaehler aufmultiplizieren
    for i:= 1  to 12 do 
      mbResult.Multiply(mbresult, mbresult);
    Result:= mbResult.ToString;
  finally 
    //FreeAndNil(mbResult);
    mbResult.Free;
  end;
end;


function GetBigInt: string;
  //unit mybigint
var mbResult: TMyBigInt;
     i: integer;
begin
  mbResult:= TMyBigInt.Create(1000);
  try
    // Faktoren im Zaehler aufmultiplizieren
    for i:= 1  to 55 do 
      mbResult.Multiply1(mbResult, 200001);
    Result:= mbResult.ToString;
  finally 
    //FreeAndNil(mbResult);
    mbResult.Free;
  end;
end;

//<PROCEDURE> 
var mtest: HRESULT;
    a: hwnd;
    aa: hdc;
    b: hglobal;
    //bb: hlocal;
    s: string;
    sa: ansistring;
    sw: widestring;
    wc: widechar;

BEGIN  //Main
//<Executable statements>
   //formatint(100000)
  {Writeln('Test very very large number 1: ')
  Writeln(GetBigIntDirect);
  Writeln('Test very large number: ')
  Writeln(GetBigInt);
  Writeln('');}
  Writeln('Big Lotto Combination 1600 of 5000!')
  Writeln('')
  Writeln(BinominalCoefficient(5000, 1600));    
  Writeln('')
  Writeln('Lotto Combination 6 of 45!')
  Writeln(BinominalCoefficient(45, 6));    
  Writeln('Lotto Combination 6 of 49!')
  Writeln(BinominalCoefficient(49, 6));  
  Writeln('');  

  Writeln(FormatBigInt(BinominalCoefficient(60, 10)));  
  Writeln('');  
  
  Writeln(FormatBigInt((BinominalCoefficient(5000, 1600))))
  Writeln(''); 
  Writeln(FormatInt(4100000))
  writeln(FloatToStr((Power(2,64))))
  writeln(((powerBig(10,308)))) //1.8 *10^308
  writeln(((powerBig(2,1024))))
  writeln('')
  writeln(((powerBig(10,38))))  //3.4 *10^38
  writeln(((powerBig(2,128))))
  writeln(((powerBig(2,128))))
  writeln(((powerBig(10,24))))
  
  setlength(Zahl1, 1000);
  setlength(Zahl2, 1000);
  //zahl1:= 952 zahl2:= 943
  zahl1[0]:=9;
  zahl1[1]:=5;
  zahl1[2]:=2;

  zahl2[0]:=9;
  zahl2[1]:=4;
  zahl2[2]:=3;

  //without carry bit
  Ergebnis:= Addition(Zahl1, Zahl2);
  for i:= 0 to 50 do
     write(inttoStr(Ergebnis[i]))
    
    {writeln(StringOfChar('A', 5)); 
    s:= 'max';
    writeln(s)
    writeln(inttostr(sizeof(s)))
    sa:= 'max';
    writeln(sa)
    writeln(inttostr(sizeof(sa)))
     sw:= 'max';
    writeln(sw)
    writeln(inttostr(sizeof(sw)))
    wc:= 'x';
    writeln(wc)
    writeln(inttostr(sizeof(wc)))}
   
    //posx
    //ansiindexstr
    //ansipos
     //ansidelete
  //speak(floattostr(power(2,64)))
  //Writeln(LoadFileAsString(ExePath+WIPEDIR+'newfile4.txt'));}
END. 

//-----------------------------app_template_loaded--------------------


ShortString For example, it is the structure in memory can be expressed as:

strShort = record
wLength: WORD;
szBuf: array of Char;
end;

In other words, each ShortString operation, do not need to traverse the string will be able to get the size of the string. In addition, the last of the string array is not a # 0 character as at the end. ShortString and therefore an array of C++ language string is not compatible.


AnsiString for example, under "Delphi6 Developer's Guide," a description of its structure can be expressed as follows:

strAnsi = record
nSize: Integer;
nRef: Integer;
nLength: Integer;
szBuf: array of Char;
end; 

   TMyBigInt = class
   private
     Len: Integer;
     Value: AnsiString;
     procedure Trim;
     procedure Shift(k: Integer);
     procedure MultiplyAtom(Multiplier1: TMyBigInt; Multiplier2: Integer);
   public
     constructor Create(iValue: Integer = 0);
     procedure Add(Addend1, Addend2: TMyBigInt);
     procedure Multiply(Multiplier1, Multiplier2: TMyBigInt); overload;
     procedure Multiply(Multiplier1: TMyBigInt; Multiplier2: Integer); overload;
     function ToString: string;
     procedure CopyFrom(mbCopy: TMyBigInt);
   end;
 



---------------------------------------------------
C Data Type | Object Pascal |  Description

-------------------------------------------------------------------------------------

LPSTR       PAnsiChar;  String >pointer
LPCSTR      PAnsiChar;  String >pointer
DWORD       Integer;    Whole numbers
BOOL        LongBool;   Boolean values
PBOOL       ^BOOL;      Pointer to a Boolean value
Pbyte       ^Byte;      Pointer to a byte value
PINT        ^Integer;   Pointer to an integer value
Psingle     ^Single;    Pointer to a single (floating point) value
PWORD       ^Word;      Pointer to a 16-bit value
PDWORD      ^DWORD;     Pointer to a 32-bit value
LPDWORD     PDWORD;     Pointer to a 32-bit value
UCHAR       Byte;       8-bit values (can represent characters)
PUCHAR      ^Byte;      Pointer to 8-bit values
SHORT       Smallint;   16-bit whole numbers
UINT        Integer;    32-bit whole numbers. Traditionally,
                        this was used to represent unsigned integers, but Object 
                        Pascal does not have a true unsigned integer data type.
PUINT       ^UINT;      Pointer to 32-bit whole numbers
ULONG       Longint;    32-bit whole numbers. Traditionally,
                        this was used to represent unsigned integers,
                        but Object Pascal does not have a true
                        unsigned integer data type.
PULONG      ^ULONG;     Pointer to 32-bit whole numbers
PLongint    ^Longint;   Pointer to 32-bit values
PInteger    ^Integer;   Pointer to 32-bit values
PSmallInt   ^Smallint;  Pointer to 16-bit values
PDouble     ^Double;    Pointer to double (floating point) values
LCID        DWORD;      A local identifier
LANGID      Word;       A language identifier
THandle     Integer;    An object handle. Many Windows API functions return a value
                        of type THandle, which identobject ifies that object within
                        Windows’internal object tracking tables.
PHandle     ^THandle;   A pointer to a handle
WPARAM      Longint;    A 32-bit message parameter. Under earlier versions of Windows,
                        this was a 16-bit data type.
LPARAM      Longint;    A 32-bit message parameter
LRESULT     Longint;    A 32-bit function return value
HWND        Integer;    A handle to a window. All windowed controls, child windows,
                        main windows, etc., have a corresponding window handle that
                        identifies them within Windows’internal tracking tables.
HHOOK       Integer;    A handle to an installed Windows system hook
ATOM        Word;       An index into the local or global atom table for a string
HGLOBAL     THandle;    A handle identifying a glob. allocated dynamic memory object.
                        Under 32-bit Windows, there is no distinction between globally
                        and locally allocated memory.
HLOCAL      THandle;    A handle identifying a locally allocated dynamic memory object.
                        Under 32-bit Windows, there is no distinction between globally
                        and locally allocated memory.
FARPROC     Pointer;    A pointer to a procedure, usually used as a parameter type in
                        functions that require a callback function
HGDIOBJ     Integer;    A handle to a GDI object. Pens, device contexts, brushes, etc.,
                        all have a handle of this type that identifies them within
                        Windows’internal tracking tables.
HBITMAP     Integer;    A handle to a Windows bitmap object
HBRUSH      Integer;    A handle to a Windows brush object
HDC         Integer;    A handle to a device context
HENHMETAFILE  Integer;  A handle to a Windows enhanced metafile object
HFONT       Integer;    A handle to a Windows logical font object
HICON       Integer;    A handle to a Windows icon object
HMENU       Integer;    A handle to a Windows menu object
HMETAFILE   Integer;    A handle to a Windows metafile object
HINST       Integer;    A handle to an instance object
HMODULE     HINST;      A handle to a module
HPALETTE    Integer;    A handle to a Windows color palette
HPEN        Integer;    A handle to a Windows pen object
HRGN        Integer;    A handle to a Windows region object
HRSRC       Integer;    A handle to a Windows resource object
HKL         Integer;    A handle to a keyboard layout
HFILE       Integer;    A handle to an open file
HCURSOR     HICON;      A handle to a Windows mouse cursor object
COLORREF    DWORD;      A Windows color reference value, containing values
                        for the red, green, and of ;bsp;blue components of a color
                        
                        
Das Buch oder eher der Bildband besticht durch wirklich exotisches Bildmaterial, in dem Sinne, dass die Aufnahmen selten und von besonderem Wert sind.
Es zeigt schon in den ersten Seiten ein Pasifal-Plakat, das in seiner dynamischen Kunst-Art einmalig ist. Der Autor verarbeitet ausschliesslich eigenes Bildmaterial mit optimaler Optik. Zu erwähnen sind die stimmungsvollen Fernaufnahmen auf S.16 Gotthard oder S.42 wie auch die seltenen Farbaufnahmen wie S.24. zeigt.
Auch die damalige TEEM als übergreifender Güterverkehr kommt zum Zuge und das perspektivische Material wird auch so präzise wie möglich datiert und bezeichnet wie der TEE Capitole du Matin auf S.67. Eine TEE Übersicht auf S.82 runden den Bildband ab, der auch mit interessanten Details überzeugt, z.B. S.97. Hier sieht man ein imposantes Beispiel von Industriedesign der EuroFima, die einiges an TEE Material lieferte.
