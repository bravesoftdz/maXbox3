PROGRAM FileClass;

//////////////////////////////////////////////////////////////////////
//  #sign:max: APSN21: 02.01.2014 21:37:51 
//  Purpose: TTxtFile - OO wrapper for standard Pascal TextFile type//
//  #path>ples\E:\maxbox\maxbox3\examples\                          //
//  precondition: file test text in data directory                  //
//  Lines of Code #locs:120
//  Ex. wrapper: of unit uFilexport;
//      q:= TTxtFile.Create(sd1.FileName);
//      q.ReWrite;
//      q.Write(intToStr(i));
//      q.Close; q.Free;
//
//////////////////////////////////////////////////////////////////////

Const TEXTOUT = 'hi world of code coverage with cover age';
      uFILENAME = 'classfiletest2.txt';

//############################################################################
// TEXTFILE CLASS App       mX4 Script Studio
//############################################################################
//TODO: change para in CreateTextFile to text to write
//TODO: call TBusObj_writeToFile from main

{TYPE <Type declarations>} 

  var FWait, switch: Boolean;
      ComPorts: TStrings;

//<FUNCTION>
//<PROCEDURE> 

procedure CreateTextFile(afilename: string);
var qt: TTxtFile;
begin
  qt:= TTxtFile.Create(aFileName);
  try
    qt.ReWrite;
  //qt.active:= true;
    qt.append;
    qt.Write(maxform1.memo2.text);
  finally
    qt.Close;
    qt.Free;
  end;  
end; 

procedure TBusObj_writeToFile(kList: TStringList);
 var qf: TTxtFile;
      i: integer;
 begin
 //constructor  base
   qf:= TTxtFile.Create(uFILENAME);
   qf.ReWrite;
   try
     if kList.count > 0 then
       for i:= 0 to kList.count -1 do
               qf.Writeln(kList.strings[i]);
   finally
     qf.Close;
     qf.Free
   end;
 end;

function TBusObj_readFromFile(rList: TStringList): TStringList;
var qa: TTxtFile;
     tmpString: String;
 begin
   qa:= TTxtFile.create(uFILENAME);
   qa.ReSet;
   try
     while not qa.Eof do begin
       qa.Readln(tmpString);
       rList.add(tmpString);
     end;
     result:= rList;
   finally
    qa.Close;
    qa.Free;
   end
 end;


procedure startOthello(sender: TObject);
var mst: TStString;
begin
  FWait:= false;
  writeln('othello demo started...');
    screen.cursor:= CRHandpoint;
    maxform1.reversi1click(sender);
    screen.cursor:= CRDefault;
  writeln('othello demo stopped...');
  FWait:= true;
end; 


Begin  //Main
//<Executable statements>
  //TOutlookExport_Spy;
  Writeln('');
  ComPorts:= TStringlist.Create;
  try
    EnumComPorts(ComPorts);
    Writeln('Start COM Port Command of Arduino COM: '+ComPorts[0]);  
  except
    Writeln('No COM Ports');
  end;    
  ComPorts.Free;
  //<Definitions>  
  //ares:= TResolver.create;
 { with TResolver.create do begin
   //writeln(inttostr(GetHostByName(gethostname)));
    Free;
   end;  }
   //startOthello(self);
   CreateTextFile('classfiletest.txt');
   OpenDoc(Exepath+'classfiletest.txt');
   //CreateMessageDlg
END. 

ref Docu 
test with Ctrl <J>TTxtFile 


 type
  TFileMode = fmClosed..fmOutput;
  TFileExt = string[3]; 
//Pattern: mediator
  TTrigger = array of boolean;
  TTriggerEvent = procedure (Sender: TObject; Trigger: TTrigger) of object;

  TTxtFile = class (TObject)
  private
    FDefaultExt: TFileExt;
    FTextFile: TextFile;
    function GetActive: Boolean;
    function GetEof: Boolean;
    function GetEoln: Boolean;
    function GetMode: TFileMode;
    function GetName: string;
    function GetSeekEoln: Boolean;
    procedure SetActive(state: Boolean);
    procedure SetMode(const NewMode: TFileMode);
  public
    constructor Create(Name : TFileName);
    destructor Destroy; override;
    procedure Append;
    procedure Assign(FName: string);
    procedure Close; virtual;
    procedure Flush;
    //function loadfromStreamFile(const aFileName: string; memStream:
    //                                  TMemoryStream ): Boolean;
    procedure ReadLn(var S : string);
    procedure ReSet; virtual;
    procedure ReWrite; virtual;
    procedure SetTextBuf(var Buf; Size : Word);
    procedure Write(const S : string);
    procedure WriteLn(const S : String);
    property Active: Boolean read GetActive write SetActive;
    property DefaultExt: TFileExt read FDefaultExt write FDefaultExt;
    property Eof: Boolean read GetEof;
    property Eoln: Boolean read GetEoln;
    property FileName: string read GetName write Assign;
    property SeekEoln: Boolean read GetSeekEoln;
    property state: TFileMode read GetMode write SetMode;
  end;
  
  def:  or ref: is in preparation
  



implementation

//############################################################################
// TApplication
//############################################################################

 
  http://i1-win.softpedia-static.com/screenshots/maXbox_5.png?1381322021
  
    RegisterMethod('Constructor Create(AOwner: TComponent)');
    RegisterConstructor(@TJvMail.Create, 'Create');
  
  
   RegisterMethod('Procedure Free');
   RegisterMethod(@TJvMail.Destroy, 'Free');
   
//5.6.7.

----app_template_loaded_code----