//MaxBox is a scripter tool with an inbuild delphi engine in one exe!
//designed for teaching and analyzing methods
//runs under Win, Mac and Linux (CLX) to build Delphi in a Box, loc's=180
//*************************************************************************

program TSerial_API_TestBox_RS232_Interface;

function PlaySound(sres: pchar; hmod: HMODULE; syncflag_: dword): Bool;
  external 'PlaySound@winmm.dll stdcall';

function QueryPerformanceCounter(ms: int64): int64;
  external 'QueryPerformanceCounter@kernel32.dll stdcall';


procedure SendSerialMessage(sender: TObject); forward;
procedure Serial_Form1_Receive(sender: TObject); forward;
procedure Serial_Form1_Close(Sender: TObject); forward;


Const MYS = 'maXCom bit for bit Serial!';
      MP3SONG = 'maxbox.mp3';
      DCOMPORT = 3;
      
type
  TBuf = array[0..15] of byte; 
  TLblArray = array[0..15-1] of TLabel;
     
var 
    mp3path: string;
    inFrm: TForm;
    edtSerial: TEdit;
    serial1: TSerial;
    tcom: TCOMManager;
    sbuf: TBuf;
    mbabuf: TByteArray;
    //SerExtDlg1: TSerPortComboBox
    SerPortComboBox1: TSerPortComboBox;
    SerBaudComboBox1: TSerBaudComboBox;
    SerDataBitsComboBox1: TSerDataBitsComboBox;
    //SerDTRCheckBox1: TSerDTRCheckBox;
    SerHandshakeComboBox1: TSerHandshakeComboBox;
    SerParityBitComboBox1: TSerParityBitComboBox;
    SerRTSCheckBox1: TSerRTSCheckBox;
    SerStopBitsComboBox1: TSerStopBitsComboBox;
    mserdlg: TSerStdDlg;

function CustomTimegetTime: int64;
var
  Frequenz, Zeit: int64;
begin
  if QueryPerformanceFrequency(Frequenz) = true then{ist die Funktion verfügbar}
  begin
    //Exception: Privileged instruction at 4.42
    QueryPerformanceCounter(Zeit);
    result:= Zeit div (Frequenz div 1000); {umrechnen auf 1/1000 Sekunde}
  end
  else begin
   result:= timegettime; {Wenn QueryPerformanceFrequency(Frequenz) nicht geht}
  end;
end;


procedure Serial_FormCreate(Sender: TObject);
var
  i: integer;
  mls: TStringList;
begin
  //mls:= TStringList.Create;
  tcom:= TCOMManager.Create;
  tcom.CheckPorts(16);
  mls:= tcom.Ports;
  for i:= 0 to mls.count - 1 do
    writeln('COM found: '+mls.strings[i]);
  //tcom.OnPortAdded:= OnAdded;           // add Intf
  //tcom.OnPortRemoved:= OnRemoved;       // removed Intf
  serial1:= TSerial.Create(self);
  with Serial1 do begin
    Baudrate:= 9600;
    DataBits:= db_8;
    BufSizeTrm:= 16384;
    BufSizeRec:= 16384;
    XOnChar:= #17;
    XOffChar:= #19;
    XOffLimit:= 8192;
    XOnLimit:= 512;
    ErrorChar:= '?';
    EofChar:= #26;
    EventChar:= #13;
    SyncEventHandling:= True;
    EnableEvents:= True;
    SyncWait:= True;
    COMPort:= DCOMPORT;
    //ThreadPriority:= tpNormal;
    //OnCOMRemoved:= Serial1COMRemoved;
  end;

  inFrm:= TForm.Create(self)
  with inFrm do begin
    position:= poScreenCenter;
    SetBounds(0,0,400,350)
    BorderStyle:= bsDialog;
    color:= clred;
    caption:= 'Serial Interpace in a ComBox'
    color:= clblue;
    show;
  end;  

  SerPortComboBox1:= TSerPortComboBox.Create(self);
  with SerPortComboBox1 do begin
    parent:= inFrm;
    Serial:= Serial1;
    SetBounds(8,40,100,22)
    enabled:= true;
    UpdateList;
  end;
  SerBaudComboBox1:= TSerBaudComboBox.Create(self);
  with SerBaudComboBox1 do begin
    parent:= inFrm;
    Serial:= Serial1;
    Text:= ' Baud';
    //TabOrder:= 6;
    SetBounds(128,40,100,22)
    enabled:= true;
  end;

  edtSerial:= TEdit.Create(self);
  with edtSerial do begin
    parent:= inFrm;
    Text:= ' Text to Send Baud in Text Mode';
    //TabOrder:= 6;
    SetBounds(8,160,250,25)
    enabled:= true;
  end;
  with TBitBtn.Create(inFrm) do begin
    Parent:= inFrm;
    setbounds(8, 200,150, 35);
    caption:= 'Send the &Serial';
    font.size:= 12;
    glyph.LoadFromResourceName(getHINSTANCE,'CL_MPPLAY');
    onclick:= @SendSerialMessage;
  end;
  with TBitBtn.Create(inFrm) do begin
    Parent:= inFrm;
    setbounds(180, 200,150, 35);
    caption:= 'Close the Serial';
    font.size:= 12;
    glyph.LoadFromResourceName(getHINSTANCE,'CL_MPSTOP');
    onclick:= @Serial_Form1_Close;
  end;
  with TBitBtn.Create(inFrm) do begin
    Parent:= inFrm;
    setbounds(8, 250,150, 35);
    caption:= 'Receive Serial';
    font.size:= 12;
    glyph.LoadFromResourceName(getHINSTANCE,'CL_MPPREV');
    onclick:= @Serial_Form1_Receive;
  end;
  SerBaudComboBox1.InitList(1200,115200);  // verfügbare Baudraten festlegen
  {SerDataBitsComboBox1:= TSerDataBitsComboBox.Create(self);
  SerDTRCheckBox1:= TSerDTRCheckBox.Create(self);
  SerHandshakeComboBox1:= TSerHandshakeComboBox.Create(self);
  SerParityBitComboBox1:= TSerParityBitComboBox.Create(self);
  SerRTSCheckBox1:= TSerRTSCheckBox.Create(self);
  SerStopBitsComboBox1:= TSerStopBitsComboBox.Create(self);}
  //SerPortComboBox1.Serial:= Serial1;
  //SerPortComboBox1.Free;
end;

procedure NewTrmData;
// Zufallszahlen für Senden
var i: byte;
begin
  for i:= 0 to high(sbuf)-1 do sBuf[i]:= Random(256);
end;

procedure NewTrmData2;
var i: byte;
begin
  for i:= 0 to 100 do mbaBuf[i]:= Random(112);
end;

//****************************Event Handler°°°°°°°°°°°°°°°°°°°°°°°°

procedure Serial_Form1_Receive(sender: TObject);
var i: integer;
  K: TTData;
  mcs: TSerialConfig;
begin
  //for i:= 0 to 1 do Serial1.TransmittText(edtSerial.Text);
   //mcs:= Serial1.GetConfig;
   Writeln('FReceived of '+edtSerial.Text);
   Writeln('send buffer '+inttoStr(Serial1.BufTrm ));     //send
   Writeln('receive buffer before '+inttoStr(Serial1.BufRec));    //get
   Writeln(inttoStr(Serial1.BaudRate)); 
   Writeln('received: '+Serial1.ReceiveSerialText)
   Writeln('receive buffer after '+inttoStr(Serial1.BufRec));     //get
end;


procedure SendSerialMessage(sender: TObject);
var i,n: integer;
  K: TTData;
  mcs: TSerialConfig;
begin
  //for i:= 0 to 1 do Serial1.TransmittText(edtSerial.Text);
   //mcs:= Serial1.GetConfig;
   mserdlg:= TSerStdDlg.create(self)
   mserdlg.serial:= Serial1;
   mserdlg.Execute;
   Serial1.Active:= true;
   Writeln(Serial1.ConfigToStr(mcs)); 
   Serial1.SendSerialText(edtSerial.Text)
   Writeln('Transmit of '+edtSerial.Text);
   Writeln('send buffer '+inttoStr(Serial1.BufTrm));     //send
   Writeln('receive buffer '+inttoStr(Serial1.BufRec));     //get
   Writeln(inttoStr(Serial1.BaudRate)); 
   //n:= Serial1.SendSerialData(mbaBuf,SizeOf(mbaBuf));
   //Writeln('received '+Serial1.ReceiveSerialText)
   if Serial1.OpenComm then begin
   //if Serial1.CanTransmitt then begin
    Serial1.TransmittText(edtSerial.Text);
    NewTrmData;
    n:= Serial1.SendSerialData(mbaBuf,SizeOf(mbaBuf));
    Writeln('Transmit of Free Message Data in Text Mode');
    Writeln(edtSerial.Text)
  end;
end;


procedure Serial_Form1_Close(Sender: TObject);
begin
  //SerPortComboBox1.Free;
  //SerBaudComboBox1.Free;
  {SerDataBitsComboBox1.Free;
  SerDTRCheckBox1.Free;
  SerHandshakeComboBox1.Free;
  SerParityBitComboBox1.Free;
  SerRTSCheckBox1.Free;
  SerStopBitsComboBox1.Free;}
  edtSerial.Free; 
  if assigned(mserdlg) then 
    mserdlg.Free;
  Serial1.CloseComm; 
  Serial1.Active:= false;
  serial1.Free;
  //mlS.Free;
  tcom.Free;
  Writeln('Interface COM closed')
end;


procedure Serial_Form1_Button1OpenClick(Sender: TObject);
var mt: TTText;
begin
  //mt:= mst_function('template_fdfg');
  if Serial1.OpenComm then begin // Schnittstelle versuchen zu öffnen
    ShowMessage('Interface COM'+IntToStr(Serial1.COMPort)+' opened');
    Serial1.Active:= true;
    //Serial1.TransmittText(edtSerial.Text)
    Serial1.SendSerialText(edtSerial.Text)
    Writeln('send buffer '+inttoStr(Serial1.BufTrm));  //send
    Writeln('receive buffer '+inttoStr(Serial1.BufRec));  //get
    //Serial1.Free;
  if Serial1.OpenComm then
      Serial1.TransmittText(edtSerial.Text);
    //Serial1.TransmittText:= mt;
  end else
    ShowMessage('Error by opening COM')
end;

function mAbout: string;
begin
  result:= #13+#10+
    '****************************************************'+#13#10+
    '*                                                  *'+#13#10+
    '* Datapower of the ObjectOriented PowerShell OOPS  *'+#13#10+
    '* with the component  "TSerial"  and maXCom        *'+#13#10+
    '*                                                  *'+#13#10+
    '* (p) 2005, 2012 max@kleiner.com                   *'+#13#10+
    '*                                                  *'+#13#10+
    '****************************************************'+#13#10;
    //ShowMessage(mst)
end;


begin  //main
  //Writeln(inttostr64(Customtimegettime))     //draft beta
  Writeln(inttostr64(timeGetTime))     
  mp3path:= ExePath+'examples\'+MP3SONG;
  ShowMessage('maXCom rocks ' + MYS +mAbout)
  Serial_FormCreate(self);
  Serial_Form1_Button1OpenClick(self)
  //Serial_Form1_Close(self);
  writeln(floatToStr(Power(2,64)))
  //ProgIDToClassID('3456');
  //swapgrid
  //datediff
end.


Load examples pas_*.txt from directory and press F9!
memo1 is script editor
memo2 is output space
check the demo: 38_pas_box_demonstrator.txt
  new version and examples from
     http://www.softwareschule.ch/maxbox.htm
     
     
 lpszName points to a registry entry
' Do not use SND_RESOURSE or SND_FILENAME
Private Const SND_ALIAS& = &H10000
' Playsound returns immediately
' Do not use SND_SYNC
Private Const SND_ASYNC& = &H1
' The name of a wave file.
' Do not use with SND_RESOURCE or SND_ALIAS
Private Const SND_FILENAME& = &H20000
' Unless used, the default beep will
' play if the specified resource is missing
Private Const SND_NODEFAULT& = &H2
' Fail the call & do not wait for
' a sound device if it is otherwise unavailable
Private Const SND_NOWAIT& = &H2000
' Use a resource file as the source.
' Do not use with SND_ALIAS or SND_FILENAME
Private Const SND_RESOURCE& = &H40004
' Playsound will not return until the
' specified sound has played.  Do not
' use with SND_ASYNC
Private Const SND_SYNC& = &H0     



(******************************************************************************)
(*                                                                            *)
(*   Beispiel für die Übertragung von Binärdaten mit der Komponente TSerial   *)
(*   (c) 1998-2004 Rainer Reusch und Toolbox                                  *)
(*                                                                            *)
(*   Borland Delphi 3.0, 4.0, 5.0, 6.0  to maXbox in D2007 max                *)
(*   Dynamic Calling of Objects                                                                          *)
(******************************************************************************)

unit SerialUnit1;

interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs,
  StdCtrls, ComCtrls, ExtCtrls, Serial, SerDlgs;

type
  TBuf = array[0..15] of byte;
  TLblArray = array[0..SizeOf(TBuf)-1] of TLabel;

  TForm1 = class(TForm)
    StatusBar1: TStatusBar;
    ButtonSetup: TButton;
    ButtonOpenClose: TButton;
    ButtonTransmitt: TButton;
    ButtonReceive: TButton;
    GroupBox1: TGroupBox;
    Label1: TLabel;
    Label2: TLabel;
    LabelTrmBuf: TLabel;
    LabelRecBuf: TLabel;
    GroupBox2: TGroupBox;
    LabelRefT: TLabel;
    GroupBox3: TGroupBox;
    LabelRefR: TLabel;
    //Serial1: TSerial;
    //SerExtDlg1: TSerComboBox;
    Timer1: TTimer;
    ButtonClose: TButton;
    ListBox1: TListBox;
    Label3: TLabel;
    Button1: TButton;
    Button2: TButton;
    Button3: TButton;
    Label4: TLabel;
    Label5: TLabel;
    Label6: TLabel;
    Label7: TLabel;
    procedure FormCreate(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormDestroy(Sender: TObject);
    procedure ButtonSetupClick(Sender: TObject);
    procedure ButtonOpenCloseClick(Sender: TObject);
    procedure ButtonTransmittClick(Sender: TObject);
    procedure ButtonReceiveClick(Sender: TObject);
    procedure Timer1Timer(Sender: TObject);
    procedure ButtonCloseClick(Sender: TObject);
    procedure Serial1COMRemoved(Sender: TObject);
    procedure Button1OpenClick(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure FormActivate(Sender: TObject);

  private
    { Private-Deklarationen }
    LabelTrm, LabelRec : TLblArray;
    RecBuf, TrmBuf : TBuf;
    serial1: TSerial;
    //SerExtDlg1: TSerPortComboBox
    SerPortComboBox1: TSerPortComboBox;
    SerBaudComboBox1: TSerBaudComboBox;
    SerDataBitsComboBox1: TSerDataBitsComboBox;
    SerDTRCheckBox1: TSerDTRCheckBox;
    SerHandshakeComboBox1: TSerHandshakeComboBox;
    SerParityBitComboBox1: TSerParityBitComboBox;
    SerRTSCheckBox1: TSerRTSCheckBox;
    SerStopBitsComboBox1: TSerStopBitsComboBox;

    procedure OnAdded(Sender: TObject);
    procedure OnRemoved(Sender: TObject);
    procedure ViewMsg(AMessage : string);
    procedure ViewBuf(var Buf : TBuf; var LblArray : TLblArray);
    procedure NewTrmData;
  public
    { Public-Deklarationen }
  end;

var
  Form1: TForm1;

implementation

//{$R *.DFM}


procedure TForm1.Serial1COMRemoved(Sender: TObject);
// Ereignis innerhalb TSerial
// die von der Komponente geöffnete Schnittstelle wurde entfernt
begin
  ViewMsg('Opened Interface has been moved');
end;

procedure TForm1.ViewMsg(AMessage : string);
// Meldung in ListBox anzeigen
begin
  ListBox1.Items.Add(AMessage);
  ListBox1.TopIndex:=ListBox1.TopIndex+1;
end;

procedure TForm1.OnAdded(Sender: TObject);
// COMManager-Ereignis
// eine serielle Schnittstelle ist dazu gekommen
begin
  ViewMsg('Added Interface on COMPort! ');
end;

procedure TForm1.OnRemoved(Sender: TObject);
// COMManager-Ereignis
// eine serielle Schnittstelle wurde entfernt
begin
  ViewMsg('Closed Interface on COMPort!');
end;


procedure TForm1.FormCreate(Sender: TObject);
var
  i : integer;
begin
  serial1:= TSerial.Create(self);
  COMManager.CheckPorts(16);
  COMManager.OnPortAdded:= OnAdded;           // dazugekommene Schnittstelle
  COMManager.OnPortRemoved:= OnRemoved;       // entfernte Schnittstelle

 // SerPortComboBox1:= TSerPortComboBox.Create(self);
  //SerBaudComboBox1.InitList(1200,115200);    // verfügbare Baudraten festlegen
  SerPortComboBox1:= TSerPortComboBox.Create(self);
 
  with Serial1 do begin
    Baudrate:= 9600;
    DataBits:= db_8;
    BufSizeTrm:= 16384;
    BufSizeRec:= 16384;
    XOnChar:= #17;
    XOffChar:= #19;
    XOffLimit:= 8192;
    XOnLimit:= 512;
    ErrorChar:= '?';
    EofChar:= #26;
    EventChar:= #13;
    SyncEventHandling:= True;
    EnableEvents:= True;
    SyncWait:= True;
    COMPort:= 1;
    ThreadPriority:= tpNormal;
    OnCOMRemoved:= Serial1COMRemoved;
    //left:= 6;
    //top:= 96;
  end;

  SerBaudComboBox1:= TSerBaudComboBox.Create(self);
  //SerPortComboBox1.Serial:= Serial1;
  SerDataBitsComboBox1:= TSerDataBitsComboBox.Create(self);
  SerDTRCheckBox1:= TSerDTRCheckBox.Create(self);
  SerHandshakeComboBox1:= TSerHandshakeComboBox.Create(self);
  SerParityBitComboBox1:= TSerParityBitComboBox.Create(self);
  SerRTSCheckBox1:= TSerRTSCheckBox.Create(self);
  SerStopBitsComboBox1:= TSerStopBitsComboBox.Create(self);

  Randomize;
  for i:=0 to SizeOf(TBuf)-1 do begin
    LabelTrm[i]:=TLabel.Create(Self);
    with LabelTrm[i] do begin
      Parent:=GroupBox2;
      AutoSize:=false;
      Width:=14;
      Height:=13;
      Top:=LabelRefT.Top;
      Left:=LabelRefT.Left+16*i;
      Caption:='00';
    end;
    LabelRec[i]:=TLabel.Create(Self);
    with LabelRec[i] do begin
      Parent:=GroupBox3;
      AutoSize:=false;
      Width:=14;
      Height:=13;
      Top:=LabelRefR.Top;
      Left:=LabelRefR.Left+16*i;
      Caption:='00';
    end;
  end;
end;

procedure TForm1.FormShow(Sender: TObject);
begin
  //  a second monitor
end;

procedure TForm1.FormActivate(Sender: TObject);
begin
   with SerPortComboBox1 do begin
    Serial:= Serial1;
    TabOrder:= 5;
    Left:= 8;
    Height:= 22;
    Top:= 24+15;
    Width:= 88;
    enabled:= true;
  end;
  SerPortComboBox1.UpdateList;
  with SerBaudComboBox1 do begin
    Serial:= Serial1;
    Text:= ' Baud';
    TabOrder:= 6;
    Left:= 128;
    Height:= 22;
    Top:= 24+15;
    Width:= 88;
    enabled:= true;
  end;
 SerBaudComboBox1.InitList(1200,115200);    // verfügbare Baudraten festlegen

  //SerBaudComboBox1.SetBounds(20,300,150, 30);
  //SerPortComboBox1.SetBounds(20,250, 150, 30);
 with SerDataBitsComboBox1 do begin
    Serial:= Serial1;
    Text:= ' Bit';
    Max:= db_8;
    TabOrder:= 7;
    Left:= 8;
    Height:= 22;
    Top:= 72+10;
    Width:= 88;
    enabled:= true;
    updateList;
  end;
  with SerStopBitsComboBox1 do begin
    Serial:= Serial1;
    Text:= ' Bit';
    TabOrder:= 8;
    Left:= 128;
    Height:= 22;
    Top:= 72+10;
    Width:= 88;
    enabled:= true;
    updateList;
  end;
  with SerParityBitComboBox1 do begin
    Serial:= Serial1;
    TabOrder:= 9;
    Left:= 9;
    Height:= 22;
    Top:= 120+10;
    Width:= 88;
    enabled:= true;
    updateList;
  end;
  with SerHandshakeComboBox1 do begin
    Serial:= Serial1;
    ViewNone:= True;
    ViewSoft:= True;
    ViewRTSCTS:= True;
    ViewDTRDSR:= True;
    TextNone:= 'none';
    TextSoft:= 'XOn/XOff';
    TextRTSCTS:= 'RTS/CTS';
    TextDTRDSR:= 'DTR/DSR';
    TabOrder:= 10;
    Left:= 128;
    Height:= 22;
    Top:= 120+10;
    Width:= 88;
    enabled:= true;
    updateList;
  end;
  with SerRTSCheckBox1 do begin
    Serial:= Serial1;
    Caption:= 'RTS activ';
    TabOrder:= 11;
    Left:= 9;
    Height:= 13;
    Top:= 160+10;
    Width:= 70;
  end;
  with SerDTRCheckBox1 do begin
    Serial:= Serial1;
    Caption:= 'DTR activ';
    TabOrder:= 12;
    Left:= 128;
    Height:= 13;
    Top:= 160+10;
    Width:= 70;
  end;


end;

procedure TForm1.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  Timer1.Enabled:= false;
  SerPortComboBox1.Free;
  Serial1.CloseComm; 
  Serial1.Active:= false;
  serial1.Free;
end;

procedure TForm1.FormDestroy(Sender: TObject);
var
  i : integer;
begin
  for i:=0 to SizeOf(TBuf)-1 do begin
    LabelTrm[i].Free;
    LabelRec[i].Free;
  end;
end;

procedure TForm1.ViewBuf(var Buf : TBuf; var LblArray : TLblArray);
// Puffer-Inhalt anzeigen
var
  i : integer;
begin
  for i:=0 to SizeOf(TBuf)-1 do
    LblArray[i].Caption:=IntToHex(Buf[i],2);
end;

procedure TForm1.NewTrmData;
// Zufallszahlen für Senden
var
  i : integer;
begin
  for i:=0 to SizeOf(TBuf)-1 do TrmBuf[i]:=Random(256);
end;

procedure TForm1.ButtonSetupClick(Sender: TObject);
begin
  //SerExtDlg1.Show;
end;

procedure TForm1.ButtonOpenCloseClick(Sender: TObject);
begin
  if Serial1.Active then begin  // schließen
    Serial1.CloseComm;
    ButtonSetup.Enabled:=true;
    ButtonOpenClose.Caption:='&Open';
    ButtonTransmitt.Enabled:=false;
    ButtonReceive.Enabled:=false;
    Timer1.Enabled:=false;
    StatusBar1.SimpleText:='Interface has been closed';
  end
  else
  begin  // öffnen
    if Serial1.OpenComm then begin
      ButtonSetup.Enabled:=false;
      ButtonOpenClose.Caption:='Clo&se';
      ButtonTransmitt.Enabled:=true;
      ButtonReceive.Enabled:=true;
      Timer1.Enabled:=true;
      StatusBar1.SimpleText:='Interface is open';
    end
    else begin
      MessageBeep(0);
      StatusBar1.SimpleText:='Error during open Interface!';
    end;
  end;
end;

procedure TForm1.ButtonTransmittClick(Sender: TObject);
var
  n : integer;
begin
  NewTrmData;
  ViewBuf(TrmBuf,LabelTrm);
  n:=Serial1.TransmittData(TrmBuf,SizeOf(TrmBuf));
  LabelTrmBuf.Caption:=IntToStr(Serial1.BufTrm);
  StatusBar1.SimpleText:=IntToStr(n)+' Bytes send';
end;

procedure TForm1.ButtonReceiveClick(Sender: TObject);
var
  n : integer;
begin
  n:=Serial1.BufRec;
  if n>SizeOf(RecBuf) then n:=SizeOf(RecBuf);
  n:=Serial1.ReceiveData(RecBuf,n);
  StatusBar1.SimpleText:=IntToStr(n)+' Bytes received';
  ViewBuf(RecBuf,LabelRec);
end;

procedure TForm1.Timer1Timer(Sender: TObject);
begin
  LabelTrmBuf.Caption:= IntToStr(Serial1.BufTrm)+' Byte';
  LabelRecBuf.Caption:= IntToStr(Serial1.BufRec)+' Byte';
end;

procedure TForm1.Button1OpenClick(Sender: TObject);
begin
  if Serial1.OpenComm then  // Schnittstelle versuchen zu öffnen
    ViewMsg('Interface COM'+IntToStr(Serial1.COMPort)+' opened')
  else
    ViewMsg('Error by opening')
end;

procedure TForm1.Button2Click(Sender: TObject);
const
  s = 'TSerial 4.2 with Lazarus in maXbox -----   ';
var
  i : integer;
begin
  for i:= 0 to 15 do Serial1.TransmittText(s);
    ViewMsg('Transmit of Data');
    ViewMsg(s)
end;

procedure TForm1.Button3Click(Sender: TObject);
begin
  Serial1.CloseComm;
  ViewMsg('Interface COM closed')
end;

procedure TForm1.ButtonCloseClick(Sender: TObject);
begin
  Close;
end;

end.
     

just inside maXbox
         ____    ___   _      ____    _   _   _
        |  _ \  |  _| | |    |  _ \  | | | | | |
        | | . | | |_  | |    | |_| | | |_| | | |
        | | | | |  _| | |    |  __/  |  _  | | |          
        | |_. | | |_  | |__  | |     | | | | | |                      
        |____/  |___| |____| |_|     |_| |_| |_|                                   

