{**********************************************************************
 * Project  : LED BOX System Arduino Function Overview
 * App Name : 301_LED_Arduino3.txt, delphi_leds.pde :loc's = 353 
 * Purpose  : Demonstrates cPort COM with Arduino
 * Date     : 09/25/2012  -  17:07
 * History  : convert CPort Library to maXbox Aug 2012
 *          : system save data looger for mX3.9.2, finished yet!!
            : communicates with COM Port to USB arduino LED lights;
 **********************************************************************}

Program Arduino_LED_3_Minimal;

{@BOOL WINAPI MessageBeep(
  __in  UINT uType  );}
//Procedure ExecuteThread(afunc: TThreadFunction; var thrOK: boolean);


function MessageBoxTimeOut(hWnd: HWND; lpText: PChar; lpCaption: PChar; uType: UINT;
                wLanguageId: WORD; dwMilliseconds: DWORD): Integer;
             external 'MessageBoxTimeoutA@user32.dll stdcall';
  
Const
  BACKMAP = 'examples\images\bmp47.bmp';
  //BACKMAP = 'examples\images\bmp33.bmp';
  SIG ='<--------->';
  
var
  mytimestamp: TDateTime;
  
//*******************************COM Port Arduino*****************************//

  chk_led1, chk_led2, chk_led3, chk_led4, chk_led5: TCheckBox;
  btn_connect, btn_Setup, btn_loop: TBitBtn;
  statBar: TStatusBar;
  comFrm: TForm;
  cPort: TComPort;


procedure LED_Checker(ab: boolean; checker: boolean);
begin
  if checker then begin
    chk_led1.Checked:= ab;
    chk_led2.Checked:= ab;
    chk_led3.Checked:= ab;
    chk_led4.Checked:= ab;
    chk_led5.Checked:= ab
  end else begin  
    chk_led1.Enabled:= ab;
    chk_led2.Enabled:= ab;
    chk_led3.Enabled:= ab;
    chk_led4.Enabled:= ab;
    chk_led5.Enabled:= ab;
  end;
end;  

procedure TForm1_btn_connectClick(Sender: TObject);
begin
  if cPort.Connected then begin
     btn_connect.Caption:= 'Connect';  // Toggle the caption of Connection Button !
     btn_Setup.Enabled:= True;         // If not connected, lets enable the Setup Button
     btn_loop.Enabled:= false;         // Knight Rider demo button is disabled at first
      // This block resets the state of all Leds to Off
      // According to Arduino Code the Chars A,B,C,D,E are used
      // to set Digital Pins (2-6) to LOW
     with cPort do begin
        WriteStr('A');
        WriteStr('B');
        WriteStr('C');
        WriteStr('D');
        WriteStr('E');
     end;  
      // This block resets the state of all Check Boxes to Unchecked
       LED_Checker(false, true);
      //-----------------------------------------------
      cPort.Close;              // COM Port in use is closed
      statBar.Panels[1].Text:='Disconnected';  
      // This block disables the check boxes
      // so the user cannot change them if COM Port is disconnected
      LED_Checker(false, false); //enabler
      //------------------------------------------------
    end else begin
      btn_connect.Caption:='Disconnect';   // Toggle the caption of Connection Button
      btn_Setup.Enabled:=False;            // If not connected, lets disable Setup Button
      btn_loop.Enabled:=true;              // Now that conection Rider demo button is enabled
      cPort.Open;                           // COM Port in use is finally opened
      statBar.Panels[1].Text:='Connected';  
      // This block enables the check boxes
      // so the user can change them to set LED states when COM Port is connected
      LED_Checker(true, false);
    end
end;

procedure TForm1_btn_SetupClick(Sender: TObject);
begin
  cPort.ShowSetupDialog;                                 // Opens the predefined Setup Dialog  (part of ComPort component)
  statBar.Panels[0].Text:= 'Port in use ' + cPort.Port;  // Status is set to display Port in use after setup dialog
end;


procedure TForm1_FormCreateCom(Sender: TObject);
begin
  cPort:= TComPort.Create(self);
  with cPort do begin
    BaudRate:= br9600;
    Port:= 'COM5';
    Parity.Bits:= prNone;
    StopBits:= sbOneStopBit;
    DataBits:= dbEight;
   {FlowControl.OutCTSFlow:= False;
    FlowControl.OutDSRFlow:= False;
    FlowControl.ControlDTR:= dtrDisable;
    FlowControl.ControlRTS:= rtsDisable;
    FlowControl.XonXoffOut:= False;
    FlowControl.XonXoffIn:= False;}
  end;
  statBar.Panels[0].Text:='Port in use '+ cPort.Port; //show predefined Port in use at begining of program execution
  if cPort.Connected=true then
    statBar.Panels[1].Text:= 'Connected'    
  else
    statBar.Panels[1].Text:= 'Disconnected'
end;

// Next are the procedures to turning ON and OFF each led using the variables
// defined on both Arduino code and Delphi code.
// Sending the predifined vars thru serial comm (on byte at the time)
// Ports 2,3,4,5,6 are turned ON by sending it corresponding var 1,2,3,4,5
// and they are turned OFF by sending it corresponding var A,B,C,D,E

procedure chk_led1Click(Sender: TObject);
begin
  if chk_led1.Checked=true then
    cPort.WriteStr('1')
  else
    cPort.WriteStr('A');
  writeln('debug: com led 1 signal');
 end;

procedure chk_led2Click(Sender: TObject);
begin
  if chk_led2.Checked=true then
    cPort.WriteStr('2')
  else cPort.WriteStr('B')
end;

procedure chk_led3Click(Sender: TObject);
begin
  if chk_led3.Checked=true then
    cPort.WriteStr('3')
  else cPort.WriteStr('C')
end;

procedure chk_led4Click(Sender: TObject);
begin
  if chk_led4.Checked=true then
    cPort.WriteStr('4')
  else cPort.WriteStr('D')
end;

procedure chk_led5Click(Sender: TObject);
begin
  if chk_led5.Checked=true then
    cPort.WriteStr('5')
  else cPort.WriteStr('E')
end;
// Here ends the ON/OFF procedures for each LED

procedure TForm1_FormClose(Sender: TObject; var Action: TCloseAction);
begin
  if cPort.Connected then begin
    cPort.WriteStr('A');     // If the application is closed, its good to leave
    cPort.WriteStr('B');     // everything as we found it at start.
    cPort.WriteStr('C');     // So we reset all the leds to OFF
    cPort.WriteStr('D');
    cPort.WriteStr('E');
    cPort.Close;
  end
end;

procedure TForm1_btn_loopClick2(Sender: TObject);
var i: byte;
begin
// We turn off all Led Check Boxes to allow a clean state before and after Knight Rider mode
   LED_Checker(false, true);
// Here begins the rough mode of Knight Rider Demo ;)
    try
      with cPort do begin
        for i:= 1 to 5 do begin
          WriteStr('1'); Sleep(50);
          WriteStr('A'); Sleep(50);
          WriteStr('1'); Sleep(150);
          WriteStr('A'); Sleep(150);
          WriteStr('1'); Sleep(450);
          WriteStr('A'); Sleep(250);
          WriteStr('1'); Sleep(150);
          WriteStr('A'); Sleep(150);
          WriteStr('1'); Sleep(50);
          WriteStr('A'); Sleep(1000); 
        end;
      end;
   except
      Showmessage('comport not in use - connect first'); 
   end;    
end;

Procedure LabelFactory(a,b,c,d: byte; title: shortstring);
begin
  with TLabel.create(self) do begin
    parent:= comfrm;
    SetBounds(a,b,c,d);
    Caption:= title
  end;
end;

Procedure CheckBoxFactory(a,b,c,d: byte; title: shortstring;
                          abox: TCheckbox; anevent: TNotifyEvent);
begin
  with abox do begin
    parent:= comfrm;
    SetBounds(a,b,c,d)
    Caption:= title;
    Enabled:= False;
    //OnClick:= anevent;
  end;
end;

Procedure BtnFactory(a,b,c,d: smallint; title: shortstring; apic: shortstring;
                          abtn: TBitBtn; anevent: TNotifyEvent);
begin
 with abtn do begin
   parent:= comfrm;
   setbounds(a,b,c,d)
   font.size:= 12;
   glyph.LoadFromResourceName(HINSTANCE, apic); //Knownfile
   mXButton(05,05,width, height,12,12,handle);
   caption:= title;
   //onClick:= anevent;
 end;
end; 
   
//******************************* Form Build********************************
procedure InitComPortForm;
begin
 comFrm:= TForm.create(self);
 with comFrm do begin
   //FormStyle := fsStayOnTop;
   Position:= poScreenCenter;
   caption:='COM Port meets Arduino LED - DblClick to Save Outline';
   //color:= clsilver;
   width:= 700; height:= 550;
   //onCreate:= @TForm1_FormCreate;        
   onClose:= @TForm1_FormClose;
   Show;
   canvas.brush.bitmap:= getBitmapObject(Exepath+'examples\images\bmp47.bmp');
   Canvas.FillRect(Rect(600,400,210,100));
 end;

 btn_Setup:=  TBitBtn.create(comfrm);   //Constructors
 btn_Loop:= TBitBtn.create(comfrm);
 btn_connect:= TBitBtn.create(comfrm);
 btn_connect.onClick:= @TForm1_btn_connectClick;
 BtnFactory(180,440,150,55, 'C&onnect Node','CL_MPNEXT',btn_connect, NIL);
 btn_loop.onClick:= @TForm1_btn_loopClick2;
 BtnFactory(340,440,150,55, '&Knight Rider','CL_MPPLAY',btn_loop, NIL);
 btn_Setup.onClick:= @TForm1_btn_SetupClick;
 BtnFactory(500,440,150,55, '&COM Settings','LEDbulbon',btn_Setup, NIL);

  chk_led1:= TCheckBox.create(self)
  chk_led1.OnClick:= @chk_led1Click;
  CheckBoxFactory(16,42,57,17, 'Led 1',chk_led1,NIL);
  chk_led2:= TCheckBox.create(self)
  chk_led2.OnClick:= @chk_led2Click;
  CheckBoxFactory(16,66,57,17, 'Led 2',chk_led2,NIL);
  chk_led3:= TCheckBox.create(self)
  chk_led3.OnClick:= @chk_led3Click;
  CheckBoxFactory(16,90,57,17, 'Led 3',chk_led3,NIL);
  chk_led4:= TCheckBox.create(self)
  chk_led4.OnClick:= @chk_led4Click;
  CheckBoxFactory(16,114,57,17, 'Led 4',chk_led4,NIL);
  chk_led5:= TCheckBox.create(self)
  chk_led5.OnClick:= @chk_led5Click;
  CheckBoxFactory(16,138,57,17, 'Led 5',chk_led5,NIL);

  with TLabel.create(self) do begin
    parent:= comfrm;
     setBounds(16,12,69,13)
     Caption:= 'LED Control';
     Font.Charset:= DEFAULT_CHARSET;
     Font.Color:= clMaroon;
     Font.Size:= 13;
     Font.Name:= 'MS Sans Serif';
     Font.Style:= [fsBold];
  end;
  with TLabel.create(self) do begin
    parent:= comfrm;
     setBounds(155,12,69,13)
     Caption:= 'Arduino PIN';
     Font.Charset:= DEFAULT_CHARSET;
     Font.Color:= clNavy;
     Font.Size:= 13;
     Font.Name:= 'MS Sans Serif';
     Font.Style:= [fsBold];
  end;
  LabelFactory(80,42,39,13, SIG)
  LabelFactory(80,66,39,13, SIG)
  LabelFactory(80,90,39,13, SIG)
  LabelFactory(80,114,39,13, SIG)
  LabelFactory(80,138,39,13, SIG)
 
  LabelFactory(156,42,38,13, 'Digital 2')
  LabelFactory(156,66,38,13, 'Digital 3')
  LabelFactory(156,90,38,13, 'Digital 4')
  LabelFactory(156,114,38,13, 'Digital 5')
  LabelFactory(156,138,38,13, 'Digital 6')
 
  with TDateTimePicker.Create(self) do begin
    parent:= comfrm;
    date;
    top:= 190; left:= 15;
    calAlignment:= albottom;
  end;
 
  statBar:= TStatusBar.create(self);
  with statBar do begin
    parent:= comFrm;
    //simplepanel:= true;
    showhint:= true;
    hint:= 'this is a LED box State';
     Panels.add;
     panels.items[0].width:= 200;
     panels.items[0].text:= '200';
     Panels.add;
     panels.items[1].width:= 150;
     panels.items[1].text:= '150';
  end;
  TForm1_FormCreateCom(self); 
end;   //******************************End Form Build************************
   

begin   //main of LED BOX App
   //InifileRead;
   //ProcessMessagesOFF;
   writeln('Thread ID :'+intToStr(CurrentThreadID))
   writeln('Process ID :'+intToStr(CurrentProcessID))
   writeln('machine name is: '+getHostName)
   writeln('user name is: '+getUserName)
   mytimestamp:= GetFileCreationTime(exepath+'maxbox3.exe')
   writeln(DateTimeToStr(mytimestamp)+' for maXbox3 file')
   //ExecuteCommand('cmd','/k dir *.*')
   InitComPortForm; 
   maxform1.mxNavigator.color:= clyellow;
    //printimage(getbitmapObject(Exepath+backmap),bscentered); 
    //getEnvironmentInfo;
End. 


//-----------------------------------------------------------------------
  * Controls the state (ON/OFF) of 5 LEDs connected to an Arduino Board
  * on Digital Pins 2,3,4,5,6 thru the serial comm
 *
 * Created April 02 2009
 * copyleft 2009 Roberto Ramirez <beta@thepenguincult.com>
 * Full Source code at http://www.thepenguincult.com/proyectos/arduino-delphi-control/
 *}

/*
 * Delphi LEDs Control
 * -----------------
 * Turns on and off 5 light emitting diodes(LED) connected to digital  
 * pins 2 thru 6. The LEDs will be controlled using check boxes on Delphi
 * that sends serial data to Arduino Board.
 *
 * IMPORTANT!!: Don't forget to download the Delphi PC Example that controls the leds connected to arduino board.
 *
 * Created April 02 2009
 * copyleft 2009 Roberto Ramirez <beta@thepenguincult.com>
 * Full Source code at http://www.thepenguincult.com/proyectos/arduino-delphi-control/
 * 
 */

int val = 0;       // variable to store the data from the serial port
int ledPin1 = 2;   // LED connected to digital pin 2
int ledPin2 = 3;   // LED connected to digital pin 3
int ledPin3 = 4;   // LED connected to digital pin 4
int ledPin4 = 5;   // LED connected to digital pin 5
int ledPin5 = 6;   // LED connected to digital pin 6

void setup() {

  pinMode(ledPin1,OUTPUT);    // declare the LED's pin as output
  pinMode(ledPin2,OUTPUT);    // declare the LED's pin as output
  pinMode(ledPin3,OUTPUT);    // declare the LED's pin as output
  pinMode(ledPin4,OUTPUT);    // declare the LED's pin as output
  pinMode(ledPin5,OUTPUT);    // declare the LED's pin as output

  Serial.begin(9600);        // connect to the serial port
}

void loop () {
  val = Serial.read();      // read the serial port

  
  if (val !=-1){

    if (val=='1'){
      digitalWrite(ledPin1,HIGH);
    }
    
    else if (val=='A'){
      digitalWrite(ledPin1,LOW);
      }
    
    if (val=='2'){
      digitalWrite(ledPin2,HIGH);
    }

    else if (val=='B'){
      digitalWrite(ledPin2,LOW);
      }

    if (val=='3'){
      digitalWrite(ledPin3,HIGH);
    }

    else if (val=='C'){
      digitalWrite(ledPin3,LOW);
      }

    if (val=='4'){
      digitalWrite(ledPin4,HIGH);
    }

    else if (val=='D'){
      digitalWrite(ledPin4,LOW);
      }

    if (val=='5'){
      digitalWrite(ledPin5,HIGH);
    }

    else if (val=='E'){
      digitalWrite(ledPin5,LOW);
      }
   
    //Serial.println();
  }
}
----------------------------------------------------------------------
//----------------------------------Code Notes------------------------
unit Unit1;
interface
uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, ComCtrls, CPort, CPortCtl, Menus;
  
  
------------------------------------------------
Windows crashed again. I am the Blue Screen of Death. No one hears your screams.
Three things are certain: Death, taxes, and lost data. Guess which has occurred.
There is no place like 127.0.0.1 

http://en.wikipedia.org/wiki/Sneakers_%281992_film%29


procedure RotateBitmap(var htmpBitmapDC: TBitmap; var lWidth : Longint;
                            var lHeight : Longint; lRadians : real; origmap: TBitmap);
var
         I,J : Longint;               // loop counter
         //htmpBitmapDC : Longint;    // DC of the new bitmap
         lSine,lCosine : extended;          // sine,cosine used in rotation
         X1,X2,X3,Y1,Y2,Y3 : Longint;     // used in calculating new bitmap dimensions
         lMinX,lMaxX,lMinY,lMaxY: Longint;  
         lNewWidth,lNewHeight : Longint;  // width of new bitmap
         lSrcX,lSrcY  : Longint;   // x,y pixel coord we are blitting from the source image
         myrect: TRect;
begin
   // create a compatible DC from the one just brought
   // compute the sine/cosinse of the radians used to // rotate this image
   lSine := Sin(lRadians);
   lCosine := Cos(lRadians);
   // compute the size of the new bitmap being created
   X1 := Round(-lHeight * lSine);
   Y1 := Round(lHeight * lCosine);
   X2 := Round(lWidth * lCosine - lHeight * lSine);
   Y2 := Round(lHeight * lCosine + lWidth * lSine);
   X3 := Round(lWidth * lCosine);
   Y3 := Round(lWidth * lSine);
   // figure out the max/min size of the new bitmap
   lMinX := Min(0, Min(X1, Min(X2, X3)));
   lMinY := Min(0, Min(Y1, Min(Y2, Y3)));
   lMaxX := Max(X1, Max(X2, X3));
   lMaxY := Max(Y1, Max(Y2, Y3));
   // set the new bitmap width/height
   lNewWidth:= lMaxX - lMinX;
   lNewHeight:= lMaxY - lMinY;
   // create a new bitmap based upon the new width/height of the // rotated bitmap
   //hNewBitmap := CreateCompatibleBitmap(hBitmapDC, lNewWidth, lNewHeight);
   htmpBitmapDC.height:= lNewHeight;
   htmpBitmapDC.width:= lNewWidth;
   //myRect:= Rect(0,0,lwidth,lheight); 
   //bfrm.Canvas.BrushCopy(MyRect, Image1.Picture.Bitmap, MyRect, clred);
   For I:= 0 To lNewWidth do begin
     For J:= 0 To lNewHeight do begin
       lSrcX:= Round((J + lMinX) * lCosine + (I + lMinY) * lSine);
       lSrcY:= Round((I + lMinY) * lCosine - (J + lMinX) * lSine);
       If (lSrcX >= 0) And (lSrcX <= lWidth) And
          (lSrcY >= 0) And (lSrcY <= lHeight) Then begin
         BitBlt(htmpBitmapDC.canvas.handle,J,I,lnewheight,lnewwidth,origmap.canvas.handle,
                                 lSrcX,lSrcY, SRCCOPY);
        end;
     end;
  end;
  //Image1.Refresh; 
  lWidth:= htmpBitmapDC.width;
  lHeight:= htmpBitmapDC.height;
End;
      

procedure maXCalc_demo;
begin
  printF('this is %.6f',[maXcalc('ln(2)+fact(388)+2!')]); 
  printF('this is %.6f',[maXcalc('(4!)^(3!)')]); 
  printF('this is %.6f',[maXcalc('4!+4!')]); 
  printF('this is %.6f',[maXcalc('log(22)')]); 
  printF('this is logN %.6f',[maXcalc('2%256')]);
  writeln('ln(e): '+floattostr(maXcalc('ln(e)')))
  writeln(floattostr(maXcalc('e+10^6')))
  printF('addition theorem %.18f ',[maXcalc('sin(2.5/2)')])
  printF('addition theorem %.18f ',[maXcalc('sqrt(1/2*(1-cos(2.5)))')])
  printF('addition theorem2 %22.18f ',[maXcalc('cos(2.5/2)')])
  printF('addition theorem2 %22.18f ',[maXcalc('sqrt(1/2*(1+cos(2.5)))')])
  maXcalcF('2%256+2^10');
end; 

50000  = 0.693137180659968
100000 = 0.693142180584982
500000 = 0.693146180561005
10^6   = 0.693146680560255
5*10^6 = 0.693147080560068
50*10^6= 0.693147170560399    //Runtime: 0:28:22.422
ln(2)  = 0.693147180559945

(* zeta:= 0;
     for i:= 1 to 50000 do 
       if i mod 2 = 0 then
         zeta:= zeta - 1/i else
         zeta:= zeta + 1/i;
       writeln('harmonic alternate to ln(2): '+floattostr(zeta))  
       writeln(floattostr(maxcalc('ln(2)')))
       writeln(floattostr(ln2))    *)
   
http://www.hitekdev.com/delphi/BITMAPANIMATION.html


processing.app.SerialException: Serial port 'COM5' already in use.  Try quiting any programs that may be using it.
	at processing.app.Serial.<init>(Serial.java:144)
	at processing.app.Serial.<init>(Serial.java:91)
	at processing.app.SerialMonitor.openSerialPort(SerialMonitor.java:204)
	at processing.app.Editor.handleSerial(Editor.java:2390)
	at processing.app.Editor$18.actionPerformed(Editor.java:668)
	at javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:1995)
	at javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2318)
	at javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:387)
	at javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:242)
	at javax.swing.AbstractButton.doClick(AbstractButton.java:357)
	at javax.swing.plaf.basic.BasicMenuItemUI.doClick(BasicMenuItemUI.java:1225)
	at javax.swing.plaf.basic.BasicMenuItemUI$Handler.mouseReleased(BasicMenuItemUI.java:1266)
	at java.awt.Component.processMouseEvent(Component.java:6263)
	at javax.swing.JComponent.processMouseEvent(JComponent.java:3267)
	at java.awt.Component.processEvent(Component.java:6028)
	at java.awt.Container.processEvent(Container.java:2041)
	at java.awt.Component.dispatchEventImpl(Component.java:4630)
	at java.awt.Container.dispatchEventImpl(Container.java:2099)
	at java.awt.Component.dispatchEvent(Component.java:4460)
	at java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4574)
	at java.awt.LightweightDispatcher.processMouseEvent(Container.java:4238)
	at java.awt.LightweightDispatcher.dispatchEvent(Container.java:4168)
	at java.awt.Container.dispatchEventImpl(Container.java:2085)
	at java.awt.Component.dispatchEvent(Component.java:4460)
	at java.awt.EventQueue.dispatchEvent(EventQueue.java:599)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:269)
	at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:184)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:174)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:169)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:161)
	at java.awt.EventDispatchThread.run(EventDispatchThread.java:122)


      myform