//Example of the memo load and save capabilities of the VCL
//Task: Code the button with Open a Video!
//Get the text and write your memo memories, locs=218 

program Memo_Form_Demo_Test;

const LEFTBASE = 20;
      TOPBASE = 25; 
      MEDIAPATH =  '..\maxbox3\examples\mymemomemoire.txt';

var 
  mymemo: TMemo;
  mpanel: TPanel;
  mPlayer: TMediaPlayer;
  inFrm: TForm;  
  mbtnSave, mBtnGenerate, mBtnGet: TBitBtn;
   
  mBtnModify: TBitBtn;
  mBtnCompact: TBitBtn;
   
  Lstbox: TListbox;
  stat: TStatusbar;
  cal: TCalendar;
  selectedFile: string;

  
Function getRandomText: string;
var i, getback: integer;
begin
  for i:= 1 to 1400 do begin
    getback:=  random(58)+65
    if (getback < 91) OR (getback > 96) then
      result:= result + Chr(getback) +Chr(32)
  end;
end;  
  
//Event Handler - Closure  
procedure GetMediaData(self: TObject);
begin
  if PromptForFileName(selectedFile,
                       'Text files (*.txt)|*.txt',
                       '',
                       'Select your mX3 test file',
                       ExePath+'examples\', False)  // Means not a Save dialog !
   then begin
     // Display this full file/path value
     ShowMessage('Selected file = '+selectedFile);
     Stat.simpletext:= selectedFile;
     mymemo.lines.LoadFromFile(selectedFile);
     // Split this full file/path value into its constituent parts
     //writeln('PromptForFileName_28: Res of processpath '+tmp)
   end;
end;  
  
//Event Handler - Closure
procedure BtnSaveClick(self: TObject);
begin
  //mymemo.lines.savetofile(ExePath+'\examples\mymemomemoire.txt');
  mymemo.lines.SaveToFile(selectedFile);
  Stat.simpletext:= selectedFile+ ' has been saved';
end; 


procedure MemoToXml(Xml: TXmlVerySimple);
begin
  Xml.Text:= Memo1.Text;
end;

procedure ShowXml(Xml: TXmlVerySimple);
var
  Stream: TMemoryStream;
begin
  Stream := TMemoryStream.Create;
  Xml.SaveToStream(Stream);
  Stream.Position := 0;
  Memo1.Lines.LoadFromStream(Stream);
  Stream.Free;
end;


procedure BtnCompactClick(Sender: TObject);
var
  Xml: TXmlVerySimple;
begin
  // Load Xml from Memo1
  //Xml:= TXmlVerySimple.Create;
  MemoToXml(Xml);
  Xml.Ident := '';
  ShowXml(Xml);
  Xml.Free;               
  mBtnCompact.Enabled := False;
  mBtnSave.Enabled := True;
end;

procedure BtnGenerateClick(Sender: TObject);
var
  Xml: TXmlVerySimple;
  Node, Child, SubChild: TXmlNode;
begin
  //Xml := TXmlVerySimple.Create;
  Xml.Header.Attribute['encoding'] := 'utf-8';

  Xml.Root.NodeName := 'catalog';
  Xml.Root.AddChild('book').SetAttribute('id', 'bk101').
    AddChild('author').SetText('Gambardella, Matthew').Parent.
    AddChild('title').SetText('Xml Developer''s Guide').Parent.
    AddChild('description').SetText('An in-depth look at creating Xml applications.');

  Xml.Root.AddChild('book').SetAttribute('id', 'bk102').SetAttribute('lang','en').
    AddChild('author').SetText('Ralls, Kim').Parent.
    AddChild('title').SetText('Midnight Rain').Parent.
    AddChild('description').SetText('A former architect battles corporate zombies, '+
      'an evil sorceress, and her own childhood to become queen of the world.');

  Node:= Xml.Root.AddChild('book');
  Node.Attribute['id'] := 'bk103';

  Child := Node.AddChild('author');
  Child.Text := 'Corets, Eva';

  Child := Node.AddChild('title');
  Child.Text := 'Maeve Ascendant';

  Child := Node.AddChild('description');
  Child.Text := 'After the "collapse" of a <nanotechnology> society in England, ' +
  'the young survivors lay the foundation for a new society.';

  Child := Node.AddChild('keywords');
  SubChild := Child.AddChild('keyword');
  SubChild.Text := 'fantasy';
  SubChild := Child.AddChild('keyword');
  SubChild.Text := 'technology';
  SubChild := Child.AddChild('keyword');
  SubChild.Text := 'england';

  ShowXml(Xml);
  Xml.Free;

  mBtnGenerate.Enabled := False;
  mBtnModify.Enabled := True;
end;


procedure BtnGetClick(Sender: TObject);
var
  Xml: TXmlVerySimple;
begin
  // Load Xml from Memo1
  //Xml := TXmlVerySimple.Create;
  MemoToXml(Xml);
  ShowMessage(Xml.Root.Find2('book', 'id', 'bk103').Find('description').Text);
  Xml.Free;
  mBtnGet.Enabled := False;
end;

procedure BtnModifyClick(Sender: TObject);
var
  Xml: TXmlVerySimple;
  Node, BookNode: TXmlNode;
  Nodes, AllNodes: TXmlNodeList;
  Index, I: Integer;
begin
  // Load Xml from Memo1
  //Xml := TXmlVerySimple.Create;

  Index := Memo1.Lines.Count - 1;
   // Add a new book
  Memo1.Lines.Insert(Index,'<book id=bk104><author rate=">5">Corets, Eva</author><description/>' + '<keywords /></book>');

  MemoToXml(Xml);

  // Add a <keywords> section to every book if not exists
  Nodes := Xml.Root.FindNodes('book');
  
    //for I:= 0 to TXMLNodeList(node.ChildNodes).count-1 do
    for I:= 0 to TXMLNodeList(nodes).count-1 do
  
  //for Node in Nodes do
    if not assigned(Node.Find('keywords')) then
      Node.AddChild('keywords');
  Nodes.Free;

  // Add a new keyword to a certain book (id=bk102)
  Xml.Root.Find2('book', 'id', 'bk102').Find('keywords').
    AddChild('keyword').SetText('no-muerto').SetAttribute('lang', 'es').Parent.
    AddChild('keyword').SetText('zombies').Parent.AddChild('keywrd').SetText('flombies');


  // Add new keyword attribute (lang=en) to every book
  AllNodes := Xml.Root.FindNodes('book');
    for I:= 0 to TXMLNodeList(allnodes).count-1 do begin

    //for I:= 0 to TXMLNodeList(booknode.ChildNodes).count-1 do

{  for BookNode in AllNodes do begin  }
    Nodes := BookNode.Find('keywords').FindNodes('keyword');
  
    for I:= 0 to TXMLNodeList(nodes).count-1 do
  
    //for Node in Nodes do
      if not Node.HasAttribute('lang') then
        Node.Attribute['lang'] := 'en';
    Nodes.Free;
  end;
  AllNodes.Free;

  // Delete a node
  Node := Xml.Root.Find2('book', 'id', 'bk102').Find('author');

  // remove node from parent childnodes, the node itself will be freed then
  if assigned(Node) then
      Node.Parent.ChildNodes.Remove(Node);

  ShowXml(Xml);
  //XML.Clear;
  Xml.Free;
  mBtnModify.Enabled := False;
  mBtnCompact.Enabled := True;
end; 




procedure SetForm;
var
  //mbtn2: TBitBtn;
  mi, mi1, mi2, mi3: TMenuItem;
  mt: TMainMenu;
  mlbl, mlbl1: TLabel; 

begin
  inFrm:= TForm.Create(self);
  mLbl:= TLabel.Create(inFrm);
  mLbl1:= TLabel.Create(inFrm);
  mPanel:= TPanel.Create(inFrm);
  stat:= TStatusbar.Create(inFrm);
  Lstbox:= TListbox.Create(inFrm);
  mymemo:= TMemo.Create(inFrm);

  with inFrm do begin
    caption:= '********MediaMonster3************';  
    height:= 610;
    width:= 980;
    //color:= clred;
    Position:= poScreenCenter;
    //onClose:= @CloseClick;
    Show;
  end;
  with mPanel do begin
     caption:= '*****maXboxTV*****';  
     Parent:= inFrm;  
     SetBounds(LEFTBASE+10,TOPBASE+40,460,400)
     color:= clsilver;
     font.color:= clyellow;
     font.size:= 30;
     Show;
  end; 
  
  with mymemo do begin
    Parent:= inFrm;
    SetBounds(LEFTBASE+490, TOPBASE+40, 420, 400)
    font.size:= 14;
    color:= clYellow;
    wordwrap:= true;
    scrollbars:= ssvertical;
    //lines.loadfromfile(ExePath+'\examples\mymemomemoire.txt');
    //onClick:= @ChangeSong;  
  end;
  
  mBtnCompact:= TBitBtn.Create(inFrm)
  with mBtnCompact do begin
    Parent:= inFrm;
    setbounds(LEFTBASE+ 590, TOPBASE+ 460,150, 40);
    caption:= 'Compact Text';
    font.size:= 12;
    glyph.LoadFromResourceName(getHINSTANCE,'OPENFOLDER'); 
    //event handler
    onclick:= @GetMediaData;
  end;

  
  mBtnGenerate:= TBitBtn.Create(inFrm)
  with mBtnGenerate do begin
    Parent:= inFrm;
    setbounds(LEFTBASE+ 590, TOPBASE+ 460,150, 40);
    caption:= 'Open Text';
    font.size:= 12;
    glyph.LoadFromResourceName(getHINSTANCE,'OPENFOLDER'); 
    //event handler
    onclick:= @GetMediaData;
  end;
  mBtnGet:= TBitBtn.Create(inFrm)
  with mBtnGet do begin
    Parent:= inFrm;
    setbounds(LEFTBASE+ 430, TOPBASE+460,150, 40);
    caption:= 'Get Xml';
    font.size:= 12;
    glyph.LoadFromResourceName(getHINSTANCE,'FLOPPY'); 
    //event handler
    //onclick:= @GetVideoData;
  end;
  mBtnSave:= TBitBtn.Create(inFrm)
  with mBtnSave do begin
    Parent:= inFrm;
    setbounds(LEFTBASE+ 750, TOPBASE+460,150, 40);
    caption:= 'Save Text';
    font.size:= 12;
    glyph.LoadFromResourceName(getHINSTANCE,'PREVIEWGLYPH'); 
    //event handler
    onclick:= @BtnSaveClick;
  end;
  cal:= TCalendar.Create(self);
  with cal do begin
    enabled:= true;
    updateCalendar
    Parent:= inFrm;
    top:= 100;
    left:= 50;
    CalendarDate:= Now;
  end;

  with mlbl do begin
    parent:= inFrm;
    setbounds(LEFTBASE+15,TOPBASE-15,180,20);
    font.size:= 28;
    font.color:= clred;
    //font.style:= [fsunderline]
    caption:= 'MediaMemoApp';
  end;  
  with mlbl1 do begin
    parent:= inFrm;
    setbounds(LEFTBASE+495,TOPBASE-1,180,20);
    font.size:= 20;
    font.color:= clred;
    caption:= 'Text File:';
  end;  
  mt:= TMainMenu.Create(infrm)
  with mt do begin
   //parent:= frmMon;
  end;  
  mi:= TMenuItem.Create(mt)
  mi1:= TMenuItem.Create(mt)
  mi2:= TMenuItem.Create(mt)
  mi3:= TMenuItem.Create(mi)
  with mi do begin
    //parent:= frmMon;
    Caption:='Play Media';
    Name:='ITEM';
    mt.Items.Add(mi);   
    //OnClick:= @GetMediaData;
  end;
  with mi1 do begin
    //parent:= frmMon;
    Caption:='Show Video';
    Name:='ITEM2';
    mt.Items.Add(mi1) ;
    //OnClick:= @GetVideoData
  end;
  with mi2 do begin
    //parent:= frmMon;
    Caption:='Open CD Player';
    Name:='ITEM3';
    mt.Items.Add(mi2);
    //OnClick:= @OPenCD;
  end;
  with mi3 do begin
    Caption:='Open maXbook';
    Name:='ITEM4';
    //mi.Items[0].add(mi3);
  end;
  with Stat do begin
    parent:= inFrm;
    stat.SimplePanel:= true;
  end;
  MPlayer:= TMediaPlayer.Create(self);
  with MPlayer do begin
    parent:= inFrm; 
    height:= 38;
    top:= TOPBASE + 460;
    left:= LEFTBASE+ 10;
    Display:= mPanel;   //for video show
  end;
end; 
  
 
begin
  memo2.font.size:= 14;
  SetForm;
  mymemo.lines.text:= getRandomText;
  //SearchAndOpenDoc(ExePath+MEDIAPATH)
  //mylistview:= TFormListView.Create(self);
  //exit;
  maxform1.color:= clsilver;
End.

//-------------------------------------------------

source is tlistview
target is tform

procedure TfMerit.SourceLVStartDrag(Sender: TObject;
var DragObject: TDragObject);
var TargetLV:TListView;
begin
// TargetLV:=nejak urcit dle potreby
  TargetLV.BeginDrag(True)
end;

procedure TfMerit.SourceLVMouseDown(Sender: TObject;
Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
MouseIsDown:=True;
end;

procedure TfMerit.SourceLVMouseUp(Sender: TObject; Button: TMouseButton;
Shift: TShiftState; X, Y: Integer);
begin
MouseIsDown:=False;
if (Sender as TListView).Dragging then
(Sender as TListView).EndDrag(False);
end;

procedure TfMerit.SourceLVMouseMove(Sender: TObject; Shift: TShiftState;
X, Y: Integer);
begin
if (Sender.ClassNameIs('TListView')) then
begin
if MouseIsDown and ((Sender as TListView).SelCount>0) then
(Sender as TListView).BeginDrag(True);
end;
end;


procedure TfMerit.TargetLVDragOver(Sender, Source: TObject; X,
Y: Integer; State: TDragState; var Accept: Boolean);
var T:TListView;
begin
T:=Sender as TListView;
Accept:=Assigned(T.GetItemAt(X,Y));
end;


procedure TfMerit.TargetLVDragDrop(Sender, Source: TObject; X,
Y: Integer);
var It:TListItem;
LV1,LV2:TListView;
begin
LV1:=Source as TListView;
LV2:=Sender as TListview;

It:=LV2.GetItemAt(X,Y);
if Assigned(It) then
begin
// zpracuj polozku ze zdrojoveho listview
end;
end;


procedure TControlParentR(Self: TControl; var T:TWinControl); begin T:= Self.Parent; end;
procedure TControlParentW(Self: TControl; T: TWinControl); begin Self.Parent:= T; end;
    RegisterPropertyHelper(@TControlParentR, @TControlParentW, 'PARENT');
    RegisterProperty('Parent', 'TWinControl', iptRW);

procedure TTXPTool.LVPFFDblClick(Sender: TObject);
var
tmpList : TListItem;
fn ; string;
ft : integer;
fs : integer;
begin
tmpList := LVPFF.Selected;
if tmplist<>nil then
begin
  fn := tmpList.Caption
  ft := tmpList.SubItems.Strings[1];
  fs := tmpList.SubItems.Strings[3];
  if pos('Wave', ft)>0 then
    PlayThisOne1Click(nil);
  if pos('Jpg', ft)>0 then
    ShowJpg1Click(nil);
  if pos('Targa', ft)>0 then
    ShowTga1Click(nil);
  if pos('Pcx', ft)>0 then
    ShowPcx1Click(nil);
  if pos('Mission Sound Collection', ft)>0 then
    ShowPwf1Click(nil);
end;
end;