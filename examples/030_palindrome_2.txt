//shows a palindrome checker of diversity, faculty numbers _30
//procedure stackout is just an educational help, #locs=185
//teaches the simularity of recursion & iterations, TASK: test with int64
//#sign:max: APSN21: 23.06.2013 11:41:01 

program Palindrome2_TestandCheck;
//{$S+}

var i: byte;

procedure stackOut;
begin
  i:= i + 1
  //writeln('stack return call of: ' +intToStr(i));
end;

function fibo(n: byte): integer;
begin
 //process steps
  if n < 2 then 
    result:= 1 else
    result:= fibo(n-2) + fibo(n-1);
  //test return of stack
  stackOut
end;

function faculty(n: integer): integer;
begin
 //process steps of fac!
  if n < 2 then 
    result:= 1 else
    result:= n * faculty(n-1);
  //test return of stack
  stackOut
end;

function rectestWord(ac: string; n: byte): bool;
 begin
   if n < length(ac) then
     rectestWord(ac,n+1);
   write(ac[n]);   //rec back
   result:= true;
 end; 
 
//***************************************maXbox 
 procedure palindromeTest(asc: string; out sout: string; n: byte);
 begin
   if n <= length(asc) then begin
     palindromeTest(asc,sout,n+1);
     sout:= sout+ asc[n];
   end;
 end;  
 
 function PalindromeChecker(asc: string): boolean;
 var tmpstr: string;
 begin
   result:= false;
   asc:= ReplaceRegExpr('[^a-zA-Z]',asc,'',true);
   palindromeTest(asc,tmpstr, 1);
   if CompareText(asc,tmpstr)= 0 then
     result:= true;
 end;    
//****************************************


 function PalindromeChecker2(asc: string): boolean;
 begin
   result:= false;
   asc:= ReplaceRegExpr('[^a-zA-Z]',asc,'',true);
   if CompareText(asc,ReverseString(asc))=0 then
     result:= true;
 end;  


 function PalindromeChecker3(asc: string): boolean;
 var letts: charset;
     p1: string;
 begin
   // sout:= 'Eint Sie Geist nie?';
   letts:= strtoCharset(b64_XXEncode);
   asc:= lowercase(asc);
   p1:= '';
   for i:= 1 to length(asc) do
     if asc[i] in letts then p1:= p1+asc[i];                         
   //writeln(p1)
   if p1=ReverseString(p1) then begin
     result:= true; //c:= RGB(0,150,0);
    //memo2.font.color:= c;
   end else
     result:= false; //memo2.font.color:= clred;
 end;   
    
  
function facultytest(n: integer): integer;
begin
 if n < 2 then 
   result:= 1 else
   result:= n * faculty(n-1);
 end;
 
 procedure RemoveDuplicates(const stringList: TStringList);
 var
   buffer: TStringList;
   cnt: Integer;
 begin
   stringList.Sort;
   buffer:= TStringList.Create;
   try
     buffer.Sorted:= True;
     buffer.Duplicates:= dupIgnore;
     buffer.BeginUpdate;
     {stringlist.Duplicates:= dupIgnore;
     stringlist.beginupdate;
     for cnt:= 0 to stringList.Count - 1 do
       writeln(stringlist[cnt]);}
     for cnt:= 0 to stringList.Count - 1 do
       buffer.Add(stringList[cnt]) ;
     buffer.EndUpdate;
     stringList.Assign(buffer);
   finally
     buffer.Free;
     buffer:= NIL;
     //FreeandNil(buffer);
   end;
 end;
 
procedure listdistinct;
var i: integer;
begin  
  with TStringList.Create do begin
    try
      Sorted:= true;
      Duplicates:= dupIgnore;
      Add('Eintrag 1');
      Add('Eintrag 1');
      Add('Eintrag 2');
      Add('Eintrag 1');
      Add('Eintrag 2');
      for i:= 0 to Count-1 do showmessage(Strings[i]);
    finally
      Free;
    end; 
  end;  
end; 


var rets, repstr: string;
 
begin
  //clrscr; main on memo2
  i:= 0;
  writeln('fibo is: ' + inttoStr(fibo(21)))
  writeln('fibo compare is: ' + floattoStr(fibo(21)))
  writeln('fibo compare is: ' + floattoStr(fibonacci(22)))
  writeln('faculty is: ' + inttoStr(faculty(12)))
  writeln('faculty compare is: ' + floattoStr(fact(12)))
  rets:= '';
  palindromeTest('leben',rets, 1);    //help procedure 
  writeln('tester1: '+rets)
  palindromeTest(rets,rets, 1);
  writeln('tester2: '+rets)
    
  writeln(BooleanToString(PalindromeChecker('Leben Sie mit im Eisnebel!')));
  writeln(BooleanToString(PalindromeChecker('Eint Sie Geist nie?')));
  writeln(BooleanToString(PalindromeChecker2('Eint Sie Geist nie?')));
  writeln(BooleanToString(PalindromeChecker3('Eint Sie Geist nie?')));

  writeln('palindrome check: '+booleantoString(palindromechecker('Sugus')))
  rets:= 'ein neger mit gazelle , zagt im regen nie!!';
  writeln('palindrome check: '+booleantoString(palindromechecker(rets)))
  rets:= 'Reihung lief stets feil; Gnu hier.';
  writeln('palindrome check: '+booleantoString(palindromechecker(rets)))
  writeln(inttoStr(compareText('leben','LeBen')));
  writeln(inttoStr(compareText('leben',DelSpace('Le B en'))));
  writeln('');
  //const ARegExpr,AInputStr, AReplaceStr: RegExprString; AUseSubstitution : boolean)
  //: RegExprString');  repstr:
   writeln(BooleanToString(PalindromeChecker2('Leben Sie, mit im Eisnebel!')));
   rets:= 'Reihung lief stets feil; Gnu hier.';
   writeln(BooleanToString(PalindromeChecker2(rets)));
  
  writeln('palindrome check2: '+booleantoString(palindromechecker2('Sugus')))
 
  writeln(ReplaceRegExpr('[^a-z]','this is ! not a . si?',repstr,true));
End.


   asm Description end

http://www.ask.com/wiki/Palindrome

A palindrome is a word, phrase, number, or other sequence of symbols or elements, whose meaning may be interpreted the same way in either forward or reverse direction.[1]

Composing literature in palindromes is an example of constrained writing. The word "palindrome" was coined from the Greek roots palin (?????; "again") and dromos (??ó???; "way, direction") by the English writer Ben Jonson in the 17th century. The Greek phrase to describe the phenomenon is karkinikê epigrafê (????????? ????????; "crab inscription"), or simply karkinoi (????????; "crabs"), alluding to the movement of crabs, such as an inscription that may be read backwards.



