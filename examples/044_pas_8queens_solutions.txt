//shows the recursive solution to the 8 queens chess problem, max@kleiner.com
//small output of solution in text mode or file list!, loc's =96
//92 board solutions are possible!  _44

PROGRAM EightQueens;

type
  Play = array[1..8] of boolean;
  Play2 = array[1..8] of Play;
  // to solve with array [1..8, 1..8]
  rowCheck = array[1..8] of boolean;
  leftdiagonalCheck = array[2..16] of boolean;
  rightdiagonalCheck = array[-7..7] of boolean;
  
var 
  Board : Play2;
  safeRow: rowCheck;
  safeleftDiag: LeftDiagonalCheck;
  safeRightDiag: RightDiagonalCheck;
  row, column, i, tester: integer;
  reslist: TStringList;
  
function Safe(row,col: shortint; saferow: rowCheck; safeleftDiag: leftDiagonalCheck;
                      saferightDiag: rightDiagonalCheck): boolean;
//true if a queen can be safely placed in the current position
begin
  result:= safeRow[row] and safeLeftDiag[row+col]
                              and safeRightDiag[row-col]
end;
 
procedure chessPrint(board: Play2);
var i,j: integer;
    tempstring: string;
begin
  tempstring:= '';
  //reslist.add(inttostr(tester+1))
  for i:= 1 to 8 do begin
    for j:= 1 to 8 do
      if (board[i][j])
       then 
         {tempstring:= tempstring + 'Q'
           else tempstring:= tempstring + 'X';
          reslist.add(tempstring)
          tempstring:= '';}
         write('Q') else write('*'); 
         writeln('');
  end;   
  //reslist.add('-------------------')
  inc(tester)
  writeln(inttostr(tester)); 
  writeln(''); 
 //reslist.savetoFile('chesssolution_result.txt')
end;

procedure TryColumn(column: integer; var board: Play2);
//recursive procedure for attempting queen placement
var row: integer;
begin
  row:= 1
  repeat 
    if safe(row, column, saferow, safeleftdiag, saferightdiag) then begin
      //set the queen
      saferow[row]:= false;
      safeleftdiag[row+column]:= false;
      saferightdiag[row-column]:= false;
      board[row][column]:= true;
      if column < 8 then
        Trycolumn(column + 1, board) else 
         chessPrint(board);
      //removes queen
      safeRow[row]:= true;
      safeleftDiag[row+column]:= true;
      saferightDiag[row-column]:= true;
      board[row][column]:= false;
    end;
    //row was safe
    row:= row + 1;
  until row > 8
end;


begin
  //init board
  tester:= 0;
  reslist:= TStringlist.create;
  for row:= 1 to 8 do safeRow[row]:= true;    
  for i:= 2 to 16 do safeleftDiag[i]:= true;
  for i:= -7 to 7 do saferightDiag[i]:= true;
  for row:= 1 to 8 do 
    for column:= 1 to 8 do
      board[row][column]:= false;
      //make the firs recursive call
      //board[1][1]:= true;
    tryColumn(1, board); 
    reslist.free; 
end. 