program puzzleGame_BitMapProductionTest;
// not finished yet !!!  tester mX3ß
//*********************************************************************
// logic game example with objects & structure, loc's=188, example 75  
// you have to move letters/numbers in the box to the right word order;)
// first you define a pattern (word) and remove the word with the 
// function secret(); second someone else has to solve it (with solver())
//*********************************************************************

const imagename =  'maxbox3.png';

var
  pForm: TForm;
  img: Timage;
  imageList: TStringList;
  maxx, maxy, psize, maxtot: integer;
  //object.hint is object id
  im_y: array[1..8] of integer;
  ok_x: array[1..8] of integer;
  ok_y: array[1..8] of integer;
  pts: TRect;

procedure Verify;
var
  i, nbok: integer;
  o: TImage;
begin
  nbok:= 0;
  for i:= 1 to maxtot do begin
    o:= TImage(imagelist.objects[i-1]);
    if (o.tag=ok_x[strtoint(o.hint)])
     and  (im_y[strtoint(o.hint)]= ok_y[strtoint(o.hint)])
    //(o.lbly=o.oky))
     then
      inc(nbok);
  end;
  if (nbok=maxtot) then
     showMessage('***Congratulations***'#13#10+
                             'You win with maXbox Game!');
end;

procedure moveStone(o: TImage);
begin
  //maxy:= 2
  if (o.tag + 1 = maxx) and (im_y[strtoint(o.hint)] = maxy) then begin
    //right move
    o.tag:= o.tag +1;
    o.Left:= o.Left + psize +1;
    o.Top:= o.Top;
    dec(maxx);
  end else
  if (o.tag - 1 = maxx) and (im_y[strtoint(o.hint)] =maxy) then begin
    //left move
    o.tag:= o.tag -1;
    o.Left:= o.Left - psize -1;
    o.Top:= o.Top;
    inc(maxx);
  end else
  if (o.tag = maxx) and (im_y[strtoint(o.hint)]-1 = maxy) then begin
    //top move up
    im_y[strtoint(o.hint)]:= im_y[strtoint(o.hint)] -1
    o.Left:= o.Left;
    o.Top:= o.Top - psize -1;
    inc(maxy);
  end else
  if (o.tag = maxx) and (im_y[strtoint(o.hint)]+1 = maxy) then begin
    //bottom move down
    im_y[strtoint(o.hint)]:= im_y[strtoint(o.hint)] +1
    o.Left:= o.Left;
    o.Top:= o.Top + psize +1;
    dec(maxy);
  end;
  //verify if stones are in right order 
end;

procedure Image1Click(Sender: TObject);
begin
  moveStone(TImage(Sender));
  verify();
end;

procedure FormClose(Sender: TObject; var Action: TCloseAction);
begin
  img.Free;
  imageList.Free;
  pForm.Free;
end;

procedure OnFormKeyPress(Sender: TObject; var Key: Char);
begin
  if Key = #27 then pForm.Close;
end;

procedure loadPForm();
begin
  maxx:= 3
  maxy:= 3
  psize:= 164
  maxtot:= (maxx*maxy)-1;
  application.processmessages;
  pform:= Tform.create(self);
  with pform do begin
    caption:= 'this is maXMap III';  
    width:= (maxx*psize)+ 10;
    height:= (maxy*psize)+ 30;
    BorderStyle:= bsDialog;
    Position:= poScreenCenter;
    show;
    OnKeyPress:= @OnFormKeyPress;
    OnClose:= @FormClose;
    //pform.Canvas.FillRect(Rect(0,0,100,100));
  end  
end;

procedure InitPuzzle;
var
  i,x,y,step: integer;
  mlin: TLinearBitmap;
begin
  application.processmessages;
  imagelist:= TStringList.Create;
  x:= 1;
  y:= 1;
  step:= 10;
  for i:= 1 to maxtot do begin
    step:= step + 20;
    img:= TImage.Create(pform);
    img.Parent:= pForm;
    img.AutoSize:= false;
    mlin:= TLinearBitmap.Create;
    try
      mlin.LoadFromFile(ExePath+'examples\'+imagename);
      img.Picture:= NIL;
      pts.left:= 20
      pts.top:= 20
      pts.right:= step;
      pts.bottom:= step;
      //img.picture.bitmap.canvas.textout(12,12,img.hint);
      mlin.paintToCanvas(pform.Canvas, pts, true)
      sleep(15)
      //img.picture.bitmap.canvas.fillrect(pts);
      mlin.AssignTo(img.Picture.Bitmap);
      img.center:= tacenter;
      img.width:= psize+step; 
      img.height:= psize +step;
      img.Left:= (x-1)*(psize + 1);
      img.Top:= (y-1)*(psize  + 1);
      //img.picture.bitmap.canvas.brush.color:= clred;
      img.hint:= inttostr(i);
      img.tag:= x;
      im_y[i]:= y
      ok_x[i]:= x
      ok_y[i]:= y
    finally
       mlin.Dispose;
       mlin.Free;
    end;
       //img.stretch:= true;
      //hint is object_id;
    //set next line of stones
    if (i mod maxx=0) then begin
      x:= 1; 
      inc(y);
    end else
      inc(x);
    //event handler to click!  
    img.OnClick:= @Image1Click;
    //add stones to the list
    imagelist.addObject(inttostr(i), img);
  end //for
end;

procedure secret;
begin
  moveStone(TImage(imagelist.objects[7]));
  moveStone(TImage(imagelist.objects[4]));
  //moveStone(TImage(imagelist.objects[1]));
end;


procedure testVerify;
begin
  //moveStone(TMyLabel(labellist.objects[7]));
  //moveStone(TMyLabel(labellist.objects[7]));
end;

//main of puzzle
begin
//**************************** OOP in 20 Days *******************************
  loadPForm();
  initPuzzle();
  secret()  
  //testVerify
end.
         ____    ___   _      ____    _   _   _
        |  _ \  |  _| | |    |  _ \  | | | | | |
        | | . | | |_  | |    | |_| | | |_| | | |
        | | | | |  _| | |    |  __/  |  _  | | |          
        | |_. | | |_  | |__  | |     | | | | | |                      
        |____/  |___| |____| |_|     |_| |_| |_| 
        

 {set mxfile.inc
 T = class(T)
 private
   FColor: TColor
   ...
 protected
   function GetColor: TColor; virtual;
   procedure SetColor(Value: TColor); virtual;
 public
   property Color: TColor read GetColor write SetColor; 
 end;  }
        

1. Ausbildungsplätze im Softwarebereich sind nicht genügend vorhanden, Aufträge in Milliardenhöhe fliessen jährlich ins Ausland ab.
2. Applikationsentwickler sind nicht nur Techniker sondern der Beruf benötigt kreative Leute mit Geduld, Qualitätsdenken und Kommunikationsfähigkeiten- ist doch auch ein idealer Frauenjob, oder? Was tut unser Angebot um ein Potential von ca. 50% zu fördern. Applikationsentwicklung - auf Frauen zugeschnitten
3. Die Tools und deren Methoden müssen einfacher werden, idealerweise beginnt man mit der Prozeduralen Programmierung und steigt dann in die Objektorientierung ein (siehe maXbox) - Niklaus Wirth hat immer recht;)
siehe Beitrag zur Simplifikation:

http://max.kleiner.com/download/simplifikation.pdf
http://www.tunbasel.ch/
http://www.tecmania.ch/

var
  Bitmap: TBitmap;
begin
  Bitmap := TBitmap.Create;
  try
    Bitmap.LoadFromFile('MyBitmap.bmppng');
    Form1.Canvas.Brush.Bitmap := Bitmap;
    Form1.Canvas.FillRect(Rect(0,0,100,100));
  finally
    Form1.Canvas.Brush.Bitmap := nil;
    Bitmap.Free;
  end;

end; 
 
        
TCanvas provides an abstract drawing space for objects that must render their own images.

Unit
Graphics

Description
Use TCanvas as a drawing surface for objects that draw an image of themselves. Standard window controls such as edit controls or list boxes do not require a canvas, as they are drawn by the system.

TCanvas prov. prop., events and methods that assist in creating an image by
Specifying the type of brush, pen and font to use.
	Drawing and filling a variety of shapes and lines.
	Writing text.
	Rendering graphic images.
	Enabling a response to changes in the current image.
TCanvas has two descendants, TControlCanvas and TMetafileCanvas, which assist in drawing images of controls and in creating metafile images for objects.        
       
unit        
          
