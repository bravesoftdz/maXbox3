//shows a recursion of fibonacci, faculty numbers _30
//procedure stackout is just an educational help
//teaches the simularity of recursion & iterations, TASK: test with int64

program fibonacci_recursion_compare;
//{$S+}

var i: byte;

procedure stackOut;
begin
  i:= i + 1
  //writeln('stack return call of: ' +intToStr(i));
end;

function fibo(n: byte): integer;
begin
 //process steps
  if n < 2 then 
    result:= 1 else
    result:= fibo(n-2) + fibo(n-1);
  //test return of stack
  stackOut
end;

function faculty(n: integer): integer;
begin
 //process steps of fac!
  if n < 2 then 
    result:= 1 else
    result:= n * faculty(n-1);
  //test return of stack
  stackOut
end;

 function rectestWord(ac: string; n: byte): bool;
 begin
   if n < length(ac) then
     rectestWord(ac,n+1);
   write(ac[n]);   //rec back
 end;  
 

function facultytest(n: integer): integer;
begin
 if n < 2 then 
   result:= 1 else
   result:= n * faculty(n-1);
 end;
 
 procedure RemoveDuplicates(const stringList: TStringList);
 var
   buffer: TStringList;
   cnt: Integer;
 begin
   stringList.Sort;
   buffer:= TStringList.Create;
   try
     buffer.Sorted:= True;
     buffer.Duplicates:= dupIgnore;
     buffer.BeginUpdate;
     {stringlist.Duplicates:= dupIgnore;
     stringlist.beginupdate;
     for cnt:= 0 to stringList.Count - 1 do
       writeln(stringlist[cnt]);}
     for cnt:= 0 to stringList.Count - 1 do
       buffer.Add(stringList[cnt]) ;
     buffer.EndUpdate;
     stringList.Assign(buffer);
   finally
     buffer.Free;
     buffer:= NIL;
     //FreeandNil(buffer);
   end;
 end;
 
procedure listdistinct;
var i: integer;
begin  
  with TStringList.Create do begin
    try
      Sorted:= true;
      Duplicates:= dupIgnore;
      Add('Eintrag 1');
      Add('Eintrag 1');
      Add('Eintrag 2');
      Add('Eintrag 1');
      Add('Eintrag 2');
      for i:= 0 to Count-1 do showmessage(Strings[i]);
    finally
      Free;
    end; 
  end;  
end; 


(*procedure TForm1_Button1Click(Sender: TObject);
var 
  i, j, kum: Integer;
  s, t: TJVChartData;//TLineSeries;
  ch: TJVChart;
begin
  ch:=  TJVChart.create(self);
  with ch do begin
    // Title of the Chart
    //Title.Text.Clear;
    //Title.Text.Add('Ein Titel für den Chart');

    // Create first Series
    s := TJVChartData.Create;
    // Clear it
    s.Clear;
    // set the title
    s.Title := 'Chart Linie 1';
    // determine the chart, this series belongs to
    s.ParentChart := Chart1;
    // the x-axis shall use date
    s.XValues.DateTime := True;

    // create the second Series
    t := TLineSeries.Create(nil);
    t.Clear;
    t.Title       := s.Title + ' kum';
    t.ParentChart := Chart1;
    t.XValues.DateTime := True;
    // this series uses the right axis
    t.VertAxis := aRightAxis;

    // now add the random values
    for i := 0 to 364 do
    begin
      j := Random(100);
      s.AddXY(Date + i, j);
      kum := kum + j;
      t.AddXY(Date + i, kum);
    end;
  end;
end;*)

 
 var sl : TStringList;
     cnt : integer;


begin
  //clrscr;
  i:= 0;
  writeln('fibo is: ' + inttoStr(fibo(21)))
  writeln('fibo compare is: ' + floattoStr(fibo(21)))
  writeln('fibo compare is: ' + floattoStr(fibonacci(22)))
  writeln('faculty is: ' + inttoStr(faculty(12)))
  writeln('faculty compare is: ' + floattoStr(fact(12)))
  rectestWord('nebel',1);
  
   Randomize;
   sl:= TStringList.Create;
   try
     //sl.sorted:= true;
     //sl.Duplicates:= dupIgnore;
       //sl.beginupdate; 
     for cnt:= 1 to 1000 do
       sl.Add(IntToStr(Random(2000))) ;
     {sl.sort;
     for cnt:= 1 to 1000 do 
     //stringlist.beginupdate;
        writeln((sl[cnt-1]));}
       ShowMessage('With duplicates: ' + #13#10 + IntToStr(sl.Count)) ;
       RemoveDuplicates(sl) ;
       ShowMessage('Without duplicates: ' + #13#10 + IntToStr(sl.Count)) ;
     finally
       sl.Free;
    end;
    ListDistinct;
  end.