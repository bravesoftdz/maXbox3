{***************************************************************
 * Project  : mX3 OpenTools API
 * App Name : 143_OpenTools_API.txt
 * Purpose  : Demo coding maXbox itself the GUI, locs=68
 * History  : integrate to bds_delphi.dci - see below
 ***************************************************************}
//uses  ../Debug/Code Completion List

const onetimefile = 'onetimerun.txt';

var  
  fHandle: integer;
  mybox: TMaxForm1;
  //myitem: TMenuitem;
  //mbutton: TToolButton

procedure setOpenToolsAPI_mX3GUI;
begin  
 with maxForm1 do begin
   tbtnUseCaseClick(self)
   caption:= 'OpenToolsAPI modified';
   tbtnCompile.caption:= 'Runtime!!'
   about1click(self)
   color:= clYellow;
 end
end;   
  
procedure compileCompile(stopFile: string);
begin
  if not FileExists(ExePath+'examples\'+stopFile) then begin
    fhandle:= FileCreate(ExePath+'examples\'+stopFile)
    FileClose(fhandle)
    writeln('script for the second time')
    maxForm1.color:= clRed;
    maxForm1.Compile1Click(self)
  end;
end;     
  
begin
   //uniquestring format
   writeln(Format('%8.2f', [123.45668774])); 
   //FmtStr(Result, ‘%d%s%d%d’, [Major, DecimalSeparator, Minor, Release]);
   //Static Call First Time
   setOpenToolsAPI_mX3GUI;
   //Second Remote Time Call
   compileCompile(onetimefile)
   DeleteFile(ExePath+'examples\'+onetimefile)

   writeln(extractFiledrive(ExePath+'maxbox3.exe'))
   writeln(extractFilepath(ExePath+'maxbox3.exe'))
   writeln(extractFileExt(ExePath+'maxbox3.exe'))
   writeln(expandFilename('maxbox3.exe'))
   writeln(IntToStr(binToInt('00000000000000001001110010010110')))
   writeln(hexToBin2('BBBBAAAA'))
   writeln(binToHex2('10111011101110111010101010101010'))
   //ExecuteCommand('cmd','/k systeminfo > systeminfosony.txt')
   //MSecsToTimeStamp(34567)
   writeln(TimeToStr(StrToTime('14:15:12')))
       //Dynamic Way
       {mybox:= TMaxForm1.create(application);
          mybox.imglogo.setbounds(10,25, 600,320);
          mybox.open1click(self)
          mybox.formcreate(self)
          mybox.close;
        mybox.Free;}
       //maxform1:= mybox
  //Speak('This is the voice of OpenTools Application Programming Interface')
end.   


************************************************************************
**********************mXOpen Tools API**********************************

procedure SIRegister_TMaxForm1(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TForm', 'TMaxForm1') do
  with CL.AddClassN(CL.FindClass('TForm'),'TMaxForm1') do begin
    RegisterProperty('memo2', 'TMemo', iptrw);
    RegisterProperty('Splitter1', 'TSplitter', iptrw);
    RegisterProperty('PSScript', 'TPSScript', iptrw);
    RegisterProperty('PS3DllPlugin', 'TPSDllPlugin', iptrw);
    RegisterProperty('MainMenu1', 'TMainMenu', iptrw);
    RegisterProperty('Program1', 'TMenuItem', iptrw);
    RegisterProperty('Compile1', 'TMenuItem', iptrw);
    RegisterProperty('Files1', 'TMenuItem', iptrw);
    RegisterProperty('open1', 'TMenuItem', iptrw);
    RegisterProperty('Save2', 'TMenuItem', iptrw);
    RegisterProperty('Options1', 'TMenuItem', iptrw);
    RegisterProperty('Savebefore1', 'TMenuItem', iptrw);
    RegisterProperty('Largefont1', 'TMenuItem', iptrw);
    RegisterProperty('sBytecode1', 'TMenuItem', iptrw);
    RegisterProperty('Saveas3', 'TMenuItem', iptrw);
    RegisterProperty('Clear1', 'TMenuItem', iptrw);
    RegisterProperty('Slinenumbers1', 'TMenuItem', iptrw);
    RegisterProperty('About1', 'TMenuItem', iptrw);
    RegisterProperty('Search1', 'TMenuItem', iptrw);
    RegisterProperty('SynPasSyn1', 'TSynPasSyn', iptrw);
    RegisterProperty('memo1', 'TSynMemo', iptrw);
    RegisterProperty('SynEditSearch1', 'TSynEditSearch', iptrw);
    RegisterProperty('WordWrap1', 'TMenuItem', iptrw);
    RegisterProperty('XPManifest1', 'TXPManifest', iptrw);
    RegisterProperty('SearchNext1', 'TMenuItem', iptrw);
    RegisterProperty('Replace1', 'TMenuItem', iptrw);
    RegisterProperty('PSImport_Controls1', 'TPSImport_Controls', iptrw);
    RegisterProperty('PSImport_Classes1', 'TPSImport_Classes', iptrw);
    RegisterProperty('ShowInclude1', 'TMenuItem', iptrw);
    RegisterProperty('SynEditPrint1', 'TSynEditPrint', iptrw);
    RegisterProperty('Printout1', 'TMenuItem', iptrw);
    RegisterProperty('mnPrintColors1', 'TMenuItem', iptrw);
    RegisterProperty('dlgFilePrint', 'TPrintDialog', iptrw);
    RegisterProperty('dlgPrintFont1', 'TFontDialog', iptrw);
    RegisterProperty('mnuPrintFont1', 'TMenuItem', iptrw);
    RegisterProperty('Include1', 'TMenuItem', iptrw);
    RegisterProperty('CodeCompletionList1', 'TMenuItem', iptrw);
    RegisterProperty('IncludeList1', 'TMenuItem', iptrw);
    RegisterProperty('ImageList1', 'TImageList', iptrw);
    RegisterProperty('ImageList2', 'TImageList', iptrw);
    RegisterProperty('CoolBar1', 'TCoolBar', iptrw);
    RegisterProperty('ToolBar1', 'TToolBar', iptrw);
    RegisterProperty('tbtnLoad', 'TToolButton', iptrw);
    RegisterProperty('ToolButton2', 'TToolButton', iptrw);
    RegisterProperty('tbtnFind', 'TToolButton', iptrw);
    RegisterProperty('tbtnCompile', 'TToolButton', iptrw);
    RegisterProperty('tbtnTrans', 'TToolButton', iptrw);
    RegisterProperty('ToolButton5', 'TToolButton', iptrw);
    RegisterProperty('ToolButton1', 'TToolButton', iptrw);
    RegisterProperty('ToolButton3', 'TToolButton', iptrw);
    RegisterProperty('statusBar1', 'TStatusBar', iptrw);
    RegisterProperty('SaveOutput1', 'TMenuItem', iptrw);
    RegisterProperty('ExportClipboard1', 'TMenuItem', iptrw);
    RegisterProperty('Close1', 'TMenuItem', iptrw);
    RegisterProperty('Manual1', 'TMenuItem', iptrw);
    RegisterProperty('About2', 'TMenuItem', iptrw);
    RegisterProperty('loadLastfile1', 'TMenuItem', iptrw);
    RegisterProperty('imglogo', 'TImage', iptrw);
    RegisterProperty('cedebug', 'TPSScriptDebugger', iptrw);
    RegisterProperty('debugPopupMenu1', 'TPopupMenu', iptrw);
    RegisterProperty('BreakPointMenu', 'TMenuItem', iptrw);
    RegisterProperty('Decompile1', 'TMenuItem', iptrw);
    RegisterProperty('N2', 'TMenuItem', iptrw);
    RegisterProperty('StepInto1', 'TMenuItem', iptrw);
    RegisterProperty('StepOut1', 'TMenuItem', iptrw);
    RegisterProperty('Reset1', 'TMenuItem', iptrw);
    RegisterProperty('N3', 'TMenuItem', iptrw);
    RegisterProperty('DebugRun1', 'TMenuItem', iptrw);
    RegisterProperty('PSImport_ComObj1', 'TPSImport_ComObj', iptrw);
    RegisterProperty('PSImport_StdCtrls1', 'TPSImport_StdCtrls', iptrw);
    RegisterProperty('PSImport_Forms1', 'TPSImport_Forms', iptrw);
    RegisterProperty('PSImport_DateUtils1', 'TPSImport_DateUtils', iptrw);
    RegisterProperty('tutorial4', 'TMenuItem', iptrw);
    RegisterProperty('ExporttoClipboard1', 'TMenuItem', iptrw);
    RegisterProperty('ImportfromClipboard1', 'TMenuItem', iptrw);
    RegisterProperty('N4', 'TMenuItem', iptrw);
    RegisterProperty('N5', 'TMenuItem', iptrw);
    RegisterProperty('N6', 'TMenuItem', iptrw);
    RegisterProperty('ImportfromClipboard2', 'TMenuItem', iptrw);
    RegisterProperty('tutorial1', 'TMenuItem', iptrw);
    RegisterProperty('N7', 'TMenuItem', iptrw);
    RegisterProperty('ShowSpecChars1', 'TMenuItem', iptrw);
    RegisterProperty('OpenDirectory1', 'TMenuItem', iptrw);
    RegisterProperty('procMess', 'TMenuItem', iptrw);
    RegisterProperty('tbtnUseCase', 'TToolButton', iptrw);
    RegisterProperty('ToolButton7', 'TToolButton', iptrw);
    RegisterProperty('EditFont1', 'TMenuItem', iptrw);
    RegisterProperty('UseCase1', 'TMenuItem', iptrw);
    RegisterProperty('tutorial21', 'TMenuItem', iptrw);
    RegisterProperty('OpenUseCase1', 'TMenuItem', iptrw);
    RegisterProperty('PSImport_DB1', 'TPSImport_DB', iptrw);
    RegisterProperty('tutorial31', 'TMenuItem', iptrw);
    RegisterProperty('SynHTMLSyn1', 'TSynHTMLSyn', iptrw);
    RegisterProperty('HTMLSyntax1', 'TMenuItem', iptrw);
    RegisterProperty('ShowInterfaces1', 'TMenuItem', iptrw);
    RegisterProperty('Tutorial5', 'TMenuItem', iptrw);
    RegisterProperty('AllFunctionsList1', 'TMenuItem', iptrw);
    RegisterProperty('ShowLastException1', 'TMenuItem', iptrw);
    RegisterProperty('PlayMP31', 'TMenuItem', iptrw);
    RegisterProperty('SynTeXSyn1', 'TSynTeXSyn', iptrw);
    RegisterProperty('texSyntax1', 'TMenuItem', iptrw);
    RegisterProperty('N8', 'TMenuItem', iptrw);
    RegisterProperty('GetEMails1', 'TMenuItem', iptrw);
    RegisterMethod('Procedure IFPS3ClassesPlugin1CompImport(Sender : TObject; x : TPSPascalCompiler)');
    RegisterMethod('Procedure IFPS3ClassesPlugin1ExecImport(Sender : TObject; Exec : TPSExec; x : TPSRuntimeClassImporter)');
    RegisterMethod('Procedure PSScriptCompile( Sender : TPSScript)');
    RegisterMethod('Procedure Compile1Click( Sender : TObject)');
    RegisterMethod('Procedure PSScriptExecute( Sender : TPSScript)');
    RegisterMethod('Procedure open1Click( Sender : TObject)');
    RegisterMethod('Procedure Save2Click( Sender : TObject)');
    RegisterMethod('Procedure Savebefore1Click( Sender : TObject)');
    RegisterMethod('Procedure Largefont1Click( Sender : TObject)');
    RegisterMethod('Procedure FormActivate( Sender : TObject)');
    RegisterMethod('Procedure SBytecode1Click( Sender : TObject)');
    RegisterMethod('Procedure FormKeyPress( Sender : TObject; var Key : Char)');
    RegisterMethod('Procedure Saveas3Click( Sender : TObject)');
    RegisterMethod('Procedure Clear1Click( Sender : TObject)');
    RegisterMethod('Procedure Slinenumbers1Click( Sender : TObject)');
    RegisterMethod('Procedure About1Click( Sender : TObject)');
    RegisterMethod('Procedure Search1Click( Sender : TObject)');
    RegisterMethod('Procedure FormCreate( Sender : TObject)');
    RegisterMethod('Procedure Memo1ReplaceText( Sender : TObject; const ASearch, AReplace : String; Line, Column : Integer; var Action : TSynReplaceAction)');
    RegisterMethod('Procedure Memo1StatusChange( Sender : TObject; Changes : TSynStatusChanges)');
    RegisterMethod('Procedure WordWrap1Click( Sender : TObject)');
    RegisterMethod('Procedure SearchNext1Click( Sender : TObject)');
    RegisterMethod('Procedure Replace1Click( Sender : TObject)');
    RegisterMethod('Function PSScriptNeedFile(Sender : TObject; const OrginFileName : String; var FileName, Output : String) : Boolean');
    RegisterMethod('Procedure ShowInclude1Click( Sender : TObject)');
    RegisterMethod('Procedure Printout1Click( Sender : TObject)');
    RegisterMethod('Procedure mnuPrintFont1Click( Sender : TObject)');
    RegisterMethod('Procedure Include1Click( Sender : TObject)');
    RegisterMethod('Procedure FormDestroy( Sender : TObject)');
    RegisterMethod('Procedure FormClose(Sender: TObject; var Action: TCloseAction)');
    RegisterMethod('Procedure UpdateView1Click( Sender : TObject)');
    RegisterMethod('Procedure CodeCompletionList1Click( Sender : TObject)');
    RegisterMethod('Procedure SaveOutput1Click( Sender : TObject)');
    RegisterMethod('Procedure ExportClipboard1Click( Sender : TObject)');
    RegisterMethod('Procedure Close1Click( Sender : TObject)');
    RegisterMethod('Procedure Manual1Click( Sender : TObject)');
    RegisterMethod('Procedure LoadLastFile1Click( Sender : TObject)');
    RegisterMethod('Procedure Memo1Change( Sender : TObject)');
    RegisterMethod('Procedure Decompile1Click( Sender : TObject)');
    RegisterMethod('Procedure StepInto1Click( Sender : TObject)');
    RegisterMethod('Procedure StepOut1Click( Sender : TObject)');
    RegisterMethod('Procedure Reset1Click( Sender : TObject)');
    RegisterMethod('Procedure cedebugAfterExecute( Sender : TPSScript)');
    RegisterMethod('Procedure cedebugBreakpoint( Sender : TObject; const FileName : String; Position, Row, Col : Cardinal)');
    RegisterMethod('Procedure cedebugCompile( Sender : TPSScript)');
    RegisterMethod('Procedure cedebugExecute( Sender : TPSScript)');
    RegisterMethod('Procedure cedebugIdle( Sender : TObject)');
    RegisterMethod('Procedure cedebugLineInfo( Sender : TObject; const FileName : String; Position, Row, Col : Cardinal)');
    RegisterMethod('Procedure Memo1SpecialLineColors( Sender : TObject; Line : Integer; var Special : Boolean; var FG, BG : TColor)');
    RegisterMethod('Procedure BreakPointMenuClick( Sender : TObject)');
    RegisterMethod('Procedure DebugRun1Click( Sender : TObject)');
    RegisterMethod('Procedure tutorial4Click( Sender : TObject)');
    RegisterMethod('Procedure ImportfromClipboard1Click( Sender : TObject)');
    RegisterMethod('Procedure ImportfromClipboard2Click( Sender : TObject)');
    RegisterMethod('Procedure tutorial1Click( Sender : TObject)');
    RegisterMethod('Procedure ShowSpecChars1Click( Sender : TObject)');
    RegisterMethod('Procedure StatusBar1DblClick( Sender : TObject)');
    RegisterMethod('Procedure PSScriptLine( Sender : TObject)');
    RegisterMethod('Procedure OpenDirectory1Click( Sender : TObject)');
    RegisterMethod('Procedure procMessClick( Sender : TObject)');
    RegisterMethod('Procedure tbtnUseCaseClick( Sender : TObject)');
    RegisterMethod('Procedure EditFont1Click( Sender : TObject)');
    RegisterMethod('Procedure tutorial21Click( Sender : TObject)');
    RegisterMethod('Procedure tutorial31Click( Sender : TObject)');
    RegisterMethod('Procedure HTMLSyntax1Click( Sender : TObject)');
    RegisterMethod('Procedure ShowInterfaces1Click( Sender : TObject)');
    RegisterMethod('Procedure Tutorial5Click( Sender : TObject)');
    RegisterMethod('Procedure ShowLastException1Click( Sender : TObject)');
    RegisterMethod('Procedure PlayMP31Click( Sender : TObject)');
    RegisterMethod('Procedure AllFunctionsList1Click( Sender : TObject)');
    RegisterMethod('Procedure texSyntax1Click( Sender : TObject)');
    RegisterMethod('Procedure GetEMails1Click( Sender : TObject)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_fMain(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('BYTECODE','String').SetString( 'bytecode.txt');
 CL.AddConstantN('PSTEXT','String').SetString( 'PS Scriptfiles (*.txt)|*.TXT');
 CL.AddConstantN('PSMODEL','String').SetString( 'PS Modelfiles (*.uc)|*.UC');
 CL.AddConstantN('PSPASCAL','String').SetString( 'PS Pascalfiles (*.pas)|*.PAS');
 CL.AddConstantN('PSINC','String').SetString( 'PS Includes (*.inc)|*.INC');
 CL.AddConstantN('DEFFILENAME','String').SetString( 'firstdemo.txt');
 CL.AddConstantN('DEFINIFILE','String').SetString( 'maxboxdef.ini');
 CL.AddConstantN('EXCEPTLOGFILE','String').SetString( 'maxboxerrorlog.txt');
 CL.AddConstantN('MBVERSION','String').SetString( '3.0.0.14 beta!');
 CL.AddConstantN('MXSITE','String').SetString( 'http://www.softwareschule.ch/maxbox.htm');
 CL.AddConstantN('MXMAIL','String').SetString( 'max@kleiner.com');
 CL.AddConstantN('TAB','Char').SetString( #$09);
 CL.AddConstantN('CODECOMPLETION','String').SetString( 'bds_delphi.dci');
  SIRegister_TMaxForm1(CL);
end;

//big digital dream video : great fun and bright
 http://www.youtube.com/watch_popup?v=Nd-vBFJN_2E&vq=medium

Erkennung anhand des Verhaltens:
Häuft sich eine als verdächtig zu bewertende Aktivität eines Programms, setzt das Schutzprogramm dieses auf die Verdachts-, respektive Blockade- oder sogar Quarantäne-Liste. Die sicherste Methode ist die Signaturerkennung, die aber daran leidet, nur erkennen zu können, was sie eben schon kennt. Das möglichst zeitnahe Nachliefern entsprechend aktualisierter Virensignaturen ist deshalb in einen Wettlauf ausgeartet, der der IT-Welt in der Regel mehrere tausend neue Virenvarianten am Tag beschert - und den PC-Nutzern oft Dutzende Updates. Die anderen beiden Methoden aber haben deutlich niedrigere Trefferquoten und produzieren zudem mehr Fehlalarme. Die Kombination aller drei Ansätze erbringt im PC-Alltag ein akzeptables Schutzniveau, das die Internet-Nutzung möglich macht. Zusätzliche Sicherheit bringen Firewalls, die den Datenverkehr an der Schnittstelle zum Netz beobachten und analysieren.

Intrusion Detection: Die erste Abwehrreihe
Denn ein weiteres, noch komplexeres Thema sind die Wege, auf denen Schadsoftware auf Rechnern und in Netzwerken landet. Immer mehr Schadprogramme flattern ohne Beihilfe durch PC-Nutzer, die wider besseren Willens doch das E-Mail-Attachment mit den angeblichen Nacktbildern öffnen, ins Haus: Sie tasten sich hinein über unzureichend abgedichtete Zugänge (Portscans) oder lauern auf verseuchten Webseiten (Drive-By). Sie werden per Hack mit Gewalt hineingedrückt oder über gefälschte, vermeintlich sichere Webseiten hineingetrickst (Phishing) oder kommen huckepack per Script.


Quelle: Spiegel.de; Frank Patalong; 18.10.2010
