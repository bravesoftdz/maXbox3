//maXbox is a scripter tool with an inbuild delphi engine in one exe!
//Demo shows the functions of maXbook in images, sound and text, loc's = 
//*************************************************************************
//Task: place the animation on the image as canvas with a timer control

program maXbook_atomimage1;

const LOGO = 'Welcome to maXbook look!';
      myPIC1 = 'http://www.softwareschule.ch/images/atomimage2.png';
      myPIC2 = 'http://www.softwareschule.ch/images/maxworld.png';
      myMusic = 'http://www.softwareschule.ch/download/airmaxloop3.mp3';
      mySong = 'airmaxloop3.mp3';
      myText = ' atomimage2';
      MILLISECONDS = 50;

var
  inFrm: TForm;
  image1, image2: TImage;
  mT: TTimer;
  E: Exception;
    CurStep: Double;


procedure drawText(vFrm: TForm; vcolor: TColor);
var
  theRect: TRect;
begin
  with vFrm.canvas do begin
    //brush.Color:= clred;
      Brush.Style:= bsClear;
    //.left/.top/.right/.bottom
    theRect:= Rect(350,350,600,400);
    font.color:= vColor;
    font.size:= 22;
    TextOut(460,395,myText);
  end;
end;  
 
procedure getMP3File;
var 
  fStream: TFileStream;
begin
  fStream:= TFileStream.create(mySong, fmCreate)
  with TIdHTTP.create(NIL) do begin
    try
      Get1(myMusic, fStream)
    finally
      Free
      fStream.Free;
    end;
  end;    
end;

procedure getHTTP_PNG(vimage: TImage; vURL: string); 
var
  idHTTP: TIDHTTP;
  pngStream: TMemoryStream;
begin
  with TLinearBitmap.Create do
  try
    idHTTP:= TIdHTTP.Create(NIL)
    pngStream:= TMemoryStream.create;
    try
      idHTTP.Get1(vURL, pngStream)
    except
      showmessage(E.message)
    end  
    pngStream.Position:= 0;
    LoadFromStream2(pngstream,'PNG');
    vimage.Picture:= NIL;
    AssignTo(vimage.picture);
    //SaveToFile(ExePath+'mX3_open.png');
  finally
    Dispose;
    Free;
    idHTTP.Free
    pngStream.Free;
  end; 
end; 

function TForm1_RotatePoint(APoint,ACenter: TPoint; AAngle: Double): TPoint;
var
  dx,dy: Double;
begin
  dx:= (ACenter.Y * Sin(AAngle)) - (ACenter.X * Cos(AAngle)) + ACenter.X;
  dy:= -(ACenter.X * Sin(AAngle)) - (ACenter.Y * Cos(AAngle)) + ACenter.Y;
  Result.X:= Round((APoint.X * Cos(AAngle)) - (APoint.Y * Sin(AAngle)) + dx);
  Result.Y:= Round((APoint.X * Sin(AAngle)) + (APoint.Y * Cos(AAngle)) + dy);
end;
  
procedure TForm1_RotatePolygon(var APoints: array of TPoint; AAngle: Double);
var
  aCentr: TPoint;
  i: Integer;
begin
  aCentr:= Point(10, 10);
  for i:= 0 to Length(APoints)-1 do begin
    aCentr.X:= aCentr.X + APoints[i].X;
    aCentr.Y:= aCentr.Y + APoints[i].Y;
  end;
  aCentr.X:= aCentr.X div Length(APoints);
  aCentr.Y:= aCentr.Y div Length(APoints);
  for i:= 0 to Length(APoints)-1 do
    APoints[i]:= TForm1_RotatePoint(APoints[i], aCentr, AAngle);
end;

procedure TFrm1_FormPaint(Sender: TObject);
var
  //lPoints: array[0..2] of TPoint;
  lPoints: array of TPoint;
begin
  SetLength(lpoints,3);
  lPoints[0].X:= 100;
  lPoints[0].Y:= 250;
  lPoints[1].X:= 200;
  lPoints[1].Y:= 20;
  lPoints[2].X:= 200;
  lPoints[2].Y:= 200;
  TForm1_RotatePolygon(lpoints, CurStep);
  infrm.Canvas.Pen.color:= clBlue;
  infrm.Canvas.Pen.Width:= 15;
  infrm.Canvas.Polygon(lPoints);
  infrm.canvas.Brush.Style:= bsClear;
  //application.processMessages;
end;

 

//----------------------------------------------------------------

procedure closeForm(Sender: TObject; var Action: TCloseAction);
begin
  ///afrm.Free;
   if mt <> NIL then begin
    mT.enabled:= false;
    mT.Free;
    mT:= NIL;
  end;
  image1.Free;
  image2.Free;  
  action:= caFree;
  infrm:= NIL;
end;

procedure TFrm1_timerRedrawTimer(Sender: TObject);
begin
  CurStep:= CurStep + 0.1;
  if CurStep > 360 then CurStep:= 0;
  //infrm.Invalidate;  //redraw
end;

procedure loadForm;
begin
  with inFrm do begin
    position:= poScreenCenter;
    color:= clred;
    setBounds(5,5, 650, 490);
    caption:= LOGO;
    onClose:= @closeForm;
    Show;
  end; 
  mT:= TTimer.Create(self);
  mt.onTimer:= @TFrm1_timerRedrawTimer;
  mt.interval:= MILLISECONDS;
 
  image1:= TImage.create(inFrm);
  with image1 do begin
    parent:= infrm;
    //setBounds(100,100, 240,200);
    //onMousedown:= @Image1MouseDown;
    //stretch:= true;
  end;
  image2:= TImage.create(inFrm);
  with image2 do begin
    parent:= infrm;
    setBounds(0,0, inFrm.width, inFrm.height);
    show;
  end;
end; 

procedure SaveComposition(vCanvas: TCanvas; FileName: string);
var
  Bmp: TBitmap;
  MyRect: TRect;
begin
  Bmp:= TBitmap.Create;
  try
    MyRect:= vCanvas.ClipRect;
    Bmp.Width:= MyRect.Right;
    Bmp.Height:= MyRect.Bottom;
    Bmp.Canvas.CopyRect(MyRect, vCanvas, MyRect);
    Bmp.SaveToFile(FileName);
  finally
    Bmp.Free;
  end;
end;

//--------------------------------------------------------------
begin
  ProcessMessagesON;
  inFrm:= TForm.create(self)
    E:= Exception.create('Any internet connect problem'); 
  loadForm;
  if fileExists(mySong) = false then 
    getMP3File;
  closeMP3;
  ///playMP3(mySong); 
  getHTTP_PNG(image2, myPIC2);
  getHTTP_PNG(image1, myPIC1); 
    inFrm.Canvas.draw(10,10,image1.picture.bitmap);
  drawText(inFrm, clPurple);
  //SaveComposition(inFrm.canvas, 'mycard.bmp')
end.

Pictures from:

http://www.softwareschule.ch/images/maxboxlogo.bmp
http://www.softwareschule.ch/images/maxlindau2.png
http://www.softwareschule.ch/images/citymax.bmp
http://www.softwareschule.ch/images/oposlogo.gif

---------------------------------------------------------------------
code of version mX3.0 from http://www.softwareschule.ch/maxbox.htm
//Load examples pas_*.txt from directory examples and press F9!
//please read the readmefirst...
//or start with the tutorial in /help
//memo1 is script editor
//memo2 is output space
  new version and examples from
     http://www.softwareschule.ch/maxbox.htm }


just inside maXbox

         ____    ___   _      ____    _   _   _
        |  _ \  |  _| | |    |  _ \  | | | | | |
        | | . | | |_  | |    | |_| | | |_| | | |
        | | | | |  _| | |    |  __/  |  _  | | |          
        | |_. | | |_  | |__  | |     | | | | | |                      
        |____/  |___| |____| |_|     |_| |_| |_|  
        

Latest News of Free Pascal

November 12th, 2010 A new release 2.4.2 is available from our sites. 2.4.2 is the first fixes release from the 2.4 series. Improvements, amongst others:

    * Delphi 2006 like for..in support
    * Support for sealed and abstract class modifiers,
    * new targets
          o 64-bit FreeBSD (x86_64)
    * Many improvements and fixes to the XML, database and CHM packages
    * Long term bug in OS/2 implementation of unit Video finally fixed which among others allows inclusion of the text-mode IDE (without debugger) for this platform as part of the distribution again.
    * Many compiler bugfixes and more than a year of library updates(since 2.4.0)
                                         