PROGRAM OutlookSpy;

//////////////////////////////////////////////////////////////////////
//  #sign:max: APSN21: 27.11.2013 17:44:18 
//  Purpose: Grabs outlook contacts out of,  more items see below   //
//  #path>ples\E:\maxbox\maxbox3\examples\                          //
//  Lines of Code #locs:146
//////////////////////////////////////////////////////////////////////

Const TEXTOUT = 'hi world of code coverage with cover age';

{TYPE 
<Type declarations>} 

VAR 
//<Variable declarations>
  i: integer;
  att: tidpeerthread;
  //ati: TIterateMethod;
  //adf: SHostFileName
  //myselect: TSelection;
  //asdt: tidstreamtype;
   act: TVector;
   act2: TMatrix;
   act22: TByteVector;
   
   

//<FUNCTION>
//<PROCEDURE> 
procedure OpenIEURL(aURL:string);
var sz: string;
begin
  Application.ProcessMessages;
  aURL:= trim(aURL);
  if aURL='' then Exit;
  with TRegistry.Create do try
     rootkey:= HKey_Classes_Root;
     OpenKey('\htmlfile\shell\open\command',false);
     try 
       sz:= ReadString('');
       writeln('test of IE readkey '+sz) 
     except
       sz:= ''; 
     end;
     CloseKey;
     //loadfromres
     //winExecAndWait
     //dostep
     //calculatedata
  finally
      Free;
  end;
  if sz='' then Exit;
  sz:= copy(sz, pos('"',sz)+1, length(sz));
  sz:= copy(sz, 1, pos('"',sz)-1);
  if pos('http://',aURL)<>1 then aURL:='http://'+aURL;
  //ShellExecute(0,'open',PChar(z), PChar(aURL), nil, sw_ShowNormal); 
  //ShellExecute(0,'open', PChar(aURL), nil, nil, sw_Show);
  //mstodatetime
  //decodestring
  //getrvalue
  //isstringtype
  //stringreplace
  //syngetrvalue
end;


function CheckIEStartCommand: string;
begin
  Application.ProcessMessages;
  with TRegistry.Create do try
     rootkey:= HKey_Classes_Root;
     OpenKey('\htmlfile\shell\open\command',false);
     try 
       result:= ReadString('');
     except
       result:= ''; 
     end;
     CloseKey;
  finally
     Free;
  end;
end;


Const olFolderContacts=$0000000A;
  
procedure TOutlookExport_Spy;
var aProgID: string;
    aClassID: TGUID;
    fBookmarkList: TBookmarkList;
    fOutlookInstalled, fAbort,fExporting, found:Boolean;
    outlook,
    NameSpace,
    Contacts,
    aContactItem: OleVariant;
    fMask, fCount, j: integer;
begin
  fExporting:=false;
  aProgID:= 'Outlook.Application';
  try
    aClassID:= ProgIDToClassID(aProgID);
    fOutlookInstalled:= true;
  except
    fOutlookInstalled:= false;
  end;
  if fOutlookInstalled then begin
     outlook:= CreateOleObject('Outlook.Application');
     NameSpace:= outlook.GetNameSpace('MAPI');
     writeln('outlook is installed! spy can work...');
     NameSpace.Logon;
     Contacts:= NameSpace.GetDefaultFolder(olFolderContacts);
  end;
    fCount:=Contacts.Items.Count;
    found:=false;
    for j:= 1 to fCount -1 do begin
      Application.ProcessMessages;
      aContactItem:= Contacts.Items(j);
      try
        writeln(trim(aContactItem.LastName))
      except
      end
       {if (AnsiUpperCase(aContactItem.FirstName)=z1) and
            (AnsiUpperCase(aContactItem.LastName)=z2) then begin
            found:=true;
          break;
       end;}
    end;
  Outlook:= UnAssigned;
end;


BEGIN  //Main
//<Executable statements>
  for i:= 1 to 3 do 
    Writeln(TEXTOUT+CRLF);
  TOutlookExport_Spy;
  Writeln('');
  Writeln('Start Command of IE: '+CheckIEStartCommand);  
//<Definitions>  
  millis;
  //strhash
  //texthash
  //datahash
END. 


More Items:

       aContactItem.Categories:='Kunde'; // neu
       aContactItem.FirstName:=KundeName1.AsString;
       aContactItem.LastName:=KundeName2.AsString;
       aContactItem.FileAs:=KundeSuchbegriff.AsString;
       aContactItem.CompanyName:=KundeSuchbegriff.AsString;
       aContactItem.CustomerID:=KundeKundenNr.AsString;
       aContactItem.Account:=KundeFibuNr.AsString; // neu
       aContactItem.Body:=KundeAnsprechpartner.AsString;
       aContactItem.BusinessAddressStreet:=KundeStrasse.AsString;
       aContactItem.BusinessAddressPostalCode:=KundePLZ.AsString;
       aContactItem.BusinessAddressPostOfficeBox:=KundePostfach.AsString;
       aContactItem.BusinessAddressCity:=KundeOrt.AsString;
//         aContactItem.BusinessAddressCountry:=KundeLand.AsString; // neu
       aContactItem.OrganizationalIDNumber:=KundeUStIdNr.AsString; // neu
//         aContactItem.GovernmentIDNumber:=''
       aContactItem.BusinessTelephoneNumber:=KundeTelefon1.AsString;
       aContactItem.BusinessFaxNumber:=KundeFax.AsString;
       aContactItem.MobileTelephoneNumber:=KundeTelefon2.AsString;
       aContactItem.Email1Address:=KundeEMail.AsString;
       aContactItem.WebPage:=KundeHomepage.AsString;
       aContactItem.Save;
 
  http://i1-win.softpedia-static.com/screenshots/maXbox_5.png?1381322021
  
    RegisterMethod('Constructor Create(AOwner: TComponent)');
    RegisterConstructor(@TJvMail.Create, 'Create');
  
  
   RegisterMethod('Procedure Free');
   RegisterMethod(@TJvMail.Destroy, 'Free');
  
http://smartmobilestudio.com/documentation/differences-between-delphi-and-smart/

----app_template_loaded_code----
----Simple Browser started----