PROGRAM TEamViewer_IDDemo;
// dont 
//#sign max: APSN21: 08.09.2013 15:30:10 
//#path:E:\maxbox\maxbox3\examples\
//from E:\maxbox\maxbox3\examples\ 372stackibz2_memoryalloc.TXT
                               
//uses
  //System.SysUtils, // FreeAndNil
  //System.Win.Registry, // TRegistry
  //Winapi.Windows; // HKEY_LOCAL_MACHINE

const
  //change to your OS
  REG_KEY_TEAMVIEWER8 = '\SOFTWARE\Wow6432Node\TeamViewer\Version8';
  REG_VAL_CLIENTID = 'ClientID';

function getTeamViewerID: string; forward;

//implementation

function getTeamViewerID: string;
var
  Reg: TRegistry;
  TeamViewerID: String;
begin
  TeamViewerID:='';
  Reg:= TRegistry.Create;
  try
    Reg.RootKey:=HKEY_LOCAL_MACHINE;
    if Reg.OpenKey(REG_KEY_TEAMVIEWER8, False) then begin
      TeamViewerID:=Format('%d',[Reg.ReadInteger(REG_VAL_CLIENTID)]);
    end;
    Reg.CloseKey;
  finally
    Result:= TeamViewerID;
    Reg.Free; //FreeAndNil(Reg);
  end;
end;

begin
  writeln('TeamViewerID: '+getTeamViewerID);
end.  


The last slash might be optional. Right?

How about something like this:

$url =~ m|([^/]+)/?$|;
my $end_of_url = $1;

The $ on the end anchors the regular expression to the end of the string. The [^/] means anything that's not a slash and the + after means I want one or more things that are not slashes. Notice that this is in a capture group which are marked with parentheses.

I end the regular expression with /? which means that there may or may not be a slash on the very end of the string. I've put my regular expression between m| and |, so I can use forward slashes without having to constantly escape them.

The last part of the URL is now in $1 and I can set my own scalar variable to save this result.
share|improve this answer
 

----app_template_loaded_code----