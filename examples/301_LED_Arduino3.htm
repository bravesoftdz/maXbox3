Version:0.9
StartHTML:0000000105
EndHTML:0000078245
StartFragment:0000001037
EndFragment:0000078229
<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>mXScriptasHTML</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<meta name="generator" content="SynEdit HTML exporter" />
<style type="text/css">
<!--
body { color: #000000; background-color: #FFFFFF; }
.pas1-assembler { }
.pas1-character { text-decoration: underline; }
.pas1-comment { color: #000080; font-style: italic; }
.pas1-float { color: #800080; }
.pas1-hexadecimal { color: #FF00FF; }
.pas1-identifier { }
.pas1-number { color: #FF0000; }
.pas1-preprocessor { font-style: italic; }
.pas1-reservedword { color: #000000; font-weight: bold; }
.pas1-space { }
.pas1-string { color: #008080; }
.pas1-symbol { color: #000000; }
-->
</style>
</head>
<body>
<!--StartFragment--><pre><code><span class="pas1-comment">{**********************************************************************
 * Project  : LED BOX System Arduino Function Overview
 * App Name : 301_LED_Arduino3.txt, delphi_leds.pde :loc's = 571 
 * Purpose  : Demonstrates cPort COM with Arduino
 * Date     : 09/25/2012  -  17:07
 * History  : convert CPort Library to maXbox Aug 2011
 *          : system save data looger for mX3.9.2, finished yet!!
            : communicates with COM Ports to USB arduino LED lights;
 **********************************************************************}

</span><span class="pas1-reservedword">Program</span><span class="pas1-space"> Arduino_LED_3;

</span><span class="pas1-comment">{@BOOL WINAPI MessageBeep(
  __in  UINT uType  );}
//TThreadFunction = function(P: Pointer): Longint; stdcall;
//Procedure ExecuteThread(afunc: TThreadFunction; var thrOK: boolean);


</span><span class="pas1-reservedword">function</span><span class="pas1-space"> MessageBoxTimeOut(hWnd: HWND; lpText: PChar; lpCaption: PChar; uType: UINT;
                wLanguageId: WORD; dwMilliseconds: DWORD): Integer;
             </span><span class="pas1-reservedword">external</span><span class="pas1-space"> </span><span class="pas1-string">'MessageBoxTimeoutA@user32.dll stdcall'</span><span class="pas1-symbol">;
  
</span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> TForm1_FormClose(Sender: TObject; </span><span class="pas1-reservedword">var</span><span class="pas1-space"> action: TCloseAction); </span><span class="pas1-reservedword">forward</span><span class="pas1-symbol">;
  
</span><span class="pas1-reservedword">Const
</span><span class="pas1-space">  BACKMAP = </span><span class="pas1-string">'examples\images\bmp47.bmp'</span><span class="pas1-symbol">;
  </span><span class="pas1-comment">//BACKMAP = 'examples\images\bmp33.bmp';
</span><span class="pas1-space">  BITMAP1 = </span><span class="pas1-string">'examples\images\empty.bmp'</span><span class="pas1-symbol">;
  SAVEPATH = </span><span class="pas1-string">'examples\treeview_300.txt'</span><span class="pas1-symbol">;
  
</span><span class="pas1-reservedword">type
</span><span class="pas1-space">  TByteArr = </span><span class="pas1-reservedword">array</span><span class="pas1-space"> </span><span class="pas1-reservedword">of</span><span class="pas1-space"> byte;
  
</span><span class="pas1-reservedword">var
</span><span class="pas1-space">  except_state, execute_state: </span><span class="pas1-reservedword">string</span><span class="pas1-symbol">;  
  mytimestamp: TDateTime;
  osType: TIdWin32Type;
  </span><span class="pas1-comment">//logfrm: TForm;
</span><span class="pas1-space">  

</span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> getMaxBoxIni;
</span><span class="pas1-reservedword">var</span><span class="pas1-space"> Ini: TIniFile;   
</span><span class="pas1-reservedword">begin
</span><span class="pas1-space">  Ini:= TIniFile.Create(ExePath+</span><span class="pas1-string">'maxboxdef.ini'</span><span class="pas1-symbol">);
  </span><span class="pas1-reservedword">try
</span><span class="pas1-space">    except_state:= Ini.ReadString(</span><span class="pas1-string">'Form'</span><span class="pas1-symbol">, </span><span class="pas1-string">'EXCEPTIONLOG'</span><span class="pas1-symbol">,</span><span class="pas1-string">''</span><span class="pas1-symbol">);
    execute_state:= Ini.ReadString(</span><span class="pas1-string">'Form'</span><span class="pas1-symbol">, </span><span class="pas1-string">'EXECUTESHELL'</span><span class="pas1-symbol">,</span><span class="pas1-string">''</span><span class="pas1-symbol">);
  </span><span class="pas1-reservedword">finally
</span><span class="pas1-space">    writeln(</span><span class="pas1-string">'inifile sysdata test: '</span><span class="pas1-symbol">+(except_state)+ </span><span class="pas1-string">' '</span><span class="pas1-symbol">+(execute_state))
    ini.Free;
  </span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;
</span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;

</span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> PrintList(Value: TStringList);
</span><span class="pas1-reservedword">var
</span><span class="pas1-space">  I, Line, Pagenum: Integer;
</span><span class="pas1-reservedword">begin
</span><span class="pas1-space">  </span><span class="pas1-comment">//let's print
</span><span class="pas1-space">  </span><span class="pas1-comment">//if Assigned(FOnBeginPrint) then
</span><span class="pas1-space">    </span><span class="pas1-comment">//FOnBeginPrint(Self);
</span><span class="pas1-space">  line := </span><span class="pas1-number">0</span><span class="pas1-symbol">;
  Printer.BeginDoc;
  Pagenum := </span><span class="pas1-number">1</span><span class="pas1-symbol">;
  </span><span class="pas1-reservedword">for</span><span class="pas1-space"> I := </span><span class="pas1-number">0</span><span class="pas1-space"> </span><span class="pas1-reservedword">to</span><span class="pas1-space"> Value.Count - </span><span class="pas1-number">1</span><span class="pas1-space"> </span><span class="pas1-reservedword">do</span><span class="pas1-space"> </span><span class="pas1-reservedword">begin
</span><span class="pas1-space">    </span><span class="pas1-comment">//if Assigned(FOnProgress) then
</span><span class="pas1-space">      </span><span class="pas1-comment">//FOnProgress(Self, I + 1, Value.Count);
</span><span class="pas1-space">    Line := Line + Printer.Canvas.TextHeight(Value[I]);
    </span><span class="pas1-reservedword">if</span><span class="pas1-space"> Line + Printer.Canvas.TextHeight(Value[I]) &gt; Printer.PageHeight </span><span class="pas1-reservedword">then</span><span class="pas1-space"> </span><span class="pas1-reservedword">begin
</span><span class="pas1-space">      Line := Printer.Canvas.TextHeight(Value[I]);
      Printer.NewPage;
      Inc(PageNum);
      </span><span class="pas1-comment">//if Assigned(FOnNextPage) then
</span><span class="pas1-space">        </span><span class="pas1-comment">//FOnNextPage(Self, PageNum);
</span><span class="pas1-space">    </span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;
    Printer.Canvas.TextOut(</span><span class="pas1-number">0</span><span class="pas1-symbol">, Line, Value[I]);
  </span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;
  Printer.EndDoc;
  </span><span class="pas1-comment">//if Assigned(FOnFinishedPrint) then
</span><span class="pas1-space">    </span><span class="pas1-comment">//FOnFinishedPrint(Self);
</span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;


</span><span class="pas1-comment">//*******************************Data Logger*****************************//
</span><span class="pas1-reservedword">var</span><span class="pas1-space"> FLogFileName:</span><span class="pas1-reservedword">string</span><span class="pas1-symbol">;
    JvLogFile1: TJvLogFile;
    btnStart, btnShow, btnReset: TButton;
    lblActive, lblInactive: TLabel;


</span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> TJvLog_StopLogging;
</span><span class="pas1-reservedword">begin
</span><span class="pas1-space">  btnStart.Tag:= </span><span class="pas1-number">0</span><span class="pas1-symbol">;
  lblActive.Visible := false;
  lblInactive.Visible := true;
  btnStart.Caption := </span><span class="pas1-string">'&amp;Start'</span><span class="pas1-symbol">;
  JvLogFile1.SaveToFile(FLogFileName);
</span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;

</span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> TJvLog_ResetLogging;
</span><span class="pas1-reservedword">begin
</span><span class="pas1-space">  TJvLog_StopLogging;
  DeleteFile(FLogFileName);
  JvLogFile1.Clear;
</span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;

</span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> TJvLog_StartLogging;
</span><span class="pas1-reservedword">begin
</span><span class="pas1-space">  </span><span class="pas1-reservedword">if</span><span class="pas1-space"> FileExists(FLogFileName) </span><span class="pas1-reservedword">then
</span><span class="pas1-space">    JvLogFile1.LoadFromFile(FLogFileName);
  btnStart.Caption := </span><span class="pas1-string">'&amp;Stop'</span><span class="pas1-symbol">;
  btnStart.Tag := </span><span class="pas1-number">1</span><span class="pas1-symbol">;
  lblActive.Visible := true;
  lblInactive.Visible := false;
</span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;

</span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> TJvLogFMainForm_FormCreate(Sender: TObject);
</span><span class="pas1-reservedword">begin
</span><span class="pas1-space">  FLogFileName:= ChangeFileExt(Application.ExeName,</span><span class="pas1-string">'.log'</span><span class="pas1-symbol">);
</span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;

</span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> TJvLogFMainForm_btnStartClick(Sender: TObject);
</span><span class="pas1-reservedword">begin
</span><span class="pas1-space">  </span><span class="pas1-reservedword">if</span><span class="pas1-space"> btnStart.Tag = </span><span class="pas1-number">0</span><span class="pas1-space"> </span><span class="pas1-reservedword">then
</span><span class="pas1-space">    TJvLog_StartLogging
  </span><span class="pas1-reservedword">else
</span><span class="pas1-space">    TJvLog_StopLogging;
</span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;

</span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> TJvLogFMainForm_btnShowClick(Sender: TObject);
</span><span class="pas1-reservedword">begin
</span><span class="pas1-space">  </span><span class="pas1-reservedword">if</span><span class="pas1-space"> btnStart.Tag = </span><span class="pas1-number">1</span><span class="pas1-space"> </span><span class="pas1-reservedword">then
</span><span class="pas1-space">    </span><span class="pas1-comment">//btnStart.Click; // stop logging
</span><span class="pas1-space">    TJvLogFMainForm_btnStartClick(self);
  JvLogFile1.ShowLog(</span><span class="pas1-string">'Mouse Move Log'</span><span class="pas1-symbol">);
</span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;

</span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> TJvLogFMainForm_FormMouseMove(Sender: TObject; Shift:TShiftState; X,Y: Integer);
</span><span class="pas1-reservedword">begin
</span><span class="pas1-space">  </span><span class="pas1-reservedword">if</span><span class="pas1-space"> btnStart.Tag = </span><span class="pas1-number">1</span><span class="pas1-space"> </span><span class="pas1-reservedword">then
</span><span class="pas1-space">    JvLogFile1.Add(DateTimeToStr(Now),</span><span class="pas1-string">'Mouse Move'</span><span class="pas1-symbol">,Format(</span><span class="pas1-string">'X:%d, Y:%d'</span><span class="pas1-symbol">,[X,Y]));
  writeln(Format(</span><span class="pas1-string">'JvLogFile Demo - X:%d, Y:%d'</span><span class="pas1-symbol">,[X,Y]));
</span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;

</span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> TJvLogFMainForm_btnResetClick(Sender: TObject);
</span><span class="pas1-reservedword">begin
</span><span class="pas1-space">  TJvLog_ResetLogging;
</span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;


</span><span class="pas1-comment">//*******************************COM Port Arduino*****************************//
</span><span class="pas1-reservedword">var</span><span class="pas1-space"> 
    btn_connect, btn_Setup, btn_loop: TBitBtn;
    ComPort1: TComPort;
    StatusBar1: TStatusBar;
    chk_led1, chk_led2, chk_led3, chk_led4, chk_led5: TCheckBox;
    comFrm: TForm;
    
</span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> TForm1_btn_connectClick(Sender: TObject);
</span><span class="pas1-reservedword">begin
</span><span class="pas1-space">  </span><span class="pas1-reservedword">if</span><span class="pas1-space"> ComPort1.Connected </span><span class="pas1-reservedword">then</span><span class="pas1-space"> </span><span class="pas1-reservedword">begin
</span><span class="pas1-space">     btn_connect.Caption:= </span><span class="pas1-string">'Connect'</span><span class="pas1-symbol">;  </span><span class="pas1-comment">// Toggle the caption of Connection Button
</span><span class="pas1-space">     btn_Setup.Enabled:= True;         </span><span class="pas1-comment">// If not connected, lets enable the Setup Button
</span><span class="pas1-space">     btn_loop.Enabled:= false;         </span><span class="pas1-comment">// Knight Rider demo button is disabled at first

</span><span class="pas1-space">      </span><span class="pas1-comment">// This block resets the state of all Leds to Off
</span><span class="pas1-space">      </span><span class="pas1-comment">// According to Arduino Code the Chars A,B,C,D,E are used
</span><span class="pas1-space">      </span><span class="pas1-comment">// to set Digital Pins (2-6) to LOW
</span><span class="pas1-space">      comport1.WriteStr(</span><span class="pas1-string">'A'</span><span class="pas1-symbol">);
      comport1.WriteStr(</span><span class="pas1-string">'B'</span><span class="pas1-symbol">);
      comport1.WriteStr(</span><span class="pas1-string">'C'</span><span class="pas1-symbol">);
      comport1.WriteStr(</span><span class="pas1-string">'D'</span><span class="pas1-symbol">);
      comport1.WriteStr(</span><span class="pas1-string">'E'</span><span class="pas1-symbol">);
      </span><span class="pas1-comment">//-----------------------------------------------
</span><span class="pas1-space">      </span><span class="pas1-comment">// This block resets the state of all Check Boxes to Unchecked
</span><span class="pas1-space">      chk_led1.Checked:=false;
      chk_led2.Checked:=false;
      chk_led3.Checked:=false;
      chk_led4.Checked:=false;
      chk_led5.Checked:=false;
      </span><span class="pas1-comment">//-----------------------------------------------
</span><span class="pas1-space">      ComPort1.Close;              </span><span class="pas1-comment">// COM Port in use is closed

</span><span class="pas1-space">      statusbar1.Panels[</span><span class="pas1-number">1</span><span class="pas1-symbol">].Text:=</span><span class="pas1-string">'Disconnected'</span><span class="pas1-symbol">;  </span><span class="pas1-comment">// Status bar is set to display connection info
</span><span class="pas1-space">      </span><span class="pas1-comment">// This block disables the check boxes
</span><span class="pas1-space">      </span><span class="pas1-comment">// so the user cannot change them if COM Port is disconnected
</span><span class="pas1-space">      chk_led1.Enabled:=false;
      chk_led2.Enabled:=false;
      chk_led3.Enabled:=false;
      chk_led4.Enabled:=false;
      chk_led5.Enabled:=false;
      </span><span class="pas1-comment">//------------------------------------------------
</span><span class="pas1-space">     </span><span class="pas1-reservedword">end</span><span class="pas1-space"> </span><span class="pas1-reservedword">else</span><span class="pas1-space"> </span><span class="pas1-reservedword">begin
</span><span class="pas1-space">      btn_connect.Caption:=</span><span class="pas1-string">'Disconnect'</span><span class="pas1-symbol">;        </span><span class="pas1-comment">// Toggle the caption of Connection Button
</span><span class="pas1-space">      btn_Setup.Enabled:=False;                 </span><span class="pas1-comment">// If not connected, lets disable the Setup Button
</span><span class="pas1-space">      btn_loop.Enabled:=true;                   </span><span class="pas1-comment">// Now that conection Rider demo button is enabled
</span><span class="pas1-space">      ComPort1.Open;                            </span><span class="pas1-comment">// COM Port in use is finally opened
</span><span class="pas1-space">      statusbar1.Panels[</span><span class="pas1-number">1</span><span class="pas1-symbol">].Text:=</span><span class="pas1-string">'Connected'</span><span class="pas1-symbol">;   </span><span class="pas1-comment">// Status bar is set to display connection info

</span><span class="pas1-space">      </span><span class="pas1-comment">// This block enables the check boxes
</span><span class="pas1-space">      </span><span class="pas1-comment">// so the user can change them to set LED states when COM Port is connected
</span><span class="pas1-space">      chk_led1.Enabled:=true;
      chk_led2.Enabled:=true;
      chk_led3.Enabled:=true;
      chk_led4.Enabled:=true;
      chk_led5.Enabled:=true;
      </span><span class="pas1-comment">//------------------------------------------------
</span><span class="pas1-space">    </span><span class="pas1-reservedword">end
end</span><span class="pas1-symbol">;

</span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> TForm1_btn_SetupClick(Sender: TObject);
</span><span class="pas1-reservedword">begin
</span><span class="pas1-space"> comport1.ShowSetupDialog;                                   </span><span class="pas1-comment">// Opens the predefined Setup Dialog (part of ComPort component)
</span><span class="pas1-space"> statusbar1.Panels[</span><span class="pas1-number">0</span><span class="pas1-symbol">].Text:= </span><span class="pas1-string">'Port in use '</span><span class="pas1-space"> + comport1.Port;  </span><span class="pas1-comment">// Status bar is set to display Port in use after setup dialog
</span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;

</span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> TForm1_FormCreateCom(Sender: TObject);
</span><span class="pas1-reservedword">begin
</span><span class="pas1-space"> comport1:= TComport.Create(self);
  </span><span class="pas1-reservedword">with</span><span class="pas1-space"> comport1 </span><span class="pas1-reservedword">do</span><span class="pas1-space"> </span><span class="pas1-reservedword">begin
</span><span class="pas1-space">    BaudRate:= br9600;
    Port:= </span><span class="pas1-string">'COM1'</span><span class="pas1-symbol">;
    Parity.Bits:= prNone;
    StopBits:= sbOneStopBit;
    DataBits:= dbEight;
    Events:= [evRxChar, evTxEmpty, evRxFlag, evRing, evBreak, evCTS, evDSR, evError, evRLSD, evRx80Full]
    FlowControl.OutCTSFlow:= False;
    FlowControl.OutDSRFlow:= False;
    FlowControl.ControlDTR:= dtrDisable;
    FlowControl.ControlRTS:= rtsDisable;
    FlowControl.XonXoffOut:= False;
    FlowControl.XonXoffIn:= False;
  </span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;
  writeln(</span><span class="pas1-string">'debug: com frm create '</span><span class="pas1-symbol">);
   
 statusbar1.Panels[</span><span class="pas1-number">0</span><span class="pas1-symbol">].Text:=</span><span class="pas1-string">'Port in use '</span><span class="pas1-space"> + comport1.Port;  </span><span class="pas1-comment">// Status bar is set to display predefined Port in use at begining of program execution

</span><span class="pas1-space">  </span><span class="pas1-reservedword">if</span><span class="pas1-space"> comport1.Connected=true </span><span class="pas1-reservedword">then
</span><span class="pas1-space">    statusbar1.Panels[</span><span class="pas1-number">1</span><span class="pas1-symbol">].Text:=</span><span class="pas1-string">'Connected'</span><span class="pas1-space">                  </span><span class="pas1-comment">// Status bar is set to display connection info at begining of program execution
</span><span class="pas1-space">    </span><span class="pas1-reservedword">else
</span><span class="pas1-space">    statusbar1.Panels[</span><span class="pas1-number">1</span><span class="pas1-symbol">].Text:=</span><span class="pas1-string">'Disconnected'
</span><span class="pas1-space">  </span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;

</span><span class="pas1-comment">// Next are the procedures to turning ON and OFF each led using the variables
// defined on both Arduino code and delphi code.
// Sending the predifined vars thru serial comm (on byte at the time)
// Ports 2,3,4,5,6 are turned ON by sending it corresponding var 1,2,3,4,5
// and they are turned OFF by sending it corresponding var A,B,C,D,E

</span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> TForm1_chk_led1Click(Sender: TObject);
</span><span class="pas1-reservedword">begin
</span><span class="pas1-space">  </span><span class="pas1-reservedword">if</span><span class="pas1-space"> chk_led1.Checked=true </span><span class="pas1-reservedword">then
</span><span class="pas1-space">    comport1.WriteStr(</span><span class="pas1-string">'1'</span><span class="pas1-symbol">)
    </span><span class="pas1-reservedword">else
</span><span class="pas1-space">    comport1.WriteStr(</span><span class="pas1-string">'A'</span><span class="pas1-symbol">);
    writeln(</span><span class="pas1-string">'debug com led 1'</span><span class="pas1-symbol">);
 </span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;

</span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> TForm1_chk_led2Click(Sender: TObject);
</span><span class="pas1-reservedword">begin
</span><span class="pas1-space">    </span><span class="pas1-reservedword">if</span><span class="pas1-space"> chk_led2.Checked=true </span><span class="pas1-reservedword">then
</span><span class="pas1-space">    comport1.WriteStr(</span><span class="pas1-string">'2'</span><span class="pas1-symbol">)
    </span><span class="pas1-reservedword">else
</span><span class="pas1-space">    comport1.WriteStr(</span><span class="pas1-string">'B'</span><span class="pas1-symbol">)
</span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;

</span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> TForm1_chk_led3Click(Sender: TObject);
</span><span class="pas1-reservedword">begin
</span><span class="pas1-space">    </span><span class="pas1-reservedword">if</span><span class="pas1-space"> chk_led3.Checked=true </span><span class="pas1-reservedword">then
</span><span class="pas1-space">    comport1.WriteStr(</span><span class="pas1-string">'3'</span><span class="pas1-symbol">)
    </span><span class="pas1-reservedword">else
</span><span class="pas1-space">    comport1.WriteStr(</span><span class="pas1-string">'C'</span><span class="pas1-symbol">)
</span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;

</span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> TForm1_chk_led4Click(Sender: TObject);
</span><span class="pas1-reservedword">begin
</span><span class="pas1-space">    </span><span class="pas1-reservedword">if</span><span class="pas1-space"> chk_led4.Checked=true </span><span class="pas1-reservedword">then
</span><span class="pas1-space">    comport1.WriteStr(</span><span class="pas1-string">'4'</span><span class="pas1-symbol">)
    </span><span class="pas1-reservedword">else
</span><span class="pas1-space">    comport1.WriteStr(</span><span class="pas1-string">'D'</span><span class="pas1-symbol">)
</span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;

</span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> TForm1_chk_led5Click(Sender: TObject);
</span><span class="pas1-reservedword">begin
</span><span class="pas1-space">    </span><span class="pas1-reservedword">if</span><span class="pas1-space"> chk_led5.Checked=true </span><span class="pas1-reservedword">then
</span><span class="pas1-space">    comport1.WriteStr(</span><span class="pas1-string">'5'</span><span class="pas1-symbol">)
    </span><span class="pas1-reservedword">else
</span><span class="pas1-space">    comport1.WriteStr(</span><span class="pas1-string">'E'</span><span class="pas1-symbol">)
</span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;

</span><span class="pas1-comment">// Here ends the ON/OFF procedures for each led

</span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> TForm1_FormClose(Sender: TObject; </span><span class="pas1-reservedword">var</span><span class="pas1-space"> Action: TCloseAction);
</span><span class="pas1-reservedword">begin
</span><span class="pas1-space">  </span><span class="pas1-reservedword">if</span><span class="pas1-space"> ComPort1.Connected </span><span class="pas1-reservedword">then</span><span class="pas1-space"> </span><span class="pas1-reservedword">begin
</span><span class="pas1-space">      comport1.WriteStr(</span><span class="pas1-string">'A'</span><span class="pas1-symbol">);     </span><span class="pas1-comment">// If the application is closed, its good to leave
</span><span class="pas1-space">      comport1.WriteStr(</span><span class="pas1-string">'B'</span><span class="pas1-symbol">);     </span><span class="pas1-comment">// everything as we found it at start.
</span><span class="pas1-space">      comport1.WriteStr(</span><span class="pas1-string">'C'</span><span class="pas1-symbol">);     </span><span class="pas1-comment">// So we reset all the leds to OFF
</span><span class="pas1-space">      comport1.WriteStr(</span><span class="pas1-string">'D'</span><span class="pas1-symbol">);
      comport1.WriteStr(</span><span class="pas1-string">'E'</span><span class="pas1-symbol">);
      ComPort1.Close;
    </span><span class="pas1-reservedword">end
end</span><span class="pas1-symbol">;

</span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> TForm1_btn_loopClick(Sender: TObject);
</span><span class="pas1-reservedword">begin
</span><span class="pas1-comment">// We turn off all Led Check Boxes to allow a clean state before and after Knight Rider mode
</span><span class="pas1-space">      chk_led1.Checked:=false;
      chk_led2.Checked:=false;
      chk_led3.Checked:=false;
      chk_led4.Checked:=false;
      chk_led5.Checked:=false;

</span><span class="pas1-comment">// Here begins the rough mode of Knight Rider Demo ;)
</span><span class="pas1-space">  comport1.WriteStr(</span><span class="pas1-string">'1'</span><span class="pas1-symbol">); Sleep(</span><span class="pas1-number">50</span><span class="pas1-symbol">);
  comport1.WriteStr(</span><span class="pas1-string">'A'</span><span class="pas1-symbol">); Sleep(</span><span class="pas1-number">50</span><span class="pas1-symbol">);
  comport1.WriteStr(</span><span class="pas1-string">'2'</span><span class="pas1-symbol">); Sleep(</span><span class="pas1-number">50</span><span class="pas1-symbol">);
  comport1.WriteStr(</span><span class="pas1-string">'B'</span><span class="pas1-symbol">); Sleep(</span><span class="pas1-number">50</span><span class="pas1-symbol">);
  comport1.WriteStr(</span><span class="pas1-string">'3'</span><span class="pas1-symbol">); Sleep(</span><span class="pas1-number">50</span><span class="pas1-symbol">);
  comport1.WriteStr(</span><span class="pas1-string">'C'</span><span class="pas1-symbol">); Sleep(</span><span class="pas1-number">50</span><span class="pas1-symbol">);
  comport1.WriteStr(</span><span class="pas1-string">'4'</span><span class="pas1-symbol">); Sleep(</span><span class="pas1-number">50</span><span class="pas1-symbol">);
  comport1.WriteStr(</span><span class="pas1-string">'D'</span><span class="pas1-symbol">); Sleep(</span><span class="pas1-number">50</span><span class="pas1-symbol">);
  comport1.WriteStr(</span><span class="pas1-string">'5'</span><span class="pas1-symbol">); Sleep(</span><span class="pas1-number">50</span><span class="pas1-symbol">);
  comport1.WriteStr(</span><span class="pas1-string">'E'</span><span class="pas1-symbol">); Sleep(</span><span class="pas1-number">50</span><span class="pas1-symbol">);
  comport1.WriteStr(</span><span class="pas1-string">'4'</span><span class="pas1-symbol">); Sleep(</span><span class="pas1-number">50</span><span class="pas1-symbol">);
  comport1.WriteStr(</span><span class="pas1-string">'D'</span><span class="pas1-symbol">); Sleep(</span><span class="pas1-number">50</span><span class="pas1-symbol">);
  comport1.WriteStr(</span><span class="pas1-string">'3'</span><span class="pas1-symbol">); Sleep(</span><span class="pas1-number">50</span><span class="pas1-symbol">);
  comport1.WriteStr(</span><span class="pas1-string">'C'</span><span class="pas1-symbol">); Sleep(</span><span class="pas1-number">50</span><span class="pas1-symbol">);
  comport1.WriteStr(</span><span class="pas1-string">'2'</span><span class="pas1-symbol">); Sleep(</span><span class="pas1-number">50</span><span class="pas1-symbol">);
  comport1.WriteStr(</span><span class="pas1-string">'B'</span><span class="pas1-symbol">); Sleep(</span><span class="pas1-number">50</span><span class="pas1-symbol">);
  comport1.WriteStr(</span><span class="pas1-string">'1'</span><span class="pas1-symbol">); Sleep(</span><span class="pas1-number">50</span><span class="pas1-symbol">);
  comport1.WriteStr(</span><span class="pas1-string">'A'</span><span class="pas1-symbol">); Sleep(</span><span class="pas1-number">50</span><span class="pas1-symbol">);
</span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;

</span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> InitComPortForm;
</span><span class="pas1-reservedword">begin
</span><span class="pas1-space"> comFrm:= TForm.create(self);
 </span><span class="pas1-reservedword">with</span><span class="pas1-space"> comFrm </span><span class="pas1-reservedword">do</span><span class="pas1-space"> </span><span class="pas1-reservedword">begin
</span><span class="pas1-space">   </span><span class="pas1-comment">//FormStyle := fsStayOnTop;
</span><span class="pas1-space">   Position:= poScreenCenter;
   caption:=</span><span class="pas1-string">'COM Port meets Arduino LED - DblClick to Save Outline'</span><span class="pas1-symbol">;
   </span><span class="pas1-comment">//color:= clsilver;
</span><span class="pas1-space">   width:= </span><span class="pas1-number">700</span><span class="pas1-symbol">;
   height:= </span><span class="pas1-number">550</span><span class="pas1-symbol">;
   </span><span class="pas1-comment">//Canvas.Pen.mode:= pmNotXor;
</span><span class="pas1-space">   </span><span class="pas1-comment">//onMouseMove:= @FormMouseMove;
</span><span class="pas1-space">   </span><span class="pas1-comment">//onMouseDown:= @FormMouseDown;
</span><span class="pas1-space">   </span><span class="pas1-comment">//onDblClick:= @DblClickButton;
</span><span class="pas1-space">   </span><span class="pas1-comment">//onCreate:= @TForm1_FormCreate;        
</span><span class="pas1-space">   onClose:=  @TForm1_FormClose;
   Show;
   canvas.brush.bitmap:= getBitmapObject(Exepath+</span><span class="pas1-string">'examples\images\bmp47.bmp'</span><span class="pas1-symbol">);
   Canvas.FillRect(Rect(</span><span class="pas1-number">600</span><span class="pas1-symbol">,</span><span class="pas1-number">400</span><span class="pas1-symbol">,</span><span class="pas1-number">210</span><span class="pas1-symbol">,</span><span class="pas1-number">100</span><span class="pas1-symbol">));
 </span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;
 btn_Setup:=  TBitBtn.create(comfrm);
 </span><span class="pas1-reservedword">with</span><span class="pas1-space"> btn_Setup </span><span class="pas1-reservedword">do</span><span class="pas1-space"> </span><span class="pas1-reservedword">begin
</span><span class="pas1-space">   parent:= comfrm;
   setbounds(</span><span class="pas1-number">500</span><span class="pas1-symbol">,</span><span class="pas1-number">440</span><span class="pas1-symbol">,</span><span class="pas1-number">150</span><span class="pas1-symbol">,</span><span class="pas1-number">55</span><span class="pas1-symbol">)
   font.size:= </span><span class="pas1-number">12</span><span class="pas1-symbol">;
   glyph.LoadFromResourceName(HINSTANCE,</span><span class="pas1-string">'ledbulbon'</span><span class="pas1-symbol">); </span><span class="pas1-comment">//Knownfile
</span><span class="pas1-space">   mXButton(</span><span class="pas1-number">05</span><span class="pas1-symbol">,</span><span class="pas1-number">05</span><span class="pas1-symbol">,width, height,</span><span class="pas1-number">12</span><span class="pas1-symbol">,</span><span class="pas1-number">12</span><span class="pas1-symbol">,handle);
   caption:= </span><span class="pas1-string">'&amp;Settings'</span><span class="pas1-symbol">;
   onClick:= @TForm1_btn_SetupClick;
 </span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;
 btn_connect:= TBitBtn.create(comfrm);
 </span><span class="pas1-reservedword">with</span><span class="pas1-space"> btn_connect </span><span class="pas1-reservedword">do</span><span class="pas1-space"> </span><span class="pas1-reservedword">begin
</span><span class="pas1-space">   Parent:= comfrm;
   setbounds(</span><span class="pas1-number">180</span><span class="pas1-symbol">,</span><span class="pas1-number">440</span><span class="pas1-symbol">,</span><span class="pas1-number">150</span><span class="pas1-symbol">, </span><span class="pas1-number">55</span><span class="pas1-symbol">);
   caption:= </span><span class="pas1-string">'C&amp;onnect Node'</span><span class="pas1-symbol">;
   font.size:= </span><span class="pas1-number">12</span><span class="pas1-symbol">;
   glyph.LoadFromResourceName(getHINSTANCE,</span><span class="pas1-string">'CL_MPNEXT'</span><span class="pas1-symbol">);
   mXButton(</span><span class="pas1-number">05</span><span class="pas1-symbol">,</span><span class="pas1-number">05</span><span class="pas1-symbol">,width, height,</span><span class="pas1-number">12</span><span class="pas1-symbol">,</span><span class="pas1-number">12</span><span class="pas1-symbol">,handle);
   onClick:= @TForm1_btn_connectClick;
 </span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;
 btn_Loop:= TBitBtn.create(comfrm);
 </span><span class="pas1-reservedword">with</span><span class="pas1-space"> btn_loop </span><span class="pas1-reservedword">do</span><span class="pas1-space"> </span><span class="pas1-reservedword">begin
</span><span class="pas1-space">   Parent:= comfrm;
   setbounds(</span><span class="pas1-number">340</span><span class="pas1-symbol">,</span><span class="pas1-number">440</span><span class="pas1-symbol">,</span><span class="pas1-number">150</span><span class="pas1-symbol">, </span><span class="pas1-number">55</span><span class="pas1-symbol">);
   Hint:= </span><span class="pas1-string">'Do a loop thru all the leds on and off'
</span><span class="pas1-space">   ShowHint:= True;
   caption:= </span><span class="pas1-string">'&amp;Knight Rider'</span><span class="pas1-symbol">;
   font.size:= </span><span class="pas1-number">12</span><span class="pas1-symbol">;
   glyph.LoadFromResourceName(getHINSTANCE,</span><span class="pas1-string">'CL_MPSTOP'</span><span class="pas1-symbol">);
   mXButton(</span><span class="pas1-number">05</span><span class="pas1-symbol">,</span><span class="pas1-number">05</span><span class="pas1-symbol">,width, height,</span><span class="pas1-number">12</span><span class="pas1-symbol">,</span><span class="pas1-number">12</span><span class="pas1-symbol">,handle);
   onClick:= @TForm1_btn_loopClick;
 </span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;
 
 </span><span class="pas1-reservedword">with</span><span class="pas1-space"> TDateTimePicker.Create(self) </span><span class="pas1-reservedword">do</span><span class="pas1-space"> </span><span class="pas1-reservedword">begin
</span><span class="pas1-space">    parent:= comfrm;
    </span><span class="pas1-comment">//color
</span><span class="pas1-space">    date;
    </span><span class="pas1-comment">//time:= now;
</span><span class="pas1-space">    top:= </span><span class="pas1-number">190</span><span class="pas1-symbol">;
    left:= </span><span class="pas1-number">15</span><span class="pas1-symbol">;
    calalignment:= albottom;
  </span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;
  chk_led1:= TCheckBox.create(self)
    </span><span class="pas1-reservedword">with</span><span class="pas1-space"> chk_led1 </span><span class="pas1-reservedword">do</span><span class="pas1-space"> </span><span class="pas1-reservedword">begin
</span><span class="pas1-space">    parent:= comfrm;
    SetBounds(</span><span class="pas1-number">16</span><span class="pas1-symbol">,</span><span class="pas1-number">42</span><span class="pas1-symbol">,</span><span class="pas1-number">57</span><span class="pas1-symbol">,</span><span class="pas1-number">17</span><span class="pas1-symbol">)
    Caption:= </span><span class="pas1-string">'Led 1'</span><span class="pas1-symbol">;
    Enabled:= False;
    </span><span class="pas1-comment">//TabOrder = 3
</span><span class="pas1-space">    OnClick:= @TForm1_chk_led1Click;
  </span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;
   chk_led2:= TCheckBox.create(self)
    </span><span class="pas1-reservedword">with</span><span class="pas1-space"> chk_led2 </span><span class="pas1-reservedword">do</span><span class="pas1-space"> </span><span class="pas1-reservedword">begin
</span><span class="pas1-space">    parent:= comfrm;
    SetBounds(</span><span class="pas1-number">16</span><span class="pas1-symbol">,</span><span class="pas1-number">66</span><span class="pas1-symbol">,</span><span class="pas1-number">57</span><span class="pas1-symbol">,</span><span class="pas1-number">17</span><span class="pas1-symbol">)
    Caption:= </span><span class="pas1-string">'Led 2'</span><span class="pas1-symbol">;
    Enabled:= False;
    </span><span class="pas1-comment">//TabOrder = 3
</span><span class="pas1-space">    OnClick:= @TForm1_chk_led2Click;
  </span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;
  chk_led3:= TCheckBox.create(self)
    </span><span class="pas1-reservedword">with</span><span class="pas1-space"> chk_led3 </span><span class="pas1-reservedword">do</span><span class="pas1-space"> </span><span class="pas1-reservedword">begin
</span><span class="pas1-space">    parent:= comfrm;
    SetBounds(</span><span class="pas1-number">16</span><span class="pas1-symbol">,</span><span class="pas1-number">90</span><span class="pas1-symbol">,</span><span class="pas1-number">57</span><span class="pas1-symbol">,</span><span class="pas1-number">17</span><span class="pas1-symbol">)
    Caption:= </span><span class="pas1-string">'Led 3'</span><span class="pas1-symbol">;
    Enabled:= False;
    </span><span class="pas1-comment">//TabOrder = 3
</span><span class="pas1-space">    OnClick:= @TForm1_chk_led3Click;
  </span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;
 chk_led4:= TCheckBox.create(self)
    </span><span class="pas1-reservedword">with</span><span class="pas1-space"> chk_led4 </span><span class="pas1-reservedword">do</span><span class="pas1-space"> </span><span class="pas1-reservedword">begin
</span><span class="pas1-space">    parent:= comfrm;
    SetBounds(</span><span class="pas1-number">16</span><span class="pas1-symbol">,</span><span class="pas1-number">114</span><span class="pas1-symbol">,</span><span class="pas1-number">57</span><span class="pas1-symbol">,</span><span class="pas1-number">17</span><span class="pas1-symbol">)
    Caption:= </span><span class="pas1-string">'Led 4'</span><span class="pas1-symbol">;
    Enabled:= False;
    </span><span class="pas1-comment">//TabOrder = 3
</span><span class="pas1-space">    OnClick:= @TForm1_chk_led4Click;
  </span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;
  chk_led5:= TCheckBox.create(self)
    </span><span class="pas1-reservedword">with</span><span class="pas1-space"> chk_led5 </span><span class="pas1-reservedword">do</span><span class="pas1-space"> </span><span class="pas1-reservedword">begin
</span><span class="pas1-space">    parent:= comfrm;
    SetBounds(</span><span class="pas1-number">16</span><span class="pas1-symbol">,</span><span class="pas1-number">138</span><span class="pas1-symbol">,</span><span class="pas1-number">57</span><span class="pas1-symbol">,</span><span class="pas1-number">17</span><span class="pas1-symbol">)
    Caption:= </span><span class="pas1-string">'Led 5'</span><span class="pas1-symbol">;
    Enabled:= False;
    </span><span class="pas1-comment">//TabOrder = 3
</span><span class="pas1-space">    OnClick:= @TForm1_chk_led5Click;
  </span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;
  
  </span><span class="pas1-reservedword">with</span><span class="pas1-space"> TLabel.create(self) </span><span class="pas1-reservedword">do</span><span class="pas1-space"> </span><span class="pas1-reservedword">begin
</span><span class="pas1-space">    parent:= comfrm;
    SetBounds(</span><span class="pas1-number">80</span><span class="pas1-symbol">,</span><span class="pas1-number">42</span><span class="pas1-symbol">,</span><span class="pas1-number">39</span><span class="pas1-symbol">,</span><span class="pas1-number">13</span><span class="pas1-symbol">)
    Caption:= </span><span class="pas1-string">'&lt;---------&gt;'
</span><span class="pas1-space">  </span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;
  </span><span class="pas1-reservedword">with</span><span class="pas1-space"> TLabel.create(self) </span><span class="pas1-reservedword">do</span><span class="pas1-space"> </span><span class="pas1-reservedword">begin
</span><span class="pas1-space">    parent:= comfrm;
    SetBounds(</span><span class="pas1-number">80</span><span class="pas1-symbol">,</span><span class="pas1-number">66</span><span class="pas1-symbol">,</span><span class="pas1-number">39</span><span class="pas1-symbol">,</span><span class="pas1-number">13</span><span class="pas1-symbol">)
    Caption:= </span><span class="pas1-string">'&lt;---------&gt;'
</span><span class="pas1-space">  </span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;
  </span><span class="pas1-reservedword">with</span><span class="pas1-space"> TLabel.create(self) </span><span class="pas1-reservedword">do</span><span class="pas1-space"> </span><span class="pas1-reservedword">begin
</span><span class="pas1-space">    parent:= comfrm;
    SetBounds(</span><span class="pas1-number">80</span><span class="pas1-symbol">,</span><span class="pas1-number">90</span><span class="pas1-symbol">,</span><span class="pas1-number">39</span><span class="pas1-symbol">,</span><span class="pas1-number">13</span><span class="pas1-symbol">)
    Caption:= </span><span class="pas1-string">'&lt;---------&gt;'
</span><span class="pas1-space">  </span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;
  </span><span class="pas1-reservedword">with</span><span class="pas1-space"> TLabel.create(self) </span><span class="pas1-reservedword">do</span><span class="pas1-space"> </span><span class="pas1-reservedword">begin
</span><span class="pas1-space">    parent:= comfrm;
    SetBounds(</span><span class="pas1-number">80</span><span class="pas1-symbol">,</span><span class="pas1-number">114</span><span class="pas1-symbol">,</span><span class="pas1-number">39</span><span class="pas1-symbol">,</span><span class="pas1-number">13</span><span class="pas1-symbol">)
    Caption:= </span><span class="pas1-string">'&lt;---------&gt;'
</span><span class="pas1-space">  </span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;
  </span><span class="pas1-reservedword">with</span><span class="pas1-space"> TLabel.create(self) </span><span class="pas1-reservedword">do</span><span class="pas1-space"> </span><span class="pas1-reservedword">begin
</span><span class="pas1-space">    parent:= comfrm;
    SetBounds(</span><span class="pas1-number">80</span><span class="pas1-symbol">,</span><span class="pas1-number">138</span><span class="pas1-symbol">,</span><span class="pas1-number">39</span><span class="pas1-symbol">,</span><span class="pas1-number">13</span><span class="pas1-symbol">)
    Caption:= </span><span class="pas1-string">'&lt;---------&gt;'
</span><span class="pas1-space">  </span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;
  </span><span class="pas1-reservedword">with</span><span class="pas1-space"> TLabel.create(self) </span><span class="pas1-reservedword">do</span><span class="pas1-space"> </span><span class="pas1-reservedword">begin
</span><span class="pas1-space">    parent:= comfrm;
     setBounds(</span><span class="pas1-number">16</span><span class="pas1-symbol">,</span><span class="pas1-number">12</span><span class="pas1-symbol">,</span><span class="pas1-number">69</span><span class="pas1-symbol">,</span><span class="pas1-number">13</span><span class="pas1-symbol">)
     Caption:= </span><span class="pas1-string">'LED Control'</span><span class="pas1-symbol">;
     Font.Charset:= DEFAULT_CHARSET;
     Font.Color:= clMaroon;
     Font.Size:= </span><span class="pas1-number">13</span><span class="pas1-symbol">;
     Font.Name:= </span><span class="pas1-string">'MS Sans Serif'</span><span class="pas1-symbol">;
     Font.Style:= [fsBold];
  </span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;
  </span><span class="pas1-reservedword">with</span><span class="pas1-space"> TLabel.create(self) </span><span class="pas1-reservedword">do</span><span class="pas1-space"> </span><span class="pas1-reservedword">begin
</span><span class="pas1-space">    parent:= comfrm;
     setBounds(</span><span class="pas1-number">155</span><span class="pas1-symbol">,</span><span class="pas1-number">12</span><span class="pas1-symbol">,</span><span class="pas1-number">69</span><span class="pas1-symbol">,</span><span class="pas1-number">13</span><span class="pas1-symbol">)
     Caption:= </span><span class="pas1-string">'Arduino PIN'</span><span class="pas1-symbol">;
     Font.Charset:= DEFAULT_CHARSET;
     Font.Color:= clNavy;
     Font.Size:= </span><span class="pas1-number">13</span><span class="pas1-symbol">;
     Font.Name:= </span><span class="pas1-string">'MS Sans Serif'</span><span class="pas1-symbol">;
     Font.Style:= [fsBold];
  </span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;

  </span><span class="pas1-reservedword">with</span><span class="pas1-space"> TLabel.create(self) </span><span class="pas1-reservedword">do</span><span class="pas1-space"> </span><span class="pas1-reservedword">begin
</span><span class="pas1-space">    parent:= comfrm;
    SetBounds(</span><span class="pas1-number">156</span><span class="pas1-symbol">,</span><span class="pas1-number">42</span><span class="pas1-symbol">,</span><span class="pas1-number">38</span><span class="pas1-symbol">,</span><span class="pas1-number">13</span><span class="pas1-symbol">)
    Caption:= </span><span class="pas1-string">'Digital 2'
</span><span class="pas1-space">  </span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;
  </span><span class="pas1-reservedword">with</span><span class="pas1-space"> TLabel.create(self) </span><span class="pas1-reservedword">do</span><span class="pas1-space"> </span><span class="pas1-reservedword">begin
</span><span class="pas1-space">    parent:= comfrm;
    SetBounds(</span><span class="pas1-number">156</span><span class="pas1-symbol">,</span><span class="pas1-number">66</span><span class="pas1-symbol">,</span><span class="pas1-number">38</span><span class="pas1-symbol">,</span><span class="pas1-number">13</span><span class="pas1-symbol">)
    Caption:= </span><span class="pas1-string">'Digital 3'
</span><span class="pas1-space">  </span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;
  </span><span class="pas1-reservedword">with</span><span class="pas1-space"> TLabel.create(self) </span><span class="pas1-reservedword">do</span><span class="pas1-space"> </span><span class="pas1-reservedword">begin
</span><span class="pas1-space">    parent:= comfrm;
    SetBounds(</span><span class="pas1-number">156</span><span class="pas1-symbol">,</span><span class="pas1-number">90</span><span class="pas1-symbol">,</span><span class="pas1-number">38</span><span class="pas1-symbol">,</span><span class="pas1-number">13</span><span class="pas1-symbol">)
    Caption:= </span><span class="pas1-string">'Digital 4'
</span><span class="pas1-space">  </span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;
  </span><span class="pas1-reservedword">with</span><span class="pas1-space"> TLabel.create(self) </span><span class="pas1-reservedword">do</span><span class="pas1-space"> </span><span class="pas1-reservedword">begin
</span><span class="pas1-space">    parent:= comfrm;
    SetBounds(</span><span class="pas1-number">156</span><span class="pas1-symbol">,</span><span class="pas1-number">114</span><span class="pas1-symbol">,</span><span class="pas1-number">38</span><span class="pas1-symbol">,</span><span class="pas1-number">13</span><span class="pas1-symbol">)
    Caption:= </span><span class="pas1-string">'Digital 5'
</span><span class="pas1-space">  </span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;
  </span><span class="pas1-reservedword">with</span><span class="pas1-space"> TLabel.create(self) </span><span class="pas1-reservedword">do</span><span class="pas1-space"> </span><span class="pas1-reservedword">begin
</span><span class="pas1-space">    parent:= comfrm;
    SetBounds(</span><span class="pas1-number">156</span><span class="pas1-symbol">,</span><span class="pas1-number">138</span><span class="pas1-symbol">,</span><span class="pas1-number">38</span><span class="pas1-symbol">,</span><span class="pas1-number">13</span><span class="pas1-symbol">)
    Caption:= </span><span class="pas1-string">'Digital 6'
</span><span class="pas1-space">  </span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;

  statusbar1:= TStatusBar.create(self);
  </span><span class="pas1-reservedword">with</span><span class="pas1-space"> statusbar1 </span><span class="pas1-reservedword">do</span><span class="pas1-space"> </span><span class="pas1-reservedword">begin
</span><span class="pas1-space">    parent:= comFrm;
    </span><span class="pas1-comment">//simplepanel:= true;
</span><span class="pas1-space">    </span><span class="pas1-comment">//align:= alleft;
</span><span class="pas1-space">    showhint:= true;
    hint:= </span><span class="pas1-string">'this is a led box'</span><span class="pas1-symbol">;
     Panels.add;
     panels.items[</span><span class="pas1-number">0</span><span class="pas1-symbol">].width:= </span><span class="pas1-number">200</span><span class="pas1-symbol">;
     panels.items[</span><span class="pas1-number">0</span><span class="pas1-symbol">].text:= </span><span class="pas1-string">'200'</span><span class="pas1-symbol">;
     Panels.add;
     panels.items[</span><span class="pas1-number">1</span><span class="pas1-symbol">].width:= </span><span class="pas1-number">150</span><span class="pas1-symbol">;
     panels.items[</span><span class="pas1-number">1</span><span class="pas1-symbol">].text:= </span><span class="pas1-string">'150'</span><span class="pas1-symbol">;
  </span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;
  TForm1_FormCreateCom(self); 
</span><span class="pas1-reservedword">end</span><span class="pas1-symbol">; 
   

</span><span class="pas1-reservedword">begin</span><span class="pas1-space">   </span><span class="pas1-comment">//main of LED BOX
</span><span class="pas1-space">   </span><span class="pas1-comment">//InifileRead;
</span><span class="pas1-space">   </span><span class="pas1-comment">//ProcessMessagesOFF;
</span><span class="pas1-space">   getMaxBoxIni;
   writeln(</span><span class="pas1-string">'Thread ID :'</span><span class="pas1-symbol">+intToStr(CurrentThreadID))
   writeln(</span><span class="pas1-string">'Process ID :'</span><span class="pas1-symbol">+intToStr(CurrentProcessID))
   writeln(</span><span class="pas1-string">'machine name is: '</span><span class="pas1-symbol">+getHostName)
   writeln(</span><span class="pas1-string">'user name is: '</span><span class="pas1-symbol">+getUserName)
   osType:= Win32Type;
   writeln(</span><span class="pas1-string">'OS Type is: '</span><span class="pas1-symbol">+intToStr(ord(osType)));
   mytimestamp:= GetFileCreationTime(exepath+</span><span class="pas1-string">'maxbox3.exe'</span><span class="pas1-symbol">)
   writeln(DateTimeToStr(mytimestamp)+</span><span class="pas1-string">' for maXbox3 file'</span><span class="pas1-symbol">)
   </span><span class="pas1-comment">//SearchAndOpenDoc(ExtractFilePath(ParamStr(0))+'docs\maxbox_starter16.pdf')
</span><span class="pas1-space">   </span><span class="pas1-comment">//ExecuteCommand('cmd','/k dir *.*')
</span><span class="pas1-space">   
    </span><span class="pas1-reservedword">with</span><span class="pas1-space"> TComport.Create(self) </span><span class="pas1-reservedword">do</span><span class="pas1-space"> </span><span class="pas1-reservedword">begin</span><span class="pas1-space">   </span><span class="pas1-comment">//TestCase
</span><span class="pas1-space">      </span><span class="pas1-comment">//cleanupinstance;
</span><span class="pas1-space">      Open;
      writeln(</span><span class="pas1-string">'com handle '</span><span class="pas1-symbol">+inttostr(handle));
      codepage;
      buffer;
      writeln(</span><span class="pas1-string">'of com port '</span><span class="pas1-symbol">+getnamepath);
      </span><span class="pas1-reservedword">if</span><span class="pas1-space"> connected </span><span class="pas1-reservedword">then</span><span class="pas1-space"> writeln(</span><span class="pas1-string">' com connect on'</span><span class="pas1-symbol">);
      Close;
      Free;
    </span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;
  
    InitComPortForm; 
    maxform1.mxNavigator.color:= clyellow;
    </span><span class="pas1-comment">//JvFormLog
</span><span class="pas1-space">    </span><span class="pas1-reservedword">with</span><span class="pas1-space"> TJvLogFile.Create(self) </span><span class="pas1-reservedword">do</span><span class="pas1-space"> </span><span class="pas1-reservedword">begin
</span><span class="pas1-space">      add(</span><span class="pas1-string">'first'</span><span class="pas1-symbol">,</span><span class="pas1-string">'second'</span><span class="pas1-symbol">,</span><span class="pas1-string">'third'</span><span class="pas1-symbol">);
      </span><span class="pas1-comment">//showlog('maXbox logger');
</span><span class="pas1-space">      Free;
    </span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;
    </span><span class="pas1-comment">//printimage(getbitmapObject(Exepath+backmap),bscentered); 
</span><span class="pas1-space">    </span><span class="pas1-comment">//getEnvironmentInfo;
</span><span class="pas1-reservedword">End</span><span class="pas1-symbol">. 


</span><span class="pas1-reservedword">type
</span><span class="pas1-space">  TJvLogFileMainForm = </span><span class="pas1-reservedword">class</span><span class="pas1-symbol">(TForm)
    JvLogFile1: TJvLogFile;
    btnStart: TButton;
    btnShow: TButton;
    lblActive: TLabel;
    btnReset: TButton;
    lblInactive: TLabel;
    </span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> FormCreate(Sender: TObject);
    </span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> btnStartClick(Sender: TObject);
    </span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> btnShowClick(Sender: TObject);
    </span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> FormMouseMove(Sender: TObject; Shift: TShiftState; X,
      Y: Integer);
    </span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> btnResetClick(Sender: TObject);
  </span><span class="pas1-reservedword">private
</span><span class="pas1-space">    </span><span class="pas1-comment">{ Private declarations }
</span><span class="pas1-space">    FLogFileName:</span><span class="pas1-reservedword">string</span><span class="pas1-symbol">;
    </span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> StartLogging;
    </span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> StopLogging;
    </span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> ResetLogging;
  </span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;
  
</span><span class="pas1-comment">//-----------------------------------------------------------------------
</span><span class="pas1-space">  * Controls the state (</span><span class="pas1-reservedword">ON</span><span class="pas1-symbol">/OFF) </span><span class="pas1-reservedword">of</span><span class="pas1-space"> </span><span class="pas1-number">5</span><span class="pas1-space"> LEDs connected </span><span class="pas1-reservedword">to</span><span class="pas1-space"> an Arduino Board
  * </span><span class="pas1-reservedword">on</span><span class="pas1-space"> Digital Pins </span><span class="pas1-number">2</span><span class="pas1-symbol">,</span><span class="pas1-number">3</span><span class="pas1-symbol">,</span><span class="pas1-number">4</span><span class="pas1-symbol">,</span><span class="pas1-number">5</span><span class="pas1-symbol">,</span><span class="pas1-number">6</span><span class="pas1-space"> thru the serial comm
 *
 * Created April </span><span class="pas1-number">02</span><span class="pas1-space"> </span><span class="pas1-number">2009
</span><span class="pas1-space"> * copyleft </span><span class="pas1-number">2009</span><span class="pas1-space"> Roberto Ramirez &lt;beta@thepenguincult.com&gt;
 * Full Source code at http:</span><span class="pas1-comment">//www.thepenguincult.com/proyectos/arduino-delphi-control/
</span><span class="pas1-space"> *
 *}

/*
 * Delphi LEDs Control
 * -----------------
 * Turns </span><span class="pas1-reservedword">on</span><span class="pas1-space"> </span><span class="pas1-reservedword">and</span><span class="pas1-space"> off </span><span class="pas1-number">5</span><span class="pas1-space"> light emitting diodes(LED) connected </span><span class="pas1-reservedword">to</span><span class="pas1-space"> digital  
 * pins </span><span class="pas1-number">2</span><span class="pas1-space"> thru </span><span class="pas1-float">6.</span><span class="pas1-space"> The LEDs will be controlled using check boxes </span><span class="pas1-reservedword">on</span><span class="pas1-space"> Delphi
 * that sends serial data </span><span class="pas1-reservedword">to</span><span class="pas1-space"> Arduino Board.
 *
 * IMPORTANT!!: Don</span><span class="pas1-string">'t forget to download the Delphi PC Example that controls the leds connected to arduino board.
</span><span class="pas1-space"> *
 * Created April </span><span class="pas1-number">02</span><span class="pas1-space"> </span><span class="pas1-number">2009
</span><span class="pas1-space"> * copyleft </span><span class="pas1-number">2009</span><span class="pas1-space"> Roberto Ramirez &lt;beta@thepenguincult.com&gt;
 * Full Source code at http:</span><span class="pas1-comment">//www.thepenguincult.com/proyectos/arduino-delphi-control/
</span><span class="pas1-space"> * 
 */

int val = </span><span class="pas1-number">0</span><span class="pas1-symbol">;       </span><span class="pas1-comment">// variable to store the data from the serial port
</span><span class="pas1-identifier">int ledPin1 = </span><span class="pas1-number">2</span><span class="pas1-symbol">;   </span><span class="pas1-comment">// LED connected to digital pin 2
</span><span class="pas1-identifier">int ledPin2 = </span><span class="pas1-number">3</span><span class="pas1-symbol">;   </span><span class="pas1-comment">// LED connected to digital pin 3
</span><span class="pas1-identifier">int ledPin3 = </span><span class="pas1-number">4</span><span class="pas1-symbol">;   </span><span class="pas1-comment">// LED connected to digital pin 4
</span><span class="pas1-identifier">int ledPin4 = </span><span class="pas1-number">5</span><span class="pas1-symbol">;   </span><span class="pas1-comment">// LED connected to digital pin 5
</span><span class="pas1-identifier">int ledPin5 = </span><span class="pas1-number">6</span><span class="pas1-symbol">;   </span><span class="pas1-comment">// LED connected to digital pin 6

</span><span class="pas1-identifier">void setup() </span><span class="pas1-comment">{

  pinMode(ledPin1,OUTPUT);    // declare the LED's pin as output
  pinMode(ledPin2,OUTPUT);    // declare the LED's pin as output
  pinMode(ledPin3,OUTPUT);    // declare the LED's pin as output
  pinMode(ledPin4,OUTPUT);    // declare the LED's pin as output
  pinMode(ledPin5,OUTPUT);    // declare the LED's pin as output

  Serial.begin(9600);        // connect to the serial port
}

</span><span class="pas1-identifier">void loop () </span><span class="pas1-comment">{
  val = Serial.read();      // read the serial port

  
  if (val !=-1){

    if (val=='1'){
      digitalWrite(ledPin1,HIGH);
    }
</span><span class="pas1-space">    
    </span><span class="pas1-reservedword">else</span><span class="pas1-space"> </span><span class="pas1-reservedword">if</span><span class="pas1-space"> (val==</span><span class="pas1-string">'A'</span><span class="pas1-symbol">)</span><span class="pas1-comment">{
      digitalWrite(ledPin1,LOW);
      }
</span><span class="pas1-space">    
    </span><span class="pas1-reservedword">if</span><span class="pas1-space"> (val==</span><span class="pas1-string">'2'</span><span class="pas1-symbol">)</span><span class="pas1-comment">{
      digitalWrite(ledPin2,HIGH);
    }

</span><span class="pas1-space">    </span><span class="pas1-reservedword">else</span><span class="pas1-space"> </span><span class="pas1-reservedword">if</span><span class="pas1-space"> (val==</span><span class="pas1-string">'B'</span><span class="pas1-symbol">)</span><span class="pas1-comment">{
      digitalWrite(ledPin2,LOW);
      }

</span><span class="pas1-space">    </span><span class="pas1-reservedword">if</span><span class="pas1-space"> (val==</span><span class="pas1-string">'3'</span><span class="pas1-symbol">)</span><span class="pas1-comment">{
      digitalWrite(ledPin3,HIGH);
    }

</span><span class="pas1-space">    </span><span class="pas1-reservedword">else</span><span class="pas1-space"> </span><span class="pas1-reservedword">if</span><span class="pas1-space"> (val==</span><span class="pas1-string">'C'</span><span class="pas1-symbol">)</span><span class="pas1-comment">{
      digitalWrite(ledPin3,LOW);
      }

</span><span class="pas1-space">    </span><span class="pas1-reservedword">if</span><span class="pas1-space"> (val==</span><span class="pas1-string">'4'</span><span class="pas1-symbol">)</span><span class="pas1-comment">{
      digitalWrite(ledPin4,HIGH);
    }

</span><span class="pas1-space">    </span><span class="pas1-reservedword">else</span><span class="pas1-space"> </span><span class="pas1-reservedword">if</span><span class="pas1-space"> (val==</span><span class="pas1-string">'D'</span><span class="pas1-symbol">)</span><span class="pas1-comment">{
      digitalWrite(ledPin4,LOW);
      }

</span><span class="pas1-space">    </span><span class="pas1-reservedword">if</span><span class="pas1-space"> (val==</span><span class="pas1-string">'5'</span><span class="pas1-symbol">)</span><span class="pas1-comment">{
      digitalWrite(ledPin5,HIGH);
    }

</span><span class="pas1-space">    </span><span class="pas1-reservedword">else</span><span class="pas1-space"> </span><span class="pas1-reservedword">if</span><span class="pas1-space"> (val==</span><span class="pas1-string">'E'</span><span class="pas1-symbol">)</span><span class="pas1-comment">{
      digitalWrite(ledPin5,LOW);
      }
</span><span class="pas1-space">   
    </span><span class="pas1-comment">//Serial.println();
</span><span class="pas1-space">  }
}
----------------------------------------------------------------------
</span><span class="pas1-comment">//----------------------------------Code Notes------------------------
</span><span class="pas1-reservedword">unit</span><span class="pas1-space"> Unit1;
</span><span class="pas1-reservedword">interface
uses
</span><span class="pas1-space">  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, ComCtrls, CPort, CPortCtl, Menus;
  
  
------------------------------------------------
Windows crashed again. I am the Blue Screen </span><span class="pas1-reservedword">of</span><span class="pas1-space"> Death. No one hears your screams.
Three things are certain: Death, taxes, </span><span class="pas1-reservedword">and</span><span class="pas1-space"> lost data. Guess which has occurred.
There </span><span class="pas1-reservedword">is</span><span class="pas1-space"> no place like </span><span class="pas1-float">127.0.0.1</span><span class="pas1-space"> 

http:</span><span class="pas1-comment">//en.wikipedia.org/wiki/Sneakers_%281992_film%29


</span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> RotateBitmap(</span><span class="pas1-reservedword">var</span><span class="pas1-space"> htmpBitmapDC: TBitmap; </span><span class="pas1-reservedword">var</span><span class="pas1-space"> lWidth : Longint;
                            </span><span class="pas1-reservedword">var</span><span class="pas1-space"> lHeight : Longint; lRadians : real; origmap: TBitmap);
</span><span class="pas1-reservedword">var
</span><span class="pas1-space">         I,J : Longint;               </span><span class="pas1-comment">// loop counter
</span><span class="pas1-space">         </span><span class="pas1-comment">//htmpBitmapDC : Longint;    // DC of the new bitmap
</span><span class="pas1-space">         lSine,lCosine : extended;          </span><span class="pas1-comment">// sine,cosine used in rotation
</span><span class="pas1-space">         X1,X2,X3,Y1,Y2,Y3 : Longint;     </span><span class="pas1-comment">// used in calculating new bitmap dimensions
</span><span class="pas1-space">         lMinX,lMaxX,lMinY,lMaxY: Longint;  
         lNewWidth,lNewHeight : Longint;  </span><span class="pas1-comment">// width of new bitmap
</span><span class="pas1-space">         lSrcX,lSrcY  : Longint;   </span><span class="pas1-comment">// x,y pixel coord we are blitting from the source image
</span><span class="pas1-space">         myrect: TRect;
</span><span class="pas1-reservedword">begin
</span><span class="pas1-space">   </span><span class="pas1-comment">// create a compatible DC from the one just brought
</span><span class="pas1-space">   </span><span class="pas1-comment">// compute the sine/cosinse of the radians used to // rotate this image
</span><span class="pas1-space">   lSine := Sin(lRadians);
   lCosine := Cos(lRadians);
   </span><span class="pas1-comment">// compute the size of the new bitmap being created
</span><span class="pas1-space">   X1 := Round(-lHeight * lSine);
   Y1 := Round(lHeight * lCosine);
   X2 := Round(lWidth * lCosine - lHeight * lSine);
   Y2 := Round(lHeight * lCosine + lWidth * lSine);
   X3 := Round(lWidth * lCosine);
   Y3 := Round(lWidth * lSine);
   </span><span class="pas1-comment">// figure out the max/min size of the new bitmap
</span><span class="pas1-space">   lMinX := Min(</span><span class="pas1-number">0</span><span class="pas1-symbol">, Min(X1, Min(X2, X3)));
   lMinY := Min(</span><span class="pas1-number">0</span><span class="pas1-symbol">, Min(Y1, Min(Y2, Y3)));
   lMaxX := Max(X1, Max(X2, X3));
   lMaxY := Max(Y1, Max(Y2, Y3));
   </span><span class="pas1-comment">// set the new bitmap width/height
</span><span class="pas1-space">   lNewWidth:= lMaxX - lMinX;
   lNewHeight:= lMaxY - lMinY;
   </span><span class="pas1-comment">// create a new bitmap based upon the new width/height of the // rotated bitmap
</span><span class="pas1-space">   </span><span class="pas1-comment">//hNewBitmap := CreateCompatibleBitmap(hBitmapDC, lNewWidth, lNewHeight);
</span><span class="pas1-space">   htmpBitmapDC.height:= lNewHeight;
   htmpBitmapDC.width:= lNewWidth;
   </span><span class="pas1-comment">//myRect:= Rect(0,0,lwidth,lheight); 
</span><span class="pas1-space">   </span><span class="pas1-comment">//bfrm.Canvas.BrushCopy(MyRect, Image1.Picture.Bitmap, MyRect, clred);
</span><span class="pas1-space">   </span><span class="pas1-reservedword">For</span><span class="pas1-space"> I:= </span><span class="pas1-number">0</span><span class="pas1-space"> </span><span class="pas1-reservedword">To</span><span class="pas1-space"> lNewWidth </span><span class="pas1-reservedword">do</span><span class="pas1-space"> </span><span class="pas1-reservedword">begin
</span><span class="pas1-space">     </span><span class="pas1-reservedword">For</span><span class="pas1-space"> J:= </span><span class="pas1-number">0</span><span class="pas1-space"> </span><span class="pas1-reservedword">To</span><span class="pas1-space"> lNewHeight </span><span class="pas1-reservedword">do</span><span class="pas1-space"> </span><span class="pas1-reservedword">begin
</span><span class="pas1-space">       lSrcX:= Round((J + lMinX) * lCosine + (I + lMinY) * lSine);
       lSrcY:= Round((I + lMinY) * lCosine - (J + lMinX) * lSine);
       </span><span class="pas1-reservedword">If</span><span class="pas1-space"> (lSrcX &gt;= </span><span class="pas1-number">0</span><span class="pas1-symbol">) </span><span class="pas1-reservedword">And</span><span class="pas1-space"> (lSrcX &lt;= lWidth) </span><span class="pas1-reservedword">And
</span><span class="pas1-space">          (lSrcY &gt;= </span><span class="pas1-number">0</span><span class="pas1-symbol">) </span><span class="pas1-reservedword">And</span><span class="pas1-space"> (lSrcY &lt;= lHeight) </span><span class="pas1-reservedword">Then</span><span class="pas1-space"> </span><span class="pas1-reservedword">begin
</span><span class="pas1-space">         BitBlt(htmpBitmapDC.canvas.handle,J,I,lnewheight,lnewwidth,origmap.canvas.handle,
                                 lSrcX,lSrcY, SRCCOPY);
        </span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;
     </span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;
  </span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;
  </span><span class="pas1-comment">//Image1.Refresh; 
</span><span class="pas1-space">  lWidth:= htmpBitmapDC.width;
  lHeight:= htmpBitmapDC.height;
</span><span class="pas1-reservedword">End</span><span class="pas1-symbol">;
      

</span><span class="pas1-reservedword">procedure</span><span class="pas1-space"> maXCalc_demo;
</span><span class="pas1-reservedword">begin
</span><span class="pas1-space">  printF(</span><span class="pas1-string">'this is %.6f'</span><span class="pas1-symbol">,[</span><span class="pas1-reservedword">maXcalc</span><span class="pas1-symbol">(</span><span class="pas1-string">'ln(2)+fact(388)+2!'</span><span class="pas1-symbol">)]); 
  printF(</span><span class="pas1-string">'this is %.6f'</span><span class="pas1-symbol">,[</span><span class="pas1-reservedword">maXcalc</span><span class="pas1-symbol">(</span><span class="pas1-string">'(4!)^(3!)'</span><span class="pas1-symbol">)]); 
  printF(</span><span class="pas1-string">'this is %.6f'</span><span class="pas1-symbol">,[</span><span class="pas1-reservedword">maXcalc</span><span class="pas1-symbol">(</span><span class="pas1-string">'4!+4!'</span><span class="pas1-symbol">)]); 
  printF(</span><span class="pas1-string">'this is %.6f'</span><span class="pas1-symbol">,[</span><span class="pas1-reservedword">maXcalc</span><span class="pas1-symbol">(</span><span class="pas1-string">'log(22)'</span><span class="pas1-symbol">)]); 
  printF(</span><span class="pas1-string">'this is logN %.6f'</span><span class="pas1-symbol">,[</span><span class="pas1-reservedword">maXcalc</span><span class="pas1-symbol">(</span><span class="pas1-string">'2%256'</span><span class="pas1-symbol">)]);
  writeln(</span><span class="pas1-string">'ln(e): '</span><span class="pas1-symbol">+floattostr(</span><span class="pas1-reservedword">maXcalc</span><span class="pas1-symbol">(</span><span class="pas1-string">'ln(e)'</span><span class="pas1-symbol">)))
  writeln(floattostr(</span><span class="pas1-reservedword">maXcalc</span><span class="pas1-symbol">(</span><span class="pas1-string">'e+10^6'</span><span class="pas1-symbol">)))
  printF(</span><span class="pas1-string">'addition theorem %.18f '</span><span class="pas1-symbol">,[</span><span class="pas1-reservedword">maXcalc</span><span class="pas1-symbol">(</span><span class="pas1-string">'sin(2.5/2)'</span><span class="pas1-symbol">)])
  printF(</span><span class="pas1-string">'addition theorem %.18f '</span><span class="pas1-symbol">,[</span><span class="pas1-reservedword">maXcalc</span><span class="pas1-symbol">(</span><span class="pas1-string">'sqrt(1/2*(1-cos(2.5)))'</span><span class="pas1-symbol">)])
  printF(</span><span class="pas1-string">'addition theorem2 %22.18f '</span><span class="pas1-symbol">,[</span><span class="pas1-reservedword">maXcalc</span><span class="pas1-symbol">(</span><span class="pas1-string">'cos(2.5/2)'</span><span class="pas1-symbol">)])
  printF(</span><span class="pas1-string">'addition theorem2 %22.18f '</span><span class="pas1-symbol">,[</span><span class="pas1-reservedword">maXcalc</span><span class="pas1-symbol">(</span><span class="pas1-string">'sqrt(1/2*(1+cos(2.5)))'</span><span class="pas1-symbol">)])
  maXcalcF(</span><span class="pas1-string">'2%256+2^10'</span><span class="pas1-symbol">);
</span><span class="pas1-reservedword">end</span><span class="pas1-symbol">; 

</span><span class="pas1-number">50000</span><span class="pas1-space">  = </span><span class="pas1-float">0.693137180659968
</span><span class="pas1-number">100000</span><span class="pas1-space"> = </span><span class="pas1-float">0.693142180584982
</span><span class="pas1-number">500000</span><span class="pas1-space"> = </span><span class="pas1-float">0.693146180561005
</span><span class="pas1-number">10</span><span class="pas1-symbol">^</span><span class="pas1-number">6</span><span class="pas1-space">   = </span><span class="pas1-float">0.693146680560255
</span><span class="pas1-number">5</span><span class="pas1-symbol">*</span><span class="pas1-number">10</span><span class="pas1-symbol">^</span><span class="pas1-number">6</span><span class="pas1-space"> = </span><span class="pas1-float">0.693147080560068
</span><span class="pas1-number">50</span><span class="pas1-symbol">*</span><span class="pas1-number">10</span><span class="pas1-symbol">^</span><span class="pas1-number">6</span><span class="pas1-symbol">= </span><span class="pas1-float">0.693147170560399</span><span class="pas1-space">    </span><span class="pas1-comment">//Runtime: 0:28:22.422
</span><span class="pas1-identifier">ln(</span><span class="pas1-number">2</span><span class="pas1-symbol">)  = </span><span class="pas1-float">0.693147180559945

</span><span class="pas1-comment">(* zeta:= 0;
     for i:= 1 to 50000 do 
       if i mod 2 = 0 then
         zeta:= zeta - 1/i else
         zeta:= zeta + 1/i;
       writeln('harmonic alternate to ln(2): '+floattostr(zeta))  
       writeln(floattostr(maxcalc('ln(2)')))
       writeln(floattostr(ln2))    *)
</span><span class="pas1-space">   
http:</span><span class="pas1-comment">//www.hitekdev.com/delphi/BITMAPANIMATION.html
</span></code></pre><!--EndFragment--></body>
</html>