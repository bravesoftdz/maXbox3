program maXbox_functester;
//with an include example, loc's=6
//var date1: TDatetime;

 Function Absf(E : Extended) : Extended;
 begin
        result:=Abs(E); 
        //A:=Abs(-2); {A will equal 2}
        //A:=Abs(2); {A will equal 2}
 end;         
 
 Function Chrf(B : Byte) : Char;
 begin
        result:=Chr(B); 
        //C:=Chr(65); {C will equal 'A'}
        //C:=Chr(97); {C will equal 'a'}
 end;

 Function Copy(S : String; Indx, Count : Integer) : String;
 begin
        //S:='Hi There';
        result:=Copy(S,indx,count); {S2 will equal 'There'}
        //result:=Copy(S,4,5); {S2 will equal 'There'}
 end;       


 Function Cos(E : Extended) : Extended;
 begin
        result:=Cos(E);{E will equal 0.8623 (the cosine of 100)}
        //E2:=Cos(100);{E will equal 0.8623 (the cosine of 100)}
 end;

 Function myDate: string;
 begin
        result:=DateToStr(Date); {S would be the current date in string form}
        //S:=DateToStr(Date); {S would be the current date in string form}
 end;

 Function DateToStrf(D: TDateTime) : string;
 begin
        result:=DateToStr(Date); {S would be the date in string form}
 end;

 Function DayOfWeekf(Const DateTime: TDateTime) : Word;
 begin
   result:= DayOfWeek(Date); {D would be 4 if today was Wednesday (Sunday=1)}
 end;


 Procedure DecodeDatef(Const DateTime: TDateTime; var Yr, Mn, Dy: Word);
 begin
   DecodeDate(Date,Yr,Mn,Dy); {If today was 11/27/06 then Yr=6, Mn=11, Day=27}
 end;

 Procedure DecodeTimef(Const DateTime: TDateTime; var Hr, Mn, Sc, Mis: Word);
 begin
   //DecodeTime(Now,Hr,Mn,Sc,Mis);{If it was 3:01:02.001 pm then Hr=15, Mn=1, Sc=2, Ms=1}
 end;

 Procedure Delete(Var S : String; Indx, Count : Integer);
 begin
        S:='The Big Bad Wolf';
        Delete(S,9,4); {S would be 'The Big Wolf'}
 end;

 Function EncodeDatef(Year, Month, Day: Word) : string;
 Var
 MylDate, date1 : TDateTime;
 begin
       MylDate:= EncodeDate(1997,11,27);
       result:= DateToStr(MylDate); {S would be '11/27/1997'}
 end;

 Function EncodeTimef(Hour, Min, Sec, MSec: Word) : string;
 Var
 MyTime : TDateTime;
 begin
       MyTime:=EncodeTime(15,0,0,0);
       result:=TimeToStr(MyTime); {S would be '3:00:00 PM'}
 end;

 Function FloatToStrf(E : Extended) : String;
 Var
   mE : double;
 begin
      mE:=12.4508;
      result:=FloatToStr(mE); {S would be '12.4508'}
      mE:=9 / 5;
      result:=FloatToStr(E); {S would be '1.8'}
 end;

 Function FormatDateTimef(Const fmt: string; D: TDateTime) : string;
 Var
   MyDateTime : TDateTime;
 begin
   MyDateTime:=StrToDate('21/01/1963');
   //MyDateTime:=StrToDate('07.11.1991');
   //MyDateTime:=MyDateTime+StrToTime('12:45:10 pm');
   result:=FormatDateTime('"Her birthday is on " dddd, mmmm d,yyyy," at "hh:mm AM/PM', MyDateTime);
       {S would be 'Her birthday is on Monday, November 27, 2006 at 12:45 PM'}
 end;

 Function GetArrayLengthf(Var u: array of integer) : string;
 Var
      AnArray : Array of integer;
 begin
      //AnArray[123]:=4;
      result:=IntToStr(GetArrayLength(AnArray)); {S should equal '123'}
 end;

 Procedure Insertf(Source : String; var Dest : String; Indx : Integer);
 var s: string;
 begin
        S:='The Big Wolf';
        Insert('Bad ',S,9); {S would be 'The Big Bad Wolf';}
 end;       
 
 Function IntToStrf(I : Longint) : String;
 begin
       I:=123;
       result:=IntToStr(I);{S would be '123'}
 end;

 Function Lengthf(S : String) : Longint;
 begin
        S:='The Big Bad Wolf';
        result:=Length(S); {I would be 16}
 end;

 Function Lowercasef(S : String) : string;
 begin
        S:='The Big Bad Wolf';
        result:=Lowercase(S); {S2 would be 'the big bad wolf'}
 end;

 Function Nowf: TDateTime;
 begin
   //result:='It is now  '+TimeToStr(Now)+' on '+(DateToStr(Date)); {S would look like: 'It is now 12:01 PM on 11/27/06'}
 end;

 Function Ordf(C : Char) : Byte;
 begin
       result:=Ord('A'); {I would be 65}
 end;

 Function Padlf(S : string;I : longInt) : string;
 begin
       S:='123';
       result:=Padl(S,12); {S2 would have 12 spaces before the 123}
 end;

 Function Padrf(S : string;I : longInt) : string;
 begin
       S:='123';
       result:=Padr(S,12); {S2 would have 12 spaces after the 123}
 end;

 Function Padzf(S : string;I : longInt) : string;
 begin
       S:='123';
       result:=Padz(S,12); {S2 would have 12 zeros before the 123}
 end;

 Function Pif : string;
 begin
       result:=Copy(FloatToStr(pi),1,6); {S='3.1415'}
 end;

 Function Posf(SubStr, S : String) : Integer;
 begin
       result:=Pos('Big','The Big Bad Wolf'); {I=9}
 end;

 Function Replicatef(C : Char;I : longInt) : string;
 begin
      result:=Replicate('D',7); {S would be 'AAAAAA'}
 end;

 Function Roundf(E : Extended) : Longint;
 begin
      result:=Round(Pi); {I would be 3}
      result:=Round(3.6); {I would be 4}
 end;

 Procedure SetLengthf(Var S: String; L: Longint);
 begin
      S:='The Big Bad Wolf';
      SetLength(S,7); {S would be 'The Big'}
 end;

 Function Sinf(E : Extended) : string;
 Var
   mE : double;
 begin
   mE:=Sin(12);
   result:=Copy(FloatToStr(mE),1,6);{S='0.536'}
 end;

 Function Sqrtf(E : Extended) : Extended;
 begin
       result:=Sqrt(9); {E would be 3.0}
 end;

 Function StrGetf(S : String; I : Integer) : Char;
 begin
       S:='4567';
       result:=StrGet(S,3); {S2 would be '6'}
 end;

 Function StringOfCharf(C : Char;I : longInt) : string;
 begin
       //result:=StringOfChar('A',6); {S would be 'AAAAAA'}
 end;


 Function StrToDatef(Const s: string) : TDateTime;
 begin
       result:=StrToDate('11/27/2006');
 end;       



 Function Timef: String;
 begin
       result:='The time is '+timeToStr(Time);
 end;

 
 Function Trimf(S : String) : String;
 begin
       S:=' This has a space in front and behind ';
       result:=Trim(S); {S2 would be 'This has a space in front and behind'}
 end;

 Function Truncf(E : Extended) : Longint;
 begin
       E:=2.34;  
       result:=Trunc(E); {I would be 2}
       result:=Round(E); {I2 would be 2}
       E:=2.98;  
       result:=Trunc(E); {I would be 2}
       result:=Round(E); {I2 would be 3}
 end;

 Function TryEncodeDatef(Year, Month, Day: Word; out Date: TDateTime) : Boolean;
 begin
       result:= TryEncodeDate(2006,11,27,date); {B should be true}
 end;

 Function TryEncodeTimef(Hour, Min, Sec, MSec: Word; out Time: TDateTime) : Boolean;
 begin
        //result:= TryEncodeTime(15,10,01,00, time); {B should be true}
 end;

 Function Uppercasef(S : String) : string;
 begin
        S:='The Big Bad Wolf';
        result:=Uppercase(S); {S2 would be 'THE BIG BAD WOLF'}
 end;     

 //{$I /pas_includebox.inc}
 
 {function IntToBin(my: integer): string
 begin
   // double name tester
 end;}  
 
{var
  AnArray : Array of integer;
  myCRC: string;}
  
begin //main of function tester
  IncludeOFF;
  writeln((IntToBin(1149)))
  writeln(IntToHex(1149,8))
  writeln(IntToStr(bintoint('10010101')))
  writeln(HexToBin2('0095'))
  writeln(BinToHex2('10010101'))
  writeln(IntToStr(hextoint('0095')))
  writeln(Chr(149))
  //writeln(IntToStr(Ord('•')))
  //writeln(CRC16('E93650'))
  //myCRC:= CRC16('E93650')
  //writeln(myCRC)
  writeln(hextobin2('FFFF'))
  //writeln(Replicatef('A',3))
  writeln(Uppercasef(''));
  writeln(FormatDateTimef('',0));
  //writeln(GetArrayLengthf(anarray)); //out of range test
  //writeln(charToHexStr('A'))  //inc and inbuilt
end. 
{new functions
timetostr and strtotime detected}