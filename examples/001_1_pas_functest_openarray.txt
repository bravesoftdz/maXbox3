program maXbox_func_tester_openarrays;

//with an include example, loc's=420
//var date1: TDatetime;


{const
    Months : array[1..12] of Integer    
     = [(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);}
type  
 
  TMBytes = array[0..3] of Byte;
  MD5Buffer = array[0..63] of byte;


 Function Absf(E : Extended) : Extended;
 begin
        result:=Abs(E); 
        //A:=Abs(-2); {A will equal 2}
        //A:=Abs(2); {A will equal 2}
 end;         
 
 Function Chrf(B : Byte) : Char;
 begin
        result:=Chr(B); 
        //C:=Chr(65); {C will equal 'A'}
        //C:=Chr(97); {C will equal 'a'}
 end;

 Function Copy(S : String; Indx, Count : Integer) : String;
 begin
        //S:='Hi There';
        result:=Copy(S,indx,count); {S2 will equal 'There'}
        //result:=Copy(S,4,5); {S2 will equal 'There'}
 end;       


 Function Cos(E : Extended) : Extended;
 begin
        result:=Cos(E);{E will equal 0.8623 (the cosine of 100)}
        //E2:=Cos(100);{E will equal 0.8623 (the cosine of 100)}
 end;

 Function myDate: string;
 begin
        result:=DateToStr(Date); {S would be the current date in string form}
        //S:=DateToStr(Date); {S would be the current date in string form}
 end;

 Function DateToStrf(D: TDateTime) : string;
 begin
        result:=DateToStr(Date); {S would be the date in string form}
 end;

 Function DayOfWeekf(Const DateTime: TDateTime) : Word;
 begin
   result:= DayOfWeek(Date); {D would be 4 if today was Wednesday (Sunday=1)}
 end;


 Procedure DecodeDatef(Const DateTime: TDateTime; var Yr, Mn, Dy: Word);
 begin
   DecodeDate(Date,Yr,Mn,Dy); {If today was 11/27/06 then Yr=6, Mn=11, Day=27}
 end;

 Procedure DecodeTimef(Const DateTime: TDateTime; var Hr, Mn, Sc, Mis: Word);
 begin
   //DecodeTime(Now,Hr,Mn,Sc,Mis);
   {If it was 3:01:02.001 pm then Hr=15, Mn=1, Sc=2, Ms=1}
 end;

 Procedure Delete(Var S : String; Indx, Count : Integer);
 begin
        S:='The Big Bad Wolf';
        Delete(S,9,4); {S would be 'The Big Wolf'}
 end;

 Function EncodeDatef(Year, Month, Day: Word) : string;
 Var
   MylDate: TDateTime;
 begin
       MylDate:= EncodeDate(1997,11,27);
       result:= DateToStr(MylDate); {S would be '11/27/1997'}
 end;

 Function EncodeTimef(Hour, Min, Sec, MSec: Word) : string;
 Var
 MyTime : TDateTime;
 begin
       MyTime:=EncodeTime(15,0,0,0);
       result:=TimeToStr(MyTime); {S would be '3:00:00 PM'}
 end;

 Function FloatToStrf(E : Extended) : String;
 Var
   mE : double;
 begin
      mE:=12.4508;
      result:=FloatToStr(mE); {S would be '12.4508'}
      mE:=9 / 5;
      result:=FloatToStr(E); {S would be '1.8'}
 end;

 Function FormatDateTimef(Const fmt: string; D: TDateTime) : string;
 Var
   MyDateTime : TDateTime;
 begin
   MyDateTime:=StrToDate('20.06.1959');
   //MyDateTime:=StrToDate('07.11.1991');
   //MyDateTime:=MyDateTime+StrToTime('12:45:10 pm');
   result:=FormatDateTime('"Her birthday is on " dddd, mmmm d,yyyy," at "hh:mm AM/PM', MyDateTime);
       {S would be 'Her birthday is on Monday, November 27, 2006 at 12:45 PM'}
 end;

 Function GetArrayLengthf(Var u: array of integer) : string;
 Var
      AnArray : Array of integer;
 begin
      //AnArray[123]:=4;
      result:=IntToStr(GetArrayLength(AnArray)); {S should equal '123'}
 end;

 Procedure Insertf(Source : String; var Dest : String; Indx : Integer);
 var s: string;
 begin
        S:='The Big Wolf';
        Insert('Bad ',S,9); {S would be 'The Big Bad Wolf';}
 end;       
 
 Function IntToStrf(I : Longint) : String;
 begin
       I:=123;
       result:=IntToStr(I);{S would be '123'}
 end;

 Function Lengthf(S : String) : Longint;
 begin
        S:='The Big Bad Wolf';
        result:=Length(S); {I would be 16}
 end;

 Function Lowercasef(S : String) : string;
 begin
        S:='The Big Bad Wolf';
        result:=Lowercase(S); {S2 would be 'the big bad wolf'}
 end;

 Function Nowf: TDateTime;
 begin
   //result:='It is now  '+TimeToStr(Now)+' on '+(DateToStr(Date));
    {S would look like: 'It is now 12:01 PM on 11/27/06'}
 end;

 Function Ordf(C : Char) : Byte;
 begin
       result:=Ord('A'); {I would be 65}
 end;

 Function Padlf(S : string;I : longInt) : string;
 begin
       S:='123';
       result:=Padl(S,12); {S2 would have 12 spaces before the 123}
 end;

 Function Padrf(S : string;I : longInt) : string;
 begin
       S:='123';
       result:=Padr(S,12); {S2 would have 12 spaces after the 123}
 end;

 Function Padzf(S : string;I : longInt) : string;
 begin
       S:='123';
       result:=Padz(S,12); {S2 would have 12 zeros before the 123}
 end;

 Function Pif : string;
 begin
       result:=Copy(FloatToStr(pi),1,6); {S='3.1415'}
 end;

 Function Posf(SubStr, S : String) : Integer;
 begin
       result:=Pos('Big','The Big Bad Wolf'); {I=9}
 end;

 Function Replicatef(C : Char;I : longInt) : string;
 begin
      result:=Replicate('D',7); {S would be 'AAAAAA'}
 end;

 Function Roundf(E : Extended) : Longint;
 begin
      result:=Round(Pi); {I would be 3}
      result:=Round(3.6); {I would be 4}
 end;

 Procedure SetLengthf(Var S: String; L: Longint);
 begin
      S:='The Big Bad Wolf';
      SetLength(S,7); {S would be 'The Big'}
 end;

 Function Sinf(E : Extended) : string;
 Var
   mE : double;
 begin
   mE:=Sin(12);
   result:=Copy(FloatToStr(mE),1,6);{S='0.536'}
 end;

 Function Sqrtf(E : Extended) : Extended;
 begin
       result:=Sqrt(9); {E would be 3.0}
 end;

 Function StrGetf(S : String; I : Integer) : Char;
 begin
       S:='4567';
       result:=StrGet(S,3); {S2 would be '6'}
 end;

 Function StringOfCharf(C : Char;I : longInt) : string;
 begin
       result:=StringOfChar('A',6); {S would be 'AAAAAA'}
 end;


 Function StrToDatef(Const s: string) : TDateTime;
 begin
       result:=StrToDate('11/27/2006');
 end;       


 Function StrToIntDeff(Const S: string; Def: LongInt) : LongInt;
  {Converts a string to an integer.}
 begin
       S:='hi there';
       result:=StrToIntDef(S, 1); {I would be 1}
       S:='123';
       result:=StrToIntDef(S, 1); {I would be 123}
 end;

 Function Timef: TDateTime;
 begin
       //result:='The time is '+timeToStr(Time);
 end;

 Function Trimf(S : String) : String;
 begin
       S:=' This has a space in front and behind ';
       result:=Trim(S); {S2 would be 'This has a space in front and behind'}
 end;

 Function Truncf(E : Extended) : Longint;
 begin
       E:=2.34;  
       result:=Trunc(E); {I would be 2}
       result:=Round(E); {I2 would be 2}
       E:=2.98;  
       result:=Trunc(E); {I would be 2}
       result:=Round(E); {I2 would be 3}
 end;

 Function TryEncodeDatef(Year, Month, Day: Word; out Date: TDateTime) : Boolean;
 begin
       result:= TryEncodeDate(2006,11,27,date); {B should be true}
 end;

 Function TryEncodeTimef(Hour, Min, Sec, MSec: Word; out Time: TDateTime) : Boolean;
 begin
        result:= TryEncodeTime(15,10,01,00, time); {B should be true}
 end;

 Function Uppercasef(S : String) : string;
 begin
        S:='The Big Bad Wolf';
        result:=Uppercase(S); {S2 would be 'THE BIG BAD WOLF'}
 end;     

 //{$I ..\maxbox2\pas_includebox.inc}
 {function IntToBin(my: integer): string
 begin
   // double name tester
 end;}  
 
 procedure ListAllIntegers(const AnArray: array of Integer);
  var
    I: Integer;
  begin
    for I := Low(AnArray) to High(AnArray) do
      WriteLn('Integer at '+ inttoStr(I)+ ' is '+ InttoStr(AnArray[I]));
  end;

 procedure ListAllIntegersReturn(var vArray: array of Integer);
  var
    I: Integer;
  begin
    vArray[0]:= 5;
    for I := Low(vArray)+1 to High(vArray) do
               vArray[I]:= 2 * vArray[I-1];
  end;


//open array return   
 function belowFirst(const xs: array of Integer): array of Integer;
  var i: Integer;
  begin
    for i:= 1 to high(xs) do
      if xs[i] < xs[0] then 
        result[i]:= xs[i]
  end;

(*01	val belowFirst  =  ( xs : List[Int] )  =>  {
02	 
03	    val first = xs( 0 )
05	    val isBelow  =  ( y : Int )  =>   y < first
07	    for(  x <- xs;  if(  isBelow( x )  )  yield x
08	}
10	...
11	belowFirst( List( 5, 1, 7, 4, 9, 11, 3 ) )      // => List( 1, 4, 3 )
 *)


function Mean2(const Data: array of Double): Extended;
begin
  Result:= SUM(Data) / (High(Data) - Low(Data) + 1);
end;
  
 
{var
PADDING: MD5Buffer = (
$80, $00, $00, $00, $00, $00, $00, $00,
$00, $00, $00, $00, $00, $00, $00, $00,
$00, $00, $00, $00, $00, $00, $00, $00,
$00, $00, $00, $00, $00, $00, $00, $00,
$00, $00, $00, $00, $00, $00, $00, $00,
$00, $00, $00, $00, $00, $00, $00, $00,
$00, $00, $00, $00, $00, $00, $00, $00,
$00, $00, $00, $00, $00, $00, $00, $00
);} 
 
var
  AnArray : Array of integer;
  adArr: array of double;
  myCRC: string;
  mybit: TIdBytes;
  NonZero, nonZero2: array[7..9] of Integer;
  Res, Str: string;
  Int, i, aver: Integer;
  Dub: Double;
  mb: TByteArray;
  mba: array of integer;


//main of function tester
begin 
  //IncludeOFF;
  writeln((IntToBin(149)))
  writeln(IntToHex(149,8))
  writeln(IntToStr(bintoint('10010101')))
  writeln(HexToBin2('0095'))
  writeln(BinToHex2('10010101'))
  writeln(IntToStr(hextoint('0095')))
  writeln(Chr(149))
  writeln(IntToStr(Ord('•')))
  //writeln(CRC16('E93650'))
  //myCRC:= CRC16('E93650')
  //writeln(myCRC)
  //writeln(hextobin('FFFF',8))
  writeln(Replicatef('A',3))
  writeln(FormatDateTimef('',0));
  writeln(GetArrayLengthf(anarray)); //out of range test
  writeln(charToHexStr('A'))  //inc and inbuilt
  //mybit:= array[0..3] of byte;

  SetLength(mybit, 4); //dynamic array
  {mybit[0]:= 1
  mybit[1]:= 0
  mybit[2]:= 0
  mybit[3]:= 1 }
  randomize;
  //writeln('my bytes :'+bytestochar(mybit,5))    // assert test!
  NonZero[7] := 17;
  NonZero[8] := 325;
  NonZero[9] := 11;
  
  SetLength(adArr,3)
  adarr[0]:= 17.0;
  adarr[1]:= 325.0;
  adarr[2]:= 11.0;

    nonZero2:= nonZero;  //copy constructor
    
    ListAllIntegers(NonZero);
    ListAllIntegers([17, 325, 11]);   //open array constructor
    
    SetLength(anArray,10)
    ListAllIntegersReturn(anArray);   //var open array
    for i:= 1 to 9 do
       write(intToStr(anArray[i])+' ');
    Writeln('mean of float in : ' +floatToStr(Mean2(adarr)));
    Writeln('mean of float lib: ' +floatToStr(Mean(adarr)));

  Writeln('');
  Int:= Random(1000);
  Dub:= Random(1000)/1000;
  Str:= 'Teletubbies';
  Res:= Format('%4d %8.3f %s', [Int, Dub, Str]);
  writeln(res)
  writeln(mbver)
  aver:= strToint(mbVer)
  if aver = 385 then writeln('just the version');
     write('Open Array Return: ')
     setLength(mba,10)
     mba:= belowFirst([5,1,7,4,9,11,3]);     //Open Array Constructor
     for i:= 1 to 9 do
       write(intToStr(mba[i])+' ');
       //dayspermonth

end. 


{new functions
timetostr and strtotime detected}

Open array parameters and array of const

This article describes the syntax and use of open array parameters, and the use of the "array of const" parameter type. It also describes the internals of these two similar types of parameters, discusses lifetime issues, and gives a code solution for these issues. It has a short discusson on the confusion between open arrays and dynamic arrays, and between Variant arrays and variant open arrays.
to topOpen array parameters

Open array parameters are special parameters which allow you to write procedures or functions (I will use the word routines, if I mean both) that can act on any array of the same base type, regardless of its size. To declare an open array parameter, you use a syntax like this:

  procedure ListAllIntegers(const AnArray: array of Integer);
  var
    I: Integer;
  begin
    for I := Low(AnArray) to High(AnArray) do
      WriteLn('Integer at ', I, ' is ', AnArray[I]);
  end;

You can call this procedure with any one-dimensional array of Integers, so you can call it with an array[0..1] of Integer as well as with an array[42..937] of Integer, or even a dynamic type array of Integer.

The code also demonstrates how you can determine the size of the array in the routine. Delphi knows the pseudo-functions Low and High. They are not real functions, they are just syntactic items in Delphi that take the form of a function, but actually rely on the compiler to substitute them for code. Low gives the lower bound of an array, and High the upper bound. You can also use Length, which returns the number of elements of the array.

But if you call the code with an array that is not zero-based, like for instance in the following (nonsense) example,

  var
    NonZero: array[7..9] of Integer;
  begin
    NonZero[7] := 17;
    NonZero[8] := 325;
    NonZero[9] := 11;
    ListAllIntegers(NonZero);
  end.

you will see that the output is like this:

  Integer at 0 is 17
  Integer at 1 is 325
  Integer at 2 is 11

That is because inside the procedure or function, the array is always seen as a zero based array. So for an open array parameter, Low is always 0, and High is adjusted accordingly (note that this is not necessarily true for other uses of High and Low, i.e. not on open array parameters). For open arrays, Length is always High + 1.
to topSlice

If you don't want to use an entire array, but only a part of it, you can do that using the Slice pseudo-function. It is only allowed where an open array parameter is declared. It is used in this fashion:

  const
    Months: array[1..12] of Integer = (31, 28, 31, 30, 31, 30, 
                                       31, 31, 30, 31, 30, 31);
  begin
    ListAllIntegers(Slice(Months, 6));
  end;

That will only display the first 6 values of the array, not all 12.
to topInternals

But how does that work; how can the function know the size of the array? It is quite simple. An open array parameter is actually a combination of two parameters, a pointer, which contains the address of the start of the array, and an integer, which contains the High value, adjusted for a zero base. So in fact the real parameter list of the procedure is something like this:

  procedure ListAllIntegers(const AnArray: Pointer; High: Integer);

Each time you pass an array to an open array parameter, the compiler, which knows the size of the array, will pass its address and its adjusted High value to the procedure or function. For arrays of a static size, like array[7..9] of Integer, it uses the declared size to pass the High value; for dynamic arrays, it compiles code to get the High value of the array at runtime.

Usually, you can pass open arrays as const parameters. Open array parameters that are not passed as const will entirely be copied into local storage of the routine. The array is simply passed by reference, but if it is not declared const, the hidden start code of the routine will allocate room on the stack and copy the entire array to that local storage, using the reference as source address. For large arrays, this can be very inefficient. So if you don't need to modify items in the array locally, make the open array parameter const.
to topOpen array constructors

Sometimes you don't want to declare and fill an array just so you can use it with an open array parameter. Luckily, Delphi allows you to declare open arrays on the spot, using the so called open array constructor syntax, which uses [ and ] to define the array. The above example with the NonZero array could also have been written like this:

  ListAllIntegers([17, 325, 11]);

Here, the array is defined on the spot as [17, 325, 11]. The compiler ensures that the array exists during the call of the procedure, and it passes the correct High value. This is totally transparent to the code inside the procedure. After the call, the array is discarded.
to topConfusion

Although the syntax is unfortunately very similar, an open array parameter should not be confused with a Delphi dynamic array. A dynamic array is an array that is maintained by Delphi, and of which you can change the size using SetLength. It is declared like:

  type
    TIntegerArray = array of Integer;

Unfortunately, this looks a lot like the syntax used for open array parameters. But they are not the same. An open array parameter will accept dynamic arrays like array of Month, but also static arrays like array[0..11] of Month. So in a function with an open array parameter, you can't call SetLength on the parameter. If you really only want to pass dynamic arrays, you'll have to declare them separately, and use the type name as parameter type.

  type
    TMonthArray = array of Month;

  procedure AllKinds(const Arr: array of Month);
  procedure OnlyDyn(Arr: TMonthArray);

Procedure AllKinds will accept static arrays as well as dynamic arrays, so SetLength can't be used, since static arrays can't be reallocated. Procedure OnlyDyn will only accept dynamic arrays, so you can use SetLength here (this will however use a copy, and not change the original array; if you want to change the length of the original array, use var Arr: TMonthArray in the declaration).

Note: You should not forget that in Delphi, parameters can ony be declared with type specifications, and not with type declarations. So the following formal parameters, which would be type declarations, are not possible:

  procedure Sum(const Items: array[1..7] of Integer);
  function MoveTo(Spot: record X, Y: Integer; end);

You'll have to declare a type first, and use the specifications as parameter type:

  type
    TWeek = array[1..7] of Integer;
    TSpot = record
      X, Y: Integer;
    end; 
    
  procedure Sum(const Items: TWeek);
  function MoveTo(Spot: TSpot);

That is why array of Something in a parameter list can't be a type declaration for a dynamic array either. It is always an open array declaration.
to topArray of const

Array of const is a special case of open arrays. Instead of passing only one type, you can pass a variety of types. Have a look at the declaration of the Format function in Delphi:

  function Format(const Format: string; const Args: array of const): string;

(Actually, there is a second, overloaded function in some versions of Delphi, but I'll simply ignore that here.)

The first parameter is a string which indicates how you want your values formatted, and the second is an array of const, so you can pass a range of values using a similar syntax as the one for open array constructors. So you can call it like:

  var
    Res: string;
    Int: Integer;
    Dub: Double;
    Str: string;
  begin
    Int := Random(1000);
    Dub := Random * 1000;
    Str := 'Teletubbies';
    Res := Format('%4d %8.3f %s', [Int, Dub, Str]);
  end;

Note: The official name for array of const parameters is variant open array parameters. This should not be confused with the Variant type in Delphi, and the arrays it can contain. They are quite different, even though a TVarRec (see below) is a bit similar to how a Variant is internally stored. Even the name of the internal record of a Variant is confusingly similar: TVarData.
to topInternals

Internally, an array of const is an open array of TVarRec. The declaration of TVarRec is given in the online help for Delphi. It is a variant record (also not to be confused with the Variant type), that contains a field called VType, and an overlay of different types, some of which are only pointers. The compiler creates a TVarRec for each member in the open array constructor, fills the VType field with the type of the member, and places the value, or a pointer to it, in one of the other fields. Then it passes the array of TVarRec to the function.

Since each TVarRec contains type information, Format can use this to check if it matches with the type given in the format string. That is why you get a runtime error when passing a wrong type. You can tell the compiler that you want it to store a different type identifier, by casting to the desired type. If the type doesn't match one of the allowed types in a TVarRec exactly, the compiler will try to convert it to a matching type, so if you pass a Double, it will convert it to an Extended and pass that instead. Of course there are limitations on what the compiler can do, so for instance passing an object isn't going to work.

Inside the function or procedure, you can treat the members as TVarRec immediately. The help for Delphi gives an example how to do this.
to topLifetime issues

What you should notice is, that values in the TVarRec which are passed as pointers only exist during the course of the function or procedure. As soon as the routine ends, these values don't exist anymore. So you should not be tempted to return these pointers from the procedure or function, or to store the TVarRecs in an array outside the routine, unless you can make sure that you manage the values yourself.

If you must copy the TVarRecs to an array or variable outside the function (this can also be a var parameter), be sure to make a copy (i.e. on the heap) of the value, and replace the pointer in the TVarRec with one to the copy. You should also take care that the copy is disposed of when it is not needed anymore. An example follows:

Download

type
  TConstArray = array of TVarRec;
                                
// Copies a TVarRec and its contents. If the content is referenced
// the value will be copied to a new location and the reference
// updated.

function CopyVarRec(const Item: TVarRec): TVarRec;
var
  W: WideString;
begin
  // Copy entire TVarRec first.
  Result := Item;
      
  // Now handle special cases.
  case Item.VType of
    vtExtended:
      begin
        New(Result.VExtended);
        Result.VExtended^ := Item.VExtended^;
      end;
    ...
    vtPChar:
      Result.VPChar := StrNew(Item.VPChar);
      ...
    // A little trickier: casting to AnsiString will ensure
    // reference counting is done properly.
    vtAnsiString:
      begin
        // Nil out first, so no attempt to decrement
        // reference count.
        Result.VAnsiString := nil;
        AnsiString(Result.VAnsiString) := AnsiString(Item.VAnsiString);
      end; 
    ...
      // VPointer and VObject don't have proper copy semantics so it
      // is impossible to write generic code that copies the contents.
    ...
  end;
end;

// Creates a TConstArray out of the values given. Uses CopyVarRec
// to make copies of the original elements.
function CreateConstArray(const Elements: array of const): TConstArray;
var
  I: Integer;
begin
  SetLength(Result, Length(Elements));
  for I := Low(Elements) to High(Elements) do
    Result[I] := CopyVarRec(Elements[I]);
end;
     
// TVarRecs created by CopyVarRec must be finalized with this function.
// You should not use it on other TVarRecs.
procedure FinalizeVarRec(var Item: TVarRec);
begin
  case Item.VType of
    vtExtended: Dispose(Item.VExtended);
    vtString: Dispose(Item.VString);
      ...
  end;
  Item.VInteger := 0;
end;  

// A TConstArray contains TVarRecs that must be finalized. This function
// does that for all items in the array.  
procedure FinalizeVarRecArray(var Arr: TConstArray);
var
  I: Integer;
begin
  for I := Low(Arr) to High(Arr) do
    FinalizeVarRec(Arr[I]);
  Arr := nil;
end;

The functions above can help you manage TVarRecs outside the routine for which they were constructed. You can even use a TConstArray where an open array is declared. The following little program

  program VarRecTest;

  //{$APPTYPE CONSOLE}

  uses
    SysUtils,
    VarRecUtils in 'VarRecUtils.pas';

  var
    ConstArray: TConstArray;

  begin
    ConstArray := CreateConstArray([1, 'Hello', 7.9, IntToStr(1234)]);
    try
      WriteLn(Format('%d --- %s --- %0.2f --- %s', ConstArray));
      Writeln(Format('%s --- %0.2f', Copy(ConstArray, 1, 2)));
    finally
      FinalizeConstArray(ConstArray);
    end;  
    ReadLn;
  end.

will produce the expected, but not very exciting, output

1 --- Hello --- 7.90 --- 1234
Hello --- 7.90

The little program above also demonstrates how you can use Copy to use only a part of the entire TConstArray. Copy will create a copy of the dynamic array, but not copy the contents, so you should not try to use Copy and then later on use FinalizeConstArray on that copy. In the program above, the copy will be removed automatically, since the lifetime of the copy is managed by the compiler.
to topFinally

Open arrays and arrays of const are powerful features of the language, but they come with a few caveats. I hope I succeeded in showing some of these, and how you can overcome them.

Questions regarding open arrays, array of const and many other language issues can be discussed in the Borland newsgroups (news://newsgroups.borland.com), especially the following ones:

    * borland.public.delphi.language.delphi.general
    * borland.public.delphi.language.delphi.win32

These groups are valuable sources of information for all Delphi language questions for Win32. Note that I did not mention the newsgroup for .NET, since on .NET, things are a bit different.

Rudy Velthuis


(*$B-*)
PROGRAM TicTacToe;
(* Auf Eingabe einer Spielsituation von Kringel-und-Kreuze     *)
(* (Tic Tac Toe) wird fuer die freien Felder brechnet,         *)
(* ob sie zu einem Gewinn, Unentschieden oder Verlust fuehren. *)

CONST schwarz    = -1;
      weiss    =  1;
      frei    =  0;
TYPE Status    = -1..1;
     Spielbrett    = ARRAY[1..9] OF Status;
     Wert    = -1..1;

VAR B  : Spielbrett;
    w  : Wert;
    i  : INTEGER;

FUNCTION Muehle(B: Spielbrett): BOOLEAN;
(* Ist genau dann TRUE, wenn das Spielbrett eine Muehle enthaelt. *)
   VAR i: INTEGER;
   BEGIN
      Muehle := FALSE;
      FOR i := 1 TO 3 DO
      BEGIN
          IF abs(B[i] + B[i+3] + B[i+6]) = 3 THEN Muehle := TRUE;
         IF abs(B[3*i-2] + B[3*i-1] + B[3*i]) = 3 THEN Muehle := TRUE;
      END;
       IF abs(B[1] + B[5] + B[9]) = 3 THEN Muehle := TRUE;
      IF abs(B[3] + B[5] + B[7]) = 3 THEN Muehle := TRUE;
   END; (* Muehle *)

FUNCTION Voll(B: Spielbrett): BOOLEAN;
(* Liefert genau dann TRUE, wenn alle Felder belegt sind. *)
   VAR i : INTEGER;
   BEGIN
      Voll := TRUE;
      FOR i := 1 TO 9 DO
     IF B[i] = frei THEN Voll := FALSE
   END; (* Voll *)

FUNCTION Auswertung(B: Spielbrett; s: Status): Wert;
(* Ist Spieler s am Zug, so wird fuer jedes freie Feld von B berechnet ob, *)
(*  wenn s es ankreuzt, schwarz gewinnt (-1), weiss gewinnt (1)            *)
(*  oder es ein Unentschieden gibt (0).                                    *)

   VAR w, max: Wert;
       i     : INTEGER;
   BEGIN
      IF Muehle(B) OR Voll(B) THEN
     IF Muehle(B) THEN Auswertung := -s
     ELSE Auswertung := 0
      ELSE
      BEGIN
     max := -1;
     FOR i := 1 TO 9 DO                  (* Schaue alle Felder von B an. *)
     BEGIN
        IF B[i] = frei THEN              (* Falls Feld noch frei,        *)
        BEGIN
           B[i] := s;                    (* kreuze Feld an.              *)
           w := Auswertung(B,-s);        (* Berechne, wer dann gewinnt.  *)
           B[i] := frei;                 (* Gebe Feld wieder frei.       *)
           IF max < s*w THEN max := s*w  (* Bilde Maximum (falls s=1),   *)
        END; (* IF *)                    (* bzw. Minimum (falls s=-1)    *)
        Auswertung := s*max              (* ueber die Werte aller Felder.*)
     END (* FOR *)
      END (* IF *)
   END; (* Auswertung *)

PROCEDURE Ausgabe(i: INTEGER; w: Wert);
   BEGIN
      Write(i,': ');
      CASE w OF
        -1: WriteLn('Verlustzug');
         0: WriteLn('Unentschieden');
         1: WriteLn('Gewinnzug')
      END
   END; (* Ausgabe *)

BEGIN (* Hauptprogramm *)
   Write('Gebe zeilenweise die Belegung des Spielbretts ein, ');
   WriteLn('so dass Weiss am Zug ist.');
   WriteLn('Dabei ist 0 = Leer, 1 = Weiss, -1 = Schwarz: ');
   For i := 1 TO 3 DO
   BEGIN
      Write('Felder ',3*i-2,', ',3*i-1,' und ',3*i,':  ');
      ReadLn(B[3*i-2],B[3*i-1],B[3*i]);
      WriteLn
   END;

   IF Muehle(B) OR Voll(B) THEN WriteLn('Spiel bereits zu Ende')
   ELSE
   BEGIN
      FOR i := 1 TO 9 DO                 (* Schaue alle Felder an.     *)
      BEGIN
     IF B[i] = frei THEN             (* Falls Feld noch frei,      *)
     BEGIN
        B[i] := weiss;               (* wird es von Weiss markiert.*)
        w := Auswertung(B,schwarz);  (* Berechne wer dann gewinnt. *)
        B[i] := frei;                (* Gebe Feld wieder frei.     *)
        Ausgabe(i,w)
     END (* IF *)
      END (* FOR *)
   END (* IF *)
END.



