program Interface_Call2;

//second version with parameters to rate , loc's=72
//Purpose: implement interfaces or choice pattern with intF_ID

    //IIncomeInt  = interface (IUnknown)
      //['{DBB42A04-E60F-41EC-870A-314D68B6913C}']
      {function GetIncome(const aNetto: Extended): Extended; stdcall;
      function GetIncome2(const aNetto: Currency): Currency; stdcall;
      function GetRate: Extended;
      function queryDLLInterface(var queryList: TStringList): TStringList;
              stdcall;
      function queryDLLInterfaceTwo(var queryList: TStringList): TStringList;
              stdcall;
      procedure SetRate(const aPercent, aYear: integer); stdcall;
      //property Rate: Double read GetRate;
    end;}


type
   TImplementIntf = TIncomeRealIntf;


Procedure TestIntf;
Var
    A: IIncomeInt;
    B: TIncomeRealIntf;
Begin
    A:= TIncomeRealIntf.Create As IIncomeInt;
    A:= TImplementIntf.Create As IIncomeInt;
    // interest rate in percent , year
    A.SetRate(5,8)
    Writeln(FloatToStr(A.GetIncome(4000)))
    //Can now successfully call any of B's --> A methods
End;

var
   incomeIntRef: IIncomeInt;
   cIncome: Currency;
   //incomeReal: TIncomeRealIntf;
   interlist: TStringlist;
   year, percent: integer;
   amount: double;
   fv: extended;

begin
   //TIncomeRealIntf = class(TInterfacedObject, IIncomeInt)
   //TestIntf;
   percent:= 5; year:= 8;
   amount:= 405.2
   
   interlist:= TStringlist.create;
   incomeIntRef:= TIncomeRealIntf.Create;
   //with incomeIntRef do begin
   incomeIntRef.SetRate(percent,year)
   incomeIntRef.queryDLLInterface(interlist)
   //Showmessage(interlist.text)
   Writeln(Format('Your Rate is %f',[incomeIntRef.GetRate]))
   Writeln(Format('Your Income is %f',[incomeIntRef.GetIncome(amount)]))
 
   //Second Implementation
   Writeln('Second Implementation of the same Interface')
   incomeIntRef:= TIncomeRealSuper.create;
   IncomeIntRef.SetRate(percent,year)
   cIncome:= incomeIntRef.GetIncome(amount)
   Writeln('Your second Income '+floattostr(cIncome))
   interlist.free;
   //Test Drive Proof
   //Writeln(FloatToStr(Abs(FutureValue(0.05, 8, 0, 405.2, ptEndofPeriod))))
   Writeln(FloatToStr(Abs(FutureValue(percent/100, year, 0, amount, ptEndofPeriod))))

End.

-------------------------------------------------

IIncomeInt = interface (IUnknown)
    ['{DBB42A04-E60F-41EC-870A-314D68B6913C}']

    function GetIncome2(const aNetto: Currency): Currency; stdcall;
    function GetIncome(const aNetto: Extended): Extended; stdcall;
    function GetRate: Extended;
    function queryDLLInterface(var queryList: TStringList): TStringList;
            stdcall;
    function queryDLLInterfaceTwo(var queryList: TStringList): TStringList;
            stdcall;
    procedure SetRate(const aPercent, aYear: integer); stdcall;
    //property Rate: Double read GetRate;
  end;


   {if QueryInterface(IIncomeInt, incomeIntRef) = S_OK
      then begin //_addRef; test
        SetRate(strToInt(edtZins.text),
                       strToInt(edtJahre.text));
        cIncome:=strTofloat(edtBetrag.text);
        cIncome:= GetIncome(cIncome);
      end;}

 Function FutureValue(const Rate :Extended;NPeriods:Integer; 
                      const Payment,PresentValue:Extended
                      ;PaymentTime:TPaymentTime):Extended;

 http://www.interest.net/
 
   IInterface  = interface
     ['{00000000-0000-0000-C000-000000000046}']
     function QueryInterface(const IID: TGUID; out Obj): HResult; stdcall;
     function _AddRef: Integer; stdcall;
     function _Release: Integer; stdcall;
   end;
 
    IIncomeInt  = interface (IUnknown)
      ['{DBB42A04-E60F-41EC-870A-314D68B6913C}']
      function GetIncome(const aNetto: Extended): Extended; stdcall;
      function GetIncome2(const aNetto: Currency): Currency; stdcall;
      function GetRate: Extended;
      function queryDLLInterface(var queryList: TStringList): TStringList;
              stdcall;
      function queryDLLInterfaceTwo(var queryList: TStringList): TStringList;
              stdcall;
      procedure SetRate(const aPercent, aYear: integer); stdcall;
      //property Rate: Double read GetRate;
    end; 
    
    tincomereal
 
    
  
  