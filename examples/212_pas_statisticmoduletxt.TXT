program Statistics_Module;
//**************************************************
//loc's = 231, ex. 212_ , adapt from _92
//...we discuss the 4 types of statistics:
{1. Permutation = n!
 2. Permutation(Variation without repeating) = nPr = n!/(n-k)!
 3. Combination (binominal coefficient)= nCr = nPr / k!
 4. Variation(repeating) = n^k
where,
      n,k are non negative integers and k<=n.
      k is the size of each permutation.
      n is the size of the set from which elements are permuted.
      ! is the factorial operator.
  
1 Anordnungen (Permutationen)
2 Auswählen mit Beachtung der Reihenfolge (Variationen)
    * 2.1 Variation ohne Zurücklegen
    * 4.1 Variation mit Zurücklegen
3 Auswählen ohne Beachtung der Reihenfolge (Kombinationen)

{1. ex. 4*4 sudoku line = 567  (or runners in) 
2. ex. 21345 (11000)  = 12,20 (two first runners with 5 or 2 books from 5)
3. ex. 10100 = 10 (or lotto 4 of 21)
4. ex. lock (zahlenschloss) = 10000}      


const 
  DIM = 660;
  PI2 = 6.28318530717958647692528676655901;
  E = 2.718281828459;
  BODY = 23;
  EMOTION = 28;
  SPIRIT = 33;
 
type TBIOVector = array[0..DIM] of TPoint; 
     Tperm = array[1..4] of byte;
     Tperm2 = array[1..5] of byte;
     TCube = array[1..6] of byte;

var
   hnd: THandle;
   mname, mdes: string;
   mfilel: TStringList;
   st_string: shortstring;


// 2. Permutation(Variation without repeating) = nPr = n!/(n-k)!
//--------------------------------------------------------------
Procedure Permutation_4_of_10;
var
 i,k,l,m: byte;
 count: integer;
begin
 count:= 0;
 for i:= 0 to 9 do 
   for k:= 0 to 9 do 
     for l:= 0 to 9 do 
       for m:= 0 to 9 do begin
         if (i<>k) and (i<>l) and (i<>m) 
                          and (k<>l) and (k<>m) and (l<>m)   
         then begin
           inc(count);
           Writeln(Format('Case: %d - %d%d%d%d',[count,i,k,l,m]))
           //inc(i); inc(k);
         end;
       end;
 Writeln(intToStr(count)+' Permutations')
 Writeln('-----------------------------')
 Writeln('All Permutations 4 of 10: '+intToStr(round(Fact(10)/Fact(10-4))))
end;


// 3. Combination (binominal coefficient)= nCr = nPr / k!
//-------------------------------------------------------
procedure Combination_with_Order_3;
//binominal coefficient)= nCr = nPr / k!
//4 of 24 = 5985 = NCR(21,4) on a calculator
var  
  i,k,l,m,n,o,p,q,r,s,t,u,v,w,q1,r1,s1,t1,u1,v1,w1: byte;
  count: integer;
begin
  i:=1; k:=1; l:=1; m:=1; n:=1; o:= 1; p:=1;
  q:=1; r:=1; s:=1; t:=1; u:=1; v:= 1; w:=1;
  q1:=1; r1:=1; s1:=1; t1:=1; u1:=1; v1:= 1; w1:=1; 
  count:= 0;
  for i:= 0 to 1 do 
    for k:= 0 to 1 do 
      for l:= 0 to 1 do 
        for m:= 0 to 1 do 
          for n:= 0 to 1 do 
            for o:= 0 to 1 do 
              for p:= 0 to 1 do 
              for q:= 0 to 1 do 
              for r:= 0 to 1 do 
              for s:= 0 to 1 do 
              for t:= 0 to 1 do 
              for u:= 0 to 1 do 
              for v:= 0 to 1 do 
              for w:= 0 to 1 do 
              for q1:= 0 to 1 do 
              for r1:= 0 to 1 do 
              for s1:= 0 to 1 do 
              for t1:= 0 to 1 do 
              for u1:= 0 to 1 do 
              for v1:= 0 to 1 do 
              for w1:= 0 to 1 do 
  if i+k+l+m+n+o+p+q+r+s+t+u+v+w+q1+r1+s1+t1+u1+v1+w1 = 4 then 
  begin 
    Writeln(Format('Case: %d - %d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d',
            [count,i,k,l,m,n,o,p,q,r,s,t,u,v,w,q1,r1,s1,t1,u1,v1,w1]))
            inc(count);        
  end;  
  Writeln(inttostr(count)+' Combinations with Order')
  writeln('----------')
end;


// 4. Variation (repeating) = n^k
//------------------------------------
procedure Variation_Zahlenschloss_4;
//solution is n^k  = 10^4 = 10000
var  
  i,k,l,m: byte;
  count: integer;
begin
  i:=1; k:=1;
  l:=1; m:=1;
  count:= 0;
  for i:= 0 to 9 do 
    for k:= 0 to 9 do 
      for l:= 0 to 9 do 
        for m:= 0 to 9 do begin
          writeln(Format('%d%d%d%d',[i,k,l,m]))
          inc(count);        
        end;  
  writeln(inttostr(count)+' Variations of Lock')
  writeln('-----------------------------------')
end;


procedure sudoku_permutation_1;
//solution is sqr 4!4!4!4!  = 756 with diagonal = 48
var  
   perm: TPerm;
   resu: array[1..24] of Tperm;
   i,k,l,m: byte;
   count, suma: integer;
begin
perm[1]:= 1;
perm[2]:= 2;
perm[3]:= 4;
perm[4]:= 8;
i:=1; k:=1; l:=1; m:=1;
count:= 0;
suma:= 0;
writeln('((((((((((((((start of full sudokus)))))))))))))))');
 for i:= 1 to 4 do 
   for k:= 1 to 4 do 
     for l:= 1 to 4 do 
       for m:= 1 to 4 do begin
         //writeln(inttostr(perm[i])+inttostr(perm[k])+inttostr(perm[l])+
         //inttostr(perm[m]))
         suma:= perm[i]+perm[k]+perm[l]+perm[m]
         if suma = 15 then begin
         //writeln(inttoStr(suma))
           inc(count);
           resu[count][1]:= perm[i]
           resu[count][2]:= perm[k]
           resu[count][3]:= perm[l]
           resu[count][4]:= perm[m]
           writeln(inttostr(resu[count][1])+inttostr(resu[count][2])+
                   inttostr(resu[count][3])+inttostr(resu[count][4]))        
         end;  
            //write(inttostr(perm[m]));
          //write('-')
       end;
       writeln('----------end of single lines-----------')
       writeln('');
   count:= 0;
   suma:= 0;    
   for i:= 1 to 24 do 
     for k:= 1 to 24 do 
       for l:= 1 to 24 do 
         for m:= 1 to 24 do begin
           //writeln(inttostr(perm[i])+inttostr(perm[k])+inttostr(perm[l])+
             //inttostr(perm[m]))
            suma:=0;
            if (resu[i][1]+resu[k][1]+resu[l][1]+resu[m][1] = 15) and
               (resu[i][2]+resu[k][2]+resu[l][2]+resu[m][2] = 15) and
               (resu[i][3]+resu[k][3]+resu[l][3]+resu[m][3] = 15) and
               (resu[i][4]+resu[k][4]+resu[l][4]+resu[m][4] = 15) and
               //check also diagonals  
               (resu[i][1]+resu[k][2]+resu[l][3]+resu[m][4] = 15) and
               (resu[m][1]+resu[l][2]+resu[k][3]+resu[i][4] = 15) then begin
              //writeln(inttoStr(suma))
                 inc(count);
                 write(inttostr(count)) 
                 writeln(inttostr(resu[i][1])+inttostr(resu[i][2])+
                         inttostr(resu[i][3])+inttostr(resu[i][4]))        
                 writeln(inttostr(resu[k][1])+inttostr(resu[k][2])+
                         inttostr(resu[k][3])+inttostr(resu[k][4]))        
                 writeln(inttostr(resu[l][1])+inttostr(resu[l][2])+
                         inttostr(resu[l][3])+inttostr(resu[l][4]))        
                 writeln(inttostr(resu[m][1])+inttostr(resu[m][2])+
                        inttostr(resu[m][3])+inttostr(resu[m][4]))        
                 writeln('-----------') 
            end; 
         end;
    writeln('sudokus: '+inttostr(count))       
end;

// main calc & plot
begin
  //Sudoku_permutation_1;
  maxForm1.ShellStyle1Click(self);
  st_String:= 'STAT MODULE';
  Combination_with_Order_3;
  Variation_Zahlenschloss_4;
  Permutation_4_of_10;
  
  writeln(GetVersionString('maxbox3.exe'))
  //hnd:= ExecuteFile('maxbox3.exe','',ExePath,1)
  //writeln(inttostr(hnd))
  getAssociatedProgram('.xls',mname, mdes)
  writeln(mname + mdes)
  mfilel:= TStringlist.create;
  FilesFromWildcard(Exepath, '10*.txt',mfilel, true, true, true)
  //writeln(mfilel.text)
  mfilel.Free;
end.

just maXbox
         ____    ___   _      ____    _   _   _
        |  _ \  |  _| | |    |  _ \  | | | | | |
        | | . | | |_  | |    | |_| | | |_| | | |
        | | | | |  _| | |    |  __/  |  _  | | |          
        | |_. | | |_  | |__  | |     | | | | | |                      
        |____/  |___| |____| |_|     |_| |_| |_| 
                                     

