PROGRAM myTravelerClock;
CONST 
//<Constant declarations> 
  TEXTOUT = ' hi time traveler ';

{TYPE 
<Type declarations>} 

VAR 
//<Variable declarations>
  i, N, SN: integer;

//<FUNCTION>
//<PROCEDURE> 

BEGIN  //Main
//<Executable statements>
  N:= 2; SN:= 1000;
  {for i:= 1 to round(power(2,N)) do begin 
    Writeln(intToStr(i)+TEXTOUT + DateTimeToStr(AddHours(Now,-i)));
    Delay(SN);   //speed of time machine
  end;}

  Writeln(TEXTOUT + DateTimeToStr(AddHours(Now,-(round(power(2,24))))));
  
   writeln(intToStr(Round(Power(2,24)/24/365)));
   writeln(intToStr(Round(Power(2,24)/(24*365))));

  
//<Definitions>  
END. 

----app_template_loaded_code----

http://www.softwareschule.ch/download/maxbox_blix_the_programmer.pdf

  
  timec:= round(power(2,30)/24);
  writeln(inttoStr(timec div 365));
  writeln(intToStr(Round(Power(2,30)/24/365)));

  writeln(inttoStr(round(power(2,12)) div 24));
  maxcalcF('170*24');
  
  Energy = MemC * Work
  W = KEt - KEº


http://petshopboxstudio.com/goodies/free-vector-character-the-programmer/
http://lifehacker.com/5401954/programmer-101-teach-yourself-how-to-code

----code_cleared_checked----



Vaadin - Step-by-step

This tutorial gives you one brief glimpse as well as a more comprehensive look on on how to create a simple address book application using Vaadin. Select five minute, one hour or one day version below.
Five minute version

Vaadin is framework for building web applications completely in Java. Your application is run in a Java server (Tomcat, WebSphere, ..). Ajax and other web-stuff is automatically handled by the framework.

To understand how it works, browse through a simple example.
package com.vaadin.demo.simpleaddressbook; import com.vaadin.Application; import com.vaadin.data.Property; import com.vaadin.data.Property.ValueChangeEvent; import com.vaadin.data.util.IndexedContainer; import com.vaadin.ui.Button; import com.vaadin.ui.Button.ClickEvent; import com.vaadin.ui.Form; import com.vaadin.ui.HorizontalLayout; import com.vaadin.ui.HorizontalSplitPanel; import com.vaadin.ui.Table; import com.vaadin.ui.TextField; import com.vaadin.ui.VerticalLayout; import com.vaadin.ui.Window; public class SimpleAddressBook extends Application { private static String[] fields = { "First Name", "Last Name", "Company", "Mobile Phone", "Work Phone", "Home Phone", "Work Email", "Home Email", "Street", "Zip", "City", "State", "Country" }; private static String[] visibleCols = new String[] { "Last Name", "First Name", "Company" }; private Table contactList = new Table(); private Form contactEditor = new Form(); private HorizontalLayout bottomLeftCorner = new HorizontalLayout(); private Button contactRemovalButton; private IndexedContainer addressBookData = createDummyData(); @Override public void init() { initLayout(); initContactAddRemoveButtons(); initAddressList(); initFilteringControls(); } private void initLayout() { HorizontalSplitPanel splitPanel = new HorizontalSplitPanel(); setMainWindow(new Window("Address Book", splitPanel)); VerticalLayout left = new VerticalLayout(); left.setSizeFull(); left.addComponent(contactList); contactList.setSizeFull(); left.setExpandRatio(contactList, 1); splitPanel.addComponent(left); splitPanel.addComponent(contactEditor); contactEditor.setCaption("Contact details editor"); contactEditor.setSizeFull(); contactEditor.getLayout().setMargin(true); contactEditor.setImmediate(true); bottomLeftCorner.setWidth("100%"); left.addComponent(bottomLeftCorner); } private void initContactAddRemoveButtons() { // New item button bottomLeftCorner.addComponent(new Button("+", new Button.ClickListener() { public void buttonClick(ClickEvent event) { // Add new contact "John Doe" as the first item Object id = ((IndexedContainer) contactList .getContainerDataSource()).addItemAt(0); contactList.getItem(id).getItemProperty("First Name") .setValue("John"); contactList.getItem(id).getItemProperty("Last Name") .setValue("Doe"); // Select the newly added item and scroll to the item contactList.setValue(id); contactList.setCurrentPageFirstItemId(id); } })); // Remove item button contactRemovalButton = new Button("-", new Button.ClickListener() { public void buttonClick(ClickEvent event) { contactList.removeItem(contactList.getValue()); contactList.select(null); } }); contactRemovalButton.setVisible(false); bottomLeftCorner.addComponent(contactRemovalButton); } private void initAddressList() { contactList.setContainerDataSource(addressBookData); contactList.setVisibleColumns(visibleCols); contactList.setSelectable(true); contactList.setImmediate(true); contactList.addListener(new Property.ValueChangeListener() { public void valueChange(ValueChangeEvent event) { Object id = contactList.getValue(); contactEditor.setItemDataSource(id == null ? null : contactList .getItem(id)); contactRemovalButton.setVisible(id != null); } }); } private void initFilteringControls() { for (final String pn : visibleCols) { final TextField sf = new TextField(); bottomLeftCorner.addComponent(sf); sf.setWidth("100%"); sf.setInputPrompt(pn); sf.setImmediate(true); bottomLeftCorner.setExpandRatio(sf, 1); sf.addListener(new Property.ValueChangeListener() { public void valueChange(ValueChangeEvent event) { addressBookData.removeContainerFilters(pn); if (sf.toString().length() > 0 && !pn.equals(sf.toString())) { addressBookData.addContainerFilter(pn, sf.toString(), true, false); } getMainWindow().showNotification( "" + addressBookData.size() + " matches found"); } }); } } private static IndexedContainer createDummyData() { String[] fnames = { "Peter", "Alice", "Joshua", "Mike", "Olivia", "Nina", "Alex", "Rita", "Dan", "Umberto", "Henrik", "Rene", "Lisa", "Marge" }; String[] lnames = { "Smith", "Gordon", "Simpson", "Brown", "Clavel", "Simons", "Verne", "Scott", "Allison", "Gates", "Rowling", "Barks", "Ross", "Schneider", "Tate" }; IndexedContainer ic = new IndexedContainer(); for (String p : fields) { ic.addContainerProperty(p, String.class, ""); } // Create dummy data by randomly combining first and last names for (int i = 0; i < 1000; i++) { Object id = ic.addItem(); ic.getContainerProperty(id, "First Name").setValue( fnames[(int) (fnames.length * Math.random())]); ic.getContainerProperty(id, "Last Name").setValue( lnames[(int) (lnames.length * Math.random())]); } return ic; } }

Thats all. Application source and project can be downloaded from SVN. The application looks like this
One hour version

A more comprehensive tutorial walks you through the creation of a more complete address book application. The tutorial introduces you some of the key elements of Vaadin. Contents of the tutorial can be seen on right.

Already read the "one minute version"? Skip to the the beginning and start reading the chapter 3.
One day version

Read the Book of Vaadin. 


Introduction to the Vaadin Web Framework

Tremurici Cornel contributed to this tutorial

Vaadin is an open source web application framework for rich Internet applications. In contrast to JavaScript libraries and browser-plugin based solutions, it features a server-side architecture, which means that the majority of the logic runs on the servers. AJAX technology is used at the browser-side to ensure a rich and interactive user experience. On the client-side Vaadin is built on top of and can be extended with GWT.

The core piece of Vaadin is the Java library, which is designed to make creation and maintenance of high quality web-based user interface easy. The key idea in the server-driven programming model of Vaadin is that it allows you to forget the web and lets you program user interfaces much like you would program any Java desktop application with conventional toolkits such as AWT, Swing or SWT — but easier. With the server-driven programming model, Vaadin takes care of managing the user interface in the browser and AJAX communications between the browser and the server. With the Vaadin approach, you do not need to learn and debug browser technologies such as HTML or JavaScript.

The Vaadin library defines a clear separation between user interface presentation and logic and allows you to develop them separately. Vaadin's approach is to use themes that dictate the visual appearance of the applications. Themes control the appearance of the user interfaces using CSS and (optional) HTML page templates. Vaadin provides default themes, but you can create your own if you need to. On the backend, Vaadin uses GWT, the Google Web Toolkit, for rendering the user interface in the browser. GWT programs are written in Java, but compiled into JavaScript. GWT is ideal for implementing advanced user interface components (or widgets in GWT terminology) and interaction logic in the browser while Vaadin handles the actual application logic in the server. Vaadin is designed to be extensible, and you can indeed use any 3rd-party GWT components easily, in addition to the component repertoire offered in Vaadin. The use of GWT also means that all the code you need to write is pure Java.

To learn more about what Vaadin can do, see the Vaadin features page.

In this tutorial you learn about the Vaadin plugin for NetBeans IDE and you create a simple web application with NetBeans IDE and the Vaadin plugin.

Contents

Content on this page applies to NetBeans IDE 6.x-7.0

    Installing the Vaadin Plugin
    Creating a Java Web Application With Vaadin
    Creating a Custom Vaadin Theme
    Debugging Your Application
    More Exercises
    See Also

To follow this tutorial, you need the following software and resources.
Software or Resource 	Version Required
NetBeans IDE 	Web and Java EE installation
version 6.8
Java Development Kit (JDK) 	version 6 or version 5
Vaadin plugin for NetBeans IDE 	current version
GlassFish Server Open Source Edition
or
Tomcat servlet container 	2.1.1 or 3.0.1
 
version 6.x
Installing the Vaadin Plugin

You need to download the Vaadin plugin before you can install it. The Vaadin plugin is available at http://plugins.netbeans.org/PluginPortal/faces/PluginDetailPage.jsp?pluginid=21965. The Vaadin plugin for NetBeans IDE is open-sourced and the plugin project is accessible on Kenai.

To install the Vaadin plugin:

    Download the Vaadin plugin.
    Start NetBeans IDE. Go to Tools > Plugins and open the Downloaded tab.
    Downloads tab of Plugin manager with nothing selected
    Click Add Plugins... and browse for the downloaded plugin.
    Browsing for the Vaadin plugin
    Select the Vaadin plugin and click Open. You return to the Downloads tab of the Plugins manager, and now the Vaadin Framework plugin is visible. Make certain it is selected and click Install.
    Downloads tab of Plugin manager showing Vaadin plugin selected
    The installer opens. Click through the installer, accepting the licenses and approving the installation of the unsigned Vaadin plugin. When you finish, the Vaadin plugin is installed.



  ///////////////////////////////////////////////////777BLIX TEXT  PDF Extract
  
  
  Blix the Programmer
An Introduction to Programming

1.1 We program time

So you are eager to learn programming, ok let’s code a time machine!
Imagine you are a programmer like Blix above. Our goal is to make him looks 88look cute nerdy, he
looks very busy working with his dual monitor setup and his pile of books. I hope you guys love
The Programmer as our guide as much as we do.
You've always wanted to learn how to build software yourself 88 yourself überflüssig(or just whip up an occasional
script) but never knew where to start. Today you do that first step.

1.2 First we need a tool

A tool is needed to type some code and run it. What you think is coding? Coding 88is not only writing
or typing. After all we don’t write software 88, we build it!
This reminds me of a true “Dilbert moment” a few years ago, when my (obviously non-technical)
boss commented that he never understood why it took months to develop software. “After all”, he
said, “it's just typing.” ;-(
Luckily, the web is full of free resources that can turn you into a programmer.
Now we download such a free resource, called maXbox:
http://sourceforge.net/projects/maxbox/files/
2
The tool you will use is split up into the toolbar 88 at the top across a top, the editor or code part in middle and
the output window (console) at the bottom with an interface part on the right. Change that in the
menu /View at our own style.
In maXbox you will execute just the script, all libraries and units are already built in.
Once the download has finished, unzip the file, making sure that you preserve the folder
structure as it is. If you double-click maxbox3.exe the box opens a default demo program. Test it
with F9 / F2 or press Compile on the toolbar and you should hear a sound and a browser will
open. So far so good now we’ll prepare our first program, nowadays called an app:
Click on File/New and a template is loaded. You can run this template with Compile and the
app writes three times “hi world of code” 88 in the  console at the bottom of the box.
Keep in mind we want to program a clock in several steps. Its good practise to name and store
our script file with Save As…, for example to
myfirstclock.txt
If you want to look at the whole script you can find the file at:
http://www.softwareschule.ch/examples/341_blix_clock.txt
Now let’s take a look at the code of this first part project. Our first line is
01 Program myClock;
We name it, means the program’s name is above. Don’t confuse it with the filename stored on
your disk myfirstclock.txt, the program name is just an internal name defined.
This example requires also objects, but we won’t go deeper into object oriented
programming, we just use objects. At the end of this doc you’ll find links to maXbox tutorials.
Next we learn how a constant works. Constants are fixed numeric or character values
represented by a name. In line 4 we set a name and the content of a constant:
02 Const
03//<Constant declarations>
04 TEXTOUT = 'hi world of code';
3
A constant is called a const1 because you can’t change it during the program.
The next lines of the program declare a variable i of type integer. In line 11 we first declare
name and type to use. This variable has a numeric type.
A type is essentially a name for a kind of data. When you declare a variable you must specify
its type, which determines the range and storage of values the variable can hold and the
operations that can be performed on it.
09 Var
10//<Variable declarations>
11 i: integer;
You see in this primer, we don’t deal with own types, function or procedure. The next lines are
simply comments in your code and are ignored by the compiler (the part that translates your
code into instructions a computer can understand before executing it).
13 //<FUNCTION>
14 //<PROCEDURE>
Line 16 ff is much of interest. A program must have a main routine between begin and end. The
main routine is run once and once only at the start of the program (after you compiled) 88 Here will you place general instructions and the main control of the app.
//Main routine
16 Begin
17 //<Executable statements>
18 for i:= 1 to 3 do //iteration
19 Writeln(TEXTOUT);
20 //<Definitions>
21 End.


1.3 Time will come

So we are ready to change our first line. The easiest way to try your hand at coding for your Win,
Linux or Mac desktop is to start with a scripting or macro program and change something.
Our plan is to change the output and add time information in a loop. Right 88, a loop is similar to
88 an iteration. The “for statement” in line 18 implements an iterative loop. After each iteration of the
loop, the counter variable i is incremented. Therefore, i is the loop counter.
In this line we add the actual time:
19 Writeln(TEXTOUT + TimeToStr(Time));
Time is our first function called, you guess it, Time. We say we call a function. Because
functions return a value, we get the time and send it to the output with Writeln(). 
88 But first we have to convert it to a string with another function, TimeToStr.
88 Start the program with "Compile". But wait a second, as you can see we don’t see the difference, because the loop is too fast. What
about to delay the loop and get the seconds in between as clockwork. No problem at all, we add
a new line 20 with the procedure Delay:
19 Writeln(TEXTOUT + TimeToStr(Time));
20 Delay(1000); //milliseconds
1 You can only change the declaration for the next execution
4   
Something is still missing in our design. We have to extend the scope of the loop with a building
block; means the loop runs between begin and end. Also each begin must have and end ;-).
18 for i:= 1 to 3 do begin
19 Writeln(TEXTOUT) + TimeToStr(Time));
20 Delay(1000)
21 end;
 Now it’s up to you: produce a clock output that runs 88 for 15 seconds.
Right you simply change the loop counter from 3 to 15:
18 for i:= 1 to 15 do begin
As a control, the runtime output (in yellow window) is about 15 seconds more or less, depending
on the CPU performance at the moment. A one hour clock has to be set to 3600!

1.4 Time forever

Programmers never 88die, they just GOSUB without return. You may also know, in the beginning
88 there was nothing which exploded ;). So let the jokes aside 88. Our last step is 88 an eternal clock that goes
back in the time like I said before: we code a time machine.
When we travel in past, present or future we change the logic from digital to trigital ;-).
So this piece of code can then be translated and run on various platforms and frameworks as
well. There are several different kinds of software development you can do for various platforms,
from the web to a desktop to your smart phone to a command line.
So what’s the solution to run this time forever? Answer: a do forever loop or at least one hour.
With the call of another function we set the time one hour back in every second (sign: –i).
18 for i:= 1 to 3600 do begin
19 Writeln(TEXTOUT + TimeToStr(AddHours(Time,-i)));
20 Delay(1000)
21 end;
5
88The clock goes one hour back into the past every second, but the seconds 88tick forward like in a normal clock. In
the film “back to the future” they call it the flux-comparator.
If you want to stop or break a loop, just override the loop counter in line 18 and recompile (F9)
it during the execution.
When you call the function AddHours that takes two argument and returns another time, then we
say the function call TimeToStr(AddHours(Time,-i)) is nested. A nested call contains other
functions within a statement. Let me explain:
First we call the time function, the result we pass to the AddHours function 88, it's result is
passed to the TimeToStr function and the whole we pass again to Writeln!
When we want to travel back to the past, maybe in the year of 1759, further information is
missing. Right 88, there is no date. Easier done than said ;-).
18 for i:= 1 to 88 lass das auf 3600 oder nimm kleinered Power 2, 4 round(Power(2,30) 88) do begin
19 Writeln(TEXTOUT + DateTimeToStr(AddHours(Now,-i)));
Did you see the difference? We replaced the Time function with the Now function and the string
converter to DateTimetoStr. Now we’re ready to go back to middle age.
 How can you accelerate your time machine? One hour back per second takes to
much time, simply the loop must step faster.
You got it; we change the parameter of the Delay Procedure:
20 Delay(10);
Remember: The clock rate is still the same, but our time machine can go faster to the past. The
time is flushing by with this speed; the calculation of how many lines we get is also interesting:
Suppose we have Power(2,12) as the for counter limit, how many lines we get?
Answer: 2^12 = 4096.
And the next by Power(2,30) could be also of interest:
Can you imagine where in the past we are landing, middle age or stone age or maybe far out of
our history line?
The calculation is simple: (2^30/24)/365 is rounded to 122573 years 88 weglassen: before. 88 This would be Stone Age!
How can you do that in maXbox:
writeln(intToStr(Round(Power(2,30)/24/365)));
We come closer to the end and had to refactor just one thing. Our last release looks like this:
for i:= 1 to round(power(2,N)) do begin
Writeln(IntToStr(i)+TEXTOUT + DateTimeToStr(AddHours(Now,-i)));
Delay(SN); //speed of time machine
end;
As you can see I introduced two parameters to be more flexible, the counter limit N and the speed
of time machine SN. Means also 2 more variables:
11 i, N, SN: integer;
18 N:= 4; SN:= 1000; //assign a value to a variable
6
So far we have learned something about functions in a loop, comments and the difference
between a constant and a variable. Now its time to reflect over those used functions:
Function Explanation and Purpose…
Writeln() Writes one or more lines as string to an output.
IntToStr() Converts an integer to a string.
DateTimeToStr() Converts a variable of type TDateTime to a string.
AddHours() Change the hours of a TDateTime function.
Now Returns the current date and time.
Power() Power raises Base to power specified by Exponent.
Round() Returns a value of a real rounded to the nearest whole number.
Delay(), Sleep() Pauses execution for a specified number of microseconds.
There are plenty more functions, which can be found in Help/All Functions List.
This interface information of RTL functions is contained in various unit files that are a standard
part of C++, Delphi or Indy. This collection of units is referred to as the RTL (run time library). The
RTL contains a very large number of functions and procedures for you to use.
After too long coding, you look like Mona Lisa or the real Blix as a Goblin ;-)
Conclusion: A common pitfall for beginners is getting stuck figuring out which programming
language is best to learn first.
7
There are a lot of opinions out there, but there's no 88not one “best” language. Here's the thing to
consider: In the end, language doesn't matter THAT much. Understanding data and control
structures, algorithms, metrics, modelling and design patterns does matter very much. Every
language, even a simple scripting language, will have elements that you'll use in other languages
as well and will help 88your understanding. maXbox is build on Object Pascal and is similar to Java or C++ 88, a
well known and mighty language.
Script: Examples/336_digiclock2.txt
Feedback @
max@kleiner.com
Literature:
Kleiner et al., Patterns konkret, 2003, Software & Support
Links of maXbox Tutorials:
http://www.softwareschule.ch/maxbox.htm
http://sourceforge.net/projects/maxbox
http://sourceforge.net/apps/mediawiki/maxbox/
http://en.wikipedia.org/wiki/Time_travel




Scan report of: 76008-maxbox3.zip

Ahnlab ERROR
AntiVir -
Avast -
AVG -
BitDefender -
CA-AV -
Command -
Command (Online) -
Eset Nod32 -
Fortinet -
F-Prot -
G Data -
Ikarus -
K7 Computing -
Kaspersky -
Kaspersky (Online) -
McAfee -
McAfee (BETA) -
McAfee (Online) -
McAfee GW Edition (Online) -
Microsoft -
Norman -
Panda -
Panda (Online) -
QuickHeal Suspicious (warning)
Rising -
Sophos -
Sophos (Online) -
Sunbelt -
Symantec -
Symantec (BETA) -
Trend Micro -
Trend Micro (Cons.) -
Trend Micro (CPR) -
VBA32 -
VirusBuster -

============================================================

The following updates have been used for the test (all times in UTC):

Ahnlab sdscan-console.zip 2013-02-05 11:40
AntiVir vdf_fusebundle.zip 2013-02-05 22:25
Avast av5stream.zip 2013-02-06 01:35
AVG avg10cmd1191a5545.zip 2013-02-05 23:05
BitDefender bdc.zip 2013-02-06 00:55
CA-AV fv_nt86.exe 2013-02-05 18:15
Command antivir-z-201302052345.zip 2013-02-06 00:10
Command (Online) antivir-z-201302052345.zip 2013-02-06 00:10
Eset Nod32 minnt3.exe 2013-02-05 23:00
Fortinet vir_high 2013-02-05 19:50
F-Prot antivir.def 2013-02-01 22:40
G Data bd.zip 2013-02-06 01:30
Ikarus t3sigs.vdb 2013-02-06 01:35
K7 Computing K7Cmdline.zip 2013-02-05 15:40
Kaspersky kdb-i386-cumul.zip 2013-02-04 22:35
Kaspersky (Online) kdb-i386-cumul.zip 2013-02-04 22:35
McAfee avvdat-6977.zip 2013-02-05 20:10
McAfee (BETA) avvwin_netware_betadat.zip 2013-02-06 01:25
McAfee (Online) avvdat-6977.zip 2013-02-05 20:10
McAfee GW Edition (Online) mfegw-cmd-scanner-windows.zip 2013-02-06 00:40
Microsoft mpam-fe.exe 2013-02-06 00:55
Norman nse7legacy.zip 2013-02-05 17:15
Panda pav.zip 2013-02-05 10:05
Panda (Online) pav.zip 2013-02-05 10:05
QuickHeal qhadvdef.zip 2013-02-04 12:05
Rising RavDef.zip 2013-02-05 02:35
Sophos ides.zip 2013-02-06 00:35
Sophos (Online) ides.zip 2013-02-06 00:35
Sunbelt CSE39VT-EN-15398-F.sbr.sgn 2013-02-06 01:00
Symantec streamset.zip 2013-02-06 01:40
Symantec (BETA) symrapidreleasedefsv5i32.exe 2013-02-06 01:30
Trend Micro itbl1307400100.zip 2013-02-06 01:30
Trend Micro (Cons.) hcoth970795.zip 2013-02-05 13:05
Trend Micro (CPR) lpt708.zip 2013-02-05 22:00
VBA32 vba32w-latest.rar 2013-02-05 14:00
VirusBuster vdb.zip 2013-02-05 15:05

