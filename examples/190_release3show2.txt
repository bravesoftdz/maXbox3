//Welcome to the first article of an introductory series on simple game demos
//// play the game: 184_playearth_second.txt    in maXmedia

Program PlayEarth_ReleaseShow3;  

const 
    BSIZE = 32;
    ANGLE = 5;
    LOGO = 'Welcome to maXbox Release!';
    myPIC1 = 'http://www.softwareschule.ch/images/maxworld.png';
    myPIC2 = 'http://www.softwareschule.ch/images/maxlindau2.png';
    myPIC3 = 'http://www.softwareschule.ch/images/ps3small.png';
    myMUSIC = 'http://www.softwareschule.ch/download/airmaxloop3.mp3';
    mySHOW = 'http://www.softwareschule.ch/maxboxshow.htm';
    mySONG = 'airmaxloop3.mp3';
    myTEXT = 'Welcome to maXbox3';

var
  Form1: TForm;
  bgroundI, spriteI, paddleI: TImage;
  bgroundRect, spriteRect, paddleRect: TRect;
  x, y, xDir, yDir, paddleX, paddleY, paddleCenter, hitcount: integer;
  traceflag, autoflag: boolean;
  E: Exception;
  
procedure getMP3File;
var 
  fStream: TFileStream;
begin
  fStream:= TFileStream.Create(mySong, fmCreate)
  with TIdHTTP.Create(NIL) do begin
    try
      Get1(myMUSIC, fStream)
    finally
      Free
      fStream.Free;
    end;
  end;    
end;

procedure getHTTP_PNG(vimage: TImage; vURL: string); 
var
  idHTTP: TIDHTTP;
  pngStream: TMemoryStream;
begin
  with TLinearBitmap.Create do
  try
    idHTTP:= TIdHTTP.Create(NIL)
    pngStream:= TMemoryStream.create;
    try
      idHTTP.Get1(vURL, pngStream)
    except
      showmessage(E.message +'internet missing')
    end  
    pngStream.Position:= 0;
    LoadFromStream2(pngstream,'PNG');
    vimage.Picture:= NIL;
    AssignTo(vimage.picture);
    //SaveToFile(ExePath+'mX3_open.png');
  finally
    Dispose;
    Free;
    idHTTP.Free
    pngStream.Free;
  end; 
end;    

function InitResources: boolean;
begin
  bgroundI:= TImage.Create(form1);
  paddleI:= TImage.Create(form1);
  spriteI:= TImage.Create(form1);
  getHTTP_PNG(bgroundI, myPIC1); 
  getHTTP_PNG(paddleI, myPIC3); 
  //load sound effect
  if fileExists(mySONG) = false then 
    getMP3File;
    closeMP3;
    playMP3(mySONG);    
  //bgroundI.picture.bitmap.canvas.Brush.Style:= bsclear; //!!
  with Form1.Canvas do begin
    Font.Color:= clRed; 
    Brush.Style:= bsclear;
    Font.Name:= 'Tempus Sans ITC'; 
    Font.Size:= 50;
  end;    
  result:= True;
end;

procedure FormActivate;
begin
  //.left/.top/.right(width)/.bottom(height)
  bgroundRect:= Rect(0,0,Form1.ClientWidth,Form1.ClientHeight) 
  spriteRect:= Rect(0,0,BSIZE,BSIZE);
  Form1.Canvas.StretchDraw(bgroundRect, bgroundI.Picture.Bitmap);
  Form1.Canvas.Draw(0,0, spriteI.Picture.bitmap);   //icon or bitmap
  paddleX:= form1.ClientWidth div 2;
  paddleY:= form1.ClientHeight - 50;
  paddleRect:= Rect(paddleX - paddleI.Width, paddleY,
                    paddleX + paddleI.Width, paddleY + paddleI.Height)
end;


procedure Repaint(Sender: TObject);
begin
  if Assigned(bGroundI) then 
    FormActivate;
 end;

procedure IdleLoop(Sender: TObject; var Done: Boolean);
begin
  //keeps loop going
  done:= false;
  //if done then exit //more speed
  //slows down action
  Sleep(10);
  //.left/.top/.right/.bottom
  spriteRect:= Rect(X,Y,X+BSIZE,Y+BSIZE)
  // move paddle
  Form1.Canvas.Draw(paddleX, paddleY, paddleI.Picture.bitmap); 
  if autoflag then
    paddleRect.Left:= x -(BSIZE div 2) //automodus !!
  else
    paddleRect.Left:= paddleCenter - (BSIZE div 2);
  paddleX:= paddleRect.Left;
  paddleRect:= Rect(paddleX, paddleY, paddleX + BSIZE, paddleY + BSIZE)
  // move earth and repaint
  if traceflag then
    Form1.Canvas.Rectangle(x, y, spriterect.right, spriterect.bottom)
  else begin
    Form1.Canvas.Draw(x, y, spriteI.picture.bitmap);
     bgroundRect:= Rect(0,0,spriterect.right,spriterect.bottom)
     //bgroundRect:= Rect(x-100,y-100,x+100,y+100)
     form1.Canvas.StretchDraw(bgroundRect, bgroundI.Picture.Bitmap);
  end;
  //ChangeRectCalcs as Angle
  if (y <= 0) then yDir:= ANGLE;
  if ((spriteRect.Bottom - 16) >= (paddleRect.Top)) //catch the ball
    and ((spriteRect.Bottom - 16) <= (paddleRect.Top + ANGLE))
    and ((spriteRect.Right) >= (paddleRect.Left))
    and ((spriteRect.Left) <= (paddleRect.Right)) then begin
      yDir:= -ANGLE;
      inc(hitcount)
  end;    
  if (x <= 0) then xDir:= ANGLE;
  if(x >= Form1.ClientWidth - 16) then
    xDir:= -ANGLE;
  x:= x + xDir;
  y:= y + yDir;
  Form1.Canvas.TextOut(300, 50, myTEXT); 
  Form1.Canvas.TextOut(40, Form1.ClientHeight-120,'hit: ' +inttostr(hitcount));
end;

procedure CloseClick(Sender: TObject; var action: TCloseAction);
begin
  //Form1.Close;  free 308 kByte
  if MessageDlg('Wanna Leave?',mtConfirmation,[mbYes, mbNo],0) = mrYes then begin
     //form1.Free;
    Application.OnIdle:= NIL;
    //action:= caFree;
    ShowMessage('Now you see the hits of mX3');
    ExecuteCommand('http://www.softwareschule.ch/maxboxshow.htm','')
 end  
  else
    Action:= caNone;
end;


procedure FormKeyPress(Sender: TObject; var Key: Char);
begin
  if Key = #27 then Form1.Close;
end;

function FormCreate: boolean;
begin
 result:= false; 
 Form1:= TForm.Create(self);
 with Form1 do begin
   //FormStyle:= fsStayOnTop;
   Position:= poScreenCenter;
   caption:= LOGO;
   color:= clred;
   width:= 1000;
   height:= 600;
   onPaint:= @Repaint;
   onKeyPress:= @FormKeyPress;
   onClose:= @CloseClick;
   Show;
 end;
  if InitResources then  
    if InputBox('Show Box Release ', 'Show Again?', 'Y') = 'Y' then begin
      x:= 0; y:= 0;
      hitcount:= 0;
      traceflag:= false; 
      autoflag:= true;
      result:= true;
    end else
      Form1.Close;
end;

// main drive
begin
  if FormCreate then begin
    FormActivate;
    //Assign idle time function
    Application.OnIdle:= @IdleLoop;
  end;
end.


------------------------------------------------------------------------


My first experience using a computer was in 1981 on a Sinclair ZX Spectrum. The first 5 years of my computing life were spent on nothing but writing and modifying games for the Sinclair and later the Atari, but, what else are you going to do as a teenager?

Rambo II: "Das war nicht mein Krieg. Ich bin nur hier, um den Dreck wegzuräumen."
Oder wie wir Programmierer zu sagen pflegen: "Das ist nicht mein Code. Ich mache nur die Fehler raus." 

Make your application like a game !!
FULL SCREEN !
DISABLE ALL OF SYSTEM KEYS !
Try it ;)

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

procedure TForm1.FormCreate(Sender: TObject);
var
HTaskbar: HWND;
OldVal: LongInt;
begin
  TRY
   //Find handle of TASKBAR
   HTaskBar:= FindWindow('Shell_TrayWnd',NIL);
   //Turn SYSTEM KEYS off
   SystemParametersInfo(97, Word(True), @OldVal, 0) ;
   //Disable the taskbar
   EnableWindow(HTaskBar,False);
   //Hide the taskbar
   ShowWindow(HTaskbar,SW_HIDE);
  FINALLY
   With FORM1 do begin
     BorderStyle:= bsNone;
     FormStyle:= fsStayOnTop;
     Left:= 0;
     Top:= 0;
     Height:= Screen.Height;
     Width:= Screen.Width;
   end;
  END{FINALLY}
end;

procedure TForm1.FormClose(Sender: TObject; var Action: TCloseAction);
var
HTaskbar: HWND;
OldVal: LongInt;
begin
  //Find handle of TASKBAR
  HTaskBar:= FindWindow('Shell_TrayWnd',NIL);
  //Turn SYSTEM KEYS Back ON
  SystemParametersInfo(97, Word (False), @OldVal, 0);
  //Enable the taskbar
  EnableWindow(HTaskBar,True);
  //Show the taskbar
  ShowWindow(HTaskbar,SW_SHOW);
end;

----------------------------------OnIdle-----------------------------
You can create an OnIdle event to be called whenever your
application is waiting for messages to be processed. Simply
declare the event handler procedure in the private section of
the forms declaration:

{ Private declarations }
procedure IdleEventHandler(Sender: TObject; var Done: Boolean);

In the implementation section, define the procedure:

procedure TForm1.IdleEventHandler(Sender: TObject;
  var Done: Boolean);
begin
{Do a small bit of work here}
  Done := false;
end;

Then assign the Application's OnIdle event to point to your
new procedure(You may do this whereever you like, but a good
place would be the Forms OnCreate method):

Application.OnIdle := IdleEventHandler;

OnIdle is called only once, as the application transitions into
an idle state. It is not called continuiously unless Done is
set to False.  If Done is False, WaitMessage is not called.
Applications that set Done to False consume an inordinate
amount of CPU time that affects overall system performance.

You can set the boolean variable "done" to true when you want
to stop the event handler from executing. 