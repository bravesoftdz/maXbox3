PROGRAM Josephus_Flavius;

//http://www.programmieraufgaben.ch/aufgabe/josephus-problem/zqcht09b
//http://www.programmieraufgaben.ch/aufgabe/josephus-problem/zqcht09b#solution-code-666

(*Das Josephus-Problem (oder "Abzählreim-Problem") lautet wie folgt: n Objekte werden in einem Kreis angeordnet und jedes m-te Objekt wird entfernt, bis nur noch ein Objekt übrigbleibt. Das ursprüngliche Problem geht auf einen Selbstmordabkommen von 41 Jüdischen Aufständischen zurück, die von den Römern im 1. Jahrhundert vor Christus gefangen genommen wurden. Die Aufständischen entschlossen sich, jede dritte Person zu töten, bis keiner mehr übriggeblieben war, aber Flavius Josephus, der Historiker, der überlebte und die Geschichte weitergab, errechnete schnell, wo er und ein Freund sich positionieren mußten, so daß nur sie beide überlebten. Schreiben Sie eine Funktion, die das "verallgemeinerte Josephus-Problem" (oder "Abzählreim-Problem") für beliebige m und n löst: Man plaziere n Objekte in einem Ring und lösche jedes m-te Element bis nur noch eines übrig ist. Dessen Position ist die Flavius-Zahl von m und n. Es ist also eine Funktion
Flavius(m, n: INTEGER): INTEGER
zu schreiben, in der das Abzählen simuliert wird! *)  //locs = 230 

Const
  PicPath = '\examples\images\';

//<FUNCTION>
//<PROCEDURE> 
Procedure AllBooleanPattern(aX, aY: integer);
begin
    Writeln(#13#10+'************** All Booolean Functions **************');
    PrintF('%-36s 01 False',[inttobin(0)])
    PrintF('%-36s 02 AND',[inttobin(aX AND aY)])
    PrintF('%-36s 03 Inhibit',[inttobin(aX AND NOT aY)])
    PrintF('%-36s 04 Prepend',[inttobin(aX)])
    PrintF('%-36s 05 Praesect',[inttobin(NOT aX AND aY)])
    PrintF('%-36s 06 Postpend',[inttobin(aY)])
    PrintF('%-36s 07 XOR',[inttobin(aX XOR aY)])
    PrintF('%-36s 08 OR',[inttobin(aX OR aY)])
    PrintF('%-36s 09 NOR',[inttobin(NOT(aX OR aY))])
    PrintF('%-36s 10 Aequival',[inttobin((NOT aX OR aY)AND(NOT aY OR aX))])
    PrintF('%-36s 11 NegY',[inttobin(NOT aY)])
    PrintF('%-36s 12 ImplicatY',[inttobin(aX OR NOT aY)])
    PrintF('%-36s 13 NegX',[inttobin(NOT aX)])
    PrintF('%-36s 14 ImplicatX',[inttobin(NOT aX OR aY)])
    PrintF('%-36s 15 NAND',[inttobin(NOT(aX AND aY))])
    PrintF('%-36s 16 True',[inttobin(NOT 0)])
end;

function josephusG(n,k: integer; var graphout: string): integer;
var i,p,kt: smallint;
    aist: array of char;
 begin
   SetLength(aist,n);
   kt:= 2;
   p:= 0;
   for i:= 0 to length(aist)-1 do aist[i]:= '1';//init array
   while kt <= length(aist) do begin    
     for i:= 0 to length(aist)-1 do begin
       if aist[i]= '1' then inc(p);
       if p = k then begin
         aist[i]:= 'x';
         inc(kt);
         p:= 0;
       end;
     end;
     for i:= 0 to length(aist)-1 do  //line out
       //graphout:= graphout + aist[i];
       graphout:= graphout+Format('%-2.1s',[aist[i]]);
     graphout:= graphout + #13#10;
   end; 
   for i:= 0 to length(aist)-1 do  //solution out
     if aist[i]= '1' then result:= (i+1);
 end;


function josephusProblem_Function(n,k: integer): integer;
var i,p,kt: smallint;
    aist: array of char;
 begin
   SetArrayLength(aist,n);
   kt:= 2;
   p:= 0;
   for i:= 0 to length(aist)-1 do aist[i]:= '1';//init array
   while kt <= length(aist) do begin    
     for i:= 0 to length(aist)-1 do begin
       if aist[i]= '1' then inc(p);
       if p = k then begin
         aist[i]:= 'x';
         inc(kt);
         p:= 0;
       end;
     end;
   end; 
   for i:= 0 to length(aist)-1 do  //solution out
     if aist[i]= '1' then result:= (i+1);
 end;


procedure josephusProblem_Graphic(n,k: integer);
var i,p,kt: smallint;
    aist: array of char;
 begin
   SetArrayLength(aist,n);
   kt:= 2;
   p:= 0;
   for i:= 0 to length(aist)-1 do aist[i]:= '1';//init array
   while kt <= length(aist) do begin    
     for i:= 0 to length(aist)-1 do begin
       if aist[i]= '1' then inc(p);
       if p = k then begin
         aist[i]:= 'X';
         inc(kt);
         p:= 0;
       end;
     end;
     for i:= 0 to length(aist)-1 do  //line out
       write(aist[i]+' ');
     writeln('');
   end; 
   for i:= 0 to length(aist) -1 do  //solution out
     if aist[i]= '1' then writeln('Survived '+inttoStr(i+1));
 end;
  
  {def josephus( n, k):
   r = 0 i = 2
   while i <= n:
     r = (r + k) % i;
     i+= 1
   return r+1}
   {def josephus( n, k):
   if n ==1:
     return 1
   else:
     return ((josephus(n-1,k)+k-1) % n)+1}

  function josephus(n,k: byte): integer;
   var r,i: integer;
   begin
   r:= 0; i:= 2;
   while i <= n do begin
     r:= (r + k) mod i;
     i:= i+ 1
     write(intToStr(r)+ ' ');  //debug
   end;  
   result:= r+1;
  end; 
  
 function josephus2(n,k: byte): integer;
   var r,i: integer;
   begin
   r:= 0; i:= 2;
   while i <= n do begin
     r:= (r+k) mod i;
     inc(i)
   end;  
   result:= r+1
  end; 
  
 function josephus_rec(n,k: byte): integer;
   begin
   if n = 1 then
     result:= 1
   else
     result:= (josephus_rec(n-1,k) +k-1) mod n+1
   end;  


//Debug Runtime Error: Exception: 5.7.0 Must issue a STARTTLS command first. s3sm27150699eem.4 - gsmtp .
//Exception: 5.7.0 Must issue a STARTTLS command first. 44sm27194908eek.5 - gsmtp

// this procedure works!!
procedure SendEmail(mFrom,  mTo,  mSubject,  mBody,  mAttachment: variant);
var  schema: string;
     mMessage, mconfig: Variant;
begin
  mMessage:= CreateOleObject('CDO.Message');
  mConfig:= CreateOleObject('CDO.Configuration');
   try 
    schema:= 'http://schemas.microsoft.com/cdo/configuration/';
    mConfig.Fields.Item(schema + 'sendusing'):= 2; // cdoSendUsingPort
    mConfig.Fields.Item(schema + 'smtpserver'):= 'mail.hover.com'//'smtp.gmail.com';
    mConfig.Fields.Item(schema + 'smtpserverport'):= 465;  //  25; //587; //465 ssl;
    mConfig.Fields.Item(schema + 'sendusername'):= 'max@kleiner.com';
    mConfig.Fields.Item(schema + 'sendpassword'):= '';
    mConfig.Fields.Item(schema + 'smtpauthenticate'):= 1;
    mConfig.Fields.Item(schema + 'smtpusessl'):= True;
    mConfig.Fields.Item(schema + 'smtpconnectiontimeout'):= 30;
    mConfig.Fields.Update(); 
    mMessage.Configuration:= mConfig;   //assign
    mMessage.From:= mFrom;
     //mMessage.To:= mTo;   dont work cause of late binding, <to> is keyword!
    mMessage.CC:= mTo;
    mMessage.Subject:= mSubject;
    mMessage.HTMLBody:= mBody;   
     {if(0 < mAttachment.length) {
      mMessage.AddAttachment(mAttachment);   }
     mMessage.Send();    
  Except
     writeln('Log.Error("E-mail cannot be sent", exception.description)');
     //result:= false;  
   end;
   writeln('Log.Message("Message to <" + mTo +  "> was successfully sent");');
  mConfig:= unassigned;
  mMessage:= Unassigned;
end;


function isPowerof2(num: int64): boolean;
begin
 result:= false;
 while isEven(num) do 
   num:= num div 2;
 if num= 1 then
   result:= true;   
   //powerof2
end;

var gout: string;

BEGIN  //Main  APP
//<Executable statements>
   // whole ASCII Table
   //for i:= 0 to 255 do
     //writeln(format('wert %d %s',[i, Chr(i)]))}
    writeln(Format('%s',[inttobin(97)]))
    writeln(Format('%s',[inttobin(223)]))
    writeln(Format('%s',[inttobin(97 XOR 223)]))
    AllBooleanPattern(10,12);
    //josephusProblem;
    writeln('');
    writeln('josephus1 '+inttostr(josephus(41,3)));
    writeln('josephus2 '+inttostr(josephus2(16,3)));       //flavius number
    writeln('josephus2 '+inttostr(josephus2(51,3)));      //flavius number
    writeln('josephusR '+inttostr(josephus_rec(100,10))); //flavius number
    writeln('');
    josephusProblem_Graphic(41,3);
    Writeln('Flavius Function: '+IntToStr(josephusProblem_Function(41,3)));
    Writeln('Flavius FunctionG: '+InttoStr(josephusG(41,3,gout)));
    Writeln(gout);
    maxcalcF('242/77');
    maxcalcF('22/7');
    writeln(floattostr(PI));
    writeln(BooleanToString(isPowerof2(1024)));
  SendEmail('max@kleiner.ch','max@kleiner.com','josephusproblem2','solved!','');
END. 


//********************** Notes 
The trick is to run the loop in reverse order:

for i := ListBox.Count-1 downto 0 do
  if ListBox.Selected[i] then 
    StringList1.Delete(i);

This way, the act of deleting an item only changes the indices of elements later in the list, and those elements have already been processed.
share|edit


Einstein and Kleiner

Einstein’s controversy with Paul Drude took place in the middle of 1901. It was at this time that Einstein transitioned from Weber to Kleiner and changed his dissertation topic from thermoelectricity to molecular kinetics.

Until 1909 the ETH was not authorized to grant doctoral degrees, so a special arrangement enabled ETH students to obtain doctorates from the University of Zurich. At that time, most dissertations in physics by ETH students were carried out under the supervision of H.F. Weber, Einstein’s former teacher at the Polytechnikum, as it was then called. The University of Zürich had only one physics chair, held by Alfred Kleiner. His main research was focused on measuring instruments, but he also had an interest in the foundations of physics.

                         
00000000000000000000000000000000     01 False
00000000000000000000000000001000     02 AND
00000000000000000000000000000010     03 Inhibit
00000000000000000000000000001010     04 Prepend
00000000000000000000000000000100     05 Praesect
00000000000000000000000000001100     06 Postpend
00000000000000000000000000000110     07 XOR
00000000000000000000000000001110     08 OR
11111111111111111111111111110001     09 NOR
11111111111111111111111111111001     10 Aequival
11111111111111111111111111110011     11 NegY
11111111111111111111111111111011     12 ImplicatY
11111111111111111111111111110101     13 NegX
11111111111111111111111111111101     14 ImplicatX
11111111111111111111111111110111     15 NAND
11111111111111111111111111111111     16 True                         

----app_template_loaded----


Das Josephus-Problem (oder "Abzählreim-Problem") lautet wie folgt: n Objekte werden in einem Kreis angeordnet und jedes m-te Objekt wird entfernt, bis nur noch ein Objekt übrigbleibt. Das ursprüngliche Problem geht auf einen Selbstmordabkommen von 41 Jüdischen Aufständischen zurück, die von den Römern im 1. Jahrhundert vor Christus gefangen genommen wurden. Die Aufständischen entschlossen sich, jede dritte Person zu töten, bis keiner mehr übriggeblieben war, aber Flavius Josephus, der Historiker, der überlebte und die Geschichte weitergab, errechnete schnell, wo er und ein Freund sich positionieren mußten, so daß nur sie beide überlebten. Schreiben Sie eine Funktion, die das "verallgemeinerte Josephus-Problem" (oder "Abzählreim-Problem") für beliebige m und n löst: Man plaziere n Objekte in einem Ring und lösche jedes m-te Element bis nur noch eines übrig ist. Dessen Position ist die Flavius-Zahl von m und n. Es ist also eine Funktion
Flavius(m, n: INTEGER): INTEGER
zu schreiben, in der das Abzählen simuliert wird! 

When we tabulate the values of n and f(n) we see a pattern:
n     1 	2 	3 	4 	5 	6 	7 	8 	9 	10 	11 	12 13	14 15 16
(n) 	1 	1 	3 	1 	3 	5 	7 	1 	3 	5 	7     9  11 13 15 1



CC 21004 SNCF Epoche IV, Digitalschnittstelle, Jouef HJ2139 NEU SUPERMODELL.
Die CC 21000 wurde zwischen 1969 und 1974 in 4 Exemplaren für den schweren gemischten Dienst beschafft. Es handelt sich um eine Mehrsystemlok, die sowohl im 1500 Volt Gleichstromnetz wie im 25000 Volt Wechselstromnetz betrieben werden kann. 2 unterschiedliche Fahrstufen erlauben eine Ansteuerung als hoch leistungsstarke Güterzuglok oder als bis zu 220 km/h schnelle Personenzuglok.
Die wuchtige Maschine zählt zur Type der "Nez cassés" mit der charakteristischen gezackten Front. Die Mehrsystemfähigkeit zeigt sich äußerlich an den drei Pantographen mit teilweise Doppelschleifstücken. Alle Details dieser Lok werden vom Jouef Modell perfekt getroffen. Diese Modellgeneration ist absolut akuteller Modellbau und hat nichts mit den früheren Modellen derselben Firma gemein.
Als Mehrsystemlokomotive war die CC 21000 in der Lage, die TEE Züge Cisalpin und Arbalete zwischen Dijon und Vallorbe zu befördern. Wer die schönen INOX Wagen von L.S. Models oder Jouef besitzt, für den wird mit diesem langersehnten Modell ein Wunsch wahr. So kann die Übergabe in Vallorbe an die Re 4/4 II TEE der SBB nachgestellt werden. Mit beiden Loks ist dieser Zug ein Augenschmaus. Eine CC 21000 war jahrelang nicht im Programm der Modellbahn-Hersteller.

    Das Modell ist unbespielt und in absolutem Neu-Zustand.
    Probefahrt vor- und rückwärts einwandfrei.
    Filigrane Pantographen, teilweise mit Doppelschleifstücken.
    Absolut gleichmäßiger und leiser Lauf, hervorragende Langsamfahreigenschaften..
    Wechselndes Spitzenlicht.
    Äußerst fein detailliertes Gehäuse mit perfekt lupenreiner Beschriftung.
    Das Modell wird mit zahlreichen Zurüstteilen verfeinert, Zurüstbeutel liegen bei.
    Der abgebildete SNCF INOX Wagen dient nur der Illustration einer sinnvollen Zugbildung, der Wagen ist im Angebot nicht enthalten.
    Originalverpackung mit Papieren und vollständigen Zurüstteilen.
    Weitere Modelle der Epochen III und IV in anderen Auktionen.
    
    
unit MainUnit;

interface

uses
  inifiles, Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, IdComponent, IdTCPConnection, IdTCPClient, IdMessageClient,
  IdSMTP, ComCtrls, StdCtrls, Buttons, ExtCtrls, IdBaseComponent, IdMessage;

type
  TMailerForm = class(TForm)
    MailMessage: TIdMessage;
    pnlTop: TPanel;
    pnlBottom: TPanel;
    ledHost: TLabeledEdit;
    Body: TMemo;
    ledAttachment: TLabeledEdit;
    btnAttachment: TBitBtn;
    SMTP: TIdSMTP;
    ledFrom: TLabeledEdit;
    ledTo: TLabeledEdit;
    ledCC: TLabeledEdit;
    ledSubject: TLabeledEdit;
    btnSendMail: TBitBtn;
    StatusMemo: TMemo;
    AttachmentDialog: TOpenDialog;
    procedure btnSendMailClick(Sender: TObject);
    procedure SMTPStatus(ASender: TObject; const AStatus: TIdStatus;
      const AStatusText: String);
    procedure btnAttachmentClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
  private
    procedure GetSettings;
    procedure SaveSettings;
  public
    { Public declarations }
  end;

var
  MailerForm: TMailerForm;

implementation

//{$R *.dfm}

procedure TMailerForm.btnSendMailClick(Sender: TObject);
begin
  StatusMemo.Clear;

  //setup SMTP
  SMTP.Host := ledHost.Text;
  SMTP.Port := 25;

  //setup mail message
  MailMessage.From.Address := ledFrom.Text;
  MailMessage.Recipients.EMailAddresses := ledTo.Text + ',' + ledCC.Text;

  MailMessage.Subject := ledSubject.Text;
  MailMessage.Body.Text := Body.Text;

  if FileExists(ledAttachment.Text) then
    TIdAttachment.Create(MailMessage.MessageParts, ledAttachment.Text);

  //send mail
  try
    try
      SMTP.Connect(1000);
      SMTP.Send(MailMessage);
    except on E:Exception do
      StatusMemo.Lines.Insert(0, 'ERROR: ' + E.Message);
    end;
  finally
    if SMTP.Connected then SMTP.Disconnect;
  end;

end; (* btnSendMail Click *)

procedure TMailerForm.SMTPStatus(ASender: TObject; const AStatus: TIdStatus;
  const AStatusText: String);
begin
  StatusMemo.Lines.Insert(0,'Status: ' + AStatusText);
end; (* SMTP Status *)

procedure TMailerForm.btnAttachmentClick(Sender: TObject);
begin
  if AttachmentDialog.Execute then
    ledAttachment.Text := AttachmentDialog.FileName;
end;

procedure TMailerForm.FormCreate(Sender: TObject);
begin
  GetSettings;
end;

procedure TMailerForm.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  SaveSettings;
end;

procedure TMailerForm.GetSettings;
var
  ini : TIniFile;
begin
  Ini := TIniFile.Create(ChangeFileExt(Application.ExeName,'.ini'));
  try
    ledHost.Text := ini.ReadString('SMTP','Host','');

    ledFrom.Text := ini.ReadString('MAIL','From','');
    ledTo.Text := ini.ReadString('MAIL','To','');
    ledCC.Text := ini.ReadString('MAIL','CC','');
  finally
    ini.Free;
  end;
end; (* GetSettings *)

procedure TMailerForm.SaveSettings;
var
  ini : TIniFile;
begin
  Ini := TIniFile.Create(ChangeFileExt(Application.ExeName,'.ini'));
  try
    ini.WriteString('SMTP','Host',ledHost.Text);

    ini.WriteString('MAIL','From',ledFrom.Text);
    ini.WriteString('MAIL','To',ledTo.Text);
    ini.WriteString('MAIL','CC',ledCC.Text);
  finally
    ini.Free;
  end;
end; (* SaveSettings *)

end.
    
    
    
begin
  IDSMTP1 := TIDSMTP.Create;
  IdSSLIOHandlerSocketOpenSSL1 := TIdSSLIOHandlerSocketOpenSSL.Create;
  try

    with IDSMTP1 do
    begin
      Host := srvr.Host;
      Port := srvr.Port;
      if (srvr.needAuthentication = 'Y') then
        AuthType := satDefault
      else
        AuthType := satNone;
      IOHandler := IdSSLIOHandlerSocketOpenSSL1;

      if (srvr.secureMode = 'Y') then
        UseTLS := utUseRequireTLS
      else
        UseTLS := utNoTLSSupport;

      Username := srvr.Username;
      Password := srvr.Password;
    end;

    idMBHTML := TIdMessageBuilderHTML.Create;
    Idmessage1 := TIDMessage.Create;

    try
      with idMBHTML do
      begin
        enc := TEncoding.Unicode;
        HTML.LoadFromStream(FEmlMsg.MsgBody, enc);
        for c := 0 to FEmlMsg.Attachmnts.Count - 1 do
          Attachments.Add(FEmlMsg.Attachmnts[c]);
        FillMessage(IDMessage1);
      end;

      with Idmessage1 do
      begin
        Subject := FEmlMsg.MsgSubject;
        From.Address := FEmlMsg.FromAddress;
        From.Name := FEmlMsg.FromName;
        Recipients.EMailAddresses := FEmlMsg.RecipientAddress;
        if FEmlMsg.ReceiptRecipientAddress <> '' then
          ReceiptRecipient.Address := FEmlMsg.ReceiptRecipientAddress;
        if FEmlMsg.ReceiptRecipientName <> '' then
          ReceiptRecipient.Name := FEmlMsg.ReceiptRecipientName;
      end;

      with IDSMTP1 do begin
        if not Connected then
          Connect;
        Send(IdMessage1);
      end;

    finally
      Idmessage1.Free;
      idMBHTML.Free;
    end;
  finally
    IDSMTP1.Free;
    IdSSLIOHandlerSocketOpenSSL1.Free;
  end;
end;    


Mar 24, 2012 – Outgoing Mail (SMTP): mail.hover.com ... If you're unable to send email, switch to port 465 (if SSL is enabled) or port 587 or ... This means, all your messages and folders will be available to you no matter what device you are ...


Lieber Beat

Lass und vor Ostern noch Postern:

Anbei unten eine graphische Lösung, die dem Studi den Verlauf des Eliminierens Zeile für Zeile, d.h. Kreis für Kreis zeigt:

In einem dynamischen eindimensionalen Array ist die '1' für Personen und 'X' für Gefallene definiert.
Die Lösung ist wesentlich einfacher und intuitiver als bei einem 2D Array.

Für dich hab ich noch einen Einstieg in die maXbox, du kannst dann den Code kopieren und mit Compile laufen lassen:

http://www.softwareschule.ch/blix.htm

du weisst ja, Programmieren geht über Studieren!


procedure josephusProblem_Graphic(n,k: integer);
var i,p,kt: smallint;
    aist: array of char;
begin
     SetArrayLength(aist,n);
     kt:= k;
     p:= 0;
     for i:= 0 to length(aist)-1 do aist[i]:= '1';//init array
     while kt <= length(aist) do begin   
       for i:= 0 to length(aist)-1 do begin
         if aist[i]= '1' then inc(p);
         if p = k then begin
           aist[i]:= 'X';
           inc(kt);
           p:= 0;
         end;
       end;
       for i:= 0 to length(aist)-1 do  //line out
         write(aist[i]+ ' ');
       writeln('');
     end;
     for i:= 0 to length(aist) -1 do  //solution out
        if aist[i]= '1' then writeln('Sol '+inttoStr(i+1));
  end;


  #include <stdio.h>
02.#include <stdlib.h>
03.#include <time.h>
04. 
05.static int verteilung[30 + 1 - 5];
06.#define V(summe) verteilung[(summe) - 5]
07. 
08.int main(void)
09.{
10.long summe;
11.int i, j;
12. 
13.srandom(time(NULL));
14. 
15.for (i = 0; i < 1000; i++) {
16.summe = 0;
17.for (j = 0; j < 5; j++)
18.summe += (((long) random()) % 6) + 1;
19.V(summe)++;
20.}
21. 
22.for (i = 5; i <= 30; i++)
23.printf("%d: %d\n", i, V(i));
24. 
25.return EXIT_SUCCESS;
26.}


// shows circel rounds as lines, '1' survived, 'X' is dead
02.// http://www.softwareschule.ch
03.//
04.procedure josephusProblem_Graphic(n,k: integer);
05.var i,p,kt: smallint;
06.aist: array of char;
07.begin
08.SetArrayLength(aist,n);
09.kt:= 2; //or k
10.p:= 0;
11.for i:= 0 to length(aist)-1 do aist[i]:= '1'; //init array
12.while kt <= length(aist) do begin  
13.for i:= 0 to length(aist)-1 do begin
14.if aist[i]= '1' then inc(p);
15.if p = k then begin
16.aist[i]:= 'X';
17.inc(kt);
18.p:= 0;
19.end;
20.end;
21.for i:= 0 to length(aist)-1 do  //line out
22.write(aist[i]+ ' ');
23.writeln('');
24.end;
25.for i:= 0 to length(aist) -1 do  //solution out
26.if aist[i]= '1' then writeln('Sol '+inttoStr(i+1));
27.end;
28. 
29. 
30.call:
31.josephusProblem_Graphic(41,3);
32. 
33.output:
34.1 1 X 1 1 X 1 1 X 1 1 X 1 1 X 1 1 X 1 1 X 1 1 X 1 1 X 1 1 X 1 1 X 1 1 X 1 1 X 1 1
35.X 1 X 1 X X 1 1 X X 1 X 1 X X 1 1 X X 1 X 1 X X 1 1 X X 1 X 1 X X 1 1 X X 1 X 1 X
36.X 1 X 1 X X X 1 X X 1 X X X X 1 1 X X X X 1 X X 1 X X X 1 X 1 X X X 1 X X 1 X X X
37.X 1 X 1 X X X X X X 1 X X X X 1 X X X X X 1 X X 1 X X X X X 1 X X X 1 X X X X X X
38.X 1 X 1 X X X X X X X X X X X 1 X X X X X 1 X X X X X X X X 1 X X X 1 X X X X X X
39.X X X 1 X X X X X X X X X X X 1 X X X X X X X X X X X X X X 1 X X X 1 X X X X X X
40.X X X X X X X X X X X X X X X 1 X X X X X X X X X X X X X X 1 X X X X X X X X X X
41.X X X X X X X X X X X X X X X 1 X X X X X X X X X X X X X X 1 X X X X X X X X X X
42.X X X X X X X X X X X X X X X X X X X X X X X X X X X X X X 1 X X X X X X X X X X
43.Sol 31


11X11X11X11X11X11X11X11X11X11X11X11X11X11X11X11X11X
11XX1X1XX11XX1X1XX11XX1X1XX11XX1X1XX11XX1X1XX11XX1X
1XXX1X1XXX1XX1XXXX11XXXX1XX1XXX1X1XXX1XX1XXXX11XXXX
1XXX1XXXXX1XX1XXXXX1XXXX1XXXXXX1X1XXXXXX1XXXX1XXXXX
1XXX1XXXXXXXX1XXXXX1XXXXXXXXXXX1X1XXXXXXXXXXX1XXXXX
1XXXXXXXXXXXX1XXXXX1XXXXXXXXXXXXX1XXXXXXXXXXX1XXXXX
XXXXXXXXXXXXX1XXXXX1XXXXXXXXXXXXXXXXXXXXXXXXX1XXXXX
XXXXXXXXXXXXX1XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX1XXXXX
XXXXXXXXXXXXX1XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX



Backtracking (Rekursion)

Zeige mit einer Rekursion, dass ein Wort rückwärts gelesen wird.

 function backTrackWord(ac: string): string;
0 Kommentare (ansehen)
0 Lösung(en) (ansehen)
Verifikation/Checksumme: (ansehen)
Aktionen

Bewertung

Durchschnittliche Bewertung:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20

Eigene Bewertung:
1
2
3
4
5

Meta
Zeit: 	1
Schwierigkeit: 	Mittel
Webcode: 	kynx-z7dy
Autor: 	()

Download PDF

Download ZIP

Zu Aufgabenblatt hinzufügen
