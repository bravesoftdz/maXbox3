program puzzleGame_BitMapSolution;

//*********************************************************************
// logic game example with objects & structure, loc's=228, example 75  
// you have to move letters/numbers in the box to the right word order;)
// first you define a pattern (word) and remove the word with the 
// function secret(); second someone else has to solve it (with solver())
//*********************************************************************


var
  pForm: TForm;
  myimage: Timage;
  
  imageList: TStringList;
  maxx, maxy, psize, maxtot: integer;
  im_y: array[1..8] of integer;
  ok_x: array[1..8] of integer;
  ok_y: array[1..8] of integer;


procedure Verify;
var
  i, nbok: integer;
  o: TImage;
begin
  nbok:= 0;
  for i:= 1 to maxtot do begin
    o:= TImage(imagelist.objects[i-1]);
    if (o.tag=ok_x[strtoint(o.hint)])
     and  (im_y[strtoint(o.hint)]= ok_y[strtoint(o.hint)])
    //(o.lbly=o.oky))
     then
      inc(nbok);
  end;
  if (nbok=maxtot) then
     showMessage('***Congratulations***'#13#10+
                             'You win with maXbox Delphi.Win32 !');
end;

procedure moveStone(o: TImage);
begin
  //maxy:= 2
  if (o.tag + 1 = maxx) and (im_y[strtoint(o.hint)] = maxy) then begin
    //right move
    o.tag:= o.tag +1;
    o.Left:= o.Left + psize +1;
    o.Top:= o.Top;
    dec(maxx);
  end else
  if (o.tag - 1 = maxx) and (im_y[strtoint(o.hint)] =maxy) then begin
    //left move
    o.tag:= o.tag -1;
    o.Left:= o.Left - psize -1;
    o.Top:= o.Top;
    inc(maxx);
  end else
  if (o.tag = maxx) and (im_y[strtoint(o.hint)]-1 = maxy) then begin
    //top move up
    im_y[strtoint(o.hint)]:= im_y[strtoint(o.hint)] -1
    o.Left:= o.Left;
    o.Top:= o.Top - psize -1;
    inc(maxy);
  end else
  if (o.tag = maxx) and (im_y[strtoint(o.hint)]+1 = maxy) then begin
    //bottom move down
    im_y[strtoint(o.hint)]:= im_y[strtoint(o.hint)] +1
    //writeln(inttostr(im_y[strtoint(o.hint)]))
    o.Left:= o.Left;
    o.Top:= o.Top + psize +1;
    dec(maxy);
  end;
  //verify if stones are in right order 
  //verify()
end;

procedure Image1Click(Sender: TObject);
begin
  moveStone(TImage(Sender));
  verify();
end;

procedure Meltpuzzle;
var
  i, nbplace, y, x: integer;
begin
  nbplace:= 0;
  x:= 1;
  y:= 1;
  for i:= 0 to maxtot-1  do begin
    //autosize as place
    TImage(imagelist.objects[i]).autosize:= false;
    TImage(imagelist.objects[i]).Visible:= false;
  end;
  //RANDOMIZE;
  i:= 0;
  while (nbplace < maxtot ) do begin
    //i:= random(maxtot);
    //if not(TMyLabel(labellist.objects[i]).place) then begin
      inc(nbplace);
      with TImage(imagelist.objects[i]) do begin
        //autosize:= true;
        Visible:= true;
       writeln('obj second'+inttostr(im_y[i+1])+hint)
       im_y[i+1]:= y;
      //ALeft, ATop, AWidth, AHeight
        Left:= (x-1)*(psize + 1);
        Top:= (y-1)*(psize + 1);
        //setbounds(left, top, 60, 60)
      end;
      inc(x);
      inc(i);
      if (x mod maxx=1) then begin
        x:= 1;
        inc(y);
      end;
    //end; //if
   end; //while
end;

procedure loadPForm;

begin
  maxx:= 3
  maxy:= 3
  psize:= 164
  maxtot:= (maxx*maxy)-1;
  //constructor
  pform:= Tform.create(self);
  {myimage:= TImage.create(self);
  myimage.parent:= pform;
  myimage.picture.bitmap.loadfromFile('citymax.bmp')
  myimage.width:= pform.width;
  myimage.height:= pform.height;}
  with pform do begin
    caption:= 'this is maXMap II';  
    width:= (maxx*psize)+ 10;
    height:= (maxy*psize)+ 30;
    BorderStyle:= bsDialog;
    Position:= poScreenCenter;
    show;
  end  
end;

procedure InitPuzzle;
var
  i,x,y: integer;
  pattern: string;
begin
  pattern:= 'MAXBOX25';
  //puzzle word
  //pattern:= 'SOFTWARE';
  //pattern:= 'DELPHI07';
  imagelist:= TStringList.Create;
  x:= 1;
  y:= 1;
  for i:= 1 to maxtot do begin
    //mylabel:= TMyLabel.Create(pform);
    myimage:= TImage.Create(pform);

    with myimage do begin
      Parent:= pForm;
      //color:= clblue;
      AutoSize:= false;
      picture.bitmap.loadfromFile('..\maxbox3\examples\citymax.bmp')
      //picture.bitmap.height:= 30+ 30*i;
      //picture.bitmap.bottom
      //picture.bitmap.left:= 50;
      center:= tacenter;
      width:= psize;
      height:= psize;
      //hint is object_id;
      hint:= inttostr(i);
      tag:= x;
      im_y[i]:= y
      ok_x[i]:= x
      ok_y[i]:= y
   end;
    //set next line of stones
    if (i mod maxx=0) then begin
      x:= 1; 
      inc(y);
    end else
      inc(x);
    //if length(pattern)=maxtot then
      //mylabel.caption:= pattern[i] else begin
        //writeln('pattern must have size of puzzle -1: '+ inttoStr(maxtot));
        //exit;
      //end
    //event handler to click!  
    myimage.OnClick:= @Image1Click;
    //add stones to the list
    //labellist.addObject(inttostr(i), mylabel);
    imagelist.addObject(inttostr(i), myimage);
  end;
end;

procedure secret;
begin
  moveStone(TImage(imagelist.objects[7]));
  moveStone(TImage(imagelist.objects[4]));
  //moveStone(TMyLabel(labellist.objects[1]));
end;


procedure testVerify;
begin
  //moveStone(TMyLabel(labellist.objects[7]));
  //moveStone(TMyLabel(labellist.objects[7]));
end;


//var i: integer;

//main of puzzle
begin
//**************************** OOP in 20 Days *******************************
  loadPForm();
  initPuzzle();
  meltPuzzle(); 
  secret()  
  //testVerify

  //to demonstrate and destroy the objects on the list
  {for i:= 0 to 8-1 do begin
  sleep(400)
  application.processMessages;
    TMylabel(labellist.objects[i]).free
  end}
end.
         ____    ___   _      ____    _   _   _
        |  _ \  |  _| | |    |  _ \  | | | | | |
        | | . | | |_  | |    | |_| | | |_| | | |
        | | | | |  _| | |    |  __/  |  _  | | |          
        | |_. | | |_  | |__  | |     | | | | | |                      
        |____/  |___| |____| |_|     |_| |_| |_| 
          
