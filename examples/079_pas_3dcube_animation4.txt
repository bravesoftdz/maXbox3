program HouseBuild_Animation4;
//program DHouse;
//*********************************************************************
// example for analyzing and play with 3D aninmation loc's=169, ex. 79  
// you have to change sleep() for speed adaption
// experiment with speed() or and refresh/rectangle for effects 
//*********************************************************************

type
  THaus = array[1..10] of record             { Rohdaten }
     x,y,z: Integer;
  end;       

  TFolge = array[1..20] of byte;             { Punktfolge }

  TRPoint = record
    x,y: integer;
  end;

var
  cFrm, cFrm1, cFrm2, cFrm3: TForm;
  Alpha, Beta, Mx, My: Integer;    { Drehwinkel mit Startwerten }
  Groesse, a: extended;       { Hausgroesse }
  Haus: THaus;
  Folge: TFolge;
  Taste: char;
  Haus3D: array[1..10] of TRPoint;


procedure loadHouseArray;
 begin
 Haus[1].x:= -55;  Haus[1].y:= -120;  Haus[1].z:= -75;
 Haus[2].x:= -55;  Haus[2].y:= -120;  Haus[2].z:= 0;
 Haus[3].x:= 0;    Haus[3].y:= -120;  Haus[3].z:= 75;
 Haus[4].x:= 55;   Haus[4].y:= -120;  Haus[4].z:= 0;
 Haus[5].x:= 55;   Haus[5].y:= -120;  Haus[5].z:= -75;
 Haus[6].x:= 55;   Haus[6].y:= 120;   Haus[6].z:= -75;
 Haus[7].x:= 55;   Haus[7].y:= 120;   Haus[7].z:= 0;
 Haus[8].x:= 0;    Haus[8].y:= 120;   Haus[8].z:= 75;
 Haus[9].x:= -55;  Haus[9].y:= 120;   Haus[9].z:= 0;
 Haus[10].x:= -55; Haus[10].y:= 120;  Haus[10].z:= -75;

 Folge[1]:= 5; Folge[2]:= 1; Folge[3]:= 2; Folge[4]:= 3;  
 Folge[5]:= 4; Folge[6]:= 5; Folge[7]:= 6; Folge[8]:= 7;  
 Folge[9]:= 8; Folge[10]:= 9; Folge[11]:= 10; Folge[12]:= 6;  
 Folge[13]:= 7; Folge[14]:= 4; Folge[15]:= 3; Folge[16]:= 8;  
 Folge[17]:= 9; Folge[18]:= 2; Folge[19]:= 1; Folge[20]:= 10;  
end; 
 

procedure Projektion(Alpha, Beta,             { Drehwinkel }
                     Mx, My: Integer;   { Mittelpunkt }
                     Groesse: extended; vFrm: TForm);  { Vergroesserung}
var  SinA, SinB, CosA, CosB: extended;     { Zwischenvariablen }
     Lauf : Integer;

begin { Projektion }
  SinA:= Sin(Alpha/180*Pi);          { Bogenmassberechnungen auáerhalb }
  SinB:= Sin(Beta/180*Pi);                 { der Schleife, um }
  CosA:= Cos(Alpha/180*Pi);            { Rechenzeit zu sparen }
  CosB:= Cos(Beta/180*Pi);
  for Lauf:= 1 to 10 do                        { Umrechnungen }
    with Haus[Lauf] do begin 
      Haus3D[Lauf].x:=  Round((CosA * Haus[Lauf].x - Haus[Lauf].y * SinA)
                              * Groesse) + Mx ;
      Haus3D[Lauf].y:= Round(((Haus[Lauf].x*SinA + Haus[Lauf].y*CosA)*CosB
                                + Haus[Lauf].z*SinB)*Groesse) + My;
    end; { with }
   vFrm.canvas.pen.width:= 4; 
   vFrm.canvas.MoveTo(Haus3D[Folge[1]].x, Haus3D[Folge[1]].y);
  //{ Zeichne Hausansicht }
  for Lauf:= 2 to 20 do                 
      vFrm.canvas.LineTo(Haus3D[Folge[Lauf]].x,Haus3D[Folge[Lauf]].y);
  sleep(25)    
end; { Projektion }


procedure FormKeyPress(Sender: TObject; var Key: Char);
begin
 Taste:= Key;
 //cFrm.canvas;
end;


procedure LoadForm;
begin
  Alpha:= 45;    { Drehwinkel mit Startwerten }
  Beta:= -105;
  Groesse:= 1.5;      
  cFrm:= TForm.create(self);
  cFrm1:= TForm.create(self);
  cFrm2:= TForm.create(self);
  with cFrm do begin
    caption:= '3D House Animation - press X or Z, end with Q';  
    BorderStyle:= bsDialog;
    color:= clred;
    height:= 440;
    width:= 450;
    onKeyPress:= @FormKeyPress
    //color:= clblack;
    show;
  end; 
   with cFrm1 do begin
    caption:= '3D House Animation - press X or Z, end with Q';  
    BorderStyle:= bsDialog;
    color:= clpurple;
    Position:= poScreenCenter;
    height:= 440;
    width:= 450;
    onKeyPress:= @FormKeyPress
    //color:= clblack;
    show;
  end;  
  with cFrm2 do begin
    caption:= '3D House Animation ';  
    Position:= poDesigned  //poDesktopCenter;
    BorderStyle:= bsDialog;
    color:= cllime;
    setbounds(880,320,450,440);
    onKeyPress:= @FormKeyPress
    //color:= clblack;
    show;
  end  
end;

 
//main house circle
begin
//************* maXbox graphics serie***************************************
  //ProcessMessagesOFF;
  loadForm;                   
  loadHouseArray;
  //Cross(200,200, 240, clBlue)
  Mx:= cFrm.width div 2;                   { Hausmitte berechnen }
  My:= cFrm.height div 2;
  repeat
    Projektion(Alpha,Beta,Mx,My,Groesse, cFrm);      { Haus zeichnen }
    Projektion(Alpha,Beta,Mx,My,Groesse, cFrm1); 
    Projektion(Alpha,Beta,Mx,My,Groesse, cFrm2); 
    application.processMessages;
    a:= 1.05;
    case Taste of
     'g': Groesse:= Groesse * 1.05;                 
     'k': groesse:= groesse / 1.05; 
     's': begin
           repeat
             Groesse:= Groesse / a;
             Projektion(Alpha,Beta,Mx,My,Groesse, cFrm); 
             application.processMessages;    
             a:= a+0.1;
           until Taste = 'q';
             groesse:= 1.5;
           end; 
     'l' :  Dec(Mx);                           { nach links }
     'r' : Inc(Mx);                          { nach rechts }
     'u' : Inc(My);                           { nach unten }
     'o' : Dec(My);                            { nach oben}        
     'x' : Inc(Beta);                       { drehen um x-Achse }
     'c' : Dec(Beta);                          { back }
     'z' : Inc(Alpha);                     { drehen um z-Achse }
     't' : Dec(Alpha);                       { back }     
     end; { case }
     //comment this out for more animation;
     cfrm.canvas.Rectangle(0, 0, cfrm.Width, cfrm.Height);
     cfrm1.canvas.Rectangle(0, 0, cfrm1.Width, cfrm1.Height);
     cfrm2.canvas.Rectangle(0, 0, cfrm2.Width, cfrm2.Height);
     //cfrm.canvas.refresh;
  until Taste = 'q';
  if Taste = 'q' then begin
     cfrm.Free;
     cfrm1.Free;
     cfrm2.Free;
  end;  
  //Projektion(Alpha,Beta,Mx,My,Groesse, cFrm);      { Haus zeichnen } 
end.

just inside maxbox
         ____    ___   _      ____    _   _   _
        |  _ \  |  _| | |    |  _ \  | | | | | |
        | | . | | |_  | |    | |_| | | |_| | | |
        | | | | |  _| | |    |  __/  |  _  | | |          
        | |_. | | |_  | |__  | |     | | | | | |                      
        |____/  |___| |____| |_|     |_| |_| |_| 
                                     

TPosition describes the positioning of a form.

TPosition consists of the following values:

Value 	Meaning

poDesigned
	

The form appears positioned on the screen and with the same height and width as it had at design time.

poDefault
	

The form appears in a position on the screen and with a height and width determined by the operating system.

poDefaultPosOnly
	

The form displays with the size you created it at design time, but the operating system chooses its position on the screen.

poDefaultSizeOnly
	

The form appears in the position you left it at design time, but the operating system chooses its size.

poScreenCenter
	

The form remains the size you left it at design time, but is positioned in the center of the screen. Note that in multi-monitor applications, this may result in a form that does not fall entirely on one monitor, because CLX does not include multi-monitor support.

poDesktopCenter
	

The form remains the size you left it at design time, but is positioned in the center of the screen.

poMainFormCenter
	

The form remains the size you left it at design time, but is positioned in the center of the application's main form. This position should only be used with secondary forms. If set for a main form, it acts like poScreenCenter.

poOwnerFormCenter
	

The form remains the size you left it at design time, but is positioned in the center of the form specified by the Owner property. If the Owner property does not specify a form, this position acts like poMainFormCenter. 