PROGRAM HeartBeatPlot_FunctionPlotter;
//shows structure of procedure types, max@kleiner.com
//compilerswitch $N+ turns the coprocessor on, loc's =238
//preconditions: file ...examples\ecg2.csv

//{$I ..\maxbox3\pas_includebox.inc}

const 
 DIM = 5100;
 PI2 = 5.1415926535897932384626433832795;
   E = 2.718281828459;
   HEARTFILE= 'examples\ecg2.csv';

type
  TSinglePoint1 = record
    X,Y: single;
  end; 
  
  TMath_Func = PROCEDURE (var x: single);
  TXYVector1 = array of TSinglePoint1; 

var 
  fct1x, fct3x, fct4x: TMath_Func;
  cFrm: TForm;
  dlist: TStringlist;
  zoom: boolean;
  
  {Procedure fct_table2(start, amp, zoom, color: integer; FCT: TXYVector1;
                                        fct_name: string); forward; }
 procedure letHeartBeatPlot(zoom: boolean); forward;
                                     

procedure drawChart(vPoints: TXYVector1; cFrm: TForm; vcolor: integer);
var
  i, hsize: integer;
begin
  with cFrm.canvas do begin
    hsize:= cFrm.Height-1 div 2;
    Pen.Color:= vcolor;
    MoveTo(0, hsize-((round(vPoints[0].Y))));
    for i:= 0 to DIM do
      LineTo(i, round(vPoints[i].Y));
  end;
end;  

procedure PaintBox1Paint(sender: TObject);
begin
  //DrawChart(hPoints, cFrm, clred);
  letHeartBeatPlot(true);
  //writeln('paint');
end; 

procedure GraphMouseMove(Sender: TObject; Shift: TShiftState; X, Y: Integer);
begin
 cFrm.hint:= 'heartXY '+intToStr(x)+' : '+inttoStr(Y);
 //Application.ActivateHint(cFrm.ClientToScreen( Point(X + 10,Y - 10)));
 //writeln(inttostr(y));
end; 
  
procedure LoadForm;
begin
  cFrm:= TForm.create(self);
  with cFrm do begin
    caption:= 'maXFunCPlotter HeartBeatPlot(((((\*/)))))';  
    BorderStyle:= bsSizeable;
    height:= 600 ;
    width:= 1000;
    showhint:= true;
    color:= clblack;
    onResize:= @PaintBox1Paint;
    onMouseMove:= @GraphMouseMove
    Show;
  end;
  Application.HintPause:= 50; //default : 500
  Application.HintShortPause:= 250; //default : 50
  Application.HintHidePause:= 2000; //default : 2500
  Application.HintColor:= clYellow;  
end;

//-------------------------ADD math functions-------------------------------  
procedure fct4e(var x: single);
begin
   x:= power(E, -x);
end;

procedure fct3eSin(var x: single);
begin
  //power() means e^-x
   x:= power(E, -x) * (sin(pi2 * x));
end;

PROCEDURE fct1sin(var x: single);
BEGIN
   x:= Sin(pi*x);  //Cos(pi2*x);
END;
  
PROCEDURE fct2cos(var x: single);
var y: single;
BEGIN
  Y:= 0.05;
  //x:= -x*y/(power(x,2) + power(y,2));
  x:= Cos(pi2*x);
END;

PROCEDURE fctheart(var x: single);
BEGIN
  //x:= hpoints[i].x;
END;

  
PROCEDURE fct_table(start, amp, freq, color: integer; FCT: TMath_Func;
                                         fct_name: string);
var x: single;
    origy, i: Integer;
    fPoints: array[0..DIM] of TSinglePoint1;
BEGIN
  Writeln('x   |   ' + fct_name);
  origy:= cFrm.Height div 2;
  x:= start;
  for i:= 0 to (DIM) do begin
    x:= i/freq
    FCT(x);
    fPoints[i].Y:= origy+ (x * amp);
    //Writeln(floatToStr(x) +' | '+ floatToStr((tempx)));
    dlist.add(floattostr(x));
  end;
  DrawChart(fPoints, cFrm, color)
END;

PROCEDURE fct_table2(start,amp,zoom,color: integer; FCT: TXYVector1;
                                         fct_name: string);
var x: single;
    origy,i,a: Integer;
BEGIN
  Writeln('x   |   ' + fct_name);
  origy:= cFrm.Height div 2;
  x:= start;
  a:= 0;
  for i:= 0 to (DIM) div 2 do begin
    //x:= i/freq;
    if zoom = 1 then begin
      fCT[i].y:= fCT[a].y*x+amp ; //(x*amp);
      a:= a+2
    end else  
      fCT[i].y:= fCT[i].y*x+amp ; 
    //Writeln(floatToStr(hpoints[i+2].y));
  end;
  DrawChart(fCT, cFrm, color)
END;


procedure letHeartBeatPlot(zoom: boolean);
var i: integer;
    temp: ansistring;
    hdat: single;
    hPoints: array[0..DIM] of TSinglePoint1;
begin
  i:= 0;
  temp:= loadFileasString(exepath+HEARTFILE);
  repeat 
    try
      hdat:= stringtofloat(getString(temp,';'));
    except
      writeln('hdat exception...');
    end;
    Delete(temp,1,pos(temp,';'))
    hpoints[i].y:= hdat;
    inc(i);
    //until pos(temp,';') <> 0;
  until temp = '';
  writeln('heart dat size '+inttoStr(i));
  //(start, amp, zoom, color, func, title);
  fct_table2(-90, 220, integer(zoom), clred, hpoints, 'heartCos(x)');
end;


{ type TAxis = record        //{ Coordinate axis 
    Scale : TScale;
    Min   : Float;
    Max   : Float;
    Step  : Float;
  end;

procedure InitScale;
var   MaxCurv : Byte;
  XminPixel : Integer; 
  XmaxPixel : Integer; 
  YminPixel : Integer; 
  YmaxPixel : Integer; 
  //XminPixel := 0;
  XAxis: TAxis; 
  YAxis: TAxis; 
begin
   Xaxis.Scale:= LinScale;
   Xaxis.Min:= 0.0;
   Xaxis.Max:= 1.0;
   Xaxis.Step:= 0.2;  
   yaxis.Scale:= LinScale;
   Yaxis.Min:= 0.0;
   Yaxis.Max:= 1.0;
   Yaxis.Step:= 0.2;  
   MaxCurv:= 0;
   XminPixel:= 0;
   XmaxPixel:= 100;
   YminPixel:= 0;
   YmaxPixel:= 100;
//   = (Scale : LinScale; Min : 0.0; Max : 1.0; Step : 0.2);
end;  }

procedure maskPlotGrid;
begin
  if not InitGraphics(cFrm.Width, cFrm.Height) then Exit;
  //InitScale;
  SetWindow(cFrm.Canvas, 9,90,10,60, True);
  cfrm.Canvas.Pen.Color:= clGreen;
  PlotOxAxis(cFrm.Canvas);
  PlotOyAxis(cFrm.Canvas);
   // cfrm.Canvas.Pen.Color:= clwhite;
  PlotGrid(cFrm.Canvas, BothGrid);
  {Npts := 120;
  Color := clBlue; }
  SetLineParam(1, psSolid, 50, clWhite);
end;  

//main function_p call 
var amp, freq: byte;

BEGIN
  //calls the proc with a function var
  IncludeOFF;
  amp:= 40;
  freq:= 440;   //default
  loadForm
  maskPlotGrid;
  fct1x:= @fct1sin
  fct3x:= @fct3eSin
  fct4x:= @fct4e;
  dlist:= TStringlist.create;
 
  {CSVtoTags(slist,dlist) 
  for i:= 0 to dlist.count-1 do 
    writeln(dlist[i]); }
    //with JVcsvParse.create do begin
  letHeartBeatPlot(true);      //zoom fix
  
   //until last is 1.223
  dlist.free;
  //maxform1.memo1.name:= clblue;
  fct_table(230, amp, freq, clblue, fct1x, 'Sin(x)');
  fct_table(50, amp, freq, clyellow, @fct2cos, 'Cos(x)');
  //fct_table(30, amp, freq, cllime, fct3x, 'ESin(x)');
  //fct_table(30, amp, freq, clblue, fct4x, 'E(x)');
End.

http://www.nzz.ch/aktuell/digital/die-totale-selbstbespiegelung-1.18057629


I have an application where I want to show a hint in a mouse move event. The mouse move procedure seems to be working correctly as I am able to update a caption on a label on the form correctly. But the hint does not show. The control with the mouse move event is on a panel, which is on a page, which is on a form. I have set the ShowHint property to true on all the parent components.

Here is some code from my FormCreate event. This form is not the main form of the application, if that matters.

Application.ShowHint := true; //definitions for hints
Application.HintPause := 50; //default : 500
Application.HintShortPause := 50; //default : 50
Application.HintHidePause := 2000; //default : 2500
Application.HintColor := clYellow;

Here is some code from the MouseMove event:

if shp = nil then begin
GIS_Viewer.Hint := '';
GIS_Viewer.ShowHint := false;
end
else
begin
str := shp.GetField(Configuration.RegionLookupGIS.RegionIDAttribute);
GIS_Viewer.Hint := str;
GIS_Viewer.ShowHint := true;
Application.ActivateHint( ClientToScreen( Point(X + 10,Y - 10) ) );
Label7.Caption := str;
end;


----code_cleared_checked----