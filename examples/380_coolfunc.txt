program Realtime_Cool_Functions;

//mX3 directory change, preparation for RealTime Tutorial 23
//shows download with IndySockets on maXbox webbox ex. 109, #locs=777
//G9 was the band of the Neukühl Epoch!
//#sign>max: APSN21: 08.09.2013 09:39:07 
//#head:max: APSN21: 08.09.2013 09:39:07 E:\maxbox\maxbox3\examples\380_coolfunc.txt 
//#tech!perf: 0:0:1.47 threads: 2 192.168.1.53 09:39:07 3.9.9.8

 {$Define AT}

 {$Define ATA=512}

 {$Define ATAT=time}
 
function  timeGetTimeDLL: Longint;
   external 'timeGetTime@winmm.dll stdcall';
   
function  QueryPerformanceFrequencyDLL(var lfreq: int64): bool;
   external 'QueryPerformanceFrequency@kernel32.dll stdcall';

function  QueryPerformanceCounterDLL(var lcount: int64): bool;
   external 'QueryPerformanceCounter@kernel32.dll stdcall';



type
    TCoin = array[0..1] of shortstring;

const mp3song = 'G9_vision.mp3';  //Default
      NCoins = 10;
      NDice = 8;
      ATA=512;
      BaseURL = 'http://ecs.amazonaws.com/onca/xml?';


var mXpath: string;
    idHTTP: TIDHTTP;
    zipStream: TFileStream;
    RandSeed: longint;
    //int2: TLargeInteger;
   // xmlIssue: TXMLDocument;
   //mst: TStreamReader;    //System.Classes.TStreamReader.pas
   //aca: TCharArray;
   //ats: TService;
   //atevent: TEventType;
   atx: TTextStream;
   //timeres: DWord;
   StartExec, EndExec, PerfFreq: Int64;
    

function MSecToTime(mSec: Int64): string;
var dt: TDateTime;
    //aft: cchar;
    //trec: TTimeStamp;
    //ts: TStreamOriginalFormat;
    //stst: TSTString;
begin
  dt:= (mSec/1000/86400);  //SecsPerDay;
  Result:= FormatDateTime('" song length is:" nn:ss:zzz',dt) ;
  //stuffString;
  //extract
  //explode
  //isuppercase
  //caseof
  //countstr
  //before
  //NetAddrToStr
  //HostAddrToStr
  //XMLEncode
   //checksynchronize
   //WriteObjectResourceHeader
    // TestStreamFormat
     //bigPI
     //getresourcename 
     //StrTobytes
      
end; 

procedure BeforeDestroyObj(Sender:TComponent);
var i: Integer;
 begin
  with Sender do
   for i:=0 to componentcount-1 do begin
    if (components[i] is TEdit) and (TEdit(components[i]).Tag<> 0) then
     //Dispose(PtrImp(TcwEdit(components[i]).FImport));
    if (components[i] is TTable) then if TTAble(Components[i]).State <> dsBrowse then begin
     {if prOracle In glbCLParams then TTAble(Components[i]).UpdateMode:=UpWhereKeyOnly;}
     if TTAble(Components[i]).Modified then TTAble(Components[i]).Post else TTAble(Components[i]).Cancel;
    end;
   end;
 end;
 
 function RefStringListCopy(aRefArray:TStringlist):TStringList;
  var i,e:LongInt;
 begin
  result:=TStringList.Create;
  for i:=0 to aRefArray.Count-1 do begin
   Result.AddObject(aRefArray.Strings[i],TStringList.Create);
   for e:=0 to TStringList(aRefArray.Objects[i]).Count-1 do
    TStringList(Result.Objects[i]).AddObject(TStringList(aRefArray.Objects[i]).Strings[e],
     TStringList(aRefArray.Objects[i]).Objects[e]);
  end;
 end;


procedure Win32Funcs;
begin
 //MessageBeep( uType : UINT) : BOOL');
 //ShowCursor( bShow : BOOL) : Integer');
 //SetCursorPos( X, Y : Integer) : BOOL');
 //SetCursor( hCursor : HICON) : HCURSOR');
  //GetCursorPos( var lpPoint : TPoint) : BOOL');
  //ClipCursor( lpRect : PRect) : BOOL');
  //GetClipCursor( var lpRect : TRect) : BOOL');
  //GetCursor : HCURSOR');
  //CreateCaret( hWnd : HWND; hBitmap : HBITMAP; nWidth, nHeight : Integer) : BOOL');
  //GetCaretBlinkTime : UINT');
  //SetCaretBlinkTime( uMSeconds : UINT) : BOOL');
  //DestroyCaret : BOOL');
  //HideCaret( hWnd : HWND) : BOOL');
  //ShowCaret( hWnd : HWND) : BOOL');
  //SetCaretPos( X, Y : Integer) : BOOL');
  //GetCaretPos( var lpPoint : TPoint) : BOOL');
 //ClientToScreen( hWnd : HWND; var lpPoint : TPoint) : BOOL');
 //ScreenToClient( hWnd : HWND; var lpPoint : TPoint) : BOOL');
 //MapWindowPoints( hWndFrom, hWndTo : HWND; var lpPoints, cPoints : UINT) : Integer');
 //WindowFromPoint( Point : TPoint) : HWND');
 //ChildWindowFromPoint( hWndParent : HWND; Point : TPoint) : HWND');
 //GetSysColor( nIndex : Integer) : DWORD');
 //GetSysColorBrush( nIndex : Integer) : HBRUSH');
 //DrawFocusRect( hDC : HDC; const lprc : TRect) : BOOL');
 //FillRect( hDC : HDC; const lprc : TRect; hbr : HBRUSH) : Integer');
 //FrameRect( hDC : HDC; const lprc : TRect; hbr : HBRUSH) : Integer');
 //InvertRect( hDC : HDC; const lprc : TRect) : BOOL');
 //SetRect( var lprc : TRect; xLeft, yTop, xRight, yBottom : Integer) : BOOL');
 //SetRectEmpty( var lprc : TRect) : BOOL');
 //CopyRect( var lprcDst : TRect; const lprcSrc : TRect) : BOOL');
 //InflateRect( var lprc : TRect; dx, dy : Integer) : BOOL');
 //IntersectRect( var lprcDst : TRect; const lprcSrc1, lprcSrc2 : TRect) : BOOL');
 //UnionRect( var lprcDst : TRect; const lprcSrc1, lprcSrc2 : TRect) : BOOL');
 //SubtractRect( var lprcDst : TRect; const lprcSrc1, lprcSrc2 : TRect) : BOOL');
 //OffsetRect( var lprc : TRect; dx, dy : Integer) : BOOL');
 //IsRectEmpty( const lprc : TRect) : BOOL');
 //EqualRect( const lprc1, lprc2 : TRect) : BOOL');
 //PtInRect( const lprc : TRect; pt : TPoint) : BOOL');
 //centerform

end;

procedure BeepOk;
begin
 MessageBeep(MB_OK);
end;

procedure BeepInformation;
begin
 MessageBeep(MB_ICONINFORMATION); 
end;

procedure BeepExclamation;
begin
  MessageBeep(MB_ICONEXCLAMATION);   
end;

procedure BeepAsterisk;
begin
  MessageBeep(MB_ICONASTERISK);    
end;

procedure BeepQuestion2;
begin
   MessageBeep(MB_ICONQUESTION);   
end;

procedure BeepHand;
begin
   MessageBeep(MB_ICONHAND);    
end;

function RHK2(AString:String):String;
Var
 i: Integer ;
begin
 i := Pos('&',AString) ;
 if i <> -1 then begin
  Result:= Copy(AString,1,i-1)+Copy(AString,i+1,Length(AString))
 end else Result:=AString;
 If Length(Result) >= 1 Then
   Result := AnsiUpperCase(Copy(Result,1,1)) + Copy(Result,2,Length(Result)) ;
end;



function RemoveDF2(aString:String):String;
begin
 result:=aString;
 while pos(ThousandSeparator,result) > 0 do
  result:=Copy(result,1,pos(ThousandSeparator,result)-1)+Copy(result,pos(ThousandSeparator,result)+1,length(result))
end;


function IsReadOnly2(const Filename: string): boolean;
begin
  result:= boolean(FileGetAttr(Filename) and faReadOnly);
  if result then MessageDlg(Format('%s is readonly!',
     [ExtractFileName(Filename)]), mtWarning, [mbOK], 0);
end;


// does groups of 3 !
function MyIntToStr(Value : Longint; Trennzeichen : string) : string;
var s, s2 : string;
  rest : shortint;
begin
  s := IntToStr(Value);
  s2 := '';
  if s[1] = '-' then begin
    s2 := '-';
    s := copy(s, 2, length(s) - 1);
  end;
  if length(s) > 3 then begin
    rest := length(s) mod 3;
    if rest > 0 then begin
      s2 := copy(s, 1, rest) + Trennzeichen;
      s := copy(s, 1 + rest , length(s) - rest);
    end;
    while length(s) > 3 do begin
      s2 := s2 + copy(s, 1, 3) + Trennzeichen;
      s := copy(s, 4, length(s) - 3);
    end;
    s2 := s2 + s;
  end else begin
    s2 := s;
  end;
  Result:= s2;
end;


function GetWinDirX: String;
var
dir : array [0..max_path] of char;
begin
 // GetWindowsDirectory(pchar(dir), max_path);
 //result:=StrPas(dir);
end;

function GetSysDirX: String;
var
dir : array [0..max_path] of char;
begin
//GetSystemDirectory(dir, max_path);
//result:=StrPas(dir);
end; 

function getEnvironmentString2: string;
var
  List: TStringList;
  I: Integer;
begin
  List:= TStringList.Create;
  try
    GetEnvironmentVars(List, False);
    for I:= 0 to List.Count - 1 do
      //Writeln(List[I]);
      //maxform1.memo2.lines[i]:= list[i];
      result:= result + list[i]+ #13#10;
      //maxform1.memo2.lines.add(list[i]);
    //Readln;
  finally
    List.Free;
  end;
end;



function NumProcessThreads2: integer;
var
  hsnapshot: THandle;
  Te32: TTHREADENTRY32;
  proch: dWord;
begin
  Result:= 0;
  proch:= GetCurrentProcessID;
  hSnapShot:= CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, 0);
 
  Te32.dwSize:= sizeof(Te32);
  if Thread32First(hSnapShot, Te32) then begin
    if Te32.th32OwnerProcessID = proch then
      inc(Result);
    while Thread32Next(hSnapShot, Te32) do begin
      if Te32.th32OwnerProcessID = proch then
        inc(Result);
    end;
  end;
  CloseHandle(hSnapShot);
  writeln('WinDir '+getwindir);
  writeln('SysDir '+getsysdir);
  //getsystempath
end;


procedure checkREST(Sender: TObject);
var
  strUrl, strXml, strBookid: string;
  IdHTTP1: TIdHTTP;
  xmlt: TJvXMLTree;
  axmlnode: TJvXMLNode;
  aval: variant;
  zipStream: TMemoryStream;
begin
{Paperback
Publisher: Software + Support (September 30, 2003)
Language: German
ISBN-10: 3935042469 ISBN-13: 978-3935042468
Product Dimensions: 9.3 x 6.7 x 1 inches
Shipping Weight: 1.8 pounds }

  //strBookid:= '3935042469';
  strBookid:= '0782143423';      //from example

  strUrl := BaseURL;
  strUrl := strUrl + 'Service=AWSECommerceService&';
  strUrl := strUrl + 'AWSAccessKeyId=0JE9C2T2RN684MDM6G02&';
  strUrl := strUrl + 'AssociateTag=devconn-20&';
  strUrl := strUrl + 'Operation=ItemLookup&';
  strUrl := strUrl + 'ItemId=' + strBookid + '&';
  strUrl := strUrl + 'ResponseGroup=Large';

  //zipStream:= TFileStream.create(Exepath+'restbook.xml', fmCreate)

  zipStream:= TMemoryStream.create;
  IdHTTP1:= TIdHTTP.create(self);;
  try
    //strXml:= IdHTTP1.Get(strUrl);
    idHttp1.get1(strUrl, zipStream);
  except
    raiseLastException;
  end;  
  //SaveString(Exepath+'restbook.xml',strXML);
  xmlt:= TJvXMLTree.Create('xmldocu2',aval, axmlnode);
  //xmlt.LoadFromFile(Exepath+'restbook.xml');
  xmlt.LoadFromStream(zipStream);

  writeln('Restbook Back '+xmlt.text);
  //Treeview1.Items.Clear;
  //DomToTree (XMLDocument1.DocumentElement, nil, TreeView1);
  xmlt.Free;
  //zipStream.Free;
end;




procedure GlobalSetValue(var AText: string; const AName, AValue: string);
var
  P, P2, L: Integer;
begin
  L := Length(AName) + 2;
  if AText = '' then
  begin
    AText := AName + '="' + AValue + '"';
  end
  else begin
    P := PosText(AName + '="', AText,1);
    if P = 0 then
      AText := AText + ' ' + AName + '="' + AValue + '"'
    else begin
      P2 := PosStr('"', AText, P + L);
      if P2 = 0 then
        Exit;
      Delete(AText, P + L, P2 - (P + L));
      Insert(AValue, AText, P + L);
    end;
  end;
end;

function GlobalGetValue(const AText, AName: string): string;
var
  P, P2, L: Integer;
begin
  Result := '';
  L := Length(AName) + 2;
  P := PosText(AName + '="', AText,1);
  if P = 0 then
    Exit;
  P2 := PosStr('"', AText, P + L);
  if P2 = 0 then
    Exit;
  Result := Copy(AText, P + L, P2 - (P + L));
  //Result := StringReplace(Result, '~~', sLineBreak, [rfReplaceAll]);
end;

// returns the Index of Integer v in aList

function IndexOfInteger(AList: TStringList; Value: Variant): Integer;
var
  C, I, Index, P: Integer;
  S, S1, S2: string;
begin
  Result := -1;
  I := Value;
  C := AList.Count;
  if C = 0 then
    Exit;
  for Index := 0 to C - 1 do begin
    try
      S := AList[Index];
      P := Pos('..', S);
      if P = 0 then begin
        if StrToInt(AList[Index]) = I then begin
          Result := Index;
          Exit;
        end;
      end
      else
      begin // have range
        S1 := Trim(Copy(S, 1, P - 1));
        S2 := Trim(Copy(S, P + 2, Length(S)));
        if (I >= StrToInt(S1)) and (I <= StrToInt(S2)) then begin
          Result := Index;
          Exit;
        end;
      end;
    except
      Exit;
    end;
  end;
end;

// returns the Index of float Value (single or double) in AList

function IndexOfFloat(AList: TStringList; Value: Variant): Integer;
var
  C, Index, P: Integer;
  F: Extended;
  S, S1, S2: string;
begin
  Result := -1;
  F := Value;
  C := AList.Count;
  if C = 0 then
    Exit;
  for Index := 0 to C - 1 do begin
    try
      S := AList[Index];
      P := Pos('..', S);
      if P = 0 then begin
        if StrToFloat(S) = F then begin
          Result := Index;
          Exit;
        end;
      end
      else
      begin // have range
        S1 := Trim(Copy(S, 1, P - 1));
        S2 := Trim(Copy(S, P + 2, Length(S)));
        if (F >= StrToFloat(S1)) and (F <= StrToFloat(S2)) then begin
          Result := Index;
          Exit;
        end;
      end;
    except
      //raise EJvJanScriptError.CreateResFmt(@RsEInvalidNumbers, [S]);
      raise EJvJanScriptError.Create;

    end;
  end;
end;



procedure ParkMillerDemo;
//http://home.comcast.net/~JamesMClark5/Pascal/Random.htm
var C: boolean;
    I, Tails, D1, D2: integer;
    aCoin: TCoin;
    Seed: longint;
begin
    write('Seed value = '+floattoStr(456.45));
    Seed:= Round(time); //Readln(Seed);
    PMrandomize(Seed);
    aCoin[0]:= 'head';
    aCoin[1]:= 'tail';
  
    writeln('');
    writeln('Tossing ' +inttostr(NCoins)+' coins:');
    Tails:= 0;
    for I:= 1 to NCoins do begin
        C:= Brand(0.5);
        write(aCoin[integer(C)]+ '  ');
        if C then inc(Tails);
    end;
    writeln(' ');
    //inttostr(NCoins-Tails)
    writeln(inttostr(Tails)+' tails and '+inttostr(NCoins-Tails)+ ' heads');
    writeln('');
    writeln('Tossing '+inttostr(NDice)+ ' pairs of dice:');
    for I:= 1 to NDice do begin
        D1:= Irand(6)+1;
        D2:= Irand(6)+1;      
        write(' '+inttostr(D1)+ '+'+ inttostr(D2)+ '='+ inttostr(D1+D2));
    end;
    writeln('');
    writeln('');
    writeln('Six random angles between 180 and 270 degrees:');
    for I:= 1 to 6 do begin
    //write(floattoStr(Rrand));
      //write(floattoStr(180 + 90*Rrand)+'    ');
      //write(format('%.3f  ',[180+90*Rrand]));
      PrintFW('%.3f  ',[180+90*Rrand]);
    end;
    writeln('');
    writeln('');
    //readln;
end;    


procedure DelayLEDLoop;
//http://www.arduino.cc
var
    ledValue: boolean;
    ledSwitchTime, ledintervall, atime: longint;
begin
  ledintervall:= 1000;
  ledswitchtime:= 0;
  ledValue:= false;
  //MillisecondsElapsed;
  Repeat
    atime:= MilliSecondOfTheDay(now)-ledSwitchTime;
    if atime > ledintervall then begin
    ledValue:= NOT ledValue;
    if ledValue then begin
      maxform1.imglogo.show;
      writeln('LED is ON  at: '+timetoStr(time));
    end else begin 
      writeln('LED is OFF at: '+timetoStr(time));
      maxform1.imglogo.hide;
    end;
    //digitalWrite(ledPin, ledValue);
    ledswitchtime:= MilliSecondOfTheDay(now);
    end;
  until isKeyPressed;
    //memo2.setFocus;
    //readln;
end;


procedure DelayNoLoop;
//http://www.arduino.cc
var
  ledValue: boolean;
begin
  ledValue:= false;
  //MillisecondsElapsed;
  Repeat
    ledValue:= NOT ledValue;
    if ledValue then begin
      maxform1.imglogo.show;
      maxform1.imglogobox.hide;
      writeln('LED is ON  at: '+timetoStr(time));
      delay(1000);
    end else begin 
      writeln('LED is OFF at: '+timetoStr(time));
      maxform1.imglogo.hide;
      maxform1.imglogobox.show;
      delay(1000);
    end;
    //digitalWrite(ledPin, ledValue);
  until isKeyPressed;
  maxform1.imglogo.show;
  maxform1.imglogobox.show;
end;


procedure Randmax2;
//http://home.comcast.net/~JamesMClark5/Pascal/Random.htm
var
  R: byte;
  I: integer;
  sout: string;
begin
    writeln('');
    R:= 71;
    for I:= 1 to 272 do begin
       R:= ((longint(628)*R + 157) AND $3FF) SHR 2;
       sout:= sout + Format('%-*.3d',[5,R]);
       if (I mod 16)=0 then sout:= sout+#13#10;
    end;
  writeln(sout)
end;
                                          

procedure LoopTest;
begin
 Randomize; 
 REPEAT
  //TextAttr:=Random(256);
    Writeln(inttostr(random(256*256)));
 UNTIL isKEYPRESSED;  //on memo2 output
 if isKeypressed then writeln('key has been pressed!');
end;

procedure HighPrecTimer;
begin
  if QueryPerformanceFrequencyDLL(PerfFreq) then
    QueryPerformanceCounterDLL(StartExec);
    Sleep(1000);
    QueryPerformanceCounterDLL(EndExec);
    writeln(Format('Perf Counter DLL Debug:: (readcount = %d), ExecTime = %.3f ms',
       [1 {ReadCount}, ((EndExec - StartExec)*1000.0)/PerfFreq]))

  if QueryPerformanceFrequency(PerfFreq) then
    QueryPerformanceCounter(StartExec);
    Sleep(1000);
    QueryPerformanceCounter(EndExec);
    writeln(Format('Perf Counter Int Debug:: (readcount = %d), ExecTime = %.3f ms',
       [1 {ReadCount}, ((EndExec - StartExec)*1000.0)/PerfFreq]))

  if QueryPerformanceFrequency1(PerfFreq) then
    QueryPerformanceCounter1(StartExec);
    Sleep(1000);
    QueryPerformanceCounter1(EndExec);
    writeln(Format('Perf Counter Int1 Debug:: (readcount = %d), ExecTime = %.3f ms',
      [1 {ReadCount}, ((EndExec - StartExec)*1000.0)/PerfFreq]))
end;


function ConvertDate (strDate: string): string;
begin
  Result:= Copy (strDate, 1, Pos ('+', strDate));
end;
	
function EntityDecode(const s: string): string;
	var
	  i: integer;
	  entityStr: string;
	  Entity: byte;
	begin
	  i := 1;
	  Result := '';
	  entityStr := '';
	  Entity := 0;
	  while i <= Length(s) do begin
	    if (s[i] = '&') then begin
	      Inc(i);
	      if (s[i] = '#') then begin
	        Inc(i);
	        while (Ord(s[i]) > 47) and (Ord(s[i]) < 58) do begin
	          entityStr := entityStr + s[i];
	          Inc(i);
	        end;
	        if s[i] = ';' then begin
	          Inc(i);
	          Entity := StrToIntDef(entityStr, 32);
	        end;
	        Result := Result + Chr(Entity);
	      end
	      else // e' una entity non numerica!!
	        Result := Result + '&';
	    end
	    else begin
	      Result := Result + s[i];
	      Inc(i);
	    end;
	  end;
	end;
	
function XmlEncode (strXml: string): string;
	begin
	  Result := StringReplace(strXml, '&', '&amp;', [rfReplaceAll]);
	  Result := StringReplace(Result, '<', '&lt;', [rfReplaceAll]);
	  Result := StringReplace(Result, '>', '&gt;', [rfReplaceAll]);
	end;
	
	
var pcname: string;
    acon: THelpContext;
    i: integer;
    asta: TStarter;


begin   {@main}
  mXpath:= extractfilepath(application.exename)
  //mp3song1:= ExtractWord(5,myurl,['/']);
  
  ProcessMessagesON;

  Randmax2;
  ParkMillerDemo;
  ShowmessageBig('You should press a key on the output window to stop it!');
  memo2.setfocus;
  //LoopTest;
  Writeln('');
  
  DelayLEDLoop;
  //DelayNoLoop;
  
  ShowMessageBig(adjustlineBreaks('You pressed Key to Stop!',tlbsLF));
   //AddTerminateProc
   //AnsiStrScan
   //IsPathDelimiter
    // Writeln('this is '+ATA=512);

   {$IFDEF ATA=512}
    //then
     Writeln('this is '+inttostr(ATA));
   {$EndIF}  
   
   {$IFDEF ATAT=time}
    //then
     //Writeln('this is '+timetoStr(ATAT));
   {$EndIF}  
    //I64ToCardinals
    //CardinalsToI64
    
    //Showmessage(GetSystemPath(CSIDL_DESKTOPDIRECTORY));
    //Showmessage(GetSystemPath(CSIDL_WINDOWS));
    //Showmessage(GetSystemPath(CSIDL_MYDOCUMENTS));
  
    //Showmessage(GetSystemPathSH(CSIDL_RESOURCES));
    //Showmessage(GetSystemPathSH(CSIDL_COMMON_DOCUMENTS));
    HighPrecTimer;
    Writeln('Number of threads1: '+ inttostr(NumProcessThreads2));
    Writeln('Number of threads2: '+ inttostr(ThreadCount));
  
    //OpenFile
    //millis
    //if ISInternet then
      //checkREST(Self);
    //FindExecutable
    //setRNG
      //Procedure SetRNG( RNG : RNG_Type
    SetRNG(RNG_UVAG);
    //procedure InitGen(Seed : RNG_IntType);
    InitGen(IRanUVAG);
    Writeln(FloatToStr(RanGen53));
    Writeln(FloatToStr(RanGen53));
    Writeln(FloatToStr(RanGen53));

(*   procedure InitUVAGbyString(KeyPhrase : string);
{ Initializes the generator with a string }

  procedure InitUVAG(Seed : RNG_IntType);
 { Initializes the generator with an integer }

 function IRanUVAG : RNG_IntType;
{ Returns a 32-bit random integer }*)

    pcname:= 'APSN21K_Test';
    BrowseComputer(pcname, 'this is PC ',acon);
 
  for i:= 1 to 10 do 
      PrintFW(' nr %d*%d = %d', [i,i, i*i]);
      
  //GetEnvironmentInfo; 
   //writeln(GetEnvironmentString);   
   SaveString(ExePath+'\Examples\envinfo.txt',GetEnvironmentString);   
   OpenFile(ExePath+'\Examples\envinfo.txt');
   
  //Writeln(Null2Blank('this has 0.0 another 0 simple Null'));
  //booltoint
    writeln(inttoStr(boolToInt(false)));
    //isreadonly
    BeepOK;
    //BeepQuestion;
    Writeln(IntToStr(Rand(4000)));
    //Beep;
    //ConvertCodeStringToCommand
    //function IntTo3Str(Value : Longint; separator: string) : string;
    Writeln(IntTo3Str(234746326,':'));
    
    OpenFile(ExePath+'\examples\androidlcl\pascal_gui.jpg');
    //saveln


End.


http://www.atug.com/andypatterns/collections.htm



more G9 songs:
'http://max.kleiner.com/download/olemosbruja.mp3'
'http://www.kleiner.ch/kleiner/download/G9_whitemagic.mp3'
'http://www.kleiner.ch/kleiner/download/G9_japan.mp3'
'http://www.kleiner.ch/kleiner/download/G9_lordofdarkness.mp3';
'http://www.kleiner.ch/kleiner/download/G9_nowage.mp3';
'http://www.kleiner.ch/kleiner/download/G9_olemosbruja.mp3';
'http://www.kleiner.ch/kleiner/download/G9_playchess.mp3';
'http://www.kleiner.ch/kleiner/download/G9_vision.mp3';
'http://www.kleiner.ch/kleiner/download/G9_zeitraum.mp3';



---code_cleared_checked---

BEGIN
 Randomize; 
 REPEAT
  TextAttr:=Random(256);
  Write('Hilfe')
 UNTIL KEYPRESSED
END.


var RandSeed: longint;
function Random: double;
begin
RandSeed := 134775813 * RandSeed + 1;
result := (RandSeed xor $80000000) / 4294967296.0;
if Result < 0 then
Result := Result + 1;
end;

Grüße,
Joachim


http://www.pup.ethz.ch/et3.html

Zufallszahlen

Um in Pascal Zufallszahlen erzeugen zu können, steht die Funktion Random (von engl. random = zufällig) zur Verfügung. Damit Zufallszahlen erzeugt werden können, behilft sich Random der aktuellen Uhrzeit, die sich ja laufend ändert. Weiter existiert die Prozedur Randomize, die den Zufallsgenerator initialisiert. Diese muss vor der Verwendung von Random einmal aufgerufen werden. Die Initalisierung des Zufallsgenerators erfolgt durch einfachen Aufruf der Prozedur Randomize (ohne Parameter).

Randomize;   (* Zufallszahlengenerator initialisieren *)

Zufall, Ungewiheit, Gluck, Pech { sind das nicht ziemlich diuse Begrie? Eher
aus dem Bereich der Wahrsager als dem der Wissenschaftler? Eine wissenschaftliche Untersuchung
des Zufalls ist moglich, und sie begann mit der Analyse von Glucksspielen
durch B. Pascal, C. Huygens, Jakob Bernoulli und P. Fermat4. Diese Analyse hat den
Wahrscheinlichkeitskalkul hervorgebracht, der lange fur einen unbedeutenden Zweig der
Mathematik gehalten wurde. Einen ersten Erfolg erzielte der Kalkul in der statistischen
Mechanik durch Untersuchungen von L. Boltzmann und J.W. Gibbs5: Die  }
"
Menge von
Zufall\, die in einem Liter Luft ist, wird durch den Begri der Entropie gemessen. Der
nachste groe Erfolg ist mit der Entwicklung der Quantentheorie verknupft. Heutzutage
ist der Zufall in wissenschaftlichen Theorien fast uberall prasent: Rauschen in der
Signalubertragung, Ausbreitung von Epidemien, Entwicklung von Borsenkursen, chaotisches
Verhalten von nichtlinearen Systemen, Spieltheorie, Wetterprognosen, : : : .


Die Zufallszahlen, die ein Computersystem erstellen kann, sind natürlich keine echten Zufallszahlen.Sie werden aus der Systemzeit berechnet.Der Zufallsgenerator sollte beim Programmstart initialisiert werden:

procedure TForm1.CreateForm(Sender: TObject);
begin
  Randomize;
end;
 

Jetzt können eigentlich recht problemlos Zufallszahlen erstellt werden und zwar mit dem Befehl Random:

procedure TForm1.Button1Click(Sender: TObject);
const
  ZufallBereich = 5;
begin
  Caption:=inttostr(Random(Zufallsbereich));
end;
 
http://www.math.uni-frankfurt.de/~numerik/lehre/Vorlesungen/pros-12/Zufallszahlen%20und%20Benford/ran-shell.pdf

http://home.comcast.net/~JamesMClark5/Pascal/Random.htm


Guten Tag Heini
Ja richtig, die Funktion hat einen pseudo Zufalls Term, wobei die Initialisierung mit Randomize massgebend ist.
Damit Zufallszahlen erzeugt werden können, behilft sich Random der aktuellen Uhrzeit in msec, die sich ja laufend ändert. Weiter existiert die Prozedur Randomize, die den Zufallsgenerator initialisiert. Diese muss vor der Verwendung von Random einmal aufgerufen werden. Die Initalisierung des Zufallsgenerators erfolgt durch einfachen Aufruf der Prozedur Randomize (ohne Parameter).
Die Zufallszahlen, die ein Computersystem erstellen kann, sind natürlich keine echten Zufallszahlen. Sie lassen sich aus der Systemzeit berechnen. Der Zufallsgenerator sollte beim Programmstart eben initialisiert werden.
Das ist wirklich ein spannendes Thema, wir haben bei den Kryptologen immer wieder über Rausch- oder eben Zufallsgeneratoren gesprochen.
Heutzutage ist der Zufall in wissenschaftlichen Theorien fast überall präsent: Rauschen in der
Signaluebertragung, Ausbreitung von Epidemien, Entwicklung von Börsenkursen, chaotisches
Verhalten von nichtlinearen Systemen, Spieltheorie, Wetterprognosen und eben Kryptologie.
Ich versuche noch den Source Code rauszufinden, leider ist er im System Unit nicht einsehbar, da er im Kernel steckt.
Aber so ungefähr könnte er so aussehen:
var RandSeed: longint;
function Random: double;
begin
RandSeed := 134775813 * RandSeed + 1;
result := (RandSeed xor $80000000) / 4294967296.0;
if Result < 0 then
Result := Result + 1;
end;
Mehr über den Zufall findest du auf
http://www.math.uni-frankfurt.de/~numerik/lehre/Vorlesungen/pros-12/Zufallszahlen%20und%20Benford/ran-shell.pdf
es grüsst dich, Max

Hello Arduino-Friends,

as byproduct of a resuch project I have made a little driver for the arduino motorshield  modified from Stepper.cpp of Tom Igoe.
Half and full step modus, endless run and a run for n steps both with the possebility of a hardware interrupt is possible,  driving DC motors, too.

The methodes are:
  
initialisation:
//DC-motors
Motorshield myMotorshield(PWM_PIN_A,PWM_PIN_B,BRAKE_PIN_A,BRAKE_PIN_B,DIR_PIN_A,DIR_PIN_B,DC-Delay<0..2^16>ms,AD-Resolution (2^<x>));
DC-Delay prevents short circuit bey changing dc-motor direction
//stepper-motors
Motorshield myMotorshield(stepsPerRevolution,PWM_PIN_A,PWM_PIN_B,BRAKE_PIN_A,BRAKE_PIN_B,DIR_PIN_A,DIR_PIN_B,MODUS <HALF><FULL>,AD-Resolution (2^<x>));

setup:

DC:
  myMotorshield.setDC(MOTOR <MOTA><MOTB>,PWM<0..1023>); //sing of PWM codes direction

stop/run:
myMotorshield.setDCbrake(MOTOR <MOTA><MOTB>,<STOP><GOON>);

Stepper:
void myMotorshield.setSpeed(Speed in 1/s)

void myMotorshield.step(Steps <+-><1..1023><0> 0 codes endless run, Interrupt pin ) setting interrupt pin to LOW for more than 1 step movement stops

Examples for each mode are included.

Best regards from Germany

Tobi
 
Here is a program that demonstrates how to use the PMrand unit:

program Rand3;
uses PMrand;

type
    TCoin = array[boolean] of string[4];

const
    Coin: TCoin = ('head', 'tail');
    NCoins = 10;
    NDice = 8;

var
    Seed: longint;
    C: boolean;
    I, Tails, D1, D2: integer;

begin
    write('Seed value = ');  Readln(Seed);
    PMrandomize(Seed);

    writeln;
    writeln('Tossing ', NCoins, ' coins:');
    Tails:= 0;
    for I:= 1 to NCoins do begin
        C:= Brand(0.5);
        write(Coin[C]:5);
        if C then inc(Tails);
    end;
    writeln;
    writeln(Tails, ' tails and ', NCoins-Tails, ' heads');

    writeln;
    writeln('Tossing ', NDice, ' pairs of dice:');
    for I:= 1 to NDice do begin
        D1:= Irand(6)+1;
        D2:= Irand(6)+1;
        write(' ', D1, '+', D2, '=', D1+D2);
    end;
    writeln;

    writeln;
    writeln('Six random angles between 180 and 270 degrees:');
    for I:= 1 to 6 do begin
        write(180 + 90*Rrand :8:3);
    end;
    writeln;
    
    readln;
end.

Notice how the structured constant named 'Coin' is used to translate the boolean values false and true to the string values 'head' and 'tail'.  Notice also how we can use an expression to modify the range of a random variable by 'rescaling' the random function.  For example, the expression "180 + 90*Rrand" obtains a range of 180 to 270; but Rrand by itself has a range of 0 to 1.  To determine the new range from the old range, substitute the old range limits 0 and 1 into the expression, like this:

    180 + 90*0 = 180
    180 + 90*1 = 270

(Since Rrand returns a real value, 90*Rrand becomes a real value, even though 90 is an integer; and likewise the addition is real, even though 180 is an integer.) 

A typical output of this demo program is:

Seed value = 45

Tossing 10 coins:
 tail head tail head head head tail head head tail
4 tails and 6 heads

Tossing 8 pairs of dice:
 2+5=7 6+6=12 2+5=7 4+4=8 2+4=6 4+4=8 2+5=7 5+5=10

Six random angles between 180 and 270 degrees:
 192.458 218.372 244.797 229.822 266.799 206.902

If you enter a seed value of 45, you will always get this output; and if you enter a seed value of 91, you will always get some other output.  But if you enter a seed value of 0, the output will always be different, because the program will actually use a seed taken from the computer's clock time.

Most programs that use the PMrand unit will not call the PMrandomize procedure, because the initialization section of PMrand calls PMrandomize to start the random sequence from the computer's clock -- and this is what most programs need.  


EKON 14 Recap

September 29, 2010 in Delphi, Mono, MonoDevelop, Prism

Right now Im on my way back home from the Entwickler-Konferenz (EKON) 14 in Darmstadt, Germany. Jim is still there, but I have other duties so I left a day before the conference ends officially.

I had two sessions, the first yesterday was about Delphi Prism language specialties where I talked about cool features like class contracts and also interface delegation. Today I talked about multi platform development with Delphi Prism, concentrating on the apple platforms, both the Mac and iOS using Mono and MonoTouch for the iPhone/iPad.

I also sneaked into other sessions. There was a how do I hack VCL programs session that really showed some interesting debugging, dumping and assembler-modification to crack a dongle protected native Delphi application as well as Holger Klemt talking about his personal experience with guys cracking is IBExpert software and what he did against that. Also Ray Konopka had a very interesting session about the Ribbon UI in general.

I especially enjoyed Max Kleiners talk about our PascalScript. Until today I didnt knew he had built sort of a little IDE for it, called maxBox. Its a scripting toolbox with a *lot* of scripatble functionality. He showed (beside other things) how to download a (free) mp3 file from the internet and directly played it from a little script  it was awesome (the demo, that is. Not the music, actually ;) ). maxBox, just like PascalScript that powers the IDE, is open source and you can get the sources from sourceforge. You can find more information about it here: Softwareschule.ch/Maxbox . So go and check it out, it also brings script debugging and syntax highlighting with it and really is a good start for a little scripting with pascal script. At this point I really like to say thanks to Max. Doing that for the purpose of teaching programming and open sourcing the tool is a nice gesture.

Next speaking opportunity for me is at the Embarcadero CodeRage 5 online conference where I have two sessions on Thursday next week. One is about LINQ with Delphi Prism and the other about Hydra, so join me there if you like to. Its totally online, so no shoes? No shirt? No problem! ;)



PascalGUI (Pascal compiler)
Description
PascalGUI is a GUI/small-IDE for freepascal compiler. PascalGUI supports devices with ARM, x86 and MIPS processors (MIPS support is in beta).
You can write your own applications on the Android phone, and run them. This app uses Freepascal compiler, so it is full-featured. PascalGUI can be used for educational purposes or to practice in Pascal language.
Some components of PascalGUI are GPL-licensed, their source code hadn't been modified. You can download used source code of Freepascal on Freepascal SVN.

(If you think that there is GPL violation in PascalGUI, email me at n0n3m4@gmail.com. I'll provide to you source code from Freepascal SVN, if you can't download it yourself)

PascalGUI includes Android Terminal Emulator so you can to run your application as good as you running it on your Linux PC.

Quick manual:
If you have found a bug or app is not working, email me.
You can export result of compilation (binary), long-click compile button for that.
Long click save button to "save as", long click run to run with arguments, long click open for recent files menu.

Report bugs at n0n3m4@gmail.com

Android is a trademark of Google Inc.
Some components of this app are licensed under (L)GPL, email me to get the source code.


Introduction

ExtPascal is an Ext JS wrapper/binding. ExtPascal lets you use the Ext JS from Object Pascal commands issued by the server. That brings the structure and strict syntax of the Object Pascal for programming the web browser.

The main advantages are:

    Use your preferred language (in this case Object Pascal) and where you are more productive instead of using JavaScript, PHP, HTML and/or CSS.
    Use of native and compiled code with a strongly typed language. That is, many errors are directly appointed by the compiler, without waste time testing in the browser.
    Use of Code Completion (Intellisense), available in moderns IDEs (Delphi/Lazarus) more productivity in the coding.
    Centering the programming on the server, where JavaScript and HTML is generated dynamically, makes development easier and less dispersed.
    The business rules can be encapsulated in the server, in Object Pascal, instead of being visible in JavaScript.
    Direct and easy debugging using Delphi/Lazarus/MSEide/FPIDE debugger. 

Prerequisites

    Windows, Linux, Mac OS X or FreeBSD machine. It was tested using Intel/AMD 32/64 bits and PowerPC, but should work with other processors supported by Free Pascal.
    A web browser: IE 6+, Firefox 3.6+, Chrome 10+, Safari 4+, Opera 11+ or compatibles. JavaScript and Cookies should be enabled.
    Download and install Apache 2.4.4 64 bit for Windows or later, but Apache 1.3 and IIS works using CGIGateway included in ExtPascal package, see below.
    For native FastCGI operation download and install FastCGI for Apache 2.2. See details below. For setting FastCGI thru CGIGateway on Apache or IIS see details below too.
    Download ExtJS 3.2.1.
    Install Ext JS below Apache's Document Root (usually htdocs) at folder ext
    For Windows install Delphi (7..XE3) or FreePascal 2.6+ with Lazarus 1.0+ or MSEide 2.0+. I use DXE3 and Lazarus 1.1 64 bit (CodeTyphon edition).
    For Posix systems (Linux, Mac OS X, BSDs, Solaris, etc) install FreePascal 2.6+ with Lazarus 1.0+.
    Download ExtPascal 0.9.8 to a working directory, for example: C:\ExtPascal.
    Copy codepress folder, which is in ExtPascal package, underneath the htdocs folder. 


    Ja schön wäre es, ich warte noch auf ein ERD-Diagram der DB zur Bestandesführung/Bestellwesen, so kann ich zumindest einen Modelleindruck des Datenbankschemas erhalten, gekommen ist aber noch nichts ,kann auch sein dass niemand in der Firma in der Lage ist ein Diagramm der DB zu erstellen.
    Zum Fortschritt gibt es wenig zu vermerken, ich habe ziemliche Kompatibilitätsprobleme bei der Migration des alten Codes auf Delphi2009, auf der Originalinstallation sind auf der anderen Seite viele Komponenten veraltet so dass kein Weg an einer Migration vorbeiführt, zudem hab ich ja mal erwähnt, dass die BDE nicht mehr unterstützt wird und wir auf eine andere DB wechseln müssen.
    Der Fluch momentan ist noch kein stabiles System mit der bestehenden Funktionalität zu erhalten. Wir sprechen hier von einer Entwicklung (neue Funktionen), Portierung (höhere Entwicklungsumgebung) und Migration (andere Laufzeit der DB mit Betriebssystem) zugleich.
    Das wiederum bedingt eine Neuentwicklung mit einem Projektteam und Planungshorizont, die Kosten gehen dann in die Mannmonate.
    Wenn wir Herrn H oder einen anderen Investor finden, lässt sich mein damals erstellter Kostenplan in etwa umsetzen.
    
    
 ******************************************************************
  UVAG The Universal Virtual Array Generator
  by Alex Hay zenjew@hotmail.com
  Adapted to TPMath by Jean Debord
  ******************************************************************
  In practice, Cardinal (6-7 times the output of Word) is the
  IntType of choice, but to demonstrate UVAG's scalability here,
  IntType can be defined as any integer data type. IRanUVAG globally
  provides (as rndint) an effectively infinite sequence of IntTypes,
  uniformly distributed (0, 2^(8*sizeof(IntType))-1). Output (bps)
  is dependent solely on IntSize=sizeof(IntType) and CPU speed.  UVAG
  cycles at twice the speed of the 64-bit Mersenne Twister in a tenth
  the memory, tests well in DIEHARD, ENT and NIST and has a huge period.
  It is suitable for cryptographic purposes in that state(n) is not
  determinable from state(n+1).  Most attractive is that it uses integers
  of any size and requires an array of only 255 + sizeof(IntType) bytes.
  Thus it is easily adapted to 128 bits and beyond with negligible
  memory increase.  Lastly, seeding is easy.  From near zero entropy
  (s[]=0, rndint > 0), UVAG bootstraps itself to full entropy in under
  300 cycles.  Very robust, no bad seeds.
  ****************************************************************** 
    
    
  (* ***** BEGIN LICENSE BLOCK *****
 *
 * The assembly procedure FillChar is licensed under the CodeGear license terms.
 *
 * The initial developer of the original code is Fastcode
 *
 * Portions created by the initial developer are Copyright (C) 2002-2004
 * the initial developer. All Rights Reserved.
 *
 * Contributor(s): John O'Harrow
 *
 * ***** END LICENSE BLOCK ***** *)
procedure _FillChar(var Dest; count: Integer; Value: Char);
//{$IFDEF PUREPASCAL}
var
  I: Integer;
  P: PChar;
begin
  P := PChar(@Dest);
  for I := count-1 downto 0 do
    P[I] := Value;
end;
//{$ELSE}
asm                                  // Size = 153 Bytes
        CMP   EDX, 32
        MOV   CH, CL                 // Copy Value into both Bytes of CX
        JL    @@Small
        MOV   [EAX  ], CX            // Fill First 8 Bytes
        MOV   [EAX+2], CX
        MOV   [EAX+4], CX
        MOV   [EAX+6], CX
        SUB   EDX, 16
        FLD   QWORD PTR [EAX]
        FST   QWORD PTR [EAX+EDX]    // Fill Last 16 Bytes
        FST   QWORD PTR [EAX+EDX+8]
        MOV   ECX, EAX
        AND   ECX, 7                 // 8-Byte Align Writes
        SUB   ECX, 8
        SUB   EAX, ECX
        ADD   EDX, ECX
        ADD   EAX, EDX
        NEG   EDX
@@Loop:
        FST   QWORD PTR [EAX+EDX]    // Fill 16 Bytes per Loop
        FST   QWORD PTR [EAX+EDX+8]
        ADD   EDX, 16
        JL    @@Loop
        FFREE ST(0)
        RET
        NOP
        NOP
        NOP
@@Small:
        TEST  EDX, EDX
        JLE   @@Done
        MOV   [EAX+EDX-1], CL        // Fill Last Byte
        AND   EDX, -2                // No. of Words to Fill
        NEG   EDX
        LEA   EDX, [@@SmallFill + 60 + EDX * 2]
        JMP   EDX
        NOP                          // Align Jump Destinations
        NOP
@@SmallFill:
        MOV   [EAX+28], CX
        MOV   [EAX+26], CX
        MOV   [EAX+24], CX
        MOV   [EAX+22], CX
        MOV   [EAX+20], CX
        MOV   [EAX+18], CX
        MOV   [EAX+16], CX
        MOV   [EAX+14], CX
        MOV   [EAX+12], CX
        MOV   [EAX+10], CX
        MOV   [EAX+ 8], CX
        MOV   [EAX+ 6], CX
        MOV   [EAX+ 4], CX
        MOV   [EAX+ 2], CX
        MOV   [EAX   ], CX
        RET                          // DO NOT REMOVE - This is for Alignment
@@Done:
end;
//{$ENDIF}
  
    
    
    