{***************************************************************
 *
 * Project  : System Information Series
 * App Name:  104_drive_type.txt, #locs=133
 * Purpose  : Demonstrates the functions of drivetype and Internals
 * Date  : 21/09/2010  -  14:56  #date:01.06.2013 20:35:56
 * History  : translate and integrate to maXbox June 2010
 *          : system demo for mX3 beta, #file:140_drive_typedemo.txt
 ****************************************************************}
Program DriveType;
{BOOL WINAPI MessageBeep(
  __in  UINT uType
);}

function  MessageBeep(para: integer): byte;
  external 'MessageBeep@user32.dll stdcall';      //#name:max

var
  except_state, execute_state, boot_state: string;
  except_conf, execute_conf, boot_conf: string;
  mytimestamp: TDateTime;
  osType: TIdWin32Type;
  diskTotal, amtFree: int64;
  ip_port: integer;
  //longlist: TLongintlist;

procedure getMaxBoxIniSystem;
var
  Ini: TIniFile;
begin
  Ini:= TIniFile.Create(ExePath+'maxboxdef.ini');
  try
    except_state:= Ini.ReadString('Form', 'EXCEPTIONLOG','');
    execute_state:= Ini.ReadString('Form', 'EXECUTESHELL','');
    boot_state:= Ini.ReadString('Form','BOOTSCRIPT','');
    ip_port:= Ini.ReadInteger('Web','IPPORT',0);
  finally
    writeln('inifile sysdata1: '+except_state+ ' '+execute_state);
    writeln('inifile sysdata2: '+boot_state+ ' '+intToStr(ip_port));
    ini.Free;
  end;
end;

procedure getMaxBoxIniShort;
begin
  with TIniFile.Create(ExePath+'maxboxdef.ini') do
  try
    except_conf:= ReadString('Form','EXCEPTIONLOG','');
    execute_conf:= ReadString('Form','EXECUTESHELL','');
    boot_conf:= ReadString('Form','BOOTSCRIPT','');
    ip_port:= ReadInteger('Web','IPPORT',0);
  finally
    writeln('inifile sysdata1: '+except_conf+':'+execute_conf);
    writeln('inifile sysdata2: '+boot_conf+':'+intToStr(ip_port));
    Free;
  end;
end;


procedure signal_Sounds;
var sound: integer;
begin
for sound:= 1 to 100 do
  if sound mod 10 = 0 then begin
    MessageBeep(sound)
    sleep(1500)
  end  
end;

procedure getDriveTypesF;
var
  Drive: byte;
  DriveLetter: string;
begin
  for Drive:= ord('A') to ord('Z') do begin
    DriveLetter:= chr(Drive) + ':\';
    case GetDriveType(PChar(chr(Drive) + ':\')) of
      0: //DRIVE_UNKNOWN
      Memo2.Lines.Add(DriveLetter + ' Unknown Drive');
      {1: //DRIVE_NO_ROOT_DIR
      Memo2.Lines.Add(DriveLetter + ' No Root Dir or mount Point');}
      2: //DRIVE_REMOVABLE:
      Memo2.Lines.Add(DriveLetter + ' Removable or Floppy Drive');
      3: //DRIVE_FIXED:
      Memo2.Lines.Add(DriveLetter + ' Fixed Drive');
      4: //DRIVE_REMOTE:
      Memo2.Lines.Add(DriveLetter + ' Network Drive');
      5: //DRIVE_CDROM:
      Memo2.Lines.Add(DriveLetter + ' CD-ROM Drive');
      6: //DRIVE_RAMDISK:
      Memo2.Lines.Add(DriveLetter + ' RAM Disk');
    end;
  end;
end;

  var strc: tscrollstyle;

begin
   //InifileRead;
   getMaxBoxIniSystem;
   getMaxBoxIniShort;
   
   //0 = Current drive
   writeln('machine name is: '+getHostName)
   writeln('user name is: '+getUserName)
   osType:= Win32Type;
   writeln('OS type: '+intToStr(ord(osType)));
   mytimestamp:= GetFileCreationTime(exepath+'maxbox3_0.exe')
   writeln(DateTimeToStr(mytimestamp)+' for maXbox3 file')
   diskTotal:= DiskSize(0);
   AmtFree:= DiskFree(0);
   writeln(IntToStr64(disktotal div 1024))
   //writeln(IntToStr(AmtFree div diskTotal) +' % on current drive is free: ' + 
       //IntToStr(AmtFree div 1024) + ' Kbytes free. ');
   //searchAndOpenDoc(ExtractFilePath(ParamStr(0))+'docs\maxbox_starter2.pdf')
   //signal_Sounds;
   //ExecuteCommand('cmd','/k dir *.*')
    getDriveTypesF;
    //function DisplayCoord(AColumn, ARow: Integer): TDisplayCoord;
    //function BufferCoord(AChar, ALine: Integer): TBufferCoord;
      //DisplayCoord
      //BufferCoord
      writeln(chr($BB));
      writeln(inttoStr(ord(chr($BB))));
        writeln(chr($B6));
        writeln(chr($B7));
        
       maxform1.statusbar1.panels[1].text:= ' this is rock right'; 
      // showmessage('this is stop');
   //ShellExecute3(ExePath+'maxbox3.exe',ExePath+'examples\003_pas_motion.txt',secmdopen);
    
        
end.   

There is no place like 127.0.0.1 

//----------------------------------------------
 DiskSize returns -1 if the drive number is invalid. Drive parameter can be set to: 0 = Current drive, 1 = A, 2 = B, 3 = C and so on. 


DRIVE_UNKNOWN
0 The drive type cannot be determined.
 
DRIVE_NO_ROOT_DIR
1 The root path is invalid; for example, there is no volume mounted at the specified path.
 
DRIVE_REMOVABLE
2 The drive has removable media; for example, a floppy drive, thumb drive, or flash card reader.
 
DRIVE_FIXED
3 The drive has fixed media; for example, a hard drive or flash drive.
 
DRIVE_REMOTE
4 The drive is a remote (network) drive.
 
DRIVE_CDROM
5 The drive is a CD-ROM drive.
 
DRIVE_RAMDISK
6 The drive is a RAM disk.

To highlight a row you must use the OnSpecialLineColors Event. You can create a function to find the word in the line (check this question Is There An Efficient Whole Word Search Function in Delphi?) and then paint the line

Check this code

procedure TFrmMain.SynEditCodeSpecialLineColors(Sender: TObject;
  Line: integer; var Special: boolean; var FG, BG: TColor);
begin
  If LineContainsWord(Line) then //here check if the word is in the line
  begin
   FG      := clYellow; //Text Color
   BG      := clBlue; //BackGround
   Special := True; //Must be true
  end;        
end;

procedure TForm1.SynEdit1StatusChange(Sender: TObject;
  Changes: TSynStatusChanges);
begin
  if Changes * [scAll, scCaretX, scCaretY] <> [] then
  begin
    Statusbar1.Panels[1].Text := Format(' Zeile:%6d, Spalte: %3d',
    [SynEdit1.CaretY, SynEdit1.CaretX]);
  end;
end; 

http://forum.lazarus.freepascal.org/index.php?topic=17128.


 

procedure TForm1.FormCreate(Sender: TObject);
var
  SynMarkup: TSynEditMarkupHighlightAllCaret;
begin
  SynMarkup := TSynEditMarkupHighlightAllCaret(SynEdit1.MarkupByClass[TSynEditMarkupHighlightAllCaret]);

  SynMarkup.MarkupInfo.FrameColor := clSilver;
  SynMarkup.MarkupInfo.Background := clGray;

  SynMarkup.WaitTime := 100; // millisec
  SynMarkup.Trim := True;     // no spaces, if using selection
  SynMarkup.FullWord := True; // only full words If "Foo" is under caret, do not mark it in "FooBar"
  SynMarkup.IgnoreKeywords := False;
end;

procedure TSynHotKey.Paint;
var
  r: TRect;
begin
  r := ClientRect;
  
  //{$IFDEF SYN_CLX}
  QClxDrawUtil_DrawWinPanel(Canvas.Handle, @r, Palette.ColorGroup(cgActive), True,
    QBrushH(0));
  //{$ENDIF}

  Canvas.Brush.Style := bsSolid;
  Canvas.Brush.Color := Color;
  InflateRect(r, -BorderWidth, -BorderWidth);
  Canvas.FillRect(r);
  Canvas.TextRect(r, BorderWidth + 1, BorderWidth + 1, Text);
end;
  memo1.Hint:= intToStr(memo1.CaretY)+' Cursor: '+memo1.WordAtCursor +' Mouse: '+memo1.WordAtMouse;
