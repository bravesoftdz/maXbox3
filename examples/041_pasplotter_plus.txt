//calculates a function and his plot, max@kleiner.com _41
//efficient and straight of a function plot
//compilerswitch $N+ turns the coprocessor on, loc's =105

program simple_GraphPlotter;

//try to add a function type like
type 
  Tmath_func = FUNCTION(x: single): single;
  TFunc2 = function(X1 : double): double;

Const
  //smooth signs for x-unit
  XLines = 16;
  // width for drawing
  YSigns = 42;
  // 0 axis touching
  YNull = 44;
  PlotSymbol = '*';
  EmptySymbol = '.';
  e = 2.718281828459;
  PI2 = 5.1415926535897932384626433832795;

function fct1(x: single): single;
  begin
    result:= (sin(pi2 * x));
  end;
  
function fct2(x: single): single;
  begin
    //power() is e^-x
    result:= power(e, -x) * (sin(pi2 * x));
  end;

procedure functionPlot(XLimit: integer; YStretch: byte);
var x,y: single;
    YValue, point: integer;
    sym: string;
begin
   sym:= emptysymbol;
   for point:= 0 to XLimit do begin
     sym:= '';
     x:= (point / Xlines);
     y:= fct1(x);
     //y:= (sin(pi2 * x))
     YValue:= round(ysigns * y) + YNull;
     repeat
       Sym:= sym + emptysymbol;
       YValue:= YValue - YStretch;
     until YValue < 0;
     sleep(10)
     writeln(sym + plotSymbol)
   end
 end; 
 
 PROCEDURE fct_table(start, stop, step: single; fct: TMath_func;
                                     fct_name: string);
  VAR x: single;
  BEGIN
    x:= start;
    Writeln('x | ' + fct_name);
    WHILE x <= stop DO BEGIN
      fct(x);
      Writeln(floatToStr(x) +' | '+ floatToStr((x)));
      x := x + step;
    END;
  END;
 
 var iItemindex: integer;
     X,Y: float;
 
function Func1(X1 : float): float;
{ Function to be plotted }
begin
  case iItemIndex of
    0 : result:= Exp(X1);
    //1 : result := Exp2(X);
    //2 : result := Exp10(X);
    3 : result := Power(X, Y);
    4 : result := Log(X);
    5 : result := Log2(X);
    6 : result := Log10(X);
    7 : result := Sin(X);
    8 : result := Cos(X);
    9 : result := Tan(X);
   10 : result := ArcSin(X);
   11 : result := ArcCos(X);
   12 : result := ArcTan(X);
   //13 : result := Sinh(X);
   //14 : result := Cosh(X);
   //15 : result := Tanh(X);
   16 : result := ArcSinh(X);
   17 : result := ArcCosh(X);
   //18 : result := ArcTanh(X);
   //19 : result := Gamma(X);
   //20 : result := IGamma(A, X);
   //21 : result := Beta(X, Y);
   //22 : result := IBeta(A, B, X);
   //23 : result := Erf(X);
   //24 : result := LambertW(X, UBranch, False);
  else
    result:= 0.0
  end;
end;

var 
  fct1x, fct2x: TMath_func;
  afunc: TFunc2;
 
  
begin
  //clrscr;
  //try to call function plot with fp(46, math_func)
  //max number of lines XLimit = 46;
  //FunctionPlot(446, 2);
  Writeln(floattoStr(MetersPerMile))
  Writeln(floattoStr(CubicMetersPerUSFluidGallon))
  
  //calls the proc with a function var
   fct1x:= @fct1;
   fct2x:= @fct2;
    afunc:= @Func1;
  
   fct_table(0.1, 0.7, 0.1, fct1x, 'Sin(x)');
   fct_table(0.1, 0.7, 0.1, fct2x, 'Cos(x)');
 
end.