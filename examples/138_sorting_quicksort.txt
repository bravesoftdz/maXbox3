Program QuickSortCrt;

//uses  
  //WinCrt; see also 138_Swap_Sort
const 
  ArraySize = 9;

type  
  TMyArray = array[1..ArraySize] of integer;
  TMyArray2 = array of byte;
  

var   
  MyArray : TMyArray;
   //MyArray1, MyArray2 : array of byte;
    i : integer;

Procedure QuickSort(lowerPos, upperPos: integer);
   var temp, i, middlePos, pivotValue : integer;
Begin
   { check that the lower position is less than the upper position }
   if lowerPos < upperPos then begin
      { Select a pivot value }
      pivotValue := MyArray[lowerPos];

      { default to the middle position to the lower position }
      middlePos := lowerPos;
      { partition the array about the pivot value }
      for i := lowerPos+1 to upperPos do begin
         if MyArray[i] < pivotValue then begin
            { bump up the middle position }
            inc(middlePos);
            { swap this element to the "lower" part of the array }
            temp := MyArray[middlePos];
            MyArray[middlePos] := MyArray[i];
            MyArray[i] := temp;
         end; { if }
      end; { for }
      { place the pivot value in the middle to finish the partitioning }
      temp := MyArray[lowerPos];
      MyArray[lowerPos] := MyArray[middlePos];
      MyArray[middlePos] := temp;
      { Finally, recursively call QuickSort on the two parititioned halves.}
      QuickSort(lowerPos, middlePos-1);
      QuickSort(middlePos+1, upperPos);

   { else

      the lower position has reached or exceeded the upper position,
      so we're done.  This case terminates the tail-end recursion. }

   end;  { if }
End;  { Procedure QuickSort }


Begin  { Program QuickSortCrt }
   Randomize;   { Initialize the random number function. }
   writeln('Before . . .');
   for i := 1 to ArraySize do begin
      MyArray[i] := trunc(random(1000))+1;
      writeln(IntToStr(i)+ ': '+IntToStr(MyArray[i]));
   end; { for }
   QuickSort(1, ArraySize);
   writeln('After . . .');
   for i := 1 to ArraySize do begin
      writeln(IntToStr(i)+ ': '+IntToStr(MyArray[i]));
   end; { for }
End. { Program QuickSortCrt }


Although QuickSort is harder to understand, and therefore harder to program, it works extremely well and it quite efficient.  Where the swap sort would take roughly n x n compares to sort the array, QuickSort requires only roughly n log n.  So where a swap sort on 10,000 elements would require roughly 100,000,000 compares, QuickSort needs only 132,877!  Pretty cool, eh?  Now that 9,000,000 element array is within our sortable reach! Remember that although these examples deal only with arrays, you can use the same methodologies on lists and pointer chains, and many other data types you encounter.
I hope this has been helpful in providing more core information upon which we can build in the future.  Feel free, encouraged even, to e-mail me with any comments, questions, or suggestions.  Thank you and goodnight.

Copyright ©1995 - Prime Time Programming

----code_cleared_checked----