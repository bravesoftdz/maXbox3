program TimerEvent_Object_UML;
// tutorial on http://www.softwareschule.ch/download/maxbox_starterpdf
// timerevent with time dialog synchronisation or event triggering, loc's=155
// when messagebox is to early (line 15) the break condition never arrives

//CLX (Delphi und C++ Builder) basiert auf Qt _59

const MILLISECONDS = 1000; //one second
      EDITBASE = 70; 
      BTNLINE = 400;
 
var myTimer, myTimer2: TTimer; //is an object of class TTimer!// step 1
    frm: TForm;
    timelbl: TLabel;
    okbtn: TButton;
    glob_count: byte;
    timelog_str: string;
    start_b: boolean;

//-------------------------------form begin---------------------//
procedure CloseClick(Sender: TObject);
begin
  frm.Close;
    if myTimer <> NIL then begin
      myTimer.enabled:= false;
      myTimer.Free;
      myTimer:= NIL;
  end;  
end;

procedure startStopClick(Sender: TObject);
begin
  //toogle the clock  
  if start_b then begin
    myTimer.enabled:= false;
    okbtn.caption:= 'Go on'; 
  end else begin
    myTimer.enabled:= true; 
    okbtn.caption:= 'Stop'; 
  end;
    //state transition
    start_b:= NOT start_b;
end;

procedure loadTimerForm;
var 
  closeBtn: TButton;
begin
  frm:= TForm.create(self);
  timeLbl:= TLabel.create(frm);
  closeBtn:= TButton.create(frm);
  okBtn:= TButton.create(frm);
  try
    with frm do begin
      caption:= '*************ETCS RockClock**************';  
      height:= 500;
      width:= 580;
      color:= clpurple;
      Position:= poScreenCenter;
      show;
    end;
    with timeLbl do begin
      parent:= frm;
      setbounds(55,EDITBASE + 60,180,20);
      font.size:= 90;
      font.name:= 'Times New Roman';
      font.color:= clred;
      caption:= 'TIMER:';
    end;  
    with okBtn do begin
      parent:= frm;
      caption:= 'Stop Clock';
      setbounds(210,BTNLINE,145,40);
      font.size:= 18;
      onclick:= @startStopClick;
      show
    end;
    with closeBtn do begin
      parent:= frm;
      caption:= 'CloseX';
      setbounds(390,BTNLINE,145,40);
      font.size:= 18;
      onclick:= @closeClick;
      show
    end;   
  except
    frm.Free;
    Exit
  end  
end;
//--------------------------form end--------------------------//

function getExePath: string;
begin
  result:= ExtractFilePath(Application.ExeName)
end;

procedure timeEventLogger(vlog: string);
var 
  myTimeList: TStringList;
begin
  //object gets created(constructor)
  myTimeList:= TStringList.create;
  //Exception Handling
  try
    myTimeList.Add(vlog)
    myTimeList.SaveToFile(getExePath+'timerobject2_log.txt');
  finally //or except
  //showMessage('time log file not found');
    myTimeList.Free;
  end    
end;

procedure timer2Event(Sender: TObject);
begin
  //if assigned(mytimer) then begin
  if mytimer <> NIL then begin
    mytimer.onTimer:= NIL;
    mytimer.Free;
    mytimer2.Free;
  end;
 //must be at the end, cause the dialog blocks the event! 
 ShowMessage('timer1 and timer2 is stopped');
end;  

procedure timer1Event(Sender: TObject);
begin
  incb(glob_count)
  if glob_count >= 60 then begin
    myTimer.enabled:= false;
    myTimer.Free;
    myTimer:= NIL;
  end;
  timelog_str:= timelog_str + IntToStr(glob_count)+' time: '
                       +TimeToStr(time)+#13#10
  timeLbl.caption:= TimeToStr(time);               
  timeEventLogger(timelog_str);               
end;  


//main program
begin
  glob_count:= 0;
  ShowMessage('Press OK to start with timer clock at: '
                 +dateToStr(date)+': '+timeToStr(time))
  start_b:= true;
  myTimer:= TTimer.Create(self);
  myTimer.Interval:= MILLISECONDS;
  myTimer.onTimer:= @timer1Event;
  //second object
  {myTimer2:= TTimer.Create(self);
  myTimer2.Interval:= 4000;
  myTimer2.onTimer:= @timer2Event;}
  loadTimerForm;
end.

{//Purpose
Use the Timer component to trigger an event, either one time or repeatedly, after a measured interval. Write the code that you want to occur at the specified time inside the timer component's OnTimer event. 
//Tasks
To specify the amount of elapsed time before the timer event is triggered, use the Interval property. 
To discontinue a timed event, set the timer component's Enabled property to False. TTimer encapsulates the Windows API timer functions.

Unit
ExtCtrls

//Description
TTimer is used to simplify calling the Windows API timer functions SetTimer and KillTimer, and to simplify processing the WM_TIMER messages. Use one timer component for each timer in the application.
The execution of the timer occurs through its OnTimer event. TTimer has an Interval property that determines how often the timer’s OnTimer event occurs. Interval corresponds to the parameter for the Windows API SetTimer function.
Caution: Limitations on the total number of timers system-wide are system dependent.
//Sender of a button click:
The parameter "Sender" references the control that was used to call the method. If you click on the Button1 control, causing the Button1Click method to be called, a reference or pointer to the Button1 object is passed to Button1Click in the parameter called Sender.}

{Pascal Casing convention capitalizes the first character of each word (including acronyms over two letters in length) as in the following examples.
PropertyDescriptor
HtmlTag
PascalCase

Camel Casing convention capitalizes the first character of each word except the first word, as in the following examples.
propertyDescriptor
ioStream
htmlTag
camelCase}