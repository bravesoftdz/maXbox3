PROGRAM DataGrid_2_TestSystem;

///////////////////////////////////////////////////////////////////////////
//  #sign:Administrator: PC08: 09/02/2014 12:26:28 PM 
//  Purpose: how to call a dll function, still on progress  
//  #path>ples\E:\maxbox3\mXGit39988\maxbox3\examples\                    
//  Lines of Code #locs:720
///////////////////////////////////////////////////////////////////////////

Const TEXTOUT = 'hi world of grid func in opcode ';

//############################################################################
// Archimedes DLL Architect
//############################################################################
//TODO: Button with stop event, change color and save bitmap as png
  //TODO: transfer the App to a dll stub function!
  //{ TODO : the following line looks like a bug... }

type
 TAppData = record
   Name: shortstring;
   Size: longint;
   Release: shortstring;
   descript: shortstring;
 end;


{type  
  PROCESS_MEMORY_COUNTERS = record
    cb : DWORD;
    PageFaultCount : DWORD;
    PeakWorkingSetSize : DWORD;
    WorkingSetSize : DWORD; //Task managers MemUsage number
    QuotaPeakPagedPoolUsage : DWORD;
    QuotaPagedPoolUsage : DWORD;
    QuotaPeakNonPagedPoolUsage : DWORD;
    QuotaNonPagedPoolUsage : DWORD;
    PagefileUsage : DWORD; //TaskMan's VM Size number
    PeakPagefileUsage : DWORD;
  end;
  TProcessMemoryCounters = PROCESS_MEMORY_COUNTERS;}
  
  { _OSVERSIONINFOA = record
    dwOSVersionInfoSize: DWORD;
    dwMajorVersion: DWORD;
    dwMinorVersion: DWORD;
    dwBuildNumber: DWORD;
    dwPlatformId: DWORD;
    szCSDVersion: array[0..127] of AnsiChar; { Maintenance AnsiString for PSS usage }
  {end;
 //TIntegerList
 //var aos: TOSVersionInfo;

//  function  {**************************************************}
function GetProcessMemoryInfo(Process: THandle; var MemoryCounters: TProcessMemoryCounters;
                                    cb: DWORD): BOOL; //stdcall;; 
     External 'GetProcessMemoryInfo@psapi.dll stdcall';
     
 Function OpenProcess2(dwDesiredAccess: DWORD; bInheritHandle:BOOL; dwProcessId: DWORD):THandle;
     External  'OpenProcess@kernel32.dll stdcall';


{TYPE <Type declarations>} 
  var FWait, switch: Boolean;
      FValueA, FValueB: Float;
      //asd: TDoubleArray;
    aGrid: TStringGrid;
    app: TAppData;
    f: Text; {file of} //TAppData;
    FaDatfile: String;
    Fmodified: Boolean;
    myrec: TSearchrec;
    //mcit: TComponentEnumerator;
    //file: dwstestbin
  
     
//<FUNCTION>
//<PROCEDURE> 

procedure TBuildAppGrid_fillGrid;
var
  crow: Integer;
  //UTF8FileHeader: integer;
  //ad: UTF8FileHeader
  mss: TCopyFileFlag; //, TFileIterator, TFileSearcher;
  //atr: TCommandModule //ICommandServer 
begin
  crow := 1;
  with aGrid do begin
    Cells[0,0]:= 'Application Name';
    ColWidths[0]:= 120;
    Cells[1,0]:= 'App Size';
    ColWidths[1]:= 60;
    Cells[2,0]:= 'Release Date';
    ColWidths[2]:= 90;
    Cells[3,0]:= 'Description';
    ColWidths[3]:= 140;
    if FaDatFile <> '' then begin
      //AssignFileRead(f,FaDatFile);
      //AssignFile(f,FaDatFile);
      //findfirst
      //findfirstutf8
      //findfirst2
      //ReadFileToString
        //keypressed
        //findnext2
        //findclose
       // Reset2(f);
       //reset2
      try
        //while not Eof(F) do begin
          //Read (F, app);
          Cells[0,crow]:= app.Name;
          Cells[1,crow]:= intToStr(app.size);
          Cells[2,crow]:= app.Release;
          Cells[3,crow]:= app.descript;
          Inc(cRow);
          RowCount:= crow +1;  //new entry
        //end;
      finally
        //CloseFile(f);
      end;
    end;// if FileExists...
  end; //with
end;


var  nYear,
  nMonth,
  nDay,
  fcounter: word;
  dflistView: TListBox;
  
procedure {constructor} TChangeFinder_Create_prepList_and_Date(alistView: TListBox);
begin
  //GetDate(Year, Month, Day, DayofWeek);
  //now date is to slow
  //inherited Create;
  dflistView:= alistView;
  decodedate(date, nyear, nmonth, nday);
    dflistView.items.insert(0, format('%-120s %10s -%5s',
       ['Filename:', 'Size:', 'Time:']));
     fcounter:= 1;
  with alistView.Items do begin
    BeginUpdate;
    Clear;
    EndUpdate;
  end;
end;
  
      //faDirectory = $00000010;
      //faAnyFile   = $0000003F;   


PROCEDURE TChangeFinder_ShowFiles(Showpath: STRING; sr: TSearchRec);
VAR
  arcdisp: shortSTRING;
  DateRec: TDateTime;
  lenStr,
  insertStr,
  fname,
  fext, outPutStr: string;
  len      : BYTE;
  AYear, AMonth, ADay: Word;
  aHour, aMin, aSec, aMsec: word;
   //aver: TVertex;
   avert :TAffineVector;


BEGIN
  //IF sr.Attr IN [$8..$F] {, $28..$2F]} THEN BEGIN
    IF Pos('.', sr.Name) > 0 THEN
      Delete(sr.Name, Pos('.', sr.Name), 1);
  //END;
  IF (Pos('.', sr.Name) > 0) AND (Length(sr.Name) > 0) THEN begin
    fname:= Copy(sr.Name, 1, Pos('.', sr.Name) - 1);
    fext:= sr.Name;
    Delete(fext, 1, Pos('.', fext));
  END ELSE BEGIN
    fname:= sr.Name;
    fext:= '  ';
  END;
  arcdisp:= '    ';
//&&{$WARN SYMBOL_PLATFORM OFF}
  IF sr.Attr AND faArchive  = faArchive  THEN arcdisp[1] := 'A';
  IF sr.Attr AND faReadOnly = faReadOnly THEN arcdisp[2] := 'R';
  IF sr.Attr AND faHidden   = faHidden   THEN arcdisp[3] := 'H';
  IF sr.Attr AND faSysFile  = faSysFile  THEN arcdisp[4] := 'S';
//{$WARN SYMBOL_PLATFORM ON}
  //8..15, 40..47
  //IF NOT (sr.Attr IN [$8..$F, $28..$2F]) THEN BEGIN
    //Str(sr.Size, lenStr);
    IF Length(lenStr) > 3 THEN BEGIN
      insertStr:= '.';
      len:= Length(lenStr) - 2;
      Insert(insertStr, lenStr, len);
      IF Length(lenStr) > 7 THEN BEGIN
        len:= Length(lenStr) - 6;
        Insert(insertStr, lenStr, len);
      END;
    END;
  //END;
  //IF NOT (sr.Attr IN [$8..$F, $28..$2F]) THEN BEGIN
   //check the system now date
    dateRec:= FileDatetoDateTime(sr.Time);
    DecodeDate(dateRec, AYear, AMonth, ADay);
    DecodeTime(dateRec, aHour, aMin, aSec, aMsec); //new 1.8
    //daterec:= now;  //testroutine
    IF (ADay = nDay) AND (AYear = nYear) AND (AMonth = nMonth) THEN BEGIN
        IF Showpath[Length(Showpath)] = '\' THEN
        Delete(Showpath, Length(Showpath), 1);
        outPutStr:= Showpath + '\' + fname + '.' + fext;
        //dflistview.Columns:= 3;
        //dflistView.TabWith:= 50;
        //dflistView.Items.add(outPutStr +^I+ lenStr);  // ^I is the Tab char
        dflistView.Items.Insert(0, format('%-80s %10s -%5s',
           [outPutStr, lenStr, inttoStr(aHour)+':'+inttoStr(aMin)]));
     END;
  //END;
END;

PROCEDURE TChangeFinder_ShowFiles2(Showpath: STRING);
VAR
  arcdisp: shortSTRING;
  DateRec: TDateTime;
  lenStr,
  insertStr,
  fname,
  fext, outPutStr: string;
  len      : BYTE;
  AYear, AMonth, ADay: Word;
  aHour, aMin, aSec, aMsec: word;

BEGIN
  //IF sr.Attr IN [$8..$F] {, $28..$2F]} THEN BEGIN
    IF Pos('.', SearchRecname) > 0 THEN
      //Delete(SearchRecname[1], Pos('.', SearchRecname), 1);
  //END;
  IF (Pos('.', SearchRecname) > 0) AND (Length(SearchRecname) > 0) THEN begin
    fname:= Copy(SearchRecname, 1, Pos('.', SearchRecname) - 1);
    fext:= SearchRecname;
    Delete(fext, 1, Pos('.', fext));
  END ELSE BEGIN
    fname:= SearchRecname;
    fext:= '  ';
  END;
  arcdisp:= '    ';
//&&{$WARN SYMBOL_PLATFORM OFF}
  IF SearchRecAttr AND faArchive  = faArchive  THEN arcdisp[1] := 'A';
  IF SearchRecAttr AND faReadOnly = faReadOnly THEN arcdisp[2] := 'R';
  IF SearchRecAttr AND faHidden   = faHidden   THEN arcdisp[3] := 'H';
  IF SearchRecAttr AND faSysFile  = faSysFile  THEN arcdisp[4] := 'S';
//{$WARN SYMBOL_PLATFORM ON}
  //8..15, 40..47
  //IF NOT (sr.Attr IN [$8..$F, $28..$2F]) THEN BEGIN
    //Str(sr.Size, lenStr);
    IF Length(lenStr) > 3 THEN BEGIN
      insertStr:= '.';
      len:= Length(lenStr) - 2;
      Insert(insertStr, lenStr, len);
      IF Length(lenStr) > 7 THEN BEGIN
        len:= Length(lenStr) - 6;
        Insert(insertStr, lenStr, len);
      END;
    END;
  //END;
  //IF NOT (sr.Attr IN [$8..$F, $28..$2F]) THEN BEGIN
   //check the system now date
    dateRec:= FileDatetoDateTime(SearchRecTime);
    DecodeDate(dateRec, AYear, AMonth, ADay);
    DecodeTime(dateRec, aHour, aMin, aSec, aMsec); //new 1.8
    //daterec:= now;  //testroutine
    IF (ADay = nDay) AND (AYear = nYear) AND (AMonth = nMonth) THEN BEGIN
        IF Showpath[Length(Showpath)] = '\' THEN
        Delete(Showpath, Length(Showpath), 1);
        outPutStr:= Showpath + '\' + fname + '.' + fext;
        //dflistview.Columns:= 3;
        //dflistView.TabWith:= 50;
        //dflistView.Items.add(outPutStr +^I+ lenStr);  // ^I is the Tab char
        dflistView.Items.Insert(0, format('%-80s %10s -%5s',
           [outPutStr, lenStr, inttoStr(aHour)+':'+inttoStr(aMin)]));
     END;
  //END;
END;

PROCEDURE TChangeFinder_SearchDirectories(path: string; const fname: STRING);
VAR
  sRecord : TSearchRec;
  Showpath: STRING;
  //myf: TChangeFinder; 
  //amod: TmodCommand;
BEGIN
  (* Suche nach Dateien: *)
  IF Length(path) > 0 THEN
    IF path[Length(path)] <> '\' THEN
      path := path + '\';
  SRecord.Name:= '';
  if FindFirst2(path+fname, faAnyfile MOD faDirectory, SRecord) = 0 then begin
    Showpath:= '        .   ';
    IF SRecord.Name <> '' THEN BEGIN
      IF Length(path)  > 3 THEN
      Showpath:= Copy(path, 1, Length(path) - 1)
     ELSE Showpath:= path;
    END;
   try
    repeat
     //0..14, 32..46
      //IF SRecord.Attr IN [$0..$E, $20..$2E] THEN
      //IF (SRecord.Attr <=$E) or (SRecord.Attr >=$20) or (SRecord.Attr <=$2E) then
      //IN [$0..$E, $20..$2E] THEN
      
      //FindFirst(StartDir+FileMask, faAnyFile-faDirectory) = 0;
      IF (SRecord.Attr = faAnyFile-faDirectory) then
          TChangeFinder_ShowFiles(Showpath,SRecord);
    until FindNext2(sRecord) <> 0;
   finally
      //WFindClose(sRecord.findhandle);
      FindClose2(sRecord);

   end;
  end;
  (* Suche nach Verzeichnissen: *)
  // hidden dir available with fahidden
  if FindFirst2(path + '*.*', faDirectory or faHidden, SRecord) = 0 then begin
    try
    repeat
        IF (SRecord.Attr AND faDirectory <> 0) AND
       (SRecord.Name[1] <> '.') THEN
      //recursion to get subdirectories
      TChangeFinder_SearchDirectories(path + SRecord.Name, fname);
      writeln(path + SRecord.Name)
    until FindNext2(sRecord) <> 0;
    finally
      FindClose2(sRecord);
    end;
  end;
end;

PROCEDURE TChangeFinder_SearchDirectories2(path: string; const fname: STRING);
VAR
  //sRecord : TSearchRec;
  Showpath: STRING;
  //myf: TChangeFinder; 
  //amod: TmodCommand;
BEGIN
  (* Suche nach Dateien: *)
  IF Length(path) > 0 THEN
    IF path[Length(path)] <> '\' THEN
      path := path + '\';
  //SearchRecname:= '';
  if FindFirst(path+fname, faAnyfile MOD faDirectory) = 0 then begin
    Showpath:= '        .   ';
    IF SearchRecname <> '' THEN BEGIN
      IF Length(path)  > 3 THEN
      Showpath:= Copy(path, 1, Length(path) - 1)
     ELSE Showpath:= path;
    END;
   try
    repeat
     //0..14, 32..46
      //IF SRecord.Attr IN [$0..$E, $20..$2E] THEN
      //IF (SRecord.Attr <=$E) or (SRecord.Attr >=$20) or (SRecord.Attr <=$2E) then
      //IN [$0..$E, $20..$2E] THEN
      
      //FindFirst(StartDir+FileMask, faAnyFile-faDirectory) = 0;
      //IF (SearchRecAttr = faAnyFile-faDirectory) then
          //TChangeFinder_ShowFiles2(Showpath);
    until FindNext <> 0;
   finally
      //WFindClose(sRecord.findhandle);
      FindClose;

   end;
  end;
  (* Suche nach Verzeichnissen: *)
  // hidden dir available with fahidden
  if FindFirst(path + '*.*', faDirectory or faHidden) = 0 then begin
    try
    repeat
        IF (SearchRecAttr AND faDirectory <> 0) AND
       //(SRecord.Name[1] <> '.') THEN
       (SearchRecName[1] <> '.') THEN
    
      //recursion to get subdirectories
      TChangeFinder_SearchDirectories2(path + SearchRecName, fname);
      writeln(path + SearchRecName)
    until FindNext <> 0;
    finally
      FindClose;
    end;
  end;
end;


{**************************************************}
//function GetProcessMemoryInfo; external 'psapi.dll';
{****************************************************}

function ProcessMemoryUsage(ProcessID : DWORD): DWORD;
var ProcessHandle : THandle;
    MemCounters   : TProcessMemoryCounters;
begin
  Result:= 0;
  ProcessHandle:= OpenProcess2(PROCESS_QUERY_INFORMATION or PROCESS_VM_READ,
                               false, ProcessID);
  try
    if GetProcessMemoryInfo(ProcessHandle,
                            MemCounters, sizeof(MemCounters))
    then Result:= MemCounters.WorkingSetSize;
  finally
    CloseHandle(ProcessHandle);
  end;
end;

function ProcessPageUsage(ProcessID : DWORD): DWORD;
var ProcessHandle : THandle;
    MemCounters   : TProcessMemoryCounters;
begin
  Result:= 0;
  ProcessHandle:= OpenProcess2(PROCESS_QUERY_INFORMATION or PROCESS_VM_READ,
                               false, ProcessID);
  try
    if GetProcessMemoryInfo(ProcessHandle,
                            MemCounters, sizeof(MemCounters))
    then Result:= MemCounters.PagefileUsage;
  finally
    CloseHandle(ProcessHandle);
  end;
end;

function ProcessAllRec(ProcessID : DWORD): TProcessMemoryCounters;
var ProcessHandle : THandle;
    MemCounters   : TProcessMemoryCounters;
begin
  //Result:= NULL;
  ProcessHandle:= OpenProcess2(PROCESS_QUERY_INFORMATION or PROCESS_VM_READ,
                               false, ProcessID);
  try
    if GetProcessMemoryInfo(ProcessHandle,
                            MemCounters, sizeof(MemCounters))
    then Result:= MemCounters;
  finally
    CloseHandle(ProcessHandle);
  end;
end;

Procedure OVCInternationalDemoClass;
begin
 with TOvcIntlSup.Create do begin
    //Function InternationalDate( ForceCentury : Boolean) : string');
    writeln('InternationalDate: '+InternationalDate(true));
    //Function InternationalDatePChar( Dest : PChar; ForceCentury : Boolean) : PChar');
    writeln('InternationalLongDate: '+InternationalLongDate(false,false));
    //Function InternationalTime( ShowSeconds : Boolean) : string');
    writeln('InternationalTime: '+InternationalTime(false));
    //Function InternationalTimePChar( Dest : PChar; ShowSeconds : Boolean) : PChar');
    //Function MonthStringToMonth( const S : string; Width : Byte) : Byte');
    writeln(Country)
    Free;
  end;
  //TerminateProcess( hProcess : THandle; uExitCode : UINT) : BOOL');
  //GetExitCodeProcess( hProcess : THandle; var lpExitCode : DWORD) : BOOL');
 //FatalExit( ExitCode : Integer)');
 //ExecuteAndWait(cmdLine : String; visibility : Word;
   //                     timeout : Cardinal = MaxInt;
     //                   killAppOnTimeOut : Boolean = True) : Integer;
  //GetTemporaryFilesPath : String;
 //GetTemporaryFileName : String;
 //Zero
 //TPanelStyle
   //TFontLook
 //FindFileInPaths(const fileName, paths : String) : String;
     //MakeForm
 //PathsToString(const paths : TStrings) : String;
 //StringToPaths(const pathsString : String; paths : TStrings);
 //MacroExpandPath(const aPath : String) : String;
 //TOnGetItemEvent
   //TCacheRecord
   //tMessagefunc
   //EFilerException(CL: TPSPascalCompiler);
//EInvalidFileSignature(CL: TPSPascalCompiler);
//TTextWriter(CL: TPSPascalCompiler);
//TTextReader(CL: TPSPascalCompiler);
//TBinaryWriter(CL: TPSPascalCompiler);
//TBinaryReader(CL: TPSPascalCompiler);
//TPersistentObjectList(CL: TPSPascalCompiler);
//TPersistentObject(CL: TPSPascalCompiler);
//IPersistentObject(CL: TPSPascalCompiler);
//TVirtualWriter(CL: TPSPascalCompiler);
//TVirtualReader(CL: TPSPascalCompiler);
//PersistentClasses(CL: TPSPascalCompiler);
end;    


function SplitToken(const Text: string; SplitChar: Char;
                          var First, Last: string): Boolean;
var  SplitPos: Integer;
      ec: EJclError;
begin
  Result:= False;
  SplitPos:= Pos(SplitChar, Text);
  if SplitPos = 0 then Exit;
  First:= Trim(Copy(Text, 1, SplitPos -1));
  Last:= Trim(Copy(Text, SplitPos +1, Length(Text) -SplitPos));
  Result:= (First <>'') and (Last <>'');
end;


function TForm1_scrollAllNode(aNode: TalXmlNode): Integer;
Var aStack: Tstack;
    i: integer;
begin
  Result := 0;
  aStack := Tstack.Create;
  try
     For i := 0 to aNode.ChildNodes.Count - 1 do
        aStack.Push((ANode.ChildNodes[i]));
         While astack.Count > 0 do begin
        inc(result);
        aNode := TalxmlNode(astack.Pop);
        If assigned(ANode.ChildNodes) then
          For i := 0 to ANode.ChildNodes.Count - 1 do
            aStack.Push((ANode.ChildNodes[i]));
           If assigned(ANode.AttributeNodes) then
          For i := 0 to ANode.attributeNodes.Count - 1 do
            aStack.Push((ANode.AttributeNodes[i]));
      end;
  finally
    aStack.Free;
  end;

end;

function IntToStrZeroPad(Value, Count: Integer): AnsiString;
begin
  Result := IntToStr(Value);
  if Length(Result) < Count then
    Result := StrFillChar('0', Count - Length(Result)) + Result;
end;

function JclGUIDToString(const GUID: TGUID): string;
begin
  {$IFDEf CLR}
  Result := GUID.ToString();
  {$ELSE}
  Result := Format('{%.8x-%.4x-%.4x-%.2x%.2x-%.2x%.2x%.2x%.2x%.2x%.2x}',
    [GUID.D1, GUID.D2, GUID.D3, GUID.D4[0], GUID.D4[1], GUID.D4[2],
     GUID.D4[3], GUID.D4[4], GUID.D4[5], GUID.D4[6], GUID.D4[7]]);
  {$ENDIF CLR}
end;


function GetOsVersionInfo2: TOSVersionInfo; 
var
  verInfo: TOSVersionInfo;
begin
  verinfo.dwOSVersionInfoSize:= sizeof(verinfo);
  GetVersionEx(Verinfo);
  result:= Verinfo;
end;  

var 
   dbform: TForm;
   alistView: TListBox;

procedure CopytoClip(sender: TObject);
begin
  alistview.items.savetofile(exepath+'filechangetoday.txt');
  openDoc(exepath+'filechangetoday.txt');
end;  


procedure CreateDBGridForm(dblist: TStringList);
//var 
  // dbform: TForm;
  //alistView: TListBox)
begin
   dbform:= CreateMessageDialog('My Fast Form File Finder Converter - FFC',mtwarning,
                                        [mball, mbyes, mbhelp, mbok]);
   dbform.caption:= 'File Changes Today in maXbox Dir: exepath List: '+exepath;
   dbform.setBounds(50,50,900,700)
   dbform.Formstyle:= fsStayontop;
   dbform.Color:= 123;
   with TLabel.Create(self) do begin
     parent:= dbform;
     SetBounds(50,100,500,200)
     font.size:= 19;
     font.color:= clyellow;
     dblist.Add('File Changes of Today in maXbox Dir of: '+DatetoStr(date))
     caption:= dblist.text;
   end;  
  
   alistView:= TListBox.Create(self)
     with alistView do begin
     parent:= dbform;
     font.size:= 12;
     //clearselection;
     scrollWidth:= 1400;
     //additem
     SetBounds(50,150,800,480)
     ondblclick:= @CopytoClip;
   end;
   
   dbform.Show; 
end;   


var  verInfo: TOSVersionInfo;
    drive: shortstring;
    mycf: TChangeFinder;
    myuser: string;
    asize: dword;


Begin  //Main
//<Executable statements>
  //TOutlookExport_Spy;
  Writeln('');
  //Writeln('Start Command of DLL: '+CheckIEStartCommand);  
//<Definitions>  
   //ares:= TResolver.create;
 { with TResolver.create do begin
   //writeln(inttostr(GetHostByName(gethostname)));
    Free;   end;  }
    {repeat 
     TApplication_PaintView(aform.canvas);
     switch:= NOT switch;
     Sleep(20);
   until isKeyPressed or FWait;}
    {with TledForm.create(self) do begin
    showmodal; free; end;} 
 // function GetMacAddresses(const Machine: string; const Addresses: TStrings):Integer;
   OVCInternationalDemoClass;
  
 //GetProcessMemoryInfo(Process 
     writeln('mem from dll '+inttostr(ProcessMemoryUsage(GetCurrentProcessID)));
     writeln('page from dll '+inttostr(ProcessPageUsage(GetCurrentProcessID)));
     writeln('proc all from dll '
                 +inttostr(ProcessAllRec(GetCurrentProcessID).workingsetsize));
     writeln('proc peak workingset '
              +inttostr(ProcessAllRec(GetCurrentProcessID).PeakWorkingSetSize div 1024));
     writeln('proc peak paged use '
              +inttostr(ProcessAllRec(GetCurrentProcessID).QuotaPeakPagedPoolUsage));
     writeln('proc page peak file '
              +inttostr(getProcMemInfo(GetCurrentProcessID).PeakPagefileUsage div 1024));
 
    // SplitImages(self);
     //deletefiles(PICPATH,'*.bmp');
      //GetCurrentHwProfile( var lpHwProfileInfo : THWProfileInfo) : BOOL');
        //SetPriorityClass
        //GetPriorityClass
     //OpenClipboard( 
     //booleantostr(false);
     //JclGUIDToString
       //TJclNumericFormat 
          //function IsClass(Address: Pointer): Boolean;
          //function IsObject(Address: Pointer): Boolean;
           //IsClass(Address: Pointer): Boolean;
           //IsObject(Address: Pointer): Boolean;
           //ReadKey
             //IntToStrZeroPad
           //  StrFillChar
           //EndDialog( 
             //GetDlgItem(
             //SetDlgItemInt( 
               //dialogbox
         //TQuaternionList(CL: TPSPascalCompiler);
//TByteList(CL: TPSPascalCompiler);
   //TSingleList(CL: TPSPascalCompiler);
   //TIntegerList(CL: TPSPascalCompiler);
   //TTexPointList(CL: TPSPascalCompiler);
   //TVectorList(CL: TPSPascalCompiler);
   //TAffineVectorList(CL: TPSPascalCompiler);
   //TBaseVectorList(CL: TPSPascalCompiler);
   //TBaseList(CL: TPSPascalCompiler);
   //VectorLists(CL: TPSPascalCompiler);
   //TXIntegerList
   //TJclSimpleLog
     //jExecute 
       writeln(booleantostr(samepath(exepath, exepath)))
       
  verinfo:= GetOsVersionInfo2;
  writeln('OS Verinfo '+inttostr(Verinfo.dwMajorVersion))
  writeln('OS Verinfo '+inttostr(Verinfo.dwMinorVersion))
  writeln('OS Versizeinfo '+inttostr(Verinfo.dwOSVersionInfoSize))
  //Function IsDelphiProject( const FileName : string) : Boolean');
  writeln(booleantoStr(IsDelphiProject(exepath+'maxbox3.exe')));
  //FileBackup(const 
  
  //TChangeFinder_SearchDirectories(exepath+'examples','*.txt');
   
  TChangeFinder_SearchDirectories2(exepath+'examples','*.txt');
   
    //var drive: string[20];
    //mycf: TChangeFinder;
   //begin
   CreateDBGridForm(TStringlist.create);
    screen.cursor:=crHourglass;
    //drive:= dcbHD.Drive;
    //drive:= drive + ':';
    //drive:= drive + 'E:';
    
    drive:= Exepath;
    
    mycf:= TChangeFinder.Create_prepList_and_Date(alistview);
    mycf.SearchDirectories(drive + '\','*.*');
    mycf.Free;
    screen.cursor:=crDefault;
    //asize:= sizeof(myuser);
    //if avgetusername(myuser, asize) then
      // writeln('myuser '+myuser);
    with TGraphWinForm.create(self) do begin
      parent:= dbform;
      show;
      //free;
    end;  
 
    maxform1.openGLTry1click(self);
         
END. 

small set for arduino and android testing 

     or the new keywords super or another typedef

var drive: string[20];
    mycf: TChangeFinder;
begin
  screen.cursor:=crHourglass;
    drive:= dcbHD.Drive;
    drive:= drive + ':';
    mycf:= TChangeFinder.prepList_and_Date(frmMain.livchangefind);
    mycf.SearchDirectories(drive + '\','*.*');
    mycf.Free;
    screen.cursor:=crDefault;
end; }



http://glscene.sourceforge.net/wikka/HomePage

{-Modulename and path: udwsfiler
//
//D:\franktech\Delphmax\dws\DWSServer.mpb
//Category    Access method
//
//Developer kleiner kommunikation
//Last Modification on 30.06.03 17:51:54:
//question is destructor of grid
  descript as a new field on 20.6.03
  modified flag on 30.6.03
//==========================================================================}
unit udwsfilerwiz;


interface

uses QGrids;

type
 TAppData = record
   Name: string[50];
   Size: longint;
   Release: string[30];
   descript: string[80];
 end;

  TBuildAppGrid = class (TObject)
  private
    aGrid: TStringGrid;
    app: TAppData;
    f: file of TAppData;
    FaDatfile: ShortString;
    Fmodified: Boolean;
  protected
    function GetaDatfile: ShortString;
    procedure SetaDatfile(const Value: ShortString);
  public
    constructor initGrid(vGrid: TStringGrid; vFile: shortString);
    procedure fillGrid;
    procedure storeGrid;
    property aDatfile: ShortString read GetaDatfile write SetaDatfile;
    property modified: Boolean read Fmodified write Fmodified;
  end;


implementation

uses sysutils, QDialogs, QControls,
  QStdCtrls;


{
******************************** TBuildAppGrid *********************************
}
constructor TBuildAppGrid.initGrid(vGrid: TStringGrid; vFile: shortString);
begin
  aGrid:= vGrid;
  aDatfile:= vFile;
  with aGrid do begin
    ScrollBars:= ssAutoVertical;
    FixedRows := 1;
    FixedCols:= 0;
    ColCount:= 4;
    RowCount:= 2; //title is one row
  end;
end;

procedure TBuildAppGrid.fillGrid;
var
  crow: Integer;
begin
  crow := 1;
  with aGrid do begin
    Cells[0,0]:= 'Application Name';
    ColWidths[0]:= 120;
    Cells[1,0]:= 'App Size';
    ColWidths[1]:= 60;
    Cells[2,0]:= 'Release Date';
    ColWidths[2]:= 90;
    Cells[3,0]:= 'Description';
    ColWidths[3]:= 140;
    if aDatFile <> '' then begin
      AssignFile(f,aDatFile);
      Reset(f);
      try
        while not Eof(F) do begin
          Read (F, app);
          Cells[0,crow]:= app.Name;
          Cells[1,crow]:= intToStr(app.size);
          Cells[2,crow]:= app.Release;
          Cells[3,crow]:= app.descript;
          Inc(cRow);
          RowCount:= crow +1;  //new entry
        end;
      finally
        CloseFile(f);
      end;
    end;// if FileExists...
  end; //with
end;

function TBuildAppGrid.GetaDatfile: ShortString;
begin
  if FileExists(FaDatFile) then
  result:= FaDatFile
  else begin
     AssignFile(f, FaDatFile);
     Rewrite(f);
     closefile(f);
     result:= FaDatFile;
  end;
end;

procedure TBuildAppGrid.SetaDatfile(const Value: ShortString);
begin
  if FaDatfile <> Value then
  begin
    FaDatfile := Value;
  end;
end;

procedure TBuildAppGrid.storeGrid;
var
  crow: Integer;
begin
  if FModified then
  if MessageDlg('Save Changes in ' +
             aDatFile, mtConfirmation,mbOkCancel,0) = mrOK then
   begin
     AssignFile(f, aDatfile);
     Rewrite(f);
   try
     for crow:= 1 to Pred(aGrid.RowCount) do begin
       app.Name:= aGrid.Cells[0, crow];
       app.size:= strToInt(aGrid.Cells[1, crow]);
       app.Release:= aGrid.Cells[2, crow];
       app.descript:= aGrid.Cells[3, crow];
       Write (f, app);
     end;
   finally
     CloseFile(f);
   end;
  end; //if MessageDlg...
end;

end.


und am TV in SRF Info   um 22:30 oder um 23 Uhr

Wieso dann ausgerechnet um 10 vor 10!?!
----Simple Browser started----
----Simple Browser started----