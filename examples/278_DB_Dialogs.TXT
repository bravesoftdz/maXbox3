PROGRAM FastForm_Operatoren_DBDialog_App_Tester;
//CONST 
//<Constant declarations> 
  //TEXTOUT = 'hi world of code - locs=568';


  Const
    NB = 9; 
    LEFTBASE = 20;
    TOPBASE = 25; 
    MEDIAPATH =  'examples\outline2.txt';



{TYPE 
<Type declarations>}
 type
   Tpermfeld = array[0..9] of integer; 


VAR 
//<Variable declarations>
  //i: integer;
    div_dbl: double;
    bin1, bin2, bin3: integer;
    wd: word;
    bigstring: string;
    flable: shortstring;
    moutline: TOutline;
    mycal2: TDateTimePicker;
    longw: LongWord;
    longi: Longint;


//<FUNCTION>
//<PROCEDURE> 

function GetBigIntDirect: string;
  //unit mybigint
var mbResult: TMyBigInt;
     i: integer;
begin
  mbResult:= TMyBigInt.Create(1);
  try
    // Faktoren im Zaehler aufmultiplizieren
    for i:= 1  to 70 do 
      //mbResult.Multiply(mbresult, mbresult);
   mbResult.Multiply1(mbresult, i);
    Result:= mbResult.ToString;
  finally 
    //FreeAndNil(mbResult);
    mbResult.Free;
  end;
end;

function GetBigIntFact(aval: byte): string;
  //unit mybigint
var mbResult: TMyBigInt;
     i: integer;
begin
  mbResult:= TMyBigInt.Create(1);
  try
    // Faktoren im Zaehler aufmultiplizieren
    for i:= 1  to aval do 
      //mbResult.Multiply(mbresult, mbresult);
   mbResult.Multiply1(mbresult, i);
    Result:= mbResult.ToString;
  finally 
    //FreeAndNil(mbResult);
    mbResult.Free;
  end;
end;


function GetBigIntPower(aval: integer): string;
  //unit mybigint
var mbResult: TMyBigInt;
     i: integer;
begin
  mbResult:= TMyBigInt.Create(1);
  try
    // Faktoren im Zaehler aufmultiplizieren
    for i:= 1 to aval do 
      //mbResult.Multiply(mbresult, mbresult);
   mbResult.Multiply1(mbresult, 2);
    Result:= mbResult.ToString;
  finally 
    //FreeAndNil(mbResult);
    mbResult.Free;
  end;
end;

function GetBigInt2(aval: byte): string;
  //unit mybigint
var mbResult: TMyBigInt;
     i: integer;
begin
  mbResult:= TMyBigInt.Create(1);
  try
    // Faktoren im Zaehler aufmultiplizieren
    for i:= 1  to aval do 
      //mbResult.Multiply(mbresult, mbresult);
   mbResult.Multiply1(mbresult, i);
    Result:= mbResult.ToString;
  finally 
    //FreeAndNil(mbResult);
    mbResult.Free;
  end;
end;

function GetMulu(aval: integer): string;
  //unit mybigint
var mbResult: TMyBigInt;
     i: integer;
begin
  //mbResult:= TMyBigInt.Create(2000000000);
  mbResult:= TMyBigInt.Create(1);
  try
    // Faktoren im Zaehler aufmultiplizieren
    //for i:= 1  to aval do 
      //mbResult.Multiply(mbresult, mbresult);
   //mbresult.value
   aval:= 13
   for i:= 1  to aval do 
     mbResult.Multiply1(mbresult, aval);
    Result:= mbResult.ToString;
  finally 
    //FreeAndNil(mbResult);
    mbResult.Free;
  end;
end;

function GetMuluN(aval: integer): string;
  //unit mybigint
var mbResult: TMyBigInt;
     i,z: integer;
begin
  //mbResult:= TMyBigInt.Create(2000000000);
  mbResult:= TMyBigInt.Create(1);
  try
     for i:= 1  to aval do 
       mbResult.Multiply1(mbresult, aval);
       Result:= mbResult.ToString;
   //end;    
  finally 
    //FreeAndNil(mbResult);
    mbResult.Free;
  end;
end;


function GetBigIntPowerBack(aval: integer): string;
  //unit mybigint
var mbResult: TMyBigInt;
     i: integer;
begin
  mbResult:= TMyBigInt.Create(1);
  try
    // Faktoren im Zaehler aufmultiplizieren
    for i:= 1 to aval do 
      //mbResult.Multiply(mbresult, mbresult);
   mbResult.Multiply1(mbresult, 1);
    Result:= mbResult.ToString;
  finally 
    //FreeAndNil(mbResult);
    mbResult.Free;         
  end;
end;


Procedure showfile(self: TObject);
var idx, i: integer;
begin
    idx:= moutline.selecteditem  //itemindex
  //if selectFile <> '' then
    //mymemo.lines.SaveToFile(selectFile) 
    //for i:= 1 to moutline.count
    //writeln(moutline.items[12].text)
    writeln(moutline.items[idx].text)
  //Stat.simpletext:= selectFile+ ' has been saved' ;
end;

procedure DB_Tester; 

 var mfieldt: TFieldType;
 uname, pname: string;
 mstamp: TSQLTimeStamp;
  LoginDialogProc: function (const ADatabaseName: string; var AUserName, APassword: string): Boolean;
  LoginDialogExProc: function (const ADatabaseName: string; var AUserName, APassword: string): boolean;
 //DBScreen: IDBScreen;
  //DBApplication: IDBApplication;}

begin

   uname:= 'sysdba';
   pname:= 'masterkey';
   //logindialog('dbdemos',uname,pname);
  LoginDialog('dbdemos',uname,pname)
//- Brings up the database Login dialog to allow the user to connect to a database server.

//  PasswordDialog
//- Displays a dialog box that prompts the user for the password of a local password-protected table.}
  RemoteLoginDialog(uname,pname)
//- Brings up the database Login dialog to allow the user to connect to a database server. }
//LoginDialogEx( const ADatabaseName : string; var AUserName, APassword : string; NameReadOnly : Boolean) : Boolean');
   if LoginDialogEx('dbdemos',uname, pname,true) then msg('got it');
   
//   IncludeTrailingBackslash function
//- Ensures path name ends with delimiter
//IncludeTrailingPathDelimiter function
//- Ensures path name ends with delimiter.
 SetCursorType(4);
   with TPasswordDlg.Create(NIL) do begin
    showmodal;
     if modalresult = mrOK then begin
         writeln(password.Text);
         Writeln('Password is set! at: '+DateTimeToStr(Now));
    end else begin
    //if cancelbtn.modalresult = mrCancel then begin
     password.Text:= '';
     //AESpassw:= '';
    end;
   end;
   
     with TLoginDialog.Create(self) do begin
       databasename.caption:= 'maXbase_44';
       label1.caption:= 'myDB maXbase';
       label2.caption:= 'maXbase2';
       //password:= '';
       ShowModal;
       //FormShow(self);
       if modalresult = mrOK then begin
         Writeln('Login to set at: '+DateTimeToStr(Now));
       end;  
       Free;
     end;  

{CheckSqlTimeStamp procedure
- Checks whether a TSQLTimeStamp value represents a valid date and time.}

    CheckSqlTimeStamp(mstamp);
    {DateTimeToSQLTimeStamp function
- Converts a TDateTime value to a TSQLTimeStamp value.}
    mstamp:= DateTimeToSQLTimeStamp(now)

//{ moved to FmtBcd.pas
//   BCDToCurr(const BCD: TBcd; var Curr: Currency): Boolean;
// CurrToBCD(Curr: Currency; var BCD: TBcd; Precision: Integer = 32; Decimals: Integer = 4): Boolean; }


{OleStrToString function
- Copies data received from a COM interface to a string.
{Supports function
- Indicates whether a given object or interface supports a specified interface.
{VarComplexToPolar procedure
- Computes the polar coordinates that correspond to a custom Variant that
represents a complex number.}

{DateTimeToSQLTimeStamp function
- Converts a TDateTime value to a TSQLTimeStamp value.}
{NullSQLTimeStamp constant
- Represents a NULL TSQLTimeStamp value.}
{IsAbortResult function
- Checks the return value from a modal form dialog and indicates whether the user
selected Abort or Cancel.}

//IsPathDelimiter function
//- Indicates whether the byte at position Index of a string is the path delimiter.*)
{FloatToTextFmt function
- Converts a floating-point value to to an unterminated character string, using
a specified format.    }
(*CreateGrayMappedRes function
- Remaps the standard gray colors in a bitmap resource with the system grays.

CreateMappedBmp function
- Changes the color table in a bitmap.       *)
{GetDefFontCharSet function
- Returns the character set of the default system font.}
{GetExtensionVersion function
- Returns the name and version number of an ISAPI or NSAPI application.}
{Rename procedure
- Changes the name of an external file.}  // there are 2 renames!!
{Truncate procedure
- Deletes all the records after the current file position.}
//SameFileName function
//- Compares file names based on the current locale.*)
{DefaultTextLineBreakStyle variable
- Specifies the characters that are used by default to separate lines in text.}
{GetEnvironmentVariable function
- Returns environment variable value..!!!}

{FindClassHInstance function
- Returns the instance handle for the module in which a class type is defined.
{GetClass function
- Returns a registered persistent class given its name.
IntToIdent function
- Uses a mapping array to convert integers into their corresponding string
identifiers.  }
{BeginThread function
- Spawns a separate thread of execution.

CheckSynchronize function
- Allows background threads to synchronize their execution with the main thread.

EndThread function
- Terminates the execution of a thread.
ForegroundTask function
- Indicates whether the current thread is running in the foreground.
IsMultiThread variable
- Indicates whether the application spawned additional threads using BeginThread
or TThread objects.

WakeMainThread variable
- Represents a method (event handler) that is forced into the main thread’s queue.
{FindCustomVariantType function
- Retrieves the object that implements a custom Variant type.

GetVariantManager procedure
- Returns the entry points of the routines that define variant behavior.

     //FILE_PATH = 'E:\maxbox\maxbox3\examples\271_closures_study.txt';

{ Global Functions }

 //ExtractFieldName(const Fields: string; var Pos: Integer): string; overload; deprecated;
 //ExtractFieldName(const Fields: WideString; var Pos: Integer): WideString; overload;
 //DatabaseError(const Message: WideString; Component: TComponent = nil);
 //DatabaseErrorFmt(const Message: WIdeString; const Args: array of const;
  //Component: TComponent = nil);
 //GetFieldProperty(DataSet: TDataSet; Control: TComponent;
  //const FieldName: WideString): TField;
 //VarTypeToDataType(VarType: Integer): TFieldType;

end;

//2,4,16,256 just a loacal test of vars

var 
  diaform: TForm;
  //diaform2: TMessageForm;
  npr, ncr: integer;
  comp: extended;
  DlgType: TMsgDlgType;
  //butt:    TMsgDlgbutton;
  Buttons1: TMsgDlgButtons;
  //openf: TOpenFileDlg;
  openf: TOpenDialog;
  openp: TPrintDialog;
  selectFile, uname, pname: string;
  myear: word;
  i: integer;
  thok: boolean;
  lpSystemTime : TSystemTime;
  mt: TTHreadfunction2;
  mtid: DWord;
  mtid2: longword;
  
  
  Procedure mycount;
  var ib: byte;
  begin
    writeln('fromthread'+inttoStr(ib));
  end; 

  
     
BEGIN  //Main  Tester
//<Executable statements>
  {x:= 100;
  quadrat:= power(x,2); 
  writeln(format('%f', [quadrat]))
  square:= sqrt(quadrat)
  writeln(format('%f', [square]))
  div_dbl:= 5.0 / 2.1; // 2.500000
  writeln(format('%0.8f', [div_dbl]))
  div_dbl:= 20 mod 3; // 2.500000
  writeln(format('%f', [div_dbl]))
  incint:= 255;
  inc(incint)
  writeln(format('um eins erhöht %d',[incint]))
   a:= 5
   b:= 6
   if not (A<>B) then writeln('gleich') else
                    writeln('ungleich')   
   if (A=B) then writeln('gleich') else
                    writeln('ungleich') }  
   // Ganze ASCII Tabelle
   { writeln(Chr(67))
   for i:= 0 to 255 do
     writeln(format('wert %d %s',[i, Chr(i)]))}

 writeln(format('%s',[inttobin(97)]))
 writeln(format('%s',[inttobin(223)]))
 writeln(format('%s',[inttobin(97 XOR 223)]))
    
    bin1:= 97;
    bin2:= 223;
    bin3:= bin1 XOR bin2;
    writeln(format('%s',[inttobin(bin3)]))
  //writeln(format('%s',[inttohex(223,2)]))
    writeln(' ');
    wd:= 150;
    writeln(inttobin(wd))
    wd:= wd SHL 1
    writeln(inttobin(wd))
    writeln(inttobin(wd XOR wd))
    writeln(inttostr(wd))
   //operator ist power
  //operanden sind x und 2
  //ausdruck ist power(x,2)
   // Ausdruck aus einem Rückgabewert
  // einmaleins 
  
     {for i:= 1 to 10 do
       for j:= 1 to 10 do begin
         //printf('%d',[j])
           write(inttostr(j*i)+ '  ')
           if j=10 then writeln('')
        end
        writeln('')
 
     for i:= 1 to 10 do
       for j:= 1 to 10 do begin
         //printf('%d',[j])
           ein:= j*i;
           if (ein < 10) and (j<7) then
             write(inttostr(ein)+ '    ')
             else 
             write(inttostr(ein)+ '  ')
          if j=10 then writeln('')
        end}
        //big fact (60):
        //8.3209871127413901442763411832234e+81
        // fact 70 = 1.1978571669969891796072783721689e+100
    
        
  // 3. Combination (binominal coefficient)= nCr = nPr / k!
    //npr:= 45; ncr:= 6;
    //npr:= round(Fact(npr)/Fact(npr-ncr)/fact(ncr));
    //ncr:= npr/round(fact(ncr))
     //4 of 20 = 4845 = NCR(20,4) on a calculator or a lotto 4 of 20
     //for i:= 1 to 100 do 
      //PrintF('nr %d  %s', [i, Getbigint2(i)])
    
    bigstring:= Getbigint2(100)
    writeln(inttostr(length(bigstring))) 
    Writeln(Getbigint2(100))
    writeln(format('%f',[fact(100)]))
    //alta tensione - haute tension 2000000000 * 999999 = 99999900000
   { for i:= 1 to 57 do begin
    writeln('muluN     '+ inttostr(i)+' of ' +(getmuluN(i))) 
      printf('extended %d of %f', [i,power(i,i)])     
     end}              
    selectFile:= ExePath+MEDIAPATH;   
    buttons1:= [mbok, mbyes];
   //diaform:= CreateMessageDialog('my fast form perform',mtconfirmation, []);
    diaform:= CreateMessageDialog('My Fast Form Perform - FFP',mtwarning, []);
    diaform.caption:= 'FFP Demo';
    diaform.setBounds(50,50,800,500)
    diaform.formstyle:= fsstayontop;
    diaform.color:= 123;
   //diaform.text
    diaform.show; 
   //diaform.free;

  mOutline:= TOutline.Create(self);
  with mOutline do begin
    //AddChild
    Parent:= diaform; 
    LoadFromFile(selectFile);
    FullExpand;
    width:= 300;
    height:= 340;
    top:= TOPBASE + 80;
    left:= LEFTBASE+ 30;
    //items
    onclick:= @showfile;
  end; 
  with tlabel.create(self) do begin
     parent:= diaform;
     setbounds(400,100,100,20)
     font.color:= clyellow;
     font.size:= 35;
     caption:= 'perform the form';
  end;  
  mycal2:= TDateTimePicker.Create(self)
  with mycal2 do begin
    parent:= diaform;
    //autocomplete:= true;
    SetBounds(LEFTBASE+380, TOPBASE+160, 305, 60);
    //font.size:= 12; color:= clPurple;
    //SCROLLWIDTH:= width * 2;
    checked;
    //time;
    show;
   //format:= ;
   //mycal2.Free;
  end;
  
   //openf:= TOpenDialog.create(self);
   with TOpenDialog.Create(self) do begin
    Filter:= 'ByteCode files (*.psb)|*.PSB';
    FileName:= '*.psb';
    //defaultExt:= fileextension;
    title:= 'PascalScript ByteCode Open';
    //InitialDir:= ExtractFilePath(application.ExeName)+'*.psb';
    {if execute then begin
            showmessage('byte code run success')
         end else
      Memo2.lines.add('ByteCode Error Message: '+'bcerrorcode');} //end else
    end;
    with TSaveDialog.Create(self) do begin
      free;
    end;  
  //showmessage('this is showtime')     
  showmessageFmt('this is 229 %s central station in my destination',
                    [inttobin(229)])
   { dlgtype:= mtconfirmation;
    messagedlgpos('this is', mtconfirmation , [], 2,
        screen.width div 2, screen.height div 2);}                
    writeln(floattoStr(Fibo(100)))
    writeln(floattoStr(Fact(100)))
    writeln(floattostr(metersperlightsecond))              
    writeln(codecompletion)
    writeln(powerBig(11,60))
    writeln(floattostr(power(11,60)))
    writeln(floattostr(2*(power(10,60.1)+1362)+1))
    //1+1=2+1=3+2=5+3=8+5=13+8=21
   //writeln(inttostr(randseed))
   writeln(getwordonpos('this is me and you',9))
   writeln(booltostrj(5>2))
   
   with TIntegerList.Create do begin
     Sort;
     add(round(power(2,31)-1));
     add(1234567);
     add(234567);
     add(344456);
     add(3445676);
     writeln(inttostr(count))
     for i:= 0 to count-1 do 
       writeln(inttostr(items[i]));
     Free;  
   end;
   DB_Tester;
   uname:= 'sysdba';
   pname:= 'masterkey';
   logindialog('dbdemos',uname,pname);
   //getcurrentthread
    getsystemtime(lpSystemTime)
      //getsysteminfo
    mt:= @mycount;  
    mtid:= 2345;
    //CreateThread2(@mycount, mtid);
    //ExecuteThread2(@mycount, thok); 
     longw:= -200;
     longi:= -200;
     myear:= -200;
     mtid:= -200;
     //{writeln(inttoStr(} sign(mtid)
     writeln(inttostr(longw))
     writeln(inttostr(longi))
     writeln(inttostr(myear))  //word
     writeln(inttostr(mtid))   //dword
        //AreOSExceptionsBlocked
     writeln(getWindowsVersionString)
        
END. 

------------------------------------------------

functions of 2050-2134 =85  page 25-37

after 3.6.2

mini maXbox as less files

change mbversion of toolsapi in addconstant to var!

FileSetDate( has two ways of parameters

correction of bestof runtime2 cmdline etc.

add functions in functionlist (fahrenheit , createmessagedlg ...

original filename maxbox3_6.exe

make example fastform with createmessagedialog outline & calendar

  DlgType: TMsgDlgType;  is missing
 
opendialog can't execute maybe the constructor or the overload execute!

types in strutils and dialogs dont match:$
CL.AddTypeSTMsgDlgButtons','set of TMsgDlgBtn);
works with an empty set

functions of unit controls is missing

msecsperday     is missing 

copy file:
file:///C:/maxbook/maxbox3/maxbox33/maxbox3/docs/36test/DelphiVCL_RTLOverview.html

check procedure Halt [ ( Exitcode: Integer) ];
with exitcode


new unit StdConvs; 

12.    Flow Control Routines
	

Checked on 26-5-2004

procedure Abort;
	

SysUtils
	

Ends the current process without reporting an error

procedure Break;
	

System
	

Causes the flow of control to exit a for, while, or repeat statement

procedure Continue;
	

System
	

Allows the flow of control to proceed to the next iteration of for, while, or repeat statements

procedure Exit;
	

System
	

Exits from the current procedure

procedure Halt [ ( Exitcode: Integer) ];
	

System
	

Initiates abnormal termination of a program

procedure RunError [ ( Errorcode: Byte ) ];
	

System
	

Stops execution and generates a run-time error

----------------------------------------------------
fact 100
9.3326215443944152681699238856267e+157 -calculator
9.33262154439441527E157 -type extended
bigstring:
9.3326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000


  ein operand besteht aus operator und 
  - name
  - type
  - scope 
  - lifetime
  - value
     -type  is valid operator
            memory need
            range checking



       (A<>B) not --> A=B
        0 0 0 1       0 0
        0 1 1 0
        1 0 1 0
        1 1 0 1       1 1
        
        
  XOR App      
  0110 0001
^ 1101 1111
-----------
  1011 1110
        
        
  00000000000000000000000100101100 XOR
  00000000000000000000000100101100
                         000000000
                         
stat for v3.5 beta 24.7.2011

examples 464
source 456
docs 62
exercices 43                         

to do from  netbook to sony
- copy 172_pascal_triangle
- make example of n^n
- copy ...statements4.txt

new correction/tips for V3.5
- syntax check
- java syntax in context menu
- compute compile run time
- compiling and codelines in same line (compiling lines count only to end.)
- exception log string - space between machine name and message
   8/8/2011 9:39:48 AMV:3.5.0 beta[max]MAXBOX7Invalid pointer operation[at:  1258720pgf; mem:610096]
   - exception log - last entry first
- update window - update service place a graphic or sign in it
- implement id hash value
- inithexarray;  -->gethexarray
                         
Tips of the Day for Version V3.5
-----------------------------

Click on the maXbox Sign opens your work directory
You can printout your scripts as a pdf-file
You do have a context menu with the right mouse click
With the UseCase Editor you can convert graphic formats too.
On menu Options you find 4 Addons as compiled scripts 
You don't need a moouse to handle maXbox
With escape you can leave the box
In /exercises you find a few compilats 
Drag n' drop your scripts in the box
Open in menu Outpout a new instance of the box to compare or prepare your scripts      you can get templates as a code completion with ctrl j in the editor like
  classp or iinterface or ttimer
in menu output you can set output menu in edit mode by unchecking read only memo       

----app_template_loaded----

Corrections of V 3.5 beta

cid:  182  winmemory: Twinmemory
cid:  183  winmemory.#0: TLabel
cid:  184  winmemory_1: Twinmemory
cid:  185  winmemory_1.#0: TLabel

deallocation of the form with self

component count id reset to 0

proposals from devc , file properties (size or date), full screen mode)

a indy socket connection mode to get via ip addr. the text between machines
--> /output send (ip addr.)

print out on memo2:
 mX3 executed on: 7/27/2011 1:06:18 AM

make function powerbig(n,n) with big integer n^n (see up in this script)


inbuilt function split
inbuilt function scanf
inbuilt function combination
npr:= 10; ncr:= 5;
npr:= round(Fact(npr)/Fact(npr-ncr)/fact(ncr));


add source mybigint source in mx3 and delphi3000.com

add example 166_bigint_explain, 166? it depends
add example 172 cexplain of pascal triangle
add example pi.pas from /exercice
add an example with sort mechanism and load the exe thread in /exercice
  
maxboxnews.htm of 3.3  
  
remove idh....htm from /docs cause of tutorials 

edit examplesindex.htm with 1..220 examples  

maxboxfunctions new pdf

new tutorial statistic programming 

add 4gewinnt.exe in excercies

  
  IIncomeInt  = interface (IUnknown)
    ['{DBB42A04-E60F-41EC-870A-314D68B6913C}']
    function GetIncome(const aNetto: Extended): Extended; stdcall;
    function GetIncome2(const aNetto: Currency): Currency; stdcall;
    function GetRate: Extended;
    function queryDLLInterface(var queryList: TStringList): TStringList;
            stdcall;
    function queryDLLInterfaceTwo(var queryList: TStringList): TStringList;
            stdcall;
    procedure SetRate(const aPercent, aYear: integer); stdcall;
    //property Rate: Double read GetRate;
  end;


  Dealing with Big Numbers (Integers)
  -----------------------------------
  
  As you may know there's no simple solution to print or store big numbers, for example you want to compute fact(70), your calculator shows:
  fact(70) = 1.1978571669969891796072783721689e+100
  
  but the maximum range on Delphi depends on your operating system types, means nowadays an int64 range is the big int.
  Now that the "signed" Words are finally up-to-par with the unsigned integer types, Delphi 4 introduces a new 64-bits integer type, called Int64, with a whopping range of -2^63..2^63 - 1  

 Another way is to use the type extended, but the limitation is precision like
   
        Writeln(FloatToStr(Fact(70)))
 
    it only shows 
    1.2E+0100

With a BigInt Library (bigintlib) you'll see the full range of Fact(70):

11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000
    
The call respectively the calculation goes like this:

function GetBigIntFact(aval: byte): string;
//call of unit mybigint
var mbRes: TMyBigInt;
    i: integer;
begin
  mbRes:= TMyBigInt.Create(1);
  try
    //multiplication of factor
    for i:= 1  to aval do 
      mbRes.Multiply1(mbresult, i);
    Result:= mbRes.ToString;
  finally 
    //FreeAndNil(mbResult);
    mbRes.Free;
  end;
end;
    
Or you want the power of 100        
2^100=
1267650600228229401496703205376
  
The definition of the function could be the following:

function GetBigIntPower(aval: integer): string;
var mbResult: TMyBigInt;
     i: integer;
begin
  mbResult:= TMyBigInt.Create(1);
  try
    for i:= 1 to aval do 
      mbResult.Multiply1(mbresult, 2);
    Result:= mbResult.ToString;
  finally 
    mbResult.Free;
  end;
end;
  
  
At least one really big, it's 2^1000

10715086071862673209484250490600018105614048117055336074437503883703510511249361224931983788156958581275946729175531468251871452856923140435984577574698574803934567774824230985421074605062371141877954182153046474983581941267398767559165543946077062914571196477686542167660429831652624386837205668069376


the class of the unit from swiss delphi:

  TMyBigInt = class
  private
    Len: Integer;
    Value: AnsiString;
    procedure Trim;
    procedure Shift(k: Integer);
    procedure MultiplyAtom(Multiplier1: TMyBigInt; Multiplier2: Integer);
  public
    constructor Create(iValue: Integer = 0);
    procedure Add(Addend1, Addend2: TMyBigInt);
    procedure Multiply(Multiplier1, Multiplier2: TMyBigInt); overload;
    procedure Multiply(Multiplier1: TMyBigInt; Multiplier2: Integer); overload;
    function ToString: string;
    procedure CopyFrom(mbCopy: TMyBigInt);
  end;

  tbigint
  classp
  iinterface

 mail to members of the EKON 15
 Great to see you again, I would like to share an agile tool with you to get some feedback concerning usability and effiency:
 
 maXbox (Delphi out of a box) on sourceforge
 
 The open source tool needs no installation or administration, runs from a stick and is used for teaching, testing or system administration or just coding for fun. 
 

open ssl mit delphi

OpenSSL ist eine freie Implementierung des SSL/TLS-Protokolls und bietet darüber hinaus Funktionen zur Zertifikatsverwaltung einer PKI und zu unterschiedlichen kryptographischen Methoden und Standards. In dieser Session erfahren Sie Anwendung und Möglichkeiten mit Delphi und zudem weitere Geheimnisse. 


    Metriken in Together
    ---------------------------------


    Das diskret integrierte Tool von Together, lässt sich bereits nach Minuten einsetzen. Der Model View ist ein Werkzeug, welches gemäß Metamodell und zugehörigen Metriken den Code in UML darstellt, aber auch prüft, analysiert und dokumentiert, bspw. ungenutzte Variablen oder private Felder checkt.
    Die so generierte tabellarische Auswertung dient der Code-Optimierung und eignet sich für ein Systemhandbuch wie für sonstige Review Reports. Viel Expertenwissen bei einfacher Bedienung zeigt diese Session.


    es grüsst, Max Kleiner


    http://www.softwareschule.ch/
    http://max.kleiner.com/

    *******************************************

 

        Die Highlights der Delphi RTL.
        ---------------------------------------------------
        Dieser Speak ist garantiert werbefrei, auch wenn RTL dahintersteht;).
        Ich zeige die besten Funktionen und Prozeduren aus der Delphi Runtime Library, die stetig (vor allem seit D2009) enorm zugenommen
        hat. In diesem Streifzug zeige ich krasse, exotische aber auch nützliche, mächtige Routinen aus der Bibliothek, die ja der Hauptlieferant
        zur VCL und CLX hin ist.
        Recht formlos zieht die Demo der Funktionen aus den Unit Kategorien von danen, die auch einige versteckte Routinen aus der System
        und SysUtils aufdecken. Wir wagen zudem einen Blick auf die Indy- und Jedi RTL; einige Aussagen zu Packages, Lizenzen und 64bit-
        Compiler runden die Session dann ab.


        Kryptologie mit Delphi (Workshop)
        ---------------------------------------------
        Die Teilnehmer der Session erfahren die Fragestellung und Techniken der aktuellen Kryptografie und Analyse des Chiffrieren und Signieren.
        Exemplarisch werden mit aktuellen Tools und Bibliotheken ein paar konkrete Kryptotechniken (z.B. Randomize, One-time Pad, Authentifizieren,
        SHA-1, AES und RSA) vertieft und mit ihren Vor- und Nachteilen verglichen. Aufbauend sind praktische Übungen inklusive der
        Schlüsselgenerierung und dem Datenaustausch im Workshop geplant.
        Agenda
         - Übersicht - Geschichte der Kryptologie - Symmetrische Verfahren - Asymmetrische Verfahren - Hybride Systeme - Schlüsselverwaltung
        - Signaturen - Public Key Infrastructure (PKI) mit Zertifikaten, Smart Cards, SSL und IPSec, VPN.


 
        Track Delphi/OOP Fundamentals
        Track Crossplatform/Mobile and Web
        Track Datenbanken
        Track IDE und Tools
        Track Tips und Technics

 

Social Networks


100zakladok
2 Tag
2linkme
7Live7.com
A1-Webmarks
A97abi
Add.io
Address Bar
Adfty
Adifni
aero
All My Faves
Amazon
Amen Me!
Aol Lifestream
AOL Mail
Armenix
Arto
Aviary Capture
Baang
Baidu
Bebo
Bentio
BiggerPockets
Bit.ly
bizSugar
Bleetbox
Blinklist
Blip
Blogger
Bloggy
Blogmarks
Blogtrottr
Blurpalicious
Bobrdobr
BonzoBox
BookmarkingNet
Bookmarky.cz
Bookmerken
Bordom
Box.net
Brainify
Bryderi
BuddyMarks
Buzzzy
Camyoo
CardThis
Care2
Chiq
Cirip
CiteULike
ClassicalPlace
Cndig
Colivia.de
Communicate
Connotea
cOOtopia
COSMiQ
Curate.Us
Delicious
DesignBump
Designmoo
Dig This Webhost
DigaCultura
Digg
Diggita
diglog
Digo
Digzign
Diigo
Dipdive
doMelhor
Dosti
DotNetKicks
DotNetShoutout
DotShare
Douban
Draugiem.lv
Drimio
Dropjack
Dwellicious
dzone
edelight
EFactor
eKudos
elefanta.pl
Email
Email App
Embarkons
euCliquei
Evernote
extraplay
EzySpot
Fab Design
Fabulously40
Facebook Like
Fai Informazione
Fark
Farkinda
Fashiolista
FAVable
Faves
favlog
Favoriten.de
Favorites
Favoritus
Flaker
Floss.pro
Folkd
Formspring
FreeDictionary
Fresqui
FriendFeed
Friendster
funP
fwisp
Gabbr
Gamekicker
GiveALink
GlobalGrind
Gmail
Go.vn
Good Noows
Google
Google +1
Google Buzz
Google Reader
Google Translate
Gravee
GreaterDebater
Grono.net
Haber.gen.tr
Hacker News
Hadash Hot
Hatena
Hedgehogs.net
HelloTxt
Historious
Hitmarks
Hot Bookmark
Hotklix
Hotmail
HTML Validator
Hyves
ideaREF!
Identica
iGoogle
ihavegot
Index4
Indexor
Instapaper
InvestorLinks
iOrbix
iSociety
iWiW
Jamespot
Jappy Ticker
JoliPrint
Jumptags
KaBlog
Kaboodle
Kaevur
Kaixin Repaste
Kindle It
Kipup
KiRTSY
Kledy
Kommenting
La tafanera
Laaikit
Ladenzeile
Librerio
Link Ninja
Link-a-Gogo
Links Gutter
LinkShares
Linkuj.cz
LiveJournal
LockerBlogger
Logger24.com
Mail.ru
Markme
Mashbord
Mawindo
meinVZ
Mekusharim
Memonic
Memori.ru
MenÃ©ame
Messenger
Mindbodygreen
Mister Wong
Mister Wong DE
Moemesto.ru
Moikrug
mototagz
mRcNEtwORK
Multiply
myAOL
MyHayastan
mylinkvault
Myspace
N4G
Nasza-klasa
NetLog
Netvibes
Netvouz
NewsMeBack
NewsTrust
Newsvine
Nujij
Odnoklassniki
OKNOtizie
oneview
OnGoBee
orkut
OS X Dashboard
Oyyla
Packg
pafnet.de
PDF Online
PDFmyURL
PhoneFavs
Ping.fm
Planypus
Plaxo
Plurk
Pochval.cz
PopEdition
Posteezy
Posterous
Prati.ba
Print
PrintFriendly
Pusha
QRF.in
Quantcast
Qzone
Read It Later
Reddit
Rediff MyPage
RedKum
RideFix
Scoop.at
Scoop.it
Sekoman
Select2Gether
Shaveh
SheToldMe
ShirIntarIn
Simpy
Sina Weibo
Slashdot
SMI
SodaHead
Sonico
Speedtile
Sphinn
SpinSnap
Spoken To You
sportpost
Spread.ly
springpad
Squidoo
Startaid
Startlap
Story Follower
studiVZ
Stuffpit
StumbleUpon
Stumpedia
Stylehive
Svejo
Symbaloo
Taaza
TagMarks.de
Tagvn
Tagza
tarpipe
TellMyPolitician
The Web Blend
Thinkfinity
ThisNext
Throwpile
Tip'd
TopSiteler
Transferr
Tuenti
Tulinq
Tumblr
Tusul
Tvinx
TweetMeme
TwitThis
Typepad
Upnews.it
Urlaubswerk
URLCapt
Viadeo
Virb
Visitez Mon Site
Vkontakte
vKruguDruzei
VOXopolis
vybrali SME
Vyoom
Webnews
Whois Lookup
Windows Gadgets
Windy Citizen
WireFan
Wordpress
Worio
Wykop
Xanga
Y! Bookmarks
Y! Mail
Yammer
Yardbarker
Yemle
Yigg
Yoolink
Yorumcuyum
Youblr.
Youbookmarks
YouMob
Yuuby
Zakladok.net
Zanatic
ZicZac
ZingMe
Zootool   

 TStringList  = class(TStrings)
  private
    FList: PStringItemList;
    FCount: Integer;
    FCapacity: Integer;
    FSorted: Boolean;
    FDuplicates: TDuplicates;
    FCaseSensitive: Boolean;
    FOnChange: TNotifyEvent;
    FOnChanging: TNotifyEvent;
    procedure ExchangeItems(Index1, Index2: Integer);
    procedure Grow;
    procedure QuickSort(L, R: Integer; SCompare: TStringListSortCompare);
    procedure SetSorted(Value: Boolean);
    procedure SetCaseSensitive(const Value: Boolean);
  protected
    procedure Changed; virtual;
    procedure Changing; virtual;
    function Get(Index: Integer): string; override;
    function GetCapacity: Integer; override;
    function GetCount: Integer; override;
    function GetObject(Index: Integer): TObject; override;
    procedure Put(Index: Integer; const S: string); override;
    procedure PutObject(Index: Integer; AObject: TObject); override;
    procedure SetCapacity(NewCapacity: Integer); override;
    procedure SetUpdateState(Updating: Boolean); override;
    function CompareStrings(const S1, S2: string): Integer; override;
    procedure InsertItem(Index: Integer; const S: string; AObject: TObject); virtual;
  public
    destructor Destroy; override;
    function Add(const S: string): Integer; override;
    function AddObject(const S: string; AObject: TObject): Integer; override;
    procedure Clear; override;
    procedure Delete(Index: Integer); override;
    procedure Exchange(Index1, Index2: Integer); override;
    function Find(const S: string; var Index: Integer): Boolean; virtual;
    function IndexOf(const S: string): Integer; override;
    procedure Insert(Index: Integer; const S: string); override;
    procedure InsertObject(Index: Integer; const S: string;
      AObject: TObject); override;
    procedure Sort; virtual;
    procedure CustomSort(Compare: TStringListSortCompare); virtual;
    property Duplicates: TDuplicates read FDuplicates write FDuplicates;
    property Sorted: Boolean read FSorted write SetSorted;
    property CaseSensitive: Boolean read FCaseSensitive write SetCaseSensitive;
    property OnChange: TNotifyEvent read FOnChange write FOnChange;
    property OnChanging: TNotifyEvent read FOnChanging write FOnChanging;
  end;
