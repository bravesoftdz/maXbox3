program Syktala_Cipher;

{Scytale was a cipher used by the ancient Greeks – most  notably, the Spartans.
 The idea was to use a strip of paper (or leather, so it can be stealth-ed as,
  say, a belt), wrap it around a rod of certain diameter, and then write the
message horizontally. Unwrapped, the letters appeared in vertical sequence.}
//from PascalGamerMagazine_Issue03.pdf

const  MAX_PATH2 = 15;

Type  TCharArray = array[0..MAX_PATH2] of char;
      TCharA = array[0..1024] of char;
      TDynA = array of char;
                 
var
  buffer1: TCharArray;
  buffer2: PChar;
  //buffer3: Pointer;

//Tests with the OpenSSL Lib
{function RandStatus: integer;
external 'RAND_status@libeay32.dll stdcall';
function SetSeed(myint: Integer; intsize: integer): boolean;
external 'RAND_seed@libeay32.dll stdcall';
function getRandom1(mypchar: TCharArray; buffersize: integer): integer;
external 'RAND_bytes@libeay32.dll stdcall';
function getRandom2(mypchar: PChar; buffersize: integer): integer;
external 'RAND_bytes@libeay32.dll stdcall';}


function Scytale(plain: string; rows: byte): string;
var
  arr: array of array[0..255] of char;
  cols, pos, x, y: byte;
begin
  cols:= 1;
  while (rows * cols < length(plain)) do
    cols:= cols + 1;
  SetArrayLength(arr, cols);    //setlength(arr, cols, rows);
  pos:= 1;
  for y:= 0 to rows - 1 do begin
    for x:= 0 to cols - 1 do begin
      if (pos <= length(plain)) then begin
        arr[x][y]:= plain[pos];
        pos:= pos + 1;
      end else
        arr[x][y]:= '.';
    end;
  end;
  plain:= '';
  for x:= 0 to cols - 1 do begin
    for y:= 0 to rows - 1 do 
      plain:= plain + arr[x][y];
  end;
 result:= plain;
end;


function HexToInt(HexNum: string): LongInt;
label
  gotolabel;
begin
  Result:= StrToInt('$' + HexNum);
  if result > 100 then goto GotoLabel;
    GotoLabel:
    ShowMessage('Label Test finished with result = '+inttoStr(result));
end;

var 
  mysecrettext, mysecrettext2: string;
  mykey: integer;
  mykey2: integer;
begin
  with memo2 do begin
    height:= 300;
    color:= clblack;
    font.color:= clred;
    font.size:= 14;
  end;  
      {if randStatus <> 0 then writeln ('just OpenSSL');
       showmessage(datetimetostr(date))
       //setlength(buffer2, 1024)
       //getrandom2(buffer2, length(buffer2))
      //if setSeed(999,3) then writeln(' init seed')
      buffer2:= stralloc(255)
      buffer2:= 'this is a buffer in a line ';
      if getRandom2(buffer2, sizeof(buffer2)) <> 0 then
        showmessage(datetoStr(strtodate('27.07.2010')))          
      showmessage(buffer2)
      strdispose(buffer2)}

    mysecrettext:= 'Pascal*Gamer*Magazine...';
    mykey:= 4;
    mykey2:= length(mysecrettext) div mykey;
    Writeln(Scytale(mysecrettext,mykey))
    Writeln(Scytale('P**iaGMnsaaecmg.aea.lrz.',mykey2))
    //ciper & deciper in one
    Writeln(Scytale(Scytale(mysecrettext,mykey),mykey2))

    mysecrettext2:= 'This is maXbox3 of boXLand....';
    Writeln(inttostr(length(mysecrettext2)))
    mykey:= 6;
    mykey2:= length(mysecrettext2) div mykey;
    Writeln(Scytale(mysecrettext2,mykey))
    Writeln(Scytale(Scytale(mysecrettext2,mykey),mykey2))
 
  //initialization
  //finalization 
  //writeln(inttohex(6129,16))
  //writeln(inttostr(hextoint('17F1')))
end.

Scytale can be easily represented using a table –
consider this one as a rod which circumference allows to
write four characters, and is six characters long. Take the
plaintext and put it into the board row-by-row. If there are
empty spaces left, fill them in with, let’s say, dots. Now all
you need to do is to read the text from the board column-bycolumn.
As such, our ciphertext is:
“P**iaGMnsaaecmg.aea.lrz.”.

---------------------------------------------------------
usbdmx.dll - Schnittstelle:

-----------
Funktionen:
-----------
 
GetAllConnectedInterfaces: TSERIALLIST;
GetAllOpenedInterfaces: TSERIALLIST;
SetInterfaceMode(Serial: TSERIAL; Mode: byte): DWORD;
OpenLink(Serial: TSERIAL; DMXOutArray: PDMXArray; DMXInArray: PDMXArray): DWORD;
CloseLink(Serial: TSERIAL): DWORD;
CloseAllLinks: DWORD;
RegisterInterfaceChangeNotification(Proc: THOSTDEVICECHANGEPROC): DWORD;
UnregisterInterfaceChangeNotification: DWORD;
RegisterInputChangeNotification(Proc: THOSTINPUTCHANGEPROC): DWORD;
UnregisterInputChangeNotification: DWORD;
GetDeviceVersion(Serial: TSERIAL): DWORD;
SetInterfaceAdvTxConfig(Serial: TSERIAL; Control: Byte; Breaktime: word; Marktime: word; Interbytetime: word; Interframetime: word; Channelcount: word; Startbyte: byte): DWORD; stdcall; // >= v1.1
StoreInterfaceAdvTxConfig(Serial: TSERIAL): DWORD; stdcall; // >= v1.1
RegisterInputChangeBlockNotification(Proc: THOSTINPUTCHANGEPROCBLOCK): DWORD; // >= v1.1
UnregisterInputChangeBlockNotification: DWORD; // >= v1.1
 
 
-------------------------------------
Object Pascal Deklarationsvorschläge:
-------------------------------------
 
function GetAllConnectedInterfaces: TSERIALLIST; stdcall external 'usbdmx.dll';
function GetAllOpenedInterfaces: TSERIALLIST; stdcall external 'usbdmx.dll';
function SetInterfaceMode(Serial: TSERIAL; Mode: byte): DWORD; stdcall external 'usbdmx.dll';
function OpenLink(Serial: TSERIAL; DMXOutArray: PDMXArray; DMXInArray: PDMXArray): DWORD; stdcall external 'usbdmx.dll';
function CloseLink(Serial: TSERIAL): DWORD; stdcall external 'usbdmx.dll';
function CloseAllLinks: DWORD; stdcall external 'usbdmx.dll';
function RegisterInterfaceChangeNotification(Proc: THOSTDEVICECHANGEPROC): DWORD; stdcall external 'usbdmx.dll';
function UnregisterInterfaceChangeNotification: DWORD; stdcall external 'usbdmx.dll';
function RegisterInputChangeNotification(Proc: THOSTDEVICECHANGEPROC): DWORD; stdcall external 'usbdmx.dll';
function UnregisterInputChangeNotification: DWORD; stdcall external 'usbdmx.dll';
function GetDeviceVersion(Serial: TSERIAL): DWORD; stdcall external 'usbdmx.dll';
function SetInterfaceAdvTxConfig(Serial: TSERIAL; Control: Byte; Breaktime: word; Marktime: word; Interbytetime: word; Interframetime: word; Channelcount: word; Startbyte: byte): DWORD; stdcall; stdcall external 'usbdmx.dll';
function StoreInterfaceAdvTxConfig(Serial: TSERIAL): DWORD; stdcall; stdcall external 'usbdmx.dll';
function RegisterInputChangeBlockNotification(Proc: THOSTINPUTCHANGEPROCBLOCK): DWORD; stdcall external 'usbdmx.dll';
function UnregisterInputChangeBlockNotification: DWORD; stdcall external 'usbdmx.dll';
 
 
------
Werte:
------
Mode: 0 - Standby; 1 - DMX In -> DMX Out; 2 - PC Out -> DMX Out; 3 - DMX In + PC Out -> DMX Out; 4 - DMX In -> PC In; 5 - DMX In -> DMX Out & DMX In -> PC In; 6 - PC Out -> DMX Out & DMX In -> PC In; 7 - DMX In + PC Out -> DMX Out & DMX In -> PC In;
Version: 0x0100 = v1.00, 0x0110 = v1.10 usw.
ConfigControl: Bit 0: Enable Interbytedelay, Bit 1: Enable Interframedelay, Default = 0
Breaktime: Zeit des Resetpulses, 5,333us Schrittweite, Default = 17
Marktime: Zeit zwischen Resetpuls und Startbyte, 0.666us Schrittweite, Default = 13
Interbytetime: Zeit zwischen zwei Datenbytes (8N2), 0.666us Schrittweite, Default = 0
Interframetime: Zeit zwischen dem letzten Datenbyte und dem Resetpuls, 21,333us Schrittweite, Default = 0
Channelcount: Default = 512
Startbyte: Default = 0
 
 
------------------------------
Object-Pascal Typenvorschläge:
------------------------------
 
PDMXArray = ^TDMXArray;
TDMXArray = array[0..511] of byte;
TSERIAL = array[0..15] of Char;
TSERIALLIST = array[0..31] of TSERIAL;
THOSTDEVICECHANGEPROC = procedure; stdcall;
THOSTINPUTCHANGEPROC = procedure; stdcall;
THOSTINPUTCHANGEPROCBLOCK = procedure(blocknumber: byte); stdcall; // >= v1.1
 
 
------------------------
Hilfsroutinen:
------------------------
 
function SerialToSerialstring(Serial: TSERIAL): string;
var i: byte;
begin
Result := '';
for i := 0 to 15 do Result := Result + Serial[i];
end;
 
function SerialstringToSerial(Serialstr: string): TSERIAL;
var i: byte;
    len: byte;
begin
len := length(Serialstr);
if len > 16 then len := 16;
for i := 0 to 15 do Result[i] := '0';
for i := 1 to len do Result[i + 15 - len] := Serialstr[i];
end;

