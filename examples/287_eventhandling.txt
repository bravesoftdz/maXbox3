program Bitmap_Pulsar_BITMAX_JpegTester;

//Loads a bitmap with an aggregation from TPicture Class
//A function stretches also a bitmap with specified number of pixels
// in horizontal, vertical dimension, locs=1319

const MAXP = 100;
      FIRSTCOLOR = clTeal;           //clPurple;
      KB = 'abcdefghijklmnopqrstuvwxyz';


type
 TMMatrix = Array[1..MAXP] of TPoint;

var
    Exc2: Exception;
    Image1, Image2, image3: TImage;
    frmMon, frmMon2, frmMon3, frmmon4, frmmon5: TForm;
    udLinie: TUpDown;
    UD: TUpDown;
    SB: TScrollBar;
    TB: TTrackBar;
    panUD: TPanel;
    panTB: TPanel;
    panSB: TPanel;

    GroupBox1: TGroupBox;
    Label1: TLabel;
    tbR, tbG, tbB: TTrackBar;
    panWr, panWg, panwb: TPanel;
    panCP, panCP22: TPanel;
    panCP2: TLabel;
    // char word counter
    edText: TEdit;
    sgStat: TStringGrid;
    panB: TPanel;
    stop: boolean;
    startms, lcounter,x1, x2, y1, y2: longint;

 
 threadvar: integer;



function aDirUp(p: String): String;
//gibt den Pfad eine Verzeichnisebene oberhalb zurück
var
  i,j: integer;
begin
  If RightStr(p,1)='\' Then p:=LeftStr(p, Length(p)- 1);
  j:=Length(p);
  for i:=1 to Length(p) do
    if MidStr(p,i,1)='\' then j:=i;
  result:=LeftStr(p,j);
end;


procedure SaveImageJpeg(img: TImage; fname, fext: string);
var
jpeg, jpeg2: tjpegimage;
  f: string;
begin
 if (fext='jpg') then begin
  jpeg := TJpegImage.create();
  
  //Image1.Picture.BitMap.LoadFromFile(ExePath+'examples\citymax.bmp');
  //jpeg.loadfromfile(ExePath+'examples\faszination_tee.jpg');
  //jpeg2.loadfromfile(ExePath+'examples\maxbox_logo2.jpg');
  //jpeg2.savetofile(ExePath+'examples\tee6358_3.jpg');
  //SearchandopenDoc(ExePath+'examples\tee6358_3.jpg');
  //image1.parent:= NIL;
  //image2.parent:= NIL;
  jpeg.Assign(img.picture.bitmap);
  jpeg.compressionQuality:= 85;
  jpeg.compress();
  f:= changeFileExt(fname,'.jpg');
  jpeg.SaveToFile(ExePath+'examples\'+f);
  //image2.picture.assign(jpeg2);
  jpeg.Free;

  //Image1.Picture.LoadFromFile(ExePath+'examples\faszination_tee.jpg');
  //Image1.Picture.LoadFromFile(ExePath+'examples\citymax.bmp');
  end else begin
    writeln(adirup(ExePath+'examples\'))
    writeln(adirup(ExePath))
    f:= changeFileExt(fname,'.bmp');
    img.Picture.SaveToFile(f);
  end;  
end; 

  
procedure loadImage;
var
jpeg, jpeg2: tjpegimage;
  i, nbcol: integer;
begin
  jpeg := TJpegImage.create();
  jpeg2:= TJpegImage.create();
  
  {@to save from bmp to jpg }
  //Image1.Picture.BitMap.LoadFromFile(ExePath+'examples\citymax.bmp');
  jpeg.loadfromfile(ExePath+'examples\faszination_tee.jpg');
  jpeg2.loadfromfile(ExePath+'examples\maxbox_logo2.jpg');
  //jpeg2.savetofile(ExePath+'examples\tee6358_3.jpg');
  //SearchandopenDoc(ExePath+'examples\tee6358_3.jpg');
 
  
  //image1.parent:= NIL;
  //image2.parent:= NIL;
  image1.picture.assign(jpeg);
  image2.picture.assign(jpeg2);

  {nbcol:= 3;
  for i:= 1 to 2 do 
  frmmon.canvas.draw(image1.picture.bitmap,(i mod nbcol)*(image1.width+20),
                    (i div nbcol)*(image1.height+20));}

  //Image1.Picture.LoadFromFile(ExePath+'examples\faszination_tee.jpg');
  //Image1.Picture.LoadFromFile(ExePath+'examples\citymax.bmp');
  writeln(adirup(ExePath+'examples\'))
  writeln(adirup(ExePath))
  jpeg.Free;
  jpeg2.Free;

end; 

procedure Image1MouseDown(Sender: TObject; Button: TMouseButton;
Shift: TShiftState; X, Y: Integer);
var i: byte;
begin
//test
  loadimage;
  try
  Image1.Canvas.MoveTo(X,Y);
  image1.canvas.pen.color:= clyellow;
  //image1.canvas.floodfill() 
  for i:= 1 to 30 do
    //Image1.Canvas.LineTo(X+random(140),Y+random(140));
    Image1.Picture.Bitmap.Canvas.LineTo(X+random(140),Y+random(140));
  except
     writeln('you cant write on an jpeg') 
  end;  
end;  


Function RGB2(R,G,B: Byte): TColor;
Begin
  Result:= B Shl 16 Or G Shl 8 Or R;
End;


function ResizeBmp(abitmap: TBitmap; wid, hei: Integer): Boolean;
var 
  TmpBmp: TBitmap;
  ARect: TRect;
begin
  Result:= False;
  try
    //TmpBmp:= TBitmap.Create;
    try
      abitmap.Width:= wid;
      abitmap.Height:= hei;
      //abitmap.size
      ARect:= Rect(10,10, wid, hei);
      //TmpBmp.loadfromfile('examples\citymax.bmp')
      //msg('bitmax');
      //frmMon.Canvas.FillRect(Rect(130,150,350,10));
      //abitmap.LoadFromResourceName(hinstance, 'cdrom');
      abitmap.LoadFromResourceName(hinstance, 'plus');
      frmMon.Canvas.StretchDraw(ARect, abitmap);
      writeln(inttoStr(BytesPerScanline(20,20,10)))
      //frmMon.Canvas.Brush.Bitmap:= aBitmap;
      //abitmap.canvas.copyrect(Rect(0,0,140,140)) 
      //frmMon.Canvas.picture:=Assign(abitmap);
    finally
      //TmpBmp.Free;
       frmmon.Canvas.Brush.Bitmap:= NIL;
       aBitmap.Free;
    end;
    Result:= True;
  except
    Result:= False;
  end;
end;

procedure DrawRosette2;
var
  m,p: TPoint;
  rho,phi: real;
  i,br,r,n: integer;
begin
   n:=StrToInt('18');
   br:=1;
   with frmmon.Canvas do begin
     Pen.Width:= br;
     Pen.Color:= clyellow;
     Brush.Color:= clblue;
     Brush.Style:= bsClear;
     //Mittelpunkte berechnen und Kreise zeichnen
     m.x:=225; m.y:=225; r:=175;
     rho:=360/n;
     for i:=1 to n do begin
       phi:=i*rho*pi/180;
       p.x:=m.x+round(r*cos(phi));
       p.y:=m.y+round(r*sin(phi));
       Ellipse(p.x-r,p.y-r,p.x+r,p.y+r);
       Ellipse(p.x-3,p.y-3,p.x+3,p.y+3);
     end;
  end;
end;

procedure DrawRosette;
//Zeichnen des Kreismusters
//const pi=3.1415926;
var
  m,p: TPoint;
  rho,phi: real;
  i,br,r,n: integer;
begin
   n:=StrToInt('18');
   br:=1;
   with frmmon.Canvas do begin
     //Programmeinstellungen auslesen
     Pen.Width:=br;
     Pen.Color:= clred;
     Brush.Color:=clblue;
     Brush.Style:=bsClear;
     //Mittelpunkte berechnen und Kreise zeichnen
     m.x:=225; m.y:=225; r:=100;
     rho:=360/n;
     for i:=1 to n do begin
       phi:=i*rho*pi/180;
       p.x:=m.x+round(r*cos(phi));
       p.y:=m.y+round(r*sin(phi));
       Ellipse(p.x-r,p.y-r,p.x+r,p.y+r);
       //if frmmon.chb1.checked=true then //Mittelpunkte zeichnen
         Ellipse(p.x-3,p.y-3,p.x+3,p.y+3);
     end;
  end;
end;

procedure DrawPowerCircle(n: integer);
//const pi=3.1415926;
var
  p: TMMatrix; m: TPoint;
  r,rho,phi: real;
  i,j,x,y,br: integer;
begin
  //with Form1.img1.Canvas do begin
    with frmMon.Canvas do begin
    br:= 1;
    Pen.Width:=br;
    Pen.Color:= clblue;
    Brush.Color:=  clred;
    //Kreisdefinition
    m.x:=225; m.y:=225; r:=175;
    rho:=360/n;
    //Stützpunkte berechnen
    for i:=1 to n do begin
      phi:=i*rho*pi/180;
      p[i].x:=m.x+round(r*(cos(phi)));
      p[i].y:=m.y+round(r*sin(phi));
    end;
    //Rahmen zeichnen
    //if Form1.chb1.checked=true then
      Ellipse(50,50,400,400);
    for i:=1 to n-1 do
      for j:=i to n do begin
        MoveTo(p[i].x,p[i].y);
        LineTo(p[j].x,p[j].y);
      end;
    //if Form1.chb2.checked=true then begin
      for i:=1 to n do begin
        x:=p[i].x; y:=p[i].y;
        Ellipse(x-3,y-3,x+3,y+3);
      end;
    //end;
  end;
end;

procedure SetColors;
//Umrechnung und Anzeige der Farbangaben
var
  r,g,b: byte; //Farbwerte
begin
  with frmmon2 do begin
    //Farbwerte
    r:=tbR.Position; g:=tbG.Position; b:=tbB.Position;
    //Farbe einstellen
    panCP2.Color:=RGB(r,g,b);
    //RGB-Farbwert
    writeln('edRgb.Text '+IntToStr(r)+','+IntToStr(g)+','+IntToStr(b)+'  ');
    //Hex-Farbwert
    writeln('edHex.Text '+'$00'+IntToHex(panCP2.Color,6)+'  ');
    //HTML-Farbwert
    writeln('edHtml.Text '+'#'+IntToHex(r,2)+IntToHex(g,2)+IntToHex(b,2));
    //writeln(' ')
  end;
end;


procedure HideGridCursor(g: TStringGrid);
//Cursor aus dem StringGrid verbannen
var gr: TGridRect;
begin
  with gr do begin
    Top:=-1; Left:=-1; Right:=-1; Bottom:=-1
  end;
  g.Selection:=gr;
end;

procedure btnCalcCharsClick(Sender: TObject);
//Auswertung der Buchstabenverteilung
var
  i,z,s,x,anzB: integer;
  t: string;
  b: array[0..25] of integer; //Array Buchstabenzähler
begin
  //Ausgangsbelegung
  anzB:=0;
  for i:=0 to 25 do b[i]:=0; //Buchstabenzähler löschen

  //Auswertung
  t:=edText.Text; //aktuelle Zeile
  t:=LowerCase(t); //Umwandlung in Kleinbuchstaben
  for s:=1 to length(t) do begin
    if pos(t[s],kb)>0 then begin //Zeichen ist Kleinbuchstabe
      x:=ord(t[s])-97; //Buchstabennummer
      b[x]:=b[x]+1;    //Buchstabenzähler aktualisieren
      inc(anzB);       //Anzahl der Buchstaben anpassen
    end;
  end;
  edText.Text:=t; //angepasste Zeile zurückschreiben
  //Ausgabe
  for i:=0 to 25 do sgStat.Cells[i,1]:=''; //Tabelle löschen
  for i:=0 to 25 do
    if b[i]>0 then //nur Werte größer als 0 ausgeben
      sgStat.Cells[i,1]:=IntToStr(b[i]);
  panB.Caption:=IntToStr(anzB);
  HideGridCursor(sgStat);
end;

procedure btnNewClick(Sender: TObject);
//Zurücksetzen der Formulareinstellungen
var i: integer;
begin
  stop:= true;
  edText.Text:=''; panB.Caption:='';
  for i:=0 to 25 do sgStat.Cells[i,1]:='';
  edText.SetFocus;
  HideGridCursor(sgStat);
end;

procedure CCFormCreate(Sender: TObject);
//Einrichten des Stringgrids
var i: integer;
begin
  for i:=0 to 25 do //Tabellenkopf mit Buchstaben beschriften
    sgStat.Cells[i,0]:= chr(97+i);
  HideGridCursor(sgStat);
end;



procedure UDClick(Sender: TObject; Button: TUDBtnType);
begin
  //panUD.Caption:=IntToStr(UD.Position);
end;

procedure SBChange(Sender: TObject);
begin
  panSB.Caption:=IntToStr(SB.Position);
end;

procedure TBChange(Sender: TObject);
begin
  panTB.Caption:=IntToStr(TB.Position);
end;

procedure tbRChange(Sender: TObject);
//Farbeinstellung rot
begin
  //Anzeige des Farbwertes
  panWr.Caption:=IntToStr(tbR.Position);
  //Darstellung der aktualisierten Farbe im Panel
  panCP2.Color:= RGB(tbR.Position,tbG.Position,tbB.Position);
  SetColors;
end;

procedure tbGChange(Sender: TObject);
//Farbeinstellung grün
begin
  panWg.Caption:=IntToStr(tbG.Position);
  panCP2.Color:=RGB(tbR.Position,tbG.Position,tbB.Position);
  SetColors;
end;

procedure tbBChange(Sender: TObject);
//Farbeinstellung blau
begin
  panWb.Caption:=IntToStr(tbB.Position);
  panCP2.Color:=RGB(tbR.Position,tbG.Position,tbB.Position);
  SetColors;
end;




procedure InitForms;
begin
 frmMon:= TForm.create(self);
 with frmMon do begin
   //FormStyle := fsStayOnTop;
   Position := poScreenCenter;
   caption:='Pulsar Universe BitmaX';
   color:= clblack;
   width:= 850;
   height:= 700;
   Show;
   onMousedown:= @Image1MouseDown;
 end;
 Image1:= TImage.create(frmMon);
 with Image1 do begin
   parent:= frmMon;
   setbounds(10,15, 200,180);
   onMousedown:= @Image1MouseDown;
   show;
   //onMouseup:= @Image1MouseUp
 end;
 Image2:= TImage.create(frmMon);
 with Image2 do begin
   parent:= frmMon;
   setbounds(265,465,560,250);
   onMousedown:= @Image1MouseDown;
   show;
   //onMouseup:= @Image1MouseUp
 end;
end;



procedure InitForms2;
var panel2, panel3: TPanel;
  fcolor: integer;
  rc,gc,bc: TColor32;
    
begin
 frmMon2:= TForm.create(self);
 with frmMon2 do begin
  Left:= 499
  Top:= 359
  BorderIcons:= [biSystemMenu, biMinimize]
  BorderStyle:= bsSingle
  Caption:= 'ColorPicker'
  ClientHeight:= 263
  ClientWidth:= 338
  //Color:= RGB(255,255,0);
  Font.Charset:= DEFAULT_CHARSET
  Font.Color:= clWindowText
  Font.Height:= -11
  Font.Name:= 'MS Sans Serif'
  Font.Style:= [];
  //OldCreateOrder = False
  Position:= poDesktopCenter;
  PixelsPerInch:= 96;
  //TextHeight(13);
  //Icon:= { }
   //FormStyle := fsStayOnTop;
   Show;
   onMousedown:= @Image1MouseDown;
 end;
 
 panCP:= TPanel.create(frmMon2);
 with panCP do begin
    parent:= frmMon2;
    SetBounds(8,8,321,121)
    BevelOuter:= bvLowered
    //transparent
    parentcolor:= false;
    color:= clblue;
    //TabOrder:= 1
    end;
    panCP2:= TLabel.create(frmMon2)
    with panCP2 do begin
      parent:= panCP;
      SetBounds(8,8,305,105)
      //caption:= 'color panel';
      parentcolor:= false;
      transparent:= false;
      panCP2.Color:= FIRSTCOLOR;
    end;
    panel2:= TPanel.create(frmmon2);
    with panel2 do begin
      parent:= frmMon2;
      SetBounds(8,136,321,113)
      BevelOuter:= bvLowered
      //TabOrder = 0
      with TPanel.Create(frmmon2) do begin
        parent:= panel2;
        SetBounds(8,8,38,29);
        //BevelOuter:= bvLowered;
        //TabOrder:= 3
    panel3:= TPanel.Create(frmmon2);
    with panel3 do begin
        parent:= panel2;
        BevelOuter:= bvLowered
        SetBounds(13,13,28,19)
        Color:= clRed;
        caption:= 'R';
        //TabOrder = 0
    end;
      with TPanel.Create(frmmon2) do begin
        parent:= panel2;
        SetBounds(13,45,28,19)
        Color:= clblue;
      end
    end;
      with TPanel.Create(frmmon2) do begin
        parent:= panel2;
        SetBounds(8,40,38,29)
        Color:= clgreen;
        caption:= 'G';
      end;
    with TPanel.Create(frmmon2) do begin //panG
        parent:= panel2;
        SetBounds(8,72,38,29)
        Color:= clblue;
        caption:= 'B';
        //TabOrder = 0
      end;
    end;
   panWR:= TPanel.create(frmmon2);
   with panWR do begin
      parent:= panel2;
      setBounds(280,8,33,19)
      BevelOuter:= bvLowered
      Caption:= '0'
      Color:= clWhite
      Font.Charset:= DEFAULT_CHARSET
      Font.Color:= clBlack
      Font.Name:= 'MS Sans Serif'
      Font.Style:= [fsBold]
      ParentFont:= False
      //TabOrder = 8
    end;
  panWG:= TPanel.create(frmmon2);
   with panWG do begin
      parent:= panel2;
      setBounds(280,40,33,19)
      BevelOuter:= bvLowered
      Font.Style:= [fsBold]
      Caption:= '0'
      Color:= clWhite
    end;
  panWB:= TPanel.create(frmmon2);
   with panWB do begin
      parent:= panel2;
      setBounds(280,72,33,19)
      Font.Style:= [fsBold]
      BevelOuter:= bvLowered
      Caption:= '0'
      Color:= clWhite
    end;
    rc:= RedComponent(FIRSTCOLOR)
    gc:= GreenComponent(FIRSTCOLOR)
    bc:= BlueComponent(FIRSTCOLOR)
    panWR.Caption:= inttoStr(rc);
    panWG.Caption:= inttoStr(gc);
    panWB.Caption:= inttoStr(bc);
    
    tbR:= TTrackBar.create(frmmon2);
    tbG:= TTrackBar.create(frmmon2);
    tbB:= TTrackBar.create(frmmon2);
    fColor:= ColorToRGB(FIRSTCOLOR);
    //msg(inttostr(firstcolor))
    writeln(inttostr(ColorToRGB(FIRSTCOLOR)));
    //writeln(floattostr(intpower(2,24)))
  
    with tbR do begin
      parent:= panel2;
      setBounds(48,8,230,25);
      //tickstyle:= tsmanual;
      //SetTick(13);
      //SetTick(23);
      Max:= 255
      Frequency:= 10
      Position:= rc;
      ThumbLength:= 20
      OnChange:= @tbRChange;
    end;
     with tbG do begin
      parent:= panel2;
      setBounds(48,40,230,25);
      Max:= 255
      Frequency:= 10
      Position:= gc;
      ThumbLength:= 20
      OnChange:= @tbGChange;
    end;
     with tbB do begin
      parent:= panel2;
      setBounds(48,72,230,25);
      Max:= 255
      Frequency:= 10
      Position:= bc;
      ThumbLength:= 20
      OnChange:= @tbBChange;
    end;
 
 {Image1:= TImage.create(frmMon);
 with Image1 do begin
   parent:= frmMon2;
   setbounds(10,15, 200,180);
   onMousedown:= @Image1MouseDown;
   show;
   //onMouseup:= @Image1MouseUp
 end;}
 {Image2:= TImage.create(frmMon);
 with Image2 do begin
   parent:= frmMon2;
   setbounds(265,465,560,250);
   onMousedown:= @Image1MouseDown;
   show;
   //onMouseup:= @Image1MouseUp
 end;}

end;


procedure InitForms3;
var panel2, panel3: TPanel;
  fcolor, i: integer;
  rc,gc,bc: TColor32;
  vv: variant;
    
begin
 frmMon3:= TForm.create(self);
 with frmMon3 do begin
  Left:= 1200
  Top:= 303
  BorderIcons:= [biSystemMenu, biMinimize]
  BorderStyle:= bsSingle
  Caption:= 'WordCharacterCounter'
  ClientHeight:= 224
  ClientWidth:= 493
  //Color:= RGB(255,255,0);
  Font.Charset:= DEFAULT_CHARSET
  Font.Color:= clWindowText
  Font.Height:= -11
  Font.Name:= 'MS Sans Serif'
  Font.Style:= [];
  //OldCreateOrder = False
  Position:= poDesktopCenter;
  PixelsPerInch:= 96;
  //TextHeight(13);
  //Icon:= { }
   //FormStyle := fsStayOnTop;
   Show;
   onMousedown:= @Image1MouseDown;
   //onCreate:= @CCFormCreate;

 end;
   with TTabControl.Create(frmmon3) do begin
      parent:= frmmon3;
      SetBounds(12,16,480,20)
      //Width:= 12;
      //tabs.width
    for i:= 0 to 26-1 do 
       tabs.add(chr(i+97))
      //Caption:= 'Reset'
   end; 

 with TLabel.Create(frmmon3) do begin
    parent:= frmmon3;
    setbounds(8,4,62,13)
    Caption:= 'Texteingabe:'
  end;
  with TLabel.Create(frmmon3) do begin
    parent:= frmmon3;
    setbounds(8,64,95,13)
    Caption:= 'Buchstabenstatistik:'
  end;
  with TLabel.Create(frmmon3) do begin
    parent:= frmmon3;
    setbounds(8,148,116,13)
    Caption:= 'Character Count:';
  end;
  sgStat:= TStringGrid.Create(frmmon3);
  with sgStat do begin
    parent:= frmmon3;
    Left:= 8
    Top:= 88
    Width:= 473
    Height:= 41
    //setBounds(8,88,473,41)
    TabStop:= False
    ColCount:= 26
    DefaultColWidth:= 17
    DefaultRowHeight:= 18
    FixedCols:= 0
    RowCount:= 2 
    //Font.Name:= 'Wingdings';     //J is smile
    //TabOrder:= 2
  end;
    for i:= 0 to 26-1 do 
       sgStat.ColWidths[i]:= 17;
    CCFormCreate(self);
       
    with TButton.Create(frmmon3) do begin
      parent:= frmmon3;
      SetBounds(32,180,121,25)
      Caption:= 'Calculation'
      //TabOrder = 0
      OnClick:= @btnCalcCharsClick
    end;
    with TButton.Create(frmmon3) do begin
      parent:= frmmon3;
      SetBounds(176,180,121,25)
      Caption:= 'Reset'
      //TabOrder = 0
      OnClick:= @btnNewClick
    end;
    
   panB:= TPanel.Create(frmmon3)
   with panB do begin
     parent:= frmmon3;
     setBounds(100,144,49,18);
     BevelOuter:= bvLowered;
    Color:= clWhite
    //TabOrder = 3
  end;
  
  edText:= TEdit.Create(frmmon3);
   with edText do begin
    parent:= frmmon3;
    Setbounds(8,32,473,21);
    //CharCase:= ecUpperCase;
    //passwordChar:= '*';
    Text:= 'the quick brown fox jumps over the lazy dog'
    vv:= '34';
    vv:= 34;
    //text:= vv; //test a autoboxing with variant!
   end;
   //vv:= VarArrayCreate
   //vv:= VarArrayOf
 
end;


procedure paintonform;
var i, x,y: integer;
begin
 for i:= 1 to 20 do begin 
   X := Random(frmmon4.Width - 10);
  Y := Random(frmmon4.Height - 10);
  with frmmon4.canvas do begin
     Pen.Color := Random(65535);
  case Random(5) of
    0: Pen.Style := psSolid;
    1: Pen.Style := psDash;
    2: Pen.Style := psDot;
    3: Pen.Style := psDashDot;
    4: Pen.Style := psDashDotDot;
  end;
  //update;
     Rectangle(X, Y, X + Random(400), Y + Random(400));
  end;
  end; 
  end;
  
  
  
procedure Form4_FormMouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
frmmon4.canvas.brush.style:= bsClear; //Für transparentes Quadrat
if shift = [ssleft] then //Zeichnen mit linker Maustaste
  begin
    x1 := x; y1 := y;
    x2 := x; y2 := y;
    frmmon4.canvas.rectangle (x1,y1,x2,y2);
  end;
if shift =[ssright] then //Quadrat löschen mit rechter Maustaste
  frmmon4.canvas.rectangle(x1,y1,x2,y2);
end;

procedure Form4_FormMouseMove(Sender: TObject; Shift: TShiftState; X,
  Y: Integer);
begin
  if shift = [ssleft] then begin
  frmmon4.canvas.rectangle (x1,y1,x2,y2);
  x2 := x; y2 := y1+x-x1; //Quadrat durch X-Verschiebung der Maus
  frmmon4.canvas.rectangle (x1,y1,x2,y2);
  end
end;   
 

procedure InitForm4;

var mbmp: Tbitmap;
     mycanvas: TCanvas;
     row,col, r2, x,y, i: integer;

begin
 mbmp:= TBitmap.create;
 mbmp.loadfromfile('examples\citymax.bmp')
 //mycanvas:= TCanvas.create;
 //if ResizeBmp(mybitmap, 443, 330) then
   // showmessage('picture almost resized');

 frmMon4:= TForm.create(self);
 with frmMon4 do begin
   //FormStyle := fsStayOnTop;
   Position := poScreenCenter;
   caption:='CheckerCPUBoard';
   color:= clyellow;
   width:= 450;
   height:= 400;
   Canvas.brush.color:= clred;
   Canvas.pen.width:= 20;
   Canvas.Rectangle(0,0,40,40);
   canvas.moveto(10,10)
   canvas.lineto(30,30)
   //to draw rectangle
   canvas.Pen.mode :=pmNotXor;
   canvas.pen.style:= psDot; //Gepunktete Linien
   canvas.pen.color:=clRed;
 //  Canvas.draw(10,10, mbmp);
  {for i:= 1 to 20 do begin 
   X := Random(Screen.Width - 10);
  Y := Random(Screen.Height - 10);
  Canvas.Pen.Color := Random(65535);
  case Random(5) of
    0: Canvas.Pen.Style := psSolid;
    1: Canvas.Pen.Style := psDash;
    2: Canvas.Pen.Style := psDot;
    3: Canvas.Pen.Style := psDashDot;
    4: Canvas.Pen.Style := psDashDotDot;
  end;
  //update;
  Canvas.Rectangle(X, Y, X + Random(400), Y + Random(400));
  end;} 
   Show;
   onMousedown:= @Form4_FormMouseDown;
   onMouseMove:= @Form4_FormMouseMove;
   //@Image1MouseDown;
   paintOnForm;
   Canvas.draw(10,10, mbmp);
 
 end;
 
 //paintOnForm;
 
 Image3:= TImage.create(frmMon4);

 with Image3 do begin
   parent:= frmMon4;
   //LoadFromFile(ExePath+ 'citymax.bmp');
   //Picture.BitMap.LoadFromFile(ExePath+'examples\citymax.bmp');
   setbounds(65,65,300,300);
  
   Canvas.brush.color:= clgreen;
   //Canvas.pen.style:= psDot;
   
   //Canvas.brush.bitmap.loadfromfile(ExePath+'examples\citymax.bmp');
   //Canvas.brush.bitmap:= mbmp;
   //Canvas.draw(10,10, mbmp);
   r2:= 40;
   for row:= 1 to 64 do begin
   if row mod 8 = 0 then begin
      //r2:= r2+ row;
      for col:= 1 to 8 do begin
        Canvas.Rectangle(col*3,row*10,25,25);
        Canvas.Rectangle(col*13,row*10,25,25);
        Canvas.Rectangle(col*23,row*10,25,25);
  
      //writeln(inttostr(row*3))
      end;
      end;
   end;   
      //Canvas.moveto(270,130)
    //  Canvas.Rectangle(70,70,130,30);


   writeln(inttostr(canvas.pen.width))
   writeln(inttostr(canvas.pen.handle))
   writeln(inttostr(canvas.penpos.y))

   onMousedown:= @Image1MouseDown;
   
    for i:= 1 to 150 do begin 
   X := Random(frmmon4.Width - 10);
  Y := Random(frmmon4.Height - 10);
  Canvas.Pen.Color := Random(65535);
  Canvas.brush.Color := Random(65535);

  case Random(5) of
    0: Canvas.Pen.Style := psSolid;
    1: Canvas.Pen.Style := psDash;
    2: Canvas.Pen.Style := psDot;
    3: Canvas.Pen.Style := psDashDot;
    4: Canvas.Pen.Style := psDashDotDot;
  end;
  //update;
  Canvas.Rectangle(X, Y, X + Random(40), Y + Random(40));
  end; 
 
   show;
   //onMouseup:= @Image1MouseUp
 end;
 mbmp.Free;
end;


procedure checkerboard2(mycanvas: TCanvas);
var row, col: byte;
begin  
    for row:= 1 to 64 do begin
   if row mod 8 = 0 then begin
      //r2:= r2+ row;
      for col:= 1 to 8 do begin
        myCanvas.Rectangle(col*25,50+row*3,20,20);
    
      //writeln(inttostr(row))
      end;
      end;
   end;   
end; 


procedure InitForm5;

var mbmp: Tbitmap;
     mycanvas: TCanvas;
     row,col, r2, x,y, i: integer;

begin
 mbmp:= TBitmap.create;
 mbmp.loadfromfile(exepath+'examples\citymax.bmp')
 //mycanvas:= TCanvas.create;
 //if ResizeBmp(mybitmap, 443, 330) then
   // showmessage('picture almost resized');

 frmMon5:= TForm.create(self);
 with frmMon5 do begin
   //FormStyle := fsStayOnTop;
   Position := poScreenCenter;
   caption:='CheckerCPUBoard';
   color:= clyellow;
   width:= 450;
   height:= 400;
   //Canvas.brush.color:= clred;
   Canvas.pen.width:= 2;
   //to draw rectangle
   canvas.Pen.mode :=pmNotXor;
   canvas.pen.style:= psDot; //Gepunktete Linien
   //canvas.pen.color:=clRed;
 //  Canvas.draw(10,10, mbmp);
  {for i:= 1 to 20 do begin 
   X := Random(Screen.Width - 10);
  Y := Random(Screen.Height - 10);
  Canvas.Pen.Color := Random(65535);
  case Random(5) of
    0: Canvas.Pen.Style := psSolid;
    1: Canvas.Pen.Style := psDash;
    2: Canvas.Pen.Style := psDot;
    3: Canvas.Pen.Style := psDashDot;
    4: Canvas.Pen.Style := psDashDotDot;
  end;
  //update;
  Canvas.Rectangle(X, Y, X + Random(400), Y + Random(400));
  end;} 
   //   Canvas.brush.bitmap:= mbmp;
 
   Show;
   //onMousedown:= @Form4_FormMouseDown;
   //onMouseMove:= @Form4_FormMouseMove;
   //@Image1MouseDown;
   //paintOnForm;
   Canvas.draw(5,50, mbmp);
    Canvas.brush.bitmap:= mbmp;
 
   checkerBoard2(frmmon5.canvas);
 
 end;
 
 //paintOnForm;
 
 {Image3:= TImage.create(frmMon4);
  with Image3 do begin
   parent:= frmMon4;
   //LoadFromFile(ExePath+ 'citymax.bmp');
   //Picture.BitMap.LoadFromFile(ExePath+'examples\citymax.bmp');
   setbounds(65,65,300,300);
    //Canvas.brush.color:= clgreen;
   //Canvas.pen.style:= psDot;
   
   //Canvas.brush.bitmap.loadfromfile(ExePath+'examples\citymax.bmp');
   //Canvas.brush.bitmap:= mbmp;
   //Canvas.draw(10,10, mbmp);
   r2:= 40;
   for row:= 1 to 64 do begin
   if row mod 8 = 0 then begin
      //r2:= r2+ row;
      for col:= 1 to 8 do begin
        Canvas.Rectangle(col*7,row+30,10,10);
    
      //writeln(inttostr(row*3))
      end;
      end;
   end;   
      //Canvas.moveto(270,130)
      Canvas.Rectangle(100,100,150,150);


   writeln(inttostr(canvas.pen.width))
   writeln(inttostr(canvas.pen.handle))
   writeln(inttostr(canvas.penpos.y))

  // onMousedown:= @Image1MouseDown;
   
 
   show;
   //onMouseup:= @Image1MouseUp
 end;}
 mbmp.Free;
end;




{
The following example uses the CopyMode of an images canvas
to blank out the image when the user chooses the "Cut" menu 
item.  This example requires a Main menu with a Copy and a
Cut menu item that have their OnClick error handlers populated.
Note: CopyMode and CopyRect are members of the destination
canvas.
}
procedure TForm1_Copy1Click(Sender: TObject);
var
  DstRect, SrcRect: TRect;
begin
  with Image2.Canvas do begin
    //CopyMode := cmSrcCopy;
    DstRect := Rect(0, 0, Image2.Width, Image2.Height);
    SrcRect := Rect(0, 0, Image1.Width, Image1.Height);
    CopyRect(DstRect, Image1.Canvas, SrcRect);
  end;
end;

procedure TForm1_Cut1Click(Sender: TObject);
var
  ARect: TRect;
begin
  TForm1_Copy1Click(Sender); { do the same thing as the copy menu item }
  with Image1.Canvas do begin
    //CopyMode := cmWhiteness;
    ARect:= Rect(0, 0, Image1.Width, Image1.Height);
    CopyRect(ARect, Image1.Canvas, ARect);
    //CopyMode := cmSrcCopy; { restore the copy mode }
  end;
end;


procedure AnimatePowerCircle;
var i: smallint;
begin 
  for i:= 1 to 25 do begin
    DrawPowerCircle(i);    // try 30 or 35
    //sleep(100)
  end;  
end;    


procedure LoadBitMap;
var mybitmap: Tbitmap;
     mycanvas: TCanvas;
begin
 mybitmap:= TBitmap.create;
 mybitmap.loadfromfile('examples\citymax.bmp')
 //mycanvas:= TCanvas.create;
 if ResizeBmp(mybitmap, 443, 330) then
    showmessage('picture almost resized');
  //Image1.LoadFromFile(ExtractFilePath(Application.Exename) + 'Bild.bmp');
 //mycanvas.Free;
end;

procedure newDBTableScript;
begin
  with TTable.Create(self) do begin
    Active:= false;
    databasename:= 'DBDEMOS';
    //databasename:= 'knabe';
    tablename:= 'maxtable3';
    tabletype:= ttparadox;
    with fielddefs do begin
      Clear;
      add('field1',ftinteger,0,false)
      add('field2',ftinteger,0,false)
      add('field3',ftfloat,0,false)
    end;
    CreateTable; 
    active:= true;
    Insert;
    FieldbyName('field1').value:= 44;
    FieldbyName('field2').value:= 55;
    FieldbyName('field3').value:= 3.1415;
    Post;
    Close;  
  end;
end;        

procedure allDialogsTest;
begin
  with TOpenDialog.create(self) do begin
    execute;
    Free;
  end;
    with TSaveDialog.create(self) do begin
    execute;
    Free;
  end;
    with TOpenPictureDialog.create(self) do begin
    //show
    //execute('');
    Free;
  end;
    with TSavePictureDialog.create(self) do begin
    //execute;
    Free;
  end;
    with TFontDialog.create(self) do begin
    execute;
    Free;
  end;
    with TColorDialog.create(self) do begin
    execute;
    Free;
  end;
  {with TPrinterDialog.create(self) do begin
    execute;
    Free;
  end;}
    with TPrinterSetupDialog.create(self) do begin
    execute;
    Free;
  end;
    //with TFindDialog.create(self) do begin
    //execute;
    //showmodal
    //Free;
  //end;
   with TReplaceDialog.create(self) do begin
    execute;
    //Free;
  end;
  with TEdit.Create(self) do begin
    selectAll;
     copytoclipboard
     //borderstyle
     //unselect;
     //undo
     //hasselection
     //bevelkind
     maxlength
     charcase
     ctl3d
     passwordchar:= #0;
    Free;
  end;
  
  with TMemo.create(self) do begin
    parent:= frmmon2;
    alignment:= alleft;
    wantreturns:= true;
    //ateof
    //bevelkind
    //append
    clear;
    //copytoclipboard
    //selectall
    //redo;
    //onChange
    //insert
    //gettextbuf
     //gettextlen
    //hasselection
      //search
      //undo
      //unselect
        clearselection
        Free;
  end;  
  with TCanvas.create do begin
    //arc
    //chord
    // brushcopy
     //copyrect
    // drawfocusrect
     // framerect
      brush
      canvasorientation
      cliprect
      copymode
      font
      handle
      lockcount
      pen
      penpos
      //polygon
      pixels[10,25]:= clRed;
      textflags
      Free;
    
  end;  
  
    with TStrings.create do begin
       //getobject
       gettext
       //gettextstr
       //indexof
        // indexofname
        //indexofobject
         // insert
         //insertobject
         //  loadfromfile
          // loadfromstream
           // move
             //put
             //  putobject
           // savetofile   
          //   savetostream  
            //setcapacity   
               
    end
end;   

function vsomme(a,b: variant): variant;
begin
  result:= a+b;
end;  


function ExceptionTester: boolean;
var S1, S2, S3: Single;
  //Exc2: Exception;
  lc: char;
begin
  result:= false;
  Exc2:= Exception.Create('intern division zero');
  //for lc:= 'A' to 'Z' do
    //writeln(lc);
  //writeln('variant '+somme(5,6));
  try
    S1 := 1.0;
    S2 := 0.0;
    S3 := S1/S2;
    result:= true;
  except
    //on E: Exception do
      //Writeln('Exc.ClassName '+ Exc2.message);
      writeln('variant '+vsomme(5,6));
      Exc2.message;    //raise
      //exit;
      writeln('variant '+vsomme(5,6));
      RaiseLastException;
      writeln('variant '+vsomme(5,6));
  end;
  //result:= true;
  //Exc2.Free;
  writeln('variant '+vsomme(5,6));
end;  
 
procedure TestFloatingPoints_Unit;
var
  S, S1, S2, S3: Single;
  E: Extended;
  E1, E2, E3: Extended;
  exc: Exception;
begin
  exc:= Exception.Create('division zero fault');
  E:= 0.1;
  //Writeln(E:20:18);
  //0.100000000000000000
  //0.100000001490116120 converting
  PrintF('this is a fpoint before %.18f ',[E]);
  S:= E;
  E:= S;
  //Writeln(E:20:18);
  PrintF('this is a fpoint after %.18f ',[E]);

  //Readln;
 //Rounding
  {The output is
  0.100000001490116120
  0.010000000707805160
  0.009999999776482580 }
  S1 := 0.1;
  //Writeln(S1:20:18);
  PrintF('this is a fpoint before %.18f ',[S1]);
  S1 := S1 * S1;
  S2 := 0.01;
  PrintF('this is a fpoint after %.18f ',[S1]);
  PrintF('this is a fpoint after %.18f ',[S2]);
  //Writeln(S1:20:18);
  //Writeln(S2:20:18);
  //Readln;
  //Compare Literals
  S1 := 0.3;
  S2 := 0.1;
  S2 := S2 / 10.0;      // should be 0.01  
  writeln(floattoStr((s2)))  
  S2 := S2 * 10.0;      // should be 0.1 again
  writeln(floattoStr(s2))  
  S2 := S2 + S2 + S2;   // should be 0.3
  writeln(floattoStr(s2))  
  //floattodecimal
  
  if S1 = S2 then
    Writeln('True')
  else
    Writeln('False');
  if SameValue2(S1, S2, 0) then  //single
    Writeln('True')
  else
    Writeln('False');
  //The output is  False True  
  //Readln;
  E1 := 16.000000000000000001;
  E2 := 16.000000000000000000;
  E3 := E1 - E2;
  //Writeln(E1:22:18, E2:22:18, E3);
   PrintF('this is FPoint subtract E1: %.18f E2: %.18f E3: %.18f',[E1,E2, E3]);
 
  E1 := 1000000000000000000000000.0;
  E2 := 0.1;
  E3 := E1;
  //Writeln(E1 + E2 - E3:10:10);
  PrintF('this is a fpoint after %.10f ',[E1+E2-E3]);
  //Writeln(S1 - S3 + S2:10:10);
  PrintF('this is a fpoint after %.10f ',[E1-E3+E2]);
  PrintF('Sin(Pi) returns %.18f ',[Sin(PI)]);
  //Delphi returns -5.42101086242752 × 10-20 , instead of the expected 0.
  //Sin(Pi),
   writeln(floatToStr(maxCalc('-5.4*10^-2')))
   writeln(floatToStr(maxCalc('5.4*(10^-4)')))
   writeln('sin pi of maxcalc '+floatToStr(maxCalc('Sin(PI)')))
   writeln('sin pi of convert '+floatToStr(Sin(PI)))
  
  //SetExceptionMask(GetExceptionMask + [exZeroDivide]); // default is: unmasked
  try
    S1 := 1.0;
    S2 := 0.0;
    S3 := S1/S2;
  except
    //on E: Exception do
      Writeln('Exc.ClassName '+ Exc.message);
      Exc.message;
  end;
  //Writeln(S3);
    //The number 0.1 is stored as $3DCCCCCD or (ordering the bits already)
     writeln(hextobin2('3DCCCCCD'))
     //0   0111 1011   100 1100 1100 1100 1100 1101
     //0  0111 1011 (123)-127=-4  100 1100 1100 1100 1100 1101,
     writeln(inttoStr(bintoint('110011001100110011001101')))  
     writeln(floattoStr(maxCalc('(13421773*(2^-4))/(2^23)'))) //scale by 2^23
     writeln(floattoStr(maxCalc('(13421773*(2^-4))*(2^-23)'))) //scale by 2^23
     //0.10000000149011612,
     writeln(floattoStr(maxCalc('2^-4')))
     writeln('this is E '+floattoStr(E))
   
end;  //fpointunit

Procedure CPURunTester;
var h: TDateTime;
begin
  stop:= false;
  while not stop do begin
    h:= time;
    while (not stop) and (time<h+StrToTime('0:1')) do 
      application.ProcessMessages;
    writeln(timetoStr(h));
    writeln(timetoStr(time));
      application.ProcessMessages;
  end;  
end;

procedure drawImageList;
var i: integer;
    nbcol: byte;
    //imglist: TimageList;
begin
  nbcol:= 3;
  for i:= 1 to 9 do
  with frmMon.canvas {imglist} do begin
    draw(image1.picture.bitmap,(i mod nbcol)*(frmMon.width+20),
                    (i div nbcol)*(frmMon.height+20));
    //draw((i mod nbcol)*(frmMon.width+2),(i div nbcol)*(frmMon.height+2),frmmon.canvas);
   end;
end;    


 PROCEDURE mthX;
  var x: single;
  BEGIN
    x:= Sin(x);
  END;
  
  procedure onIdleGL(sender: TObject; var done: boolean);  
  var difms, ms256: longint;
  begin
    //startms:= timegettime;
    difms:= timegettime - startms;
    inc(lcounter)
    printf('%d %d',[lcounter*1000 div difms, 
      (lcounter)*1000 div(difms-ms256)]);
      ms256:= difms;
      done:= false;
  end;    
  
  
function GetWinDir: string;
var
buffer: array[0..MAX_PATH] of char;
begin
  //GetWindowsDirectory(buffer, MAX_PATH);
  //result := string(buffer);
if RightStr(result,1) <> '\' then result := result + '\';
end;


procedure SaveToBitmapFile(AFile: TFilename);
var
bmp: TBitmap;
begin
  bmp:= TBitmap.Create;
  bmp.Width := 400;
  bmp.Height := 400;
with bmp.Canvas do begin
   //drawing commands
end;
  bmp.SaveToFile(AFile);
  bmp.Free;
end;

function DecToHex(N: int64): string;
begin
  writeln(inttostr(n))
  if N < 0 then
  result:= '-' + Format('%0x', [(N)])
else
  result:= Format('%0x', [N]);
end;


 var md: TDynCardinalArray;
   i: longint;
   hthread: THandle;
   threadid: dword;
   cc: comp;  //it is an Int64 which is supported and calculated by the FPU.
   mth: TThreadFunction2;
   sst: shortstring;
   zeta,zeta2: extended;
   zetc: longint;
 
  


begin
  ProcessMessagesOFF;
  {InitForms;
  InitForms2;
  InitForms3;
  DrawRosette;
  DrawRosette2;
  //Pulsar
  //DrawPowerCircle(25);    // try 30 or 35
  AnimatePowerCircle;
  //LoadBitMap; //test 
  loadImage;       
    InitForm4;}
    initForm5; 
     
  //SaveImageJpeg(image1,'newteejpg','jpg');
  //DrawImageList;
  cc:= round(power(2,30))
  writeln('cc type: '+inttostr64(cc))
  //allDialogsTest;
  //writeln(booltostrj(IsPrimeFactor(7,1)))
  md:= PrimeFactors(51) 
  for i:= 0 to length(md)-1  do
    write(inttostr(md[i])+ ' ');
    //WideFormat
    TestFloatingPoints_Unit;
    
    try
      if ExceptionTester then 
        writeln('no exception');
        //writeln(exc2.message);
    except
      writeln('got last exception '+Exception(exc2).message);
    end  
    writeln('variant '+inttostr(vsomme(5,6)));
    writeln('variant '+floattostr(vsomme(5.8,6.0)));
    writeln('variant '+(vsomme('5','6')));
    writeln('variant '+(vsomme('bonjour','monsieur')));
    vsomme(date,7);
    writeln('variant '+datetostr(vsomme(date,7)));
    //TThreadFunction2
    //CreateThread2(NIL,threadid); 
    mth:= @mthX;
    //hthread:= CreateThread2(mth,threadid); 
    //CPURunTester;
    threadvar:= 123;
    writeln(inttostr(threadvar))
    //newDBTableScript;
    //for i:= 1 to sst[0] do 
   startms:= timegettime;
    writeln(inttostr(timegettime))
  
   //Application.onIdle:= @onIdleGL;
   zeta:= 0;
   zetc:= 1;
   //memo2.hide;
   //memo2.unhide;
   memo2.handle;
   for i:= 1 to 20000 do begin
      //zeta:= zeta + (1 / intpower(i, 1)); 
      //inc(zetc)
      zeta:= zeta + (1 / i); 
      //zeta2:= 1/i
      //writeln(inttostr(i)+' '+floattostr(zeta))
      //writeln(inttostr(i)+ 'zeta2: '+floattostr(zeta2))
      
      end;
   //memo2.height:= 200;   
   //memo2.show;   
  //writeln(floattostr(1/2135000));    
  writeln(floattostr(zeta))
  //10.8861849921199
  zeta:= abs(power(2,31));
  //19.6910435919139 of 200 10^6    0:32:0.297
  //19.6910435919139                0:28:6.141
  writeln(dectoHEX(round(intpowers(2,31)-1)));
  writeln(inttoHEX(round(intpowers(2,31)-1),16));

end.  


Add jpeg in your uses section.

Saving a jpeg to table :

table1.append;
table1Image.LoadFromFile('c:\bob.jpg');
table1.post;
// where table1image is a tblobfield linked to the image field of table1

loading the image from the table :
var
jpeg: tjpegimage;
buf: tmemorystream;
begin
jpeg := tjpegimage.create();
buf := tmemorystream.create();
table1Image.savetostream(buf);
buf.seek(0, soFromBeginning);
jpeg.loadfromstream(buf);
image1.picture.assign(jpeg);
buf.free;
jpeg.free;
end;

Internals

So how does this look internally? In the following example I use a Single, since Singles have an overviewable mantissa and exponent. Let me show you how a number like 0.1 is stored in a Single.

The number 0.1 is stored as $3DCCCCCD or (ordering the bits already)
0  0111 1011  100 1100 1100 1100 1100 1101,
which means the sign bit is 0, the exponent is 123-127 = -4 and the mantissa is (after putting the hidden bit in front) 1100 1100 1100 1100 1100 1101 or $CCCCCD or 13421773.

If we multiply 13421773 with 2-4 (0.0625), we get 838860,8125. Now we only have to scale that by 223 = 8388608, and we get 0.10000000149011612, which is indeed pretty close to 0.1.

procedure TControl.SetColor(Value: TColor);
begin
  if FColor <> Value then
  begin
    FColor := Value;
    FParentColor := False;
    if (csDesigning in ComponentState) and not (csReading in ComponentState) and (Self is TWinControl) then
      TWinControl(Self).ParentBackground := False;
    Perform(CM_COLORCHANGED, 0, 0);
  end;
end;


n Ron Howard's 2001 film A Beautiful Mind, John Nash (played by Russell Crowe) is hindered in his attempts to solve the Riemann hypothesis by the medication he is taking to treat his schizophrenia. 