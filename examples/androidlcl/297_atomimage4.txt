//maXbox is a scripter tool with an inbuild delphi engine in one exe!
//Demo shows the functions of maXbook in images, sound and text,
//based on the picture atomimage2 I added an animation roseAtom, loc's =358
//*************************************************************************

Program maXbook_atomimage_3DCipher;

Const LOGO = 'Welcome to maXbook Art Exhibiton look!';
      myPIC1 = 'http://www.softwareschule.ch/images/atomimage2.png';
      myPIC2 = 'http://www.softwareschule.ch/images/maxworld.png';
      myPIC1loc = 'examples\atomimage2.png';
      myPIC2loc = 'examples\earthplay\maxworld.png';
      myMusic = 'http://www.softwareschule.ch/download/airmaxloop3.mp3';
      mySong = 'airmaxloop3.mp3';
      myText = ' atomimage4';
      MILLISECONDS = 50;
      Xline= 45;
      Yline= 45;
      Zline= 15+60;
      OUTH= 'HELLOEKON!';

var
  inFrm: TForm;
  image1: TImage;
  mT: TTimer;
  E: Exception;
  CurStep: Double;


  procedure loadImageLocal(vimage: TImage; picpath: shortstring); forward;

procedure drawText(vFrm: TForm; vcolor: TColor);
var
  theRect: TRect;
begin
  with vFrm.canvas do begin
    //brush.Color:= clred;
      Brush.Style:= bsClear;
    //.left/.top/.right/.bottom
    theRect:= Rect(350,350,600,400);
    font.color:= vColor;
    font.size:= 22;
    TextOut(460,395,myText);
  end;
end;  

//********************************* Cube ***********************************//
type
  TCube = array[1..10] of record             {date}
     x,y,z: Integer;
  end;       
  TFolge = array[1..20] of Byte;             {point sequence}

var  H: TCube;
     Folge: TFolge;
     H3D: array[1..10] of TPoint;
     Alpha, Beta, Mx, My: Integer;    { Drehwinkel mit Startwerten }
     Groesse, a: single;

procedure loadHouseArray;
 begin
 H[1].x:= -xline;  H[1].y:= -yline;  H[1].z:= -zline;
 H[2].x:= -xline;  H[2].y:= -yline;  H[2].z:= 0;
 H[3].x:= 0;       H[3].y:= -yline;  H[3].z:= zline;
 H[4].x:= xline;   H[4].y:= -yline;  H[4].z:= 0;
 H[5].x:= xline;   H[5].y:= -yline;  H[5].z:= -zline;
 H[6].x:= xline;   H[6].y:= yline;   H[6].z:= -zline;
 H[7].x:= xline;   H[7].y:= yline;   H[7].z:= 0;
 H[8].x:= 0;       H[8].y:= yline;   H[8].z:= zline;
 H[9].x:= -xline;  H[9].y:= yline;   H[9].z:= 0;
 H[10].x:= -xline; H[10].y:= yline;  H[10].z:= -zline;

 Folge[1]:= 5; Folge[2]:= 1; Folge[3]:= 2; Folge[4]:= 3;  
 Folge[5]:= 4; Folge[6]:= 5; Folge[7]:= 6; Folge[8]:= 7;  
 Folge[9]:= 8; Folge[10]:= 9; Folge[11]:= 10; Folge[12]:= 6;  
 Folge[13]:= 7; Folge[14]:= 4; Folge[15]:= 3; Folge[16]:= 8;  
 Folge[17]:= 9; Folge[18]:= 2; Folge[19]:= 1; Folge[20]:= 10;  
end; 

procedure Projektion(Alpha, Beta,       { turnpoint (drehwinkel)}
                     Mx, My: Integer;   { middlepoint }
                     Groesse: single; acanvas: TCanvas);    
var  SinA, SinB, CosA, CosB : single;     
     Lauf : Integer;

begin { Projection }
  SinA:= Sin(Alpha/180*Pi);          { calculation of projection before }
  SinB:= Sin(Beta/180*Pi);                 { loop to save time}
  CosA:= Cos(Alpha/180*Pi);            
  CosB:= Cos(Beta/180*Pi);
  acanvas.font.size:= 12; //random(10)+5;
  acanvas.font.color:= clyellow;//claqua;
  //acanvas.repaint;
  for Lauf:= 1 to 10 do                        
    with H[Lauf] do begin 
      H3D[Lauf].x:= Round((CosA * H[Lauf].x - H[Lauf].y * SinA)
                              * Groesse) + Mx ;
      H3D[Lauf].y:= Round(((H[Lauf].x*SinA + H[Lauf].y*CosA)*CosB
                                + H[Lauf].z*SinB)*Groesse) + My;
      //inFrm.canvas.Textout(H3D[Lauf].x,H3D[Lauf].y, inttoStr(Folge[Lauf+1])) 
      acanvas.Textout(H3D[Lauf].x,H3D[Lauf].y, '*')   //Sign 
    end; { with }
   acanvas.MoveTo(H3D[Folge[1]].x, H3D[Folge[1]].y);
   acanvas.pen.color:= random(clwhite);
   acanvas.pen.width:= 4;
  for Lauf:= 2 to 20 do                 
       acanvas.LineTo(H3D[Folge[Lauf]].x,H3D[Folge[Lauf]].y);
    acanvas.MoveTo(H3D[Folge[10]].x, H3D[Folge[10]].y);
    acanvas.LineTo(H3D[Folge[13]].x, H3D[Folge[13]].y);
    acanvas.MoveTo(H3D[Folge[3]].x, H3D[Folge[3]].y);
    acanvas.LineTo(H3D[Folge[5]].x, H3D[Folge[5]].y);
    sleep(10)    
end; { Projektion }
//************************************ Cube finish ***************************

procedure getMP3File;
var 
  fStream: TFileStream;
begin
  fStream:= TFileStream.create(mySong, fmCreate)
  with TIdHTTP.create(NIL) do begin
    try
      Get1(myMusic, fStream)
    finally
      Free
      fStream.Free;
    end;
  end;    
end;

procedure getHTTP_PNG(vimage: TImage; vURL: string); 
var
  idHTTP: TIDHTTP;
  pngStream: TMemoryStream;
begin
  with TLinearBitmap.Create do
  try
    idHTTP:= TIdHTTP.Create(NIL)
    pngStream:= TMemoryStream.Create;
    try
      idHTTP.Get1(vURL, pngStream)
    except
      showmessage(E.message)
    end  
    pngStream.Position:= 0;
    LoadFromStream2(pngstream,'PNG');
    vimage.Picture:= NIL;
    AssignTo(vimage.picture);
    //SaveToFile(ExePath+'mX3_open.png');
  finally
    Dispose;
    Free;
    idHTTP.Free
    pngStream.Free;
  end; 
end; 

function TForm1_RotatePoint(APoint,ACenter: TPoint; AAngle: Double): TPoint;
var
  dx,dy: Double;
begin
  dx:= (ACenter.Y * Sin(AAngle)) - (ACenter.X * Cos(AAngle)) + ACenter.X;
  dy:= -(ACenter.X * Sin(AAngle)) - (ACenter.Y * Cos(AAngle)) + ACenter.Y;
  Result.X:= Round((APoint.X * Cos(AAngle)) - (APoint.Y * Sin(AAngle)) + dx);
  Result.Y:= Round((APoint.X * Sin(AAngle)) + (APoint.Y * Cos(AAngle)) + dy);
end;
  
procedure TForm1_RotatePolygon(var APoints: array of TPoint; AAngle: Double);
var
  aCentr: TPoint;
  i: Integer;
begin
  aCentr:= Point(10, 10);
  for i:= 0 to Length(APoints)-1 do begin
    aCentr.X:= aCentr.X + APoints[i].X;
    aCentr.Y:= aCentr.Y + APoints[i].Y;
  end;
  aCentr.X:= aCentr.X div Length(APoints);
  aCentr.Y:= aCentr.Y div Length(APoints);
  for i:= 0 to Length(APoints)-1 do
    APoints[i]:= TForm1_RotatePoint(APoints[i], aCentr, AAngle);
end;

procedure TFrm1_FormPaint(Sender: TObject; vimage: TImage);
var lPoints: array of TPoint;
begin
   infrm.canvas.Refresh;
    with vimage.canvas do
      //Refresh;
        Polygon(lpoints);
      //Brush.Style:= bsClear;
      //Rectangle(10, 10, infrm.Width, infrm.Height);
   Projektion(Alpha,Beta,Mx,My,Groesse, infrm.canvas);   { draw cube }
   //Inc(Beta);
   Inc(Alpha);
  //application.processMessages;
end;

 
//------------------------------event handler----------------------------------

procedure closeForm(Sender: TObject; var Action: TCloseAction);
begin
  ///afrm.Free;
   if mt <> NIL then begin
    mT.enabled:= false;
    mT.Free;
    mT:= NIL;
  end;
  image1.Free;
  //image2.Free;  
  action:= caFree;
  infrm:= NIL;
end;

procedure TFrm1_timerRedrawTimer(Sender: TObject);
begin
  CurStep:= CurStep + 0.1;
  if CurStep > 360 then CurStep:= 0;
   //infrm.Invalidate;  //redraw
   TFrm1_FormPaint(Self, image1);
end;

procedure loadForm;
begin
  Alpha:= 45;    { Drehwinkel mit Startwerten }
  Beta:= -105;
  Groesse:= 1.0;
  a:= 1.05;
     
  inFrm:= TForm.create(self)
  image1:= TImage.create(inFrm);
  with inFrm do begin
    position:= poScreenCenter;
    color:= clblack;
    setBounds(5,5, 650, 490);
    caption:= LOGO;
    onClose:= @closeForm;
    //onPaint:= @TFrm1_FormPaint;
    Show;
    Mx:= width div 2-70;        {cube position}
    My:= height div 2-140;
  end; 
  with image1 do begin
    parent:= infrm;
    setBounds(120,0, 572,513);
    //onPaint
    //onMousedown:= @Image1MouseDown;
    stretch:= true;
  end;
  mT:= TTimer.Create(self);
  mt.onTimer:= @TFrm1_timerRedrawTimer;
  mt.interval:= MILLISECONDS;
end; 

procedure loadImageLocal(vimage: TImage; picpath: shortstring);
//var jpeg, jpeg2: tjpegimage;
begin
  //@tester jpeg := TJpegImage.create();
  //jpeg2:= TJpegImage.create();
 with TLinearBitmap.Create do
  try
    LoadFromFile(picpath);
    vimage.Picture:= NIL;
    AssignTo(vimage.picture);
    //SaveToFile(ExePath+'mX3_open.png');
  finally
    Dispose;
    Free;
  end; 
end; 

procedure loadImageLocalCanvas(vimage: TCanvas; picpath: shortstring);
begin
 with TLinearBitmap.Create do
  try
    LoadFromFile(picpath);
    vimage.brush.bitmap:= NIL;
    AssignTo(vimage.brush.bitmap);
    //SaveToFile(ExePath+'mX3_open.png');
  finally
    Dispose;
    Free;
  end; 
end; 

procedure SaveComposition(vCanvas: TCanvas; FileName: string);
var
  Bmp: TBitmap;
  MyRect: TRect;
begin
  Bmp:= TBitmap.Create;
  try
    MyRect:= vCanvas.ClipRect;
    Bmp.Width:= MyRect.Right;
    Bmp.Height:= MyRect.Bottom;
    Bmp.Canvas.CopyRect(MyRect, vCanvas, MyRect);
    Bmp.SaveToFile(FileName);
  finally
    Bmp.Free;
  end;
end;

//------------------MAIN APP--------------------------------------------
begin
  ProcessMessagesON;
 // inFrm:= TForm.create(self)
    E:= Exception.create('Any internet connect problem'); 
   loadForm;
   loadHouseArray;
 
  (*if fileExists(mySong) = false then 
    getMP3File;
  closeMP3;
  playMP3(mySong);*) 
  if isInternet then begin 
     getHTTP_PNG(image1, myPIC1);
  end else begin
     loadImagelocal(image1, ExePath+myPIC1loc);
     //loadImagelocalCanvas(inFrm.Canvas, ExePath+myPIC1loc);
  end;
  drawText(inFrm, clPurple);   //hidden signature
  //TFrm1_FormPaint(Self, image1);
  //SaveComposition(inFrm.canvas, 'myatomcard.bmp')
  
   //writeln(vartype)
end.

Pictures from:

http://www.softwareschule.ch/images/atomimage1.png
http://www.softwareschule.ch/images/atomimage2.png
http://www.softwareschule.ch/images/maxboxlogo.bmp
http://www.softwareschule.ch/images/maxlindau2.png
http://www.softwareschule.ch/images/citymax.bmp
http://www.softwareschule.ch/images/oposlogo.gif

---------------------------------------------------------------------
code of version mX3.9 from http://www.softwareschule.ch/maxbox.htm
//Load examples pas_*.txt from directory examples and press F9!
//please read the readmefirst...
//or start with the tutorial in /help
//memo1 is script editor
//memo2 is output space
  new version and examples from
     http://www.softwareschule.ch/maxbox.htm }


just inside maXbox

         ____    ___   _      ____    _   _   _
        |  _ \  |  _| | |    |  _ \  | | | | | |
        | | . | | |_  | |    | |_| | | |_| | | |
        | | | | |  _| | |    |  __/  |  _  | | |          
        | |_. | | |_  | |__  | |     | | | | | |                      
        |____/  |___| |____| |_|     |_| |_| |_|  
        

Latest News of Free Pascal

                                         
                                         
clNone 	Represents no colors (black) 	$1FFFFFFF 	
clAqua 	Aqua 	$FFFF00 	
clBlack 	Black 	$000000 	
clBlue 	Blue 	$FF0000 	
clCream 	Cream 	$F0FBFF 	
clDkGray 	Dark Grey 	$808080 	
clFuchsia 	Fuchsia 	$FF00FF 	
clGray 	Gray 	$808080 	
clGreen 	Green 	$008000 	
clLime 	Lime Green 	$00FF00 	
clLtGray 	Light Gray 	$C0C0C0 	
clMaroon 	Maroon 	$000080 	
clMedGray 	Medium Gray 	$A4A0A0 	
clMoneyGreen 	Mint Green 	$C0DCC0 	
clNavy 	Navy Blue 	$800000 	
clOlive 	Olive Green 	$008080 	
clPurple 	Purple 	$800080 	
clRed 	Red 	$0000FF 	
clSilver 	Silver 	$C0C0C0 	
clSkyBlue 	Sky Blue 	$F0CAA6 	
clTeal 	Teal 	$808000 	
clWhite 	White 	$FFFFFF 	
clYellow 	Yellow 	$00FFFF 	                                         