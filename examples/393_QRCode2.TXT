PROGRAM QR_Code_TesterDirect;
// dont 
//#sign max: APSN21: 28.09.2013 11:45:35 
//#path:E:\maxbox\maxbox3\examples\
//#tech>6perf: 0:14:54.578 threads: 3 192.168.1.53 11:45:35 3.9.9.18
//TODO: Save the barcode to a file
//http://theroadtodelphi.wordpress.com/2010/12/06/generating-qr-codes-with-delphi/
                               

const
  //change to your OS
  REG_KEY_TEAMVIEWER8 = '\SOFTWARE\Wow6432Node\TeamViewer\Version8';
  REG_VAL_CLIENTID = 'ClientID';
  
var  
   XmlDocument: IXmlDocument;
   XmlNodeList: IXmlNode;
   barcode1, bcode2: TASBarcode;
   dbform: TForm;
   FImage: TImage;
   

function Endian64(x: Int64): Int64;
begin
  Result:= (x and $00000000000000FF) shl 56;
  Result:= Result + (x and $000000000000FF00) shl 40;
  Result:= Result + (x and $0000000000FF0000) shl 24;
  Result:= Result + (x and $00000000FF000000) shl 8;
  Result:= Result + (x and $000000FF00000000) shr 8;
  Result:= Result + (x and $0000FF0000000000) shr 24;
  Result:= Result + (x and $00FF000000000000) shr 40;
  Result:= Result + (x and $FF00000000000000) shr 56;
end;


{Now I must confess this is using the Google Charts API, but it does demonstrate a quick and easy way to get QR barcodes in a Delphi or Lazarus/FreePascal application.

The API requires 3 simple fields be posted to it:

cht=qr this tells Google to create a QR code;
chld=M the error correction level of the QR code (see here for more info);
chs=wxh the width and height of the image to return (eg chs=250x250);
chl=text the URL encoded text to be inserted into the barcode.}

type
  TQrImage_ErrCorrLevel=(L,M,Q,H);

Const
   UrlGoogleQrCode='http://chart.apis.google.com/chart?chs=%dx%d&cht=qr&chld=%s&chl=%s';
var
   QrImgCorrStr : array[0..3] of string; // =('L','M','Q','H');


procedure GetQrCodeInet(Width,Height: Word; Correct_Level: string;
                            const Data:string; apath: string);
var
  encodedURL: string;
  pngStream: TMemoryStream;
begin
  encodedURL:= Format(UrlGoogleQrCode,[Width,Height, Correct_Level, HTTPEncode(Data)]);
  pngStream:= TMemoryStream.create;
  WinInet_HttpGet(EncodedURL, pngStream);
  with TLinearBitmap.Create do try
    pngStream.Position:= 0;
    LoadFromStream2(pngStream,'PNG');
    FImage.Picture:= NIL;
    AssignTo(FImage.picture.bitmap);
    SaveToFile(apath);
    OpenDoc(apath);
  finally
    Dispose;
    Free;
    pngStream.Free;
  end;
end;


procedure GetQrCode(Width,Height: Word; Correct_Level: string; const Data:string);
var
  encodedURL: string;
  idhttp: TIdHttp;// THTTPSend;
  pngStream: TMemoryStream;
begin
  encodedURL:= Format(UrlGoogleQrCode,[Width,Height, Correct_Level, HTTPEncode(Data)]);
  //WinInet_HttpGet(EncodedURL,StreamImage);
  idHTTP:= TIdHTTP.Create(NIL)
  pngStream:= TMemoryStream.create;
  with TLinearBitmap.Create do try
    idHTTP.Get1(EncodedURL, pngStream)
    pngStream.Position:= 0;
    LoadFromStream2(pngStream,'PNG');
    FImage.Picture:= NIL;
    AssignTo(FImage.picture.bitmap);
    SaveToFile(ExePath+'mX3QRCode.png');
    //OpenDoc(ExePath+'mX3QRCode.png');
  finally
    Dispose;
    Free;
    idHTTP.Free
    pngStream.Free;
  end;
end;

procedure GetQrCode2(Width,Height: Word; Correct_Level: string;
           const Data:string; aimage: TImage; apath: string);
var
  encodedURL: string;
  idhttp: TIdHttp;// THTTPSend;
  pngStream: TMemoryStream;
begin
  encodedURL:= Format(UrlGoogleQrCode,[Width,Height, Correct_Level, HTTPEncode(Data)]);
  //WinInet_HttpGet(EncodedURL,StreamImage);
  idHTTP:= TIdHTTP.Create(NIL)
  pngStream:= TMemoryStream.create;
  with TLinearBitmap.Create do try
    idHTTP.Get1(EncodedURL, pngStream)
    pngStream.Position:= 0;
    LoadFromStream2(pngStream,'PNG');
    aImage.Picture:= NIL;
    AssignTo(aimage.picture.bitmap);
    SaveToFile(apath);
    //OpenDoc(apath);
  finally
    Dispose;
    Free;
    idHTTP.Free
    pngStream.Free;
  end;
end;

procedure GetQrCode3(Width,Height: Word; Correct_Level: string;
           const Data:string; apath: string);
var
  encodedURL: string;
  idhttp: TIdHttp;// THTTPSend;
  png: TLinearBitmap;//TPNGObject;
  pngStream: TMemoryStream;
begin
  encodedURL:= Format(UrlGoogleQrCode,[Width,Height, Correct_Level, HTTPEncode(Data)]);
  //WinInet_HttpGet(EncodedURL,StreamImage);
  idHTTP:= TIdHTTP.Create(NIL)
  pngStream:= TMemoryStream.create;
  with TLinearBitmap.Create do try
    idHTTP.Get1(EncodedURL, pngStream)
    pngStream.Position:= 0;
    LoadFromStream2(pngStream,'PNG');
    //aImage.Picture:= NIL;
    //AssignTo(aimage.picture.bitmap);
    SaveToFile(apath);
    OpenDoc(apath);
  finally
    Dispose;
    Free;
    idHTTP.Free
    pngStream.Free;
  end;
end;


procedure CreateMyFastForm;
 //diaform:= CreateMessageDialog('my fast form perform',mtconfirmation, []);
var 
    //dbform: TForm;
    ard: TRadioGroup;
    //mimg: TImage;
begin
   dbform:= CreateMessageDialog('My Fast Form Template - FFP',mtwarning,
                                        [mball, mbyes, mbhelp, mbok]);
   with dbform do begin
     font.size:= 12;
     caption:= 'FFP XML Demo';
     setBounds(50,50,800,600)
     FormStyle:= fsStayontop;
     //Color:= 12234;  //clWebGold;//12234;
     autoScroll:= true;
   with TLabel.Create(self) do begin
     parent:= dbform;
     SetBounds(400,60,500,600)
     font.size:= 18;
     //dblist.Add('All Converted to...XML')
     caption:= 'QRCode in a Stream Dream...';
   end;  
   with TRadioGroup.Create(self) do begin
     parent:= dbform;
     top:= 90;
     left:= 60;
     items.add('first entry of');
     items.add('second entry off');
     items.add('third entry off');
     ItemIndex:= 2; 
     //writeln(Items.Strings[ItemIndex]); 
   end;
  with TBitBtn.Create(self) do begin
    Parent:= dbform;
    setbounds(570, 490,190, 40);
    caption:= 'File to Barcode';
    font.size:= 12;
    glyph.LoadFromResourceName(getHINSTANCE,'TASBARCODE'); 
    //onclick:= @GetMediaData2;
  end;
  with TBitBtn.Create(self) do begin
    Parent:= dbform;
    setbounds(570, 320,190, 150);
    caption:= 'File to Barcode';
    font.size:= 12;
    glyph.LoadFromResourceName(getHINSTANCE,'JVGAMMAPANELCOLORS'); 
    //onclick:= @GetMediaData2;
  end;
   Show;
   Canvas.Draw(400,120,getBitMap(Exepath+'\examples\citymax.bmp'));

  FImage:= TImage.create(self);
  with FImage do begin
   parent:= dbform;
   setbounds(50,210,150,150)
  end; 

  with Barcode1 do begin
    Top := 400;
    Left := 50;
    Height:= 130;
    //Barcode1.Width:= 230;
    //barcode1.assign
    //Barcode1.Angle := 70;
    Typ := bcCode_2_5_interleaved;
    Showtext:= bcoBoth;
    text:= '0123456789';
    DrawBarcode(Canvas);
    Typ := bcCodeEAN128C; //bcCode_2_5_interleaved;
    Left:= 180;
    text:= '0123456789';
    DrawBarcode(Canvas);
    Typ := bcCode128C; //bcCodePostNet; //,bcCodeEAN128C; //bcCode_2_5_interleaved;
    Left:= 320;
    text:= '0123456789';
    DrawBarcode(Canvas);
   end;
    //Barcode1.DrawText(dbform.Canvas);  

  end; //dbform
   //SelectDirectory
end;


//type bool = boolean;
//TODO: Returns the Date and Time of the last modification of the given File


//DONE: Returns the Date and Time of the last $71A90000 File
                                 
//TODO:#1 Returns the Date and Time of the last modification of the given File

//11746: else if MaxMask(sl[I], '*/? TODO (#?#)*:*') then
{11746: else if PRIORITY SETMask(sl[I]X, */? TODO (#3#): then }
//11746: * TODO (#3#): else if PRIORITY SETMask(sl[I]X, then 


begin
  writeln(datetimetostr(FileTimeGMT(exepath+'maxbox3.exe')));
  //writeln(datetimetostr(FileTimeGMT2(exepath+'maxbox3.exe')));
  //TODO: check GREP with startfinder3 on behalf
  //Grep
  //Procedure RecurseDirectory2(Dir : String; IncludeSubs : boolean);
  //RecurseDirectory2(Exepath,false);
  //CreateUpdateTAR;
  //CopyDirTree(exepath+'\source\devtools',exepath+'crypt',[]);
   //TODO>: some of the copydirtree doesnt' work!
   
    // maxform1.TodoList1click(self);
    barcode1:= TASBarcode.create(self);
    bcode2:= TASBarcode.create(self);
    CreateMyFastForm;
    barcode1.Free;
    bcode2.Free;
  //procedure GetQrCode(Width,Height:Word;Correction_Level: TQrImage_ErrCorrLevel;const Data:string);
    //TQrImage_ErrCorrLevel=(L,M,Q,H);

   // GetQrCode(150,150,'Q', 'this is maXland on the maXbox');
    //GetQrCode(150,150,'L', 'Sample Data');
    
     GetQrCode2(150,150,'Q','this is maXland on maXbox',FImage, ExePath+'mX3QRCode2.png');

    // GetQrCode3(150,150,'Q','this is maXland on maXbox', ExePath+'mX3QRCode2.png');

    // GetQrCodeInet(150,150,'Q','this is maXland on maXbox', ExePath+'mX3QRCode2.png');

   
    maxCalcF('SQRT(4296)');

    
end.  

http://theroadtodelphi.wordpress.com/2010/12/06/generating-qr-codes-with-delphi/

Using the Google Chart Tools / Image Charts (aka Chart API) you can easily generate QR codes, this kind of images are a special type of two-dimensional barcodes. They are also known as hardlinks or physical world hyperlinks.

The QR Codes store up to 4,296 alphanumeric characters of arbitrary text. QR codes can be read by an optical device with the appropriate software. Such devices range from dedicated QR code readers to mobile phones.


Using Delphi there are several ways you can generate QR codes - to encode any text (URL, phone number, simple message). QR Codes store up to 4,296 alphanumeric characters of arbitrary text.

The 2D Barcode VCL components is a set of components designed for generating and printing barcode symbols in your Delphi or C++ Builder applications. Use the components set like any other VCL components.

J4L Components includes the QR-code implementation featuring: auto, byte, alpha, numeric and kanji encoding.

The Google Chart Tools (Chart API) also let you generate QR-code images using an HTTP POST or 

All do you need to generate a QrCode is make a get request to this URI

http://chart.apis.google.com/chart?chs=200x200&cht=qr&chld=M&chl=Go+Delphi+Go

uses
 PngImage,
 HTTPApp,
 WinInet;
 
type
TQrImage_ErrCorrLevel=(L,M,Q,H);
 
const
UrlGoogleQrCode='http://chart.apis.google.com/chart?chs=%dx%d&cht=qr&chld=%s&chl=%s';
QrImgCorrStr   : array [TQrImage_ErrCorrLevel] of string=('L','M','Q','H');
 
procedure WinInet_HttpGet(const Url: string;Stream:TStream);
const
BuffSize = 1024*1024;
var
  hInter   : HINTERNET;
  UrlHandle: HINTERNET;
  BytesRead: DWORD;
  Buffer   : Pointer;
begin
  hInter := InternetOpen('', INTERNET_OPEN_TYPE_PRECONFIG, nil, nil, 0);
  if Assigned(hInter) then
  begin
    Stream.Seek(0,0);
    GetMem(Buffer,BuffSize);
    try
        UrlHandle := InternetOpenUrl(hInter, PChar(Url), nil, 0, INTERNET_FLAG_RELOAD, 0);
        if Assigned(UrlHandle) then
        begin
          repeat
            InternetReadFile(UrlHandle, Buffer, BuffSize, BytesRead);
            if BytesRead>0 then
             Stream.WriteBuffer(Buffer^,BytesRead);
          until BytesRead = 0;
          InternetCloseHandle(UrlHandle);
        end;
    finally
      FreeMem(Buffer);
    end;
    InternetCloseHandle(hInter);
  end
end;
 
//this function return a Stream (PngImage inside) with a Qr code.
procedure GetQrCode(Width,Height:Word;Correction_Level:TQrImage_ErrCorrLevel;const Data:string;StreamImage : TMemoryStream);
Var
 EncodedURL  : string;
begin
  EncodedURL:=Format(UrlGoogleQrCode,[Width,Height,QrImgCorrStr[Correction_Level],HTTPEncode(Data)]);
  WinInet_HttpGet(EncodedURL,StreamImage);
end;


http://www.delphi-central.com/callback.aspx

 public
    { Public-Deklarationen }
    constructor Create(Owner:TComponent); override;
    destructor Destroy; override;
    procedure Assign(Source: TPersistent);override;

    procedure DrawBarcode(Canvas:TCanvas);
    procedure DrawText(Canvas:TCanvas);
    property CanvasHeight :Integer read GetCanvasHeight;
    property CanvasWidth :Integer read GetCanvasWidth;
  published
    { Published-Deklarationen }
   { Height of Barcode (Pixel)}
    property Height : integer read FHeight write SetHeight;
    property Text   : string read FText write SetText;
    property Top    : Integer read FTop write SetTop;
    property Left   : Integer read FLeft write SetLeft;
   { Width of the smallest line in a Barcode }
    property Modul  : integer read FModul  write SetModul;
    property Ratio  : Double read FRatio write SetRatio;
    property Typ    : TBarcodeType read FTyp write SetTyp default bcCode_2_5_interleaved;
   { build CheckSum ? }
    property Checksum:boolean read FCheckSum write SetCheckSum default FALSE;
    property CheckSumMethod:TCheckSumMethod read FCheckSumMethod write FCheckSumMethod default csmModulo10;

   { 0 - 360 degree }
    property Angle  :double read FAngle write SetAngle;

    property ShowText:TBarcodeOption read FShowText write SetShowText default bcoNone;
    property ShowTextFont: TFont read FShowTextFont write SetShowTextFont;
    property ShowTextPosition: TShowTextPosition read FShowTextPosition write SetShowTextPosition default stpTopLeft;
    property Width : integer read GetWidth write SetWidth stored False;
    property Color:TColor read FColor write FColor default clWhite;
    property ColorBar:TColor read FColorBar write FColorBar default clBlack;
      property OnChange:TNotifyEvent read FOnChange write FOnChange;
  end;

function CheckSumModulo10(const data:string):string;

function ConvertMmToPixelsX(const Value:Double):Integer;
function ConvertMmToPixelsY(const Value:Double):Integer;
function ConvertInchToPixelsX(const Value:Double):Integer;
function ConvertInchToPixelsY(const Value:Double):Integer;





TTarArchive Usage
-----------------
- Choose a constructor
- Make an instance of TTarArchive                  TA := TTarArchive.Create (Filename);
- Scan through the archive                         TA.Reset;
                                                   WHILE TA.FindNext (DirRec) DO BEGIN
- Evaluate the DirRec for each file                  ListBox.Items.Add (DirRec.Name);
- Read out the current file                          TA.ReadFile (DestFilename);
  (You can ommit this if you want to
  read in the directory only)                        END;
- You're done                                      TA.Free;


TTarWriter Usage
----------------
- Choose a constructor
- Make an instance of TTarWriter                   TW := TTarWriter.Create ('my.tar');
- Add a file to the tar archive                    TW.AddFile ('foobar.txt');
- Add a string as a file                           TW.AddString (SL.Text, 'joe.txt', Now);
- Destroy TarWriter instance                       TW.Free;
- Now your tar file is ready.


// --- The TAR Archive CLASS
  TTarArchive = CLASS
                PROTECTED
                  FOwnsStream : BOOLEAN;   // True if FStream is owned by the TTarArchive instance
                  FBytesToGo  : INT64;     // Bytes until the next Header Record
                PUBLIC
                  FStream     : TStream;   // Internal Stream
                  CONSTRUCTOR Create (Stream   : TStream);                                OVERLOAD;
                  CONSTRUCTOR Create (Filename : STRING;
                                      FileMode : WORD = fmOpenRead OR fmShareDenyWrite);  OVERLOAD;
                  DESTRUCTOR Destroy;                                       OVERRIDE;
                  PROCEDURE Reset;                                         // Reset File Pointer
                  function  FindNext (VAR DirRec : TTarDirRec) : BOOLEAN;  // Reads next Directory Info Record. FALSE if EOF reached
                  PROCEDURE ReadFile (Buffer   : POINTER); OVERLOAD;       // Reads file data for last Directory Record
                  PROCEDURE ReadFile (Stream   : TStream); OVERLOAD;       // -;-
                  PROCEDURE ReadFile (Filename : STRING);  OVERLOAD;       // -;-
                  function  ReadFile : STRING;           OVERLOAD;         // -;-

                  PROCEDURE GetFilePos (VAR Current, Size : INT64);        // Current File Position
                  PROCEDURE SetFilePos (NewPos : INT64);                   // Set new Current File Position
                END;

  // --- The TAR Archive Writer CLASS
  TTarWriter = CLASS
               PROTECTED
                 FStream      : TStream;
                 FOwnsStream  : BOOLEAN;
                 FFinalized   : BOOLEAN;
                                                   // --- Used at the next "Add" method call: ---
                 FPermissions : TTarPermissions;   // Access permissions
                 FUID         : INTEGER;           // User ID
                 FGID         : INTEGER;           // Group ID
                 FUserName    : STRING;            // User name
                 FGroupName   : STRING;            // Group name
                 FMode        : TTarModes;         // Mode
                 FMagic       : STRING;            // Contents of the "Magic" field
                 CONSTRUCTOR CreateEmpty;
               PUBLIC
                 CONSTRUCTOR Create (TargetStream   : TStream);                            OVERLOAD;
                 CONSTRUCTOR Create (TargetFilename : STRING; Mode : INTEGER = fmCreate);  OVERLOAD;
                 DESTRUCTOR Destroy; OVERRIDE;                   // Writes End-Of-File Tag
                 PROCEDURE AddFile   (Filename : STRING;  TarFilename : STRING = '');
                 PROCEDURE AddStream (Stream   : TStream; TarFilename : STRING; FileDateGmt : TDateTime);
                 PROCEDURE AddString (Contents : STRING;  TarFilename : STRING; FileDateGmt : TDateTime);
                 PROCEDURE AddDir          (Dirname            : STRING; DateGmt : TDateTime; MaxDirSize : INT64 = 0);
                 PROCEDURE AddSymbolicLink (Filename, Linkname : STRING; DateGmt : TDateTime);
                 PROCEDURE AddLink         (Filename, Linkname : STRING; DateGmt : TDateTime);
                 PROCEDURE AddVolumeHeader (VolumeId           : STRING; DateGmt : TDateTime);
                 PROCEDURE Finalize;
                 PROPERTY Permissions : TTarPermissions READ FPermissions WRITE FPermissions;   // Access permissions
                 PROPERTY UID         : INTEGER         READ FUID         WRITE FUID;           // User ID
                 PROPERTY GID         : INTEGER         READ FGID         WRITE FGID;           // Group ID
                 PROPERTY UserName    : STRING          READ FUserName    WRITE FUserName;      // User name
                 PROPERTY GroupName   : STRING          READ FGroupName   WRITE FGroupName;     // Group name
                 PROPERTY Mode        : TTarModes       READ FMode        WRITE FMode;          // Mode
                 PROPERTY Magic       : STRING          READ FMagic       WRITE FMagic;         // Contents of the "Magic" field
               END;




The last slash might be optional. Right?

How about something like this:

$url =~ m|([^/]+)/?$|;
my $end_of_url = $1;

The $ on the end anchors the regular expression to the end of the string. The [^/] means anything that's not a slash and the + after means I want one or more things that are not slashes. Notice that this is in a capture group which are marked with parentheses.

I end the regular expression with /? which means that there may or may not be a slash on the very end of the string. I've put my regular expression between m| and |, so I can use forward slashes without having to constantly escape them.

The last part of the URL is now in $1 and I can set my own scalar variable to save this Result.
share|improve this answer

  
  
  
 

----app_template_loaded_code----