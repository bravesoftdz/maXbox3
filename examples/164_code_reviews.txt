program Code_Reviews_Snippets;
//*************************************


{Metrics / Code Revies deal with
Bad Structure
• General Code Size (in module)
• Cohesion (in classes and inheritance)
• Complexity
• Coupling (between classes or units)
• Cyclic Dependency, Declare+Definition, ACD-Metric
• Interfaces or Packages (design & runtime)
• Static, Public, Private (inheritance or delegate)}

{What is ASN.1?
ASN.1 is a language with the sole purpose of defining data formats. It
is useful when you stream data from one application to another or just
save data to a file.
StreamSec ASN.1 is based on the ASN.1 1988 syntax with extensions for
type identifiers and open type declarations. The language guide is
distributed with the trial and also available as a separate download. }

//uses IdASN1Util,
type
    TVinfo = record
      a,b: integer;
    end;

var 
  Idcmp: TIdIcmpClient;
  RoundTripTime: Double;
  Host, Enterprise: string;
  Port: TIdPort;
  MIBOID, MIBValue: TStringList;
    Version, PDUType: integer;
    TimeTicks, ID: integer;
    ErrorStatus, ErrorIndex: integer;
    E: Exception;
    
    
 //cheack Headers
(*----------------------------------------------------------------------------*
 | procedure TSNMPInfo.DecodeBuf                                              |
 |                                                                            |
 | Decode an ASN buffer into version, community, MIB OID/Value pairs, etc.    |
 |                                                                            |
 | Parameters:                                                                |
 |     Buffer:string           The ASN buffer to decode                       |
 *----------------------------------------------------------------------------*)

//DD – use small procedures
//Dependency Dispersion (Code too much Distributed):
Procedure CopyRecord(const SourceTable, DestTable: TTable);
var i: Word;
begin
  DestTable.Append;
  For i:= 0 to SourceTable.FieldCount - 1 do
    DestTable.Fields[i].Assign(SourceTable.Fields[i]);
  DestTable.Post;
end;

//• Check Complexity
function IsInteger(TestThis: String): Boolean;
begin
  try
    StrToInt(TestThis);
  except
    E.Create('EConvertError')
    Showmessage(E.Message+ 'not an Integer');
  end
  result:= True;
end;


{function IsDate(source: TEdit): Boolean;
begin
try
StrToDate(TEdit(source).Text);
except
on EConvertError do
result:= False;
else
result:= True;
end;
end;}


//Configuration /Deployment Check
Procedure ConfigDB;
var connection: TSQLConnection;
      dbPath: string;
begin
  Connection:= TSQLConnection.Create(NIL);
  with Connection do begin
    ConnectionName:= 'VCLScanner';
    DriverName:= 'INTERBASE';
    LibraryName:= 'dbexpint.dll';
    VendorLib:= 'GDS32.DLL';
    GetDriverFunc:= 'getSQLDriverINTERBASE';
    Params.Add('user_name=SYSDBA');
    Params.Add('Password=masterkey');
    Params.Add(dbPath);
  end;
end;

//from unit IBCustomDataSet;
//class
procedure
   TIBStringField_CheckTypeSize(Value: Integer);
begin
{ don't check string size. all sizes valid }
end;

//Testable Check, the mainForm para isn't used!
function letAllowInstances(const mainForm, cmdLine:
                                      string): boolean;
var keyWindow: HWND;
    chars: TSysCharSet;
    Handle: THandle;
begin
  result:= false;
  //to test 'TForm1'
  MessageDlg('are you sure to instance?', mtConfirmation, [mbOk], 0);
  keyWindow:= FindWindow('TForm1','');
  if (keyWindow <> 0) and not
    FindCmdLineSwitch(cmdLine, chars, true) then
    //set existing instance
    //ShowWindow(keyWindow, SW_SHOWNORMAL)
  else
    result:= true;
end;


//Testing Code Logger
//• Exception handling
procedure TestTesting;
begin
{$IFDEF DEBUG}
  Application.OnException:= AppOnException;
{$ENDIF}
//• Assert function
//accObj:= TAccount.createAccount(FCustNo,
//std_account);
//assert(aTrans.checkOBJ(accObj), 'bad OBJ cond.');
//• Logger
//LogEvent('OnDataChange', Sender as TComponent);
//LogEvent('BeforeOpen', DataSet);
end;


//• Check against Buffer overflow or TryIntToStr
//The Delphi compiler hides the fact that the string variable is a heap pointer
//to the structure but setting the memory in advance is advisable:
{All allocated memory needs to be freed when no longer needed.
Make sure memory is released in all code paths, especially in
error code paths.
• Are all objects (Database connections, Sockets, Files, etc.) freed
even when an error occurs?  procexp.exe}

procedure bufferCheck;
var Buffer, FData: PChar; //not a buffer before you use getMem
    Source, Dest: PChar;
    size, bufferwriteSize, count: integer;
    F: string;
    path: string;
begin
  setLength(path, 1025);
  Size:= GetFileSize(F);
  //GetMem(Buffer, Size); //allocates n-Bytes on the heap
  //Dest:= @FData[FBufferEnd];
  if BufferWriteSize < Count then
    //raise EFIFOStream.Create('Buffer over-run.');
end;

//Portability
//Does the code re-write functionality that could
//be achieved by using an existing API?
function MakeTempFilename: string;
begin
  {$IFDEF LINUX}
    Result:= tempnam(nil, 'Indy'); {do not localize}
  {$ELSE}
    SetLength(Result, MAX_PATH + 1);
    //GetTempFileName(PChar(ATempPath), 'Indy', 0, PChar(result));
    Result:= PChar(Result);
  {$ENDIF}
end;


//Avoid pointers as you can (unsafe code !?)
//• Ex. of win32API to change:
//pVinfo = ^TVinfo;
  //function getvolInfo(const aDrive: pchar; info: pVinfo): boolean;
//refactoring from pointer to reference (const pointer with automatic deref)
  function getvolInfo(const aDrive: pchar; var info: TVinfo): boolean;
  begin
  end;
//“Each pointer or reference should be checked to see if it is null. An error or an
//exception should occur if a parameter is invalid.”

procedure TSNMPInfoDecodeBuf(Buffer: string);
var
  Poss: integer;
  endpos,vt: integer;
  sm,sv, community: string;
begin
  Poss:= 2;
  Endpos:= ASNDecLen(Poss,buffer);
  version:= StrToInt(ASNItem(Poss,buffer,vt));
  community:= ASNItem(Poss,buffer,vt);
  PDUType:= StrToInt(ASNItem(Poss,buffer,vt));
  ID:= StrToInt(ASNItem(Poss,buffer,vt));
  ErrorStatus:= StrToInt(ASNItem(Poss,buffer,vt));
  ErrorIndex:= StrToInt(ASNItem(Poss,buffer,vt));
  ASNItem(Poss,buffer,vt);
  while Poss < Endpos do begin   // Decode MIB/Value pairs
      ASNItem(Poss,buffer,vt);
      Sm:= ASNItem(Poss,buffer,vt);
      Sv:= ASNItem(Poss,buffer,vt);
      //MIBadd(sm,sv, vt);
  end;
end;

//Use Objects to encapsulate for functions
function FileSizeByName2(const AFilename: string): longint;
begin
  with TFileStream.Create(AFilename, fmOpenRead or fmShareDenyWrite) do
  try
    Result:= Size;
  finally
    Free;
  end;
end;

function IPToID(Host: string): string;
var
  s, t: string;
  i, x: integer;
begin
  Result:= '';    {Do not Localize}
  for x:= 1 to 3 do begin
      t:= '';    {Do not Localize}
      s:= Copy(Host, Pos('.', host),Length(Host));    {Do not Localize}
      t:= Copy(Host, 1, (Length(Host) - Length(s)));
      Delete(Host, 1, (Length(Host) - Length(s) + 1));
      //writeln('n '+t)
      i:= StrToint(t);
      Result:= Result + Chr(i);
    end;
  i:= StrToint(Host);
  Result:= Result + Chr(i);
end;

function IsFormOpen(const FormName: string): Boolean; 
var 
  i: Integer; 
begin 
  Result:= False; 
  for i:= Screen.FormCount - 1 DownTo 0 do 
    if (Screen.Forms[i].Name = FormName) then begin 
      Result:= True; 
      Break; 
    end; 
end; 


var
  mystrings: TStrings;

begin
   mystrings:= TStringlist.Create;
   getVisibleWindows(mystrings)
   showmessage(mystrings.text)
   mystrings.Free;
   if IsFormOpen('TMaxForm1') then writeln('TMainForm TMaxForm1 is open');
   //if IsFormOpen('maxform1') then writeln('true')
   Writeln(IPtoID('192.128.065.056'))
  //PutPing;
  {if MPing('www.google.com', 4, RoundTripTime) then
    MessageDlg(Format('Ping moyen : %s',[FormatFloat('0.00',RoundTripTime)]),
     mtInformation, [mbOK], 0)
  else
    MessageDlg('Erreur. L''hôte est injoignable.', mtInformation, [mbOK], 0);}
end.

---------------------------------------------------------------

QS Review Checklist
**********************************************************
1. Standards - are the Pascal software standards for
                                name conventions being followed?
2. Bugs - Are the changes generally correct?
3. Are the Requirements Well Understood (Multilang)?
4. Are all program headers completed?
5. Are code changes commented appropriately?
6. Does documentation use Correct Grammar?
7. Are release notes Clear? Complete?
8. Installation Issues, Licenses, Certs. Are there any?
9. Version Control, Are output products clear?
10.Test Instructions - Are they any? Complete?


// Dokus, Testklassen zu Algorithmen
• Vorabversionen und Updates
• Gibt es eine Installationanweisung
, Support, Hotline der Firma bekannt
• Volle Verfügbarkeit über den Sourcecode
• Compilationsfähigkeit erstellt ($D, $L, tdb32info)
• Benchmarks und Memoryleaks geprüft
• Tools und Review Kriterien vorhanden
• Sprache und Form bei Dokumenten festlegen
• Referenzarchitektur und Patterns bekannt
QS Review Checklist
1. Standards - are the Pascal software standards for
name conventions being followed?
2. Bugs - Are the changes generally correct?
3. Are the Requirements Well Understood (Multilang)?
4. Are all program headers completed?
5. Are code changes commented appropriately?
6. Does documentation use Correct Grammar?
7. Are release notes Clear? Complete?
8. Installation Issues, Licenses, Certs. Are there any?
9. Version Control, Are output products clear?
10.Test Instructions - Are they any? Complete?

Nichtfunktionale anforderungen
• Modularisierung
• Erweiterbarkeit, Flexibilität
• Wartbarkeit, Wiederverwendung
• Testbarkeit, Software-Qualität, Sicherheit (Datenschutz) und Stabilität       
                                    
Fragen
• Gibt es eine Installationsanweisung oder CD? 
• Zufrieden mit Support und Hotline?
• Braucht die Software weitere Tools (Schnittstellen zu Office, CAD oder Reporting)?
• Gibt es ein Benutzerhandbuch der Funktionen oder ein Help?
• Stehen Daten unter Datenschutz?
• Wie wird geschult (Ausbildung)?
• Sind Bugs oder Fehler bekannt?
• Welche Version hat die Software?
• Gibt es neue Anforderungen?



What are Metrics?
Metrics are for
• Evaluate Object Complexity
• Quantify your code
• Highlight Redesign Needs
• Change Impact Analysis


Metrics Code Revies deal with
Bad Structure
• General Code Size (in module)
• Cohesion (in classes and inheritance)
• Complexity
• Coupling (between classes or units)
• Cyclic Dependency, Declare+Definition, ACD-Metric
• Interfaces or Packages (design & runtime)
• Static, Public, Private (inheritance or delegate)

Metric based Refactoring
:ExtractMethod(EM)-MoveMethod(MM)-DataObject(DO)-ExtractClass(EC)
EM MM DO EC
• Normalized Cohesion          W B B B
• Non-normalized Cohesion      W B B B
• General Coupling             E B N S
• Export Coupling              E B E E
• Aggregated import coupling   B W W W
•----------------------------- Best, Worst, Expected, Suboptimal

Top Ten Metrics
-------------------------------------------------------
1. VOD Violation of Law of Demeter
2. Halstead NOpmd (Operands/Operators)
3. DAC (Data Abstraction Coupling)(Too many responsibilities/ references in the field)
4. CC (Complexity Report), McCabe cyclomatic complexity, Decision Points)
5. CBO (Coupling between Objects) Modularity
6. PUR (Package Usage Ratio) access information in a package from outside
7. DD Dependency Dispersion (aka SS, Shotgun Surgery 
                 (Little changes distributed over too many objects (patterns missed))
8. CR Comment Relation
9. MDC (Module Design Complexity (Class with too many delegating methods)
10. NORM (remote methods called (Missing polymorphism))


Refactoring Process
-----------------------------------------------------
The act of serialize the process:
P Build unit test
P Refactor and test the code (iterative!)
P Check with Pascal Analyzer or another tool
P Building the code
P Running all unit tests
P Generating the documentation
P Deploying to a target machine
P Performing a “smoke test” (just compile)
************************************************************************/
/* INDY EXPORTS - GREGOR IBIC, INTELICOM d.o.o. END                     */
/************************************************************************/

Add the following content to the end of ssleay.num file in util folder.
Check if the function numbers are sequential.

SSL_set_app_data_indy                   278    EXIST::FUNCTION:
SSL_get_app_data_indy                   279    EXIST::FUNCTION:
SSL_CTX_set_info_callback_indy          280    EXIST::FUNCTION:
X509_STORE_CTX_get_app_data_indy        281    EXIST::FUNCTION:
X509_get_notBefore_indy                 282    EXIST::FUNCTION:
X509_get_notAfter_indy                  283    EXIST::FUNCTION:
UCTTimeDecode_indy                      284    EXIST::FUNCTION:
SSL_SESSION_get_id_indy                 285    EXIST::FUNCTION:
SSL_SESSION_get_id_ctx_indy             286    EXIST::FUNCTION:
SSL_CTX_get_version_indy                287    EXIST::FUNCTION:
SSL_CTX_set_options_indy                288    EXIST::FUNCTION:

Finally, start compiling OpenSSL by double clicking the mingw32.bat. After compiling the OpenSSL libraries can be found in the main directory, the other programs are in the newly created subdirectory out.

the OpenSSL library containts two dll: Libeay32.dll and libssl32.dll
The last, modify Indy Source code when needed. 

---------------------------------------------------------

//**************************************************program HTTP_PNG_Streamer;
//**************************************************

Here's the constant that is used to build the HTML…
  WEB_PAGE = '<html>' + #13#10 +
            '<head>' + #13#10 +
            '<title>The Amazing HTTP Server</title>' + #13#10 +
            '</head>' + #13#10 +
            '<body>' + #13#10 +
            '<p align="center"><font face="Arial" size="5"><i><b>' +
            'The color of your magnificent Indy based HTTP ' +
            'Server is...</b></i></font></p>' + #13#10 +
            '<p align="center"><i><b><font face="Arial" ' +
            'color="%s" size="6">%s</font></b></i></p>' + #13#10 +
            '<p align="center"><font face="Arial" size="5"><i><b>' +
            'Please pick a color for the HTTP Server:</b></i>' +
            '</font></p>' + #13#10 + '<p align="center"><i><b>' +
            '<a href="http://127.0.0.1/blue.htm"><font ' +
            'face="Arial" size="5" color="#0000FF">BLUE</font>' +
            '</a></b></i></p>' + #13#10 + '<p align="center">' +
            '<i><b><a href="http://127.0.0.1/red.htm">' +
            '<font face="Arial" size="5" color="#FF0000">RED' +
            '</font></a></b></i></p>' + #13#10 + '<p align="center">' +
            '<i><b><a href="http://127.0.0.1/yellow.htm">' +
            '<font face="Arial" size="5" color="#FFFF00">YELLOW' +
            '</font></a></b></i></p>' + #13#10 + '</body>' + #13#10 +
            '</html>' + #13#10;

