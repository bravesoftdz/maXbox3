PROGRAM Extract_Functions_of_EXE;

//depends on the debug, map and symbol options of the compiler
//don't stripe the symbols if you wanna see it!
//shows functions and procedures out of the EXE 

CONST 
//<Constant declarations> (loc's=42)
  EXENAME = 'maxbox3.exe';
  FUNCTIONLIST = 'maxbox_extract_funclist390_.txt';
  ONE_SUGAR_MASS = 3;

{TYPE 
<Type declarations> 
<Variable declarations>}
//<PROCEDURE> 

var 

  listbox1, listbox2: TListBox;

Function EinsteinEnergyCube: extended;
// one sugar cube of 3 gram(m): E=mc^2 example
begin
 //result:= 0.003 * Power(300000000, 2);
 Result:= ONE_SUGAR_MASS/1000 * Power(MetersPerLightSecond, 2);
end; 

function FileToString(afilename: string): string;
begin
 with TFileStream.Create(afilename, fmOpenRead or fmShareCompat) do begin
   try 
     SetLength(result, Size);
     Read(result, Size);
   finally 
     Free;
   end  
 end
end;

procedure StringToFile(acontent, afilename:string);
begin
 with TFileStream.Create(afilename, fmOpenWrite or fmCreate) do begin
   try
     Write(acontent, length(acontent));
   finally
     Free;
   end
 end  
end;

function SearchAndGet(aStrList: TStrings; aSearchStr: string): string;
var i, TT1, TT2: integer;
    s1, tmps, tmps2: string;
begin
  for i:= 0 to aStrList.Count -1 do begin
    s1:= aStrList[i];
      TT1:= pos(uppercase(aSearchStr), uppercase(s1));
      TT2:= pos(';',s1);
      if (TT1 > 0) and (TT2 > 0) then begin
        tmps:= Copy(s1, TT1, TT2-TT1+1);
        tmps2:= tmps2 + tmps +#13#10;
      end;
  end; 
  result:= tmps2;
end;


function SearchAndGet3(s1: string; aSearchStr: string): TStringlist;
var i, T1, T2, T3, T4: integer;
    tmps: string;
begin
  result:= TStringlist.create;
  result.Sorted:= true;   //before dup!
  result.duplicates:= dupIgnore;
  Delete(s1,0,30)   //skip header
  for i:= 0 to length(s1) do begin
    T1:= Pos(uppercase(aSearchStr), uppercase(s1));
    if (T1 > 0) then begin
      Delete(s1,1,T1-1)    //delete before
      T2:= Pos('(',s1);   // with params
      T3:= Pos(':',s1);   // no params
      if (T2 > 0) or (T3 > 0) then begin
        if T3 > 0 then
          t4:= Pos(')',s1);
        if t4 > 0 then 
          tmps:= Copy(s1, 0, t3+ t4+2);
        result.add(tmps) 
        if (T3 > 0) and (T4 > 0) then   
          //Delete(s1,1,T3+ t4+2);
          Delete(s1,1,T3+ 2);  //delete found after
      end; 
    end else Break;
  end;
  result.sort; 
end;


function SelectLine(Memo: TMemo; Zeile,Pos: integer): integer;
Var j: integer;
begin
 Result:= 0;
 If Zeile > 0 then
    For j:= 0 To Zeile-1 do Result:= Result + Length(Memo.Lines[j])+ 2;
 Result:= Result +  Pos;
end;


procedure MergeStrings(Dest, Source: TStrings);
var
  I, DI: Integer;
  begin
  for I := 0 to Source.Count - 1 do begin
    if Pos ('=', Source[I]) > 1 then begin
      DI := Dest.IndexOfName(Source.Names[I]);
      if DI > -1 then Dest[DI] := Source[I];
    end;
  end;
end;
 
procedure TForm1_Button1Click(Sender: TObject);
begin
  MergeStrings(ListBox1.Items, ListBox2.Items);
end;
 
procedure TForm1_FormCreate(Sender: TObject);
begin
  ListBox1.Items.Add('Plants = 10');
  ListBox1.Items.Add('Animals = 20');
  ListBox1.Items.Add('Minerals = 15');
  ListBox2.Items.Add('Animals = 4');
  ListBox2.Items.Add('Plants = 3');
  ListBox2.Items.Add('Minerals = 778');
end;

var 
  myfile, listback: TStringList;
  strback: string; 
  //mi: IStreamLoader;
  //mm: TMemoryStream;
  insize,i: integer;

BEGIN  //Main
//<Executable statements>
//************* maXbox compiler series**************************************
  //maxForm1.ShellStyle1Click(self);
 { Memo2.SetFocus;
  Memo2.Selstart:= SelectLine(Memo2,5,2);
  Memo2.Sellength:= 50;}
  
  // myfile.loadFromFile(ExePath+'upsi_allfunctionslist.txt')
  // mi:= GetDefaultStreamLoader;
  // mm:= TMemoryStream.Create;
  // mi.Load(defWSDL, mm);
  // mi.Load(ExePath+'maxbox3.exe', mm);
  // mm.Seek(0,0);
  // SetLength(strback, mm.Size); 
  // insize:= mm.read(strback, length(strback));
  // writeln(inttostr(insize))
   //myfile:= TStringList.create;
   //myfile.loadFromFile(Exepath+'maxcopy45.txt');
   //Writeln(SearchAndGet(myfile, 'function'));
   //strback:= SearchAndGet(myfile, 'function');
   memo2.clear;
   strback:= FileToString(Exepath+EXENAME);
   //strback:= FileToString(Exepath+'maxbox3clx');
   writeln('Extraxt of EXE Functions of '+EXENAME)
   writeln('Size of EXE: '+intToStr(Length(strback)))
   Screen.Cursor:= crHourGlass;
   writeln('*************Now the Funclist************* ')
   listback:= SearchAndGet3(strback, 'function');
   writeln('Funclist Size is: '+inttostr(listback.count))
   //listback.Assign(SearchAndGet3(strback, 'procedure'));
   for i:= 0 to listback.count-1 do begin
     writeln(listback[i])
   end;
   listback.clear;
   writeln('*************Now the Proclist************* ')
   listback:= SearchAndGet3(strback, 'procedure');
   writeln('Proclist Size is: '+inttostr(listback.count))
   for i:= 0 to listback.count-1 do begin
     writeln(listback[i])
   end;
   listback.clear;
   writeln('*************Now Constructors************* ')
   listback:= SearchAndGet3(strback, 'constructor');
   writeln('Constructor Size is: '+inttostr(listback.count))
   for i:= 0 to listback.count-1 do begin
     writeln(listback[i])
   end;
   //All the Output to a file
   StringToFile(memo2.text, Exepath+FUNCTIONLIST);
   Screen.Cursor:= crDefault;
   listback.Free; 
  //myfile.free;
  Writeln(SHA1(exepath+'maxbox3.exe'));
   
  {Writeln('E=mc^2 example: '+FloatToStr(EinsteinEnergyCube)) 
  Writeln('One Sugar Cube has Energy in Joule: '+FloatToStr(EinsteinEnergyCube)) 
  PrintF('One Sugar Cube has Energy in Joule: %0.2E',[EinsteinEnergyCube]) 
  PrintF('E=mc^2 example: 2 Days Power for Hamburg: %0.2E',[EinsteinEnergyCube]);
  PrintF('E=mc^2 example: Joule to kWh: %f',[EinsteinEnergyCube/3600000]); 
  PrintF('E=mc^2 example: Joule to kWh: %0.2E kWh',[EinsteinEnergyCube/3600000]);
  PrintF('Conclusion: One Sugar has %0.1f Millions kWh Energy!',
                                       [EinsteinEnergyCube/3600000000000]);} 

  {Writeln('');
  Writeln('test '+floattostr(pij)) 
  Writeln('test '+floattostr(pi)) 
  Writeln(Format('format of PI %0.18f',[PI])) 
  PrintF('PrintF of PI  %0.18f',[PI]) 
  Writeln('test '+floattostr(EULER)) 
  Writeln('test '+floattostr(exp(1)))} 
  //println
END. 

//code snippet

procedure ListDLLFunctions(DLLName: String; List: TStrings);
type
  chararr = array [0..$FFFFFF] of Char;
  var
  H: THandle;
  I,
  fc: integer;
  st: string;
  arr: Pointer;
  ImageDebugInformation: PImageDebugInformation;
begin
  List.Clear;
  DLLName := ExpandFileName(DLLName);
  if FileExists(DLLName) then
  begin
    H := CreateFile(PChar(DLLName), GENERIC_READ, FILE_SHARE_READ or
      FILE_SHARE_WRITE, nil, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0);
    if H<>INVALID_HANDLE_VALUE then
      try
        ImageDebugInformation := MapDebugInformation(H, PChar(DLLName), nil, 0);
        if ImageDebugInformation<>nil then
          try
            arr := ImageDebugInformation^.ExportedNames;
            fc := 0;
            for I := 0 to ImageDebugInformation^.ExportedNamesSize - 1 do
              if chararr(arr^)[I]=#0 then
              begin
                st := PChar(@chararr(arr^)[fc]);
                if Length(st)>0 then
                  List.Add(st);
                if (I>0) and (chararr(arr^)[I-1]=#0) then
                  Break;
                fc := I + 1
              end
          finally
            UnmapDebugInformation(ImageDebugInformation)
          end
      finally
        CloseHandle(H)
      end
  end
end;

// the following is an example how to use the procedure
var
  List: TStrings;
  I: integer;
  S: String;

begin
  List := TStringList.Create;
  ListDLLFunctions('c:\winnt\system32\mfc42.dll', List);
  S := 'List of functions';
  for I := 0 to List.Count - 1 do
    S := S + #13#10 + List[I];
  ShowMessage(S);
  List.Free
  
  Writeln(SHA1(exepath+'maxbox3.exe'));
end.




Das Buch oder eher der Bildband besticht durch wirklich exotisches Bildmaterial, in dem Sinne, dass die Aufnahmen und Plakate selten publiziert wurden und deshalb von besonderem Wert sind.
Der Band zeigt schon in den ersten Seiten ein Parsifal-Plakat, das in seiner dynamischen Kunst-Art einmalig ist. Der Autor verarbeitet ausschliesslich eigenes Bildmaterial mit optimaler Optik und reizvoller Perspektive. Zu erwähnen sind die stimmungsvollen Fernaufnahmen auf S.16 auf der Gotthard-Strecke oder die des Catalan-Talgo auf S.42. Sogar seltene Farbaufnahmen aus den Anfängen der TEE-Ära (S.24) haben Eingang gefunden. Auch die damalige TEEM als übergreifender Güterverkehr kommt zum Zuge und das perspektivische Material wird auch so präzise wie möglich datiert und bezeichnet wie der TEE Capitole du Matin auf S.67. sich eben vom TEE Capitole du Soir unterscheidet.
 Eine TEE Übersicht auf S.82 runden den Band ab, der auch mit interessanten Details überzeugt, z.B. S.97 zeigt ein imposantes Beispiel von Industriedesign der EuroFima, die einiges an TEE Rollmaterial lieferte.
Ein profundes Buch zum 2012 Jubiläum der 55 Jahre TEE Geschichte. 



http://max.kleiner.com/TEE.html




----app_template_loaded----