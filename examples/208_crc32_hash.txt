//calculates hash store from string or file _31

program CRC32_Hash_Code;

//type
  //T4x4LongWordRecord = array [0..3] of LongWord;
  //THexArray = array [0..15] of Char;
  
var   
    hexd: THexArray;
    //myhc: TIdHashCRC32;
    mylog: Tidlogfile;
    i: byte;
    mp: TFloatPoint;
  
  
  procedure GetHexArray(var ahexdig: THexArray);
  var i: byte;
  begin
   for i:= 0 to 9 do
     ahexdig[i]:= chr(i+48);  //of 48
   for i:= 10 to 15 do
     ahexdig[i]:= chr(i+55);  //of 65
   //= '0123456789ABCDEF';  
  end;

  
 function HashCRC32(const fileName: string): LongWord;
 var
   myhc: TIdHashCRC32;
   fs: TFileStream;
 begin
   myhc:= TIdHashCRC32.Create;
   fs:= TFileStream.Create(fileName, fmOpenRead OR fmShareDenyWrite);
   try
     result:= myhc.HashValue(fs)
     //result:= idmd5.AsHex(idmd5.HashValue(fs)) ;
   finally
     fs.Free;
     myhc.Free;
   end;
 end;


function OwnHashCode(val: string): Extended;
var
  i: Integer;
  res, pow: extended;
begin
  res := 0;
  pow:=  Power(31, Length(val) - (i - 1) - 1)
  //writeln(floattostr(pow))
  for i := 1 to Length(val) do begin
    pow:= Power(31, Length(val) - (i - 1) - 1)
    res:= res + extended(Ord(val[i])) * pow;
  end;
  Result:= (res);
end;

begin
    //hashvalues
    Writeln(floatToStr(OwnHashCode('too many secrets')))
    Writeln('Test CRef: '+IntToStr(ComputeFileCRC32('firstdemo.txt')));
    Writeln('From CRC: '+intTostr(HashCRC32('firstdemo.txt')))

    writeln(Chr(65))
    writeln(Chr(48))
    getHexArray(hexd);
    for i:= 0 to 15 do
      Write(hexd[i]);
     {//C3B9FBA6EFE24D7347C718F054FE48D6
     writeln('from MD5 '+md5('maxbox3.exe'))
     //65B83A31774A8F6D3A1606ED8E466903185D2E90
     writeln('from SHA1 '+sha1('maxbox3.exe'))}
    mylog:= TIdlogfile.create(self);
    mylog.Filename:= 'indylogtest.txt';
    mylog.Free;
    mp.x:= 2.445;
    mp.y:= 3.567;
    mp:= VectorAdd(mp, mp);
    Writeln(floatToStr(mp.y))
end.

-------------------------------------------------
//function HashAsHex(const AValue: T4x4LongWordRecord): string;
function HashAsHex(const AValue: LongWord): string;
var
  P: String;
  i: Integer;
Begin
  //P:=PChar(@AValue);
  //P:=PChar(AValue);
  //Procedure SetString(var s: string; buffer: PChar; len: Integer);
  //SetString(Result,P,4*4*2);//32
  P:= inttoStr(avalue)
  P:= P+P+P+P
  result:= P;
  for i:= 0 to 15 do begin
  //writeln(hexdi[ord(P[i+1]) shr 4]);
    Result[i*2+1]:= hexd[ord(P[i+1]) SHR 4];
    Result[i*2+2]:= hexd[ord(P[i+1]) AND $F];
  end;//for  
end;

Next: Ex. 209
md5 mx3
9E DB 74 AA 37 CF 42 7B CB C1 C5 C2 F9 5B F3 75 

from idpop3

if Length(S) > 0 then begin
          with TIdHashMessageDigest5.Create do
          try
            S:=LowerCase(TIdHash128.AsHex(HashValue(S+Password)));
          finally
            Free;
          end;//try
          
  Task: 
  [Hint] 208_crc32_hash.txt(17:12): Variable 'Result' never used
  Proof the fact:
          
  function GetHexArray(var ahexdig: THexArray): THexArray;
  var i: byte;
  begin
   for i:= 0 to 9 do
     ahexdig[i]:= chr(i+48);  //of 48
   for i:= 10 to 15 do
     ahexdig[i]:= chr(i+55);  //of 65
   //= '0123456789ABCDEF';  
  end;
          