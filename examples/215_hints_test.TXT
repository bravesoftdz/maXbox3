Program Hints_Test;

//Hints to improve your code


var frmDummy: TForm;


procedure JustUseIs;
begin
  //TForm(frmDummy).Caption is more efficient than using as
  //and we know from the first line that it is of TForm
  if frmDummy is TForm then
    //(frmDummy as TForm).Caption:='Main Form';
end;

procedure CursorChanged;
begin
  Screen.Cursor:= crHourGlass;
  If Application.Terminated then
    Exit;  //this exit command means the next line that changes
           //the cursor does not get called and the cursor is left
           //busy
  Screen.Cursor:= crDefault;
end;

function ImproveDate: string;
begin
  //If you're just looking for the current Time, use Time
  //If you're looking for the current date, use Date
  //Only use Now when you are looking for both added
  Result:= DateTimeToStr(Now);
end;

function FasterSinCos(x:extended):boolean;
var
  y,z: extended;
begin
  y:= Sin(x);
  z:= Cos(x);
  //Calling for procedure SinCos for the same value
  //is twice as fast though it requires Math in your uses clause

  Result:= (y<90) AND (z<0);
end;

function BetterCopy1: string;
begin
  //Faster to use MaxInt than make a call to Length
  Result:= Copy(frmDummy.Caption,1,Length(frmDummy.Caption));
end;

function BetterCopy2: string;
begin
  Result:= frmDummy.Caption;
  //Faster to use Delete to remove the first four characters
  Result:= Copy(Result,5,Length(Result));
end;

function BetterCopy3: string;
begin
  Result:= frmDummy.Caption;
  //Faster to use SetLength to reduce string by 4 characters
  Result:= Copy(Result,1,Length(Result)-4);
end;

function BetterCopy4: string;
begin
  Result:= frmDummy.Caption;
  //Faster to check the length before returning either
  //a blank string or Result[5]
  Result:= Copy(Result,5,1);
end;

function CompatibiltyCommand1(const s:string): string;
var
  t: string;
begin
  //AppendStr only exists for compatibility
  AppendStr(t,s);
  Result:= t;
end;

procedure ReduceCallStack(tbl: TTable);
var mytable: Ttable;
begin
  //For TTable.Open; the Delphi source code calls
  mytable.Active:= True;
  //so we can cut out a procedure if our code does this
  tbl.Open;
end;

function SlowLength(const s:PChar):integer;
begin
  Result:= StrLen(s);
end;

function ReverseString(const InString: string): string;   //Delphi
var
 i: integer;
begin
  for i:= Length(InString) downto 1 do
    Result:= Result+InString[i];
end;

function reverse(s:string): string;  //Extended Pascal
var i:integer;
var tmp:char;
begin
    for i:=1 to length(s) div 2 do begin
       tmp:=s[i];
       s[i]:= s[length(s)+1-i];
       s[length(s)+1-i]:= tmp;
       result:= s;
      end;
end;

function revstr(my_s:string): string; //Standard Pascal
  var out_s:string;
  var ls,i:integer;
    begin
      ls:=length(my_s);
      for i:=1 to ls do
        out_s:=out_s+my_s[ls-i+1];
    result:=out_s;
    end;
 
 

  var
  ws: widestring;

begin

  CursorChanged;

  JustUseIs;
  CursorChanged;
  Writeln(ImproveDate)
  ws:= ' This is bitboX   ';

  Writeln((ws))
  
  Writeln(ansirightstr(ws,11))
  Writeln(trim(ws))
  Writeln(trim('   d   this is bitbox_  '))
  
  Writeln(ReverseString(ws))   //Delphi
   Writeln(reverse(ws))        //Extended Pascal
   Writeln(revstr(ws))         //Standard Pascal
   
 ws:= 'merry christmas'  

   Writeln(ReverseString(ws))   //Delphi
   Writeln(reverse(ws))        //Extended Pascal
   Writeln(revstr(ws))         //Standard Pascal


{function FasterSinCos(x:extended):boolean;
function BetterCopy1:string;
function BetterCopy2:string;
function BetterCopy3:string;
function BetterCopy4:string;
function CompatibiltyCommand1(const s:string):string;
procedure ReduceCallStack(tbl:TTable);
function SlowLength(const s:PChar):integer;}

end.



----code_cleared_checked----