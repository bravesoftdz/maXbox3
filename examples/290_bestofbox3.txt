{***************************************************************
 * {Project  : System Function Overview
 * App Name: 290_bestofbox3, #locs:476
 * Purpose  : Demonstrates best functions and Internals
 * Date  : 09/28/2013  -  17:07
 * History  : convert to maXbox Nov 2011
 *          : system demo for mX3.9.9
            : sendmail, qrcode, API and threads, form templates
            : #sign:max: APSN21: 20.10.2013 11:47:39 
 ****************************************************************}

Program BestofBoxDemo3;
{BOOL WINAPI MessageBeep(
  __in  UINT uType );}
//TThreadFunction = function(P: Pointer): Longint; stdcall;
//Procedure ExecuteThread(afunc: TThreadFunction; var thrOK: boolean);

function  MessageBeep(para: integer): byte; external 'MessageBeep@user32.dll stdcall'; 
  
function MessageBoxTimeOut(hWnd: HWND; lpText: PChar; lpCaption: PChar; uType: UINT;
                wLanguageId: WORD; dwMilliseconds: DWORD): Integer;
  external 'MessageBoxTimeoutA@user32.dll stdcall';
  
  
const
  BITMAP = 'examples\citymax.bmp';
  URLGoogleQrCode='http://chart.apis.google.com/chart?chs=%dx%d&cht=qr&chld=%s&chl=%s';
  AFILENAME= 'mX3QRCode3.png';
  QDATA= 'this is maXland on a maXbox stream dream firebox';

  
type
  TByteArr = array of byte;
  (*TStLinEst = record
    B0, B1     : Double;   {model coefficients}
    seB0, seB1 : Double;   {standard error of model coefficients}
    R2         : Double;   {coefficient of determination}
    sigma      : Double;   {standard error of regression}
    SSr, SSe   : Double;   {elements for ANOVA table}
    F0         : Double;   {F-statistic to test B1=0}
    df         : Integer;  {denominator degrees of freedom for F-statistic}
  end;*)
   
var
  except_state, execute_state: string;  
  mytimestamp: TDateTime;
  osType: TIdWin32Type;
  //diskTotal, amtFree: int64;
  //ptr: ___Pointer;
  thresult: boolean;
  //thfct: TThreadFunction;   //procedure type
  //mybase: TThread;
  //mySort: TSortThread;
  mybox: TPaintBox;
  mythreadArray: TSortArray;
  frmMon: TForm;

  //my bestofbox functions 3
  //procedure GetQrCode2; forward;        //1
  procedure LetSendMail; forward;         //2
  procedure ThreadDemoForm; forward;      //3
  //GetEnvironmentString                  //4
  procedure VariantTests; forward;                         //7
  procedure CallTicker(msecs: integer); forward;           //8
  procedure StatisticPackage; forward;                     //9
  function loadPForm(vx, vy: integer): TForm; forward;     //11
  procedure TimeOutBox_API; forward;                       //12
 

  
procedure getMaxBoxIni;
var
  Ini: TIniFile;   
begin
  Ini:= TIniFile.Create(ExePath+'maxboxdef.ini');
  try
    except_state:= Ini.ReadString('Form', 'EXCEPTIONLOG','');
    execute_state:= Ini.ReadString('Form', 'EXECUTESHELL','');
  finally
    writeln('inifile sysdata test: '+(except_state)+ ' '+(execute_state))
    ini.Free;
  end;
end;


procedure ThreadDemoForm;
begin
    with TSortThread.Create(mybox, mythreadarray) do begin
      bolTHslowmotion:= true;
      slowmotion:= 2;
    end;  
    with TQuickSort.Create(mybox, mythreadarray) do begin
      bolTHslowmotion:= true;
      slowmotion:= 4;
    end;  
    with TThreadSortForm.Create(self) do begin
      caption:= 'IBZDemo';
      label1.caption:= 'Bubble Sort down up';
      //bolTHslowmotion:= true;
      slowmotionfirst:= 1;   //to begin
      slowmotion:= 3;        // for each thread
      show;
      //StartBtn.caption:= 'go parallel';
      //StartBtnClick(self);
    end;  
end;


function vsomme(a,b: variant): variant;
begin
  result:= a+b;
end;  

procedure VariantTests;
var at: variant;
begin
  writeln('variant 5+6: '+inttostr(vsomme(5,6)));
  writeln('variant 5.8+6.0: '+floattostr(vsomme(5.8,6.0)));
  writeln('variant str(5)+str(6): '+(vsomme('5','6')));
  writeln('variant '+(vsomme('bonjour','monsieur')));
  vsomme(date,7);
  writeln('variant plus 7 days: '+datetostr(vsomme(date,7)));
  at:= varArrayCreate([1,8],varvariant);
  //at[1]:= 'first of var';
  //t[2]:= 'second of var';
  //Writeln(t[1]+'   :   '+t[2]);
end;


procedure Delay2StopWatch(msecs: integer);
 var FirstTickCount: longint;
begin
 FirstTickCount:= GetTickCount;
 repeat
   Application.ProcessMessages; {allowing access to other controls, widgets, etc.}
 until ((GetTickCount-FirstTickCount) >= Longint(msecs));
end;
//Test it with:
procedure CallTicker(msecs: integer);
begin
 with TStopWatch.create do begin
   start
     Delay2StopWatch(msecs)
   stop
   writeln('Stop Watch CPU Tester: '+getValueStr)
 end;    
end;


procedure StatisticPackage; //see also ex. 289 regression
var adx, ady, adregx, adregy: array of double;
    aaSum, aaSumOfSquares: extended;
    linregress: TStLinEst;
//http://www.koders.com/delphi/fid01C6FC01AA74690692B71DC9F63FEB4B86AE43DB.aspx?s=crc    
begin
  SetLength(adx,5)
  SetLength(ady,5)
  adx[0]:= 60;
  adx[1]:= 61;
  adx[2]:= 62;
  adx[3]:= 63;
  adx[4]:= 65;
  ady[0]:= 3.1;
  ady[1]:= 3.6;
  ady[2]:= 3.8;
  ady[3]:= 4.0;
  ady[4]:= 4.1;
  PrintF('Correlation of x and y %.4f',[Correlation(ady,adx)]);
  PrintF('Covariance of x and y %.4f',[Covariance(ady,adx)]);
//4604: Function Forecast(X: Double; KnownY: array of Double; KnownX: array of Double):Double');
  PrintF('Forecast of x is %.4f',[Forecast(7,ady,adx)]);
  //4606: Function Intercept( const KnownY : array of Double; const KnownX : array of Double) : Double');
  PrintF('Intercept of y and x %.4f',[Intercept(ady,adx)]);
 //5832: Procedure SumsAndSquares( const Data : array of Double; var Sum, SumOfSquares : Extended)
  SumsAndSquares(adx, aaSum, aaSumOfSquares);
  PrintF('SumsAndSquares of X: %.2f  %.2f', [aaSum, aaSumOfSquares]);
  //4574: Procedure Frequency( const Data : array of Double; const Bins : array of Double; var Counts : array of LongInt)');
  //4609: Function StandardErrorY(KnownY : array of Double; KnownX : array of Double) : Double');
  PrintF('Standard Error of y %.4f',[StandardErrorY(ady,adx)]);
  PrintF('Slope of both %.4f',[Slope(ady,adx)]);
  PrintF('R Squared of both %.4f',[RSquared(ady,adx)]);
  // SetLength(adrand,1000)
  //for i:= 1 to 1000-1 do adrand[i]:= randomF;
  //for i:= 1 to 1000-1 do writeln(floattostr(adrand[i]));
  {abytearr:= StrtoArrofByte(memo2.text)
  for i:= 0 to length(abytearr)-1 do write((chr(abytearr[i]+48)));
  writeln('');}
//Trick 1_6: 1, 2, 4, 5, 7, 8
  PrintF('choose a number %f',[maXcalc('7*9*111*1001/7')]);
{Step1: Choose a number from 1 to 6.
 Step2: Multiply the number with 9.
 Step3: Multiply the result with 111.
 Step4: Multiply the result by 1001.
 Step5: Divide the answer by 7.
 Answer: All the above numbers will be present.}
//http://people.sc.fsu.edu/~jburkardt/datasets/regression/regression.html
  {full statistics for a linear regression}
  (*TStLinEst = record
    B0, B1     : Double;   {model coefficients}
    seB0, seB1 : Double;   {standard error of model coefficients}
    R2         : Double;   {coefficient of determination}
    sigma      : Double;   {standard error of regression}
    SSr, SSe   : Double;   {elements for ANOVA table}
    F0         : Double;   {F-statistic to test B1=0}
    df         : Integer;  {denominator degrees of freedom for F-statistic}
  end;
{LINEST}
procedure LinEst(const KnownY : array of Double;
  const KnownX : array of Double; var LF : TStLinEst; ErrorStats : Boolean);
  {-Performs linear fit to data and returns coefficients and error
    statistics.
      KnownY is the dependent array of known data points.
      KnownX is the independent array of known data points.
      NData must be greater than 2.
      If ErrorStats is FALSE, only B0 and B1 are computed; the other fields
        of TStLinEst are set to 0.0.
      See declaration of TStLinEst for returned data.  } *)
 // adx[0]:= 60.0;  { adx[1]:= 61.0;
 { adx[2]:= 62.0;    adx[3]:= 63.0;
  adx[4]:= 65.0;}   //ady[0]:= 30.1;
 { ady[1]:= 30.6;  ady[2]:= 30.8;
  ady[3]:= 40.0;   ady[4]:= 40.1;}

   SetArrayLength(adregx,3)
   SetArrayLength(adregy,3)              
   adregx[0]:= 234;
   adregx[1]:= 254;
   adregx[2]:= 264;
   adregy[0]:= 250;
   adregy[1]:= 250;
   adregy[2]:= 264;
  //LinEst(adregx,adregy, linregress, true) 
end;


procedure maxcalc_demo;
begin
  printF('this is %.6f',[maXcalc('ln(2)+fact(388)+2!')]); 
  printF('this is %.6f',[maXcalc('(4!)^(3!)')]); 
  printF('this is %.6f',[maXcalc('4!+4!')]); 
  printF('this is %.6f',[maXcalc('log(22)')]); 
  printF('this is logN %.6f',[maXcalc('2%256')]);
  writeln('ln(e): '+floattostr(maXcalc('ln(e)')))
  writeln(floattostr(maXcalc('e+10^6')))
  printF('addition theorem %.18f ',[maXcalc('sin(2.5/2)')])
  printF('addition theorem %.18f ',[maXcalc('sqrt(1/2*(1-cos(2.5)))')])
  printF('addition theorem2 %22.18f ',[maXcalc('cos(2.5/2)')])
  printF('addition theorem2 %22.18f ',[maXcalc('sqrt(1/2*(1+cos(2.5)))')])
  maXcalcF('2%256+2^10');
end; 


procedure CloseClick(Sender: TObject; var action: TCloseAction);
begin
  {if Timer1 <> NIL then begin
    Timer1.enabled:= false;
    Timer1.Free;
    Timer1:= NIL;
  end;}
  action:= caFree;
  //sender.Close;
  writeln('form being closed');
end;

procedure CloseButtonClick(Sender: TObject);
begin
  //act:= caFree;
  sender.Free;
  //CloseClick(sender,act);
  //Handle:= FindWindow(ppform,''); //FindReplDialog does not
  //if Handle <> 0 then 
    //Showmessage('maXbox is alive')
end;


function loadPForm(vx, vy: integer): TForm;
var psize: integer;
    ppform: TForm;
    rgn: hrgn;
begin
  psize:= vx*vy
  //constructor
  ppform:= TForm.Create(self);
  with ppform do begin
    caption:= 'LEDBOX, Press <Return> to run the Sequence';  
    width:= (vx*psize)+ 10 + 220;
    height:= (vy*psize)+ 30;
    BorderStyle:= bsDialog;
    Position:= poScreenCenter;
    //onKeyPress:= @FormKeyPress
    //OnClick:= @Label1Click;
    canvas.Pen.mode :=pmNotXor;
    canvas.pen.style:= psDot; //Gepunktete Linien
    color:= clBlack;
    OnClose:= @closeClick;
    Show;
  end;
  with TBitBtn.create(self) do begin
    parent:= ppform;
    setbounds(140,440,140,40)
    glyph.LoadFromResourceName(HINSTANCE,'CL_MPSTOP'); 
    rgn:= createRoundRectrgn(0,0,width,height,12,12);
    setWindowRgn(handle, rgn, true);
    caption:= '&Close button';
    onClick:= @closeButtonClick;
  end;
   with TBitBtn.create(self) do begin
    parent:= ppform;
    setbounds(300,440,140,40)
    glyph.LoadFromResourceName(HINSTANCE,'CL_MPPLAY'); 
    mXButton(0,0,width, height,12,12,handle);
    //rgn:= createRoundRectrgn(0,0,width,height,20,20);
    //setWindowRgn(handle, rgn, true);
    caption:= '&open button';
    //onClick:= @openButtonClick;
  end;
     with TBitBtn.create(self) do begin
    parent:= ppform;
    setbounds(460,440,140,40)
    glyph.LoadFromResourceName(HINSTANCE,'CL_MPRECORD'); 
    mXButton(0,0,width, height,12,12,handle);
    //rgn:= createRoundRectrgn(0,0,width,height,20,20);
    //setWindowRgn(handle, rgn, true);
    caption:= '&maXcalc button';
    //onClick:= @openButtonClick;
  end;  
  result:= ppform;  
end;

procedure LetBitmaponForm(aform: TForm);
var mbitmap: TBitMap;
begin
  mbitmap:= TBitmap.Create;
  try
    mbitmap.LoadFromFile(Exepath+BITMAP);
    aform.Canvas.Draw(320,160, mbitmap);
    aform.Canvas.Draw(180,110, mbitmap);
    aform.Canvas.draw(5,50, mbitmap);
  finally
    //aForm.Free;
    mbitmap.Free;
  end;
end;

procedure TimeOutBox_API;
var iFlags, iResult: integer;
begin 
  iFlags:= $0 or $00010000 or $00000040;
    iResult:= MessageBoxTimeout(Application.Handle,
        'Test a timeout of 2 seconds.','MessageBoxTimeout Test',iFlags,0,2000);  
end;  
 
procedure leibniz_formula;
var zeta: extended;
    tac: boolean;
    i: longint;
begin    
  zeta:= 0;
  tac:= true;
  for i:= 1 to 50000 do 
    if NOT (i mod 2 = 0) then begin 
      tac:= not tac;
      if tac then
        zeta:= zeta - 1/i else
        zeta:= zeta + 1/i;
    end;  
  writeln('harmonic alternate leibniz formula to PI/4: '+floatToStr(zeta))  
  writeln('leibniz test a maXcalc: '+floatToStr(maxcalc('PI/4')))
  writeln('constant test ref PI/4: '+floatToStr(PIOn4))
end; 


procedure LetSendMail;
begin
 //sendemail
  //config the file maildef.ini first
  OpenFile(ExePath+'maildef.ini');
  SendMail('max@kleiner.ch','max@kleiner.com','a test42script','maXbox in SSL fox box','');
end;

procedure LetBarCode;
begin
  with TASBarcode.create(self) do begin;
    Top := 200;
    Left := 130;
    Height:= 135;
    width:= 185;
    Showtext:= bcoBoth;
    Typ:= bcCode_2_5_interleaved;
    text:= '0123456789';
    DrawBarcode(frmmon.Canvas);
    Typ:= bcCodeEAN128C; //bcCode_2_5_interleaved;
    Left:= 305;
    text:= '0123456789';
    DrawBarcode(frmmon.Canvas);
    Typ := bcCode128C; //bcCodePostNet; //,bcCodeEAN128C; 
    Left:= 500;
    text:= '0123456789';
    DrawBarcode(frmmon.Canvas);
   end;
end;   
  


begin   //main of bestofbox
   //InifileRead;
   getMaxBoxIni;
   thresult:= false;
   //thfct:= @myThread;
   CurrentThreadID
   writeln('Thread ID :'+intToStr(CurrentThreadID))
   CurrentProcessId
   writeln('Process ID :'+intToStr(CurrentProcessID))
   //ExecuteThread(thfct, thresult)
   //if thresult = true then
   writeln('machine name is: '+getHostName)
   writeln('user name is: '+getUserName)
   osType:= Win32Type;
   writeln('OS Type is: '+intToStr(ord(osType)));
   mytimestamp:= GetFileCreationTime(exepath+'maxbox3.exe')
   writeln(DateTimeToStr(mytimestamp)+' for maXbox3 file')
   //SearchAndOpenDoc(ExtractFilePath(ParamStr(0))+'docs\maxbox_starter2.pdf')
   //signal_Sounds;
   //ExecuteCommand('cmd','/k dir *.*')
   ThreadDemoForm;  
   //newDBTableScript;
   VariantTests;
   CallTicker(500);
   with TStString.Create do begin
     AppendString(memo2.text)
     Writeln('this word count of StString '+IntToStr(WordCount));
     Writeln('ASCII count of output '+inttoStr(ASCIICount));
     Writeln('Alloc Length of output '+inttoStr(allocLength));
     //atIndex
     Free;
   end;
   maXcalc_demo;
   Writeln('************************Stat Pac*****************************');  
   StatisticPackage;  
   Writeln('************************API Pac*****************************');  
   CurrencyFormat;
   LetBitmaponForm(loadpform(8,8));
   TimeOutBox_API;
   leibniz_formula;
   Writeln('************************Web Pac*****************************');  
   writeln(DateTimeToInternetStr(now, true))
   //wGet('http://www.softwareschule.ch/download/maxbox_starter4.pdf','mytestpdf.pdf');
    //[regex]@ maXbox----------------------------------------------------------
   //call of the Lib
   //GetQrCode2(150,150,'Q',QDATA, ExePath+AFILENAME);
   //LetSendMail;
   frmmon:= loadpform(8,8);  //-->closure ref
   LetBarCode;
   //GetEnvironmentInfo; 
   writeln(GetEnvironmentString);   
   //SaveString(ExePath+'\Examples\envinfo.txt',GetEnvironmentString);   
   //OpenFile(ExePath+'\Examples\envinfo.txt');
   writeln(getIPAddress(getComputerName));
   if IsTCPPortOpen(80,getIPAddress(getComputerName)) then
       writeln('Port Open Started') else 
         writeln('Port not open or in use');
  
     //Pressing the Left Windows Key as Start
  PostKeyEx32(VK_LWIN, [], False);
  
  ExecuteCommand('rundll32',' shell32 ShellAboutA Info-Box');
  
     {* 	0 - FreeBytesAvailable
	      1 - TotalNumberOfBytes
	      2 - TotalNumberOfFreeBytes  }

   writeln('free Diskspace '+int64tostr(getDiskspace2('E:\',0)));
   writeln('free Diskspace '+int64tostr(getDiskspace2('E:\',2)));

     
End.   

------------------------------------------------
Windows crashed again. I am the Blue Screen of Death. No one hears your screams.
Three things are certain: Death, taxes, and lost data. Guess which has occurred.
There is no place like 127.0.0.1 



50000  = 0.693137180659968
100000 = 0.693142180584982
500000 = 0.693146180561005
10^6   = 0.693146680560255
5*10^6 = 0.693147080560068
50*10^6= 0.693147170560399    //Runtime: 0:28:22.422
ln(2)  = 0.693147180559945

(* zeta:= 0;
     for i:= 1 to 50000 do 
       if i mod 2 = 0 then
         zeta:= zeta - 1/i else
         zeta:= zeta + 1/i;
       writeln('harmonic alternate to ln(2): '+floattostr(zeta))  
       writeln(floattostr(maxcalc('ln(2)')))
       writeln(floattostr(ln2))    *)
   

type
  //PThreadSortArray = ^TThreadSortArray;
  //TThreadSortArray = array[0..MaxInt div SizeOf(Integer) - 1] of Integer;
  TSortArray =  array[1..ARRSIZE] of Integer;


  TSortThread = class(TThread)
  strict private
    FBox: TPaintBox;
    //FSortArray: PThreadSortArray;
    FSortArray: TSortArray;
    FSize: Integer;
    FA, FB, FI, FJ: Integer;
    Fbolthslowmotion: boolean;
    procedure DoVisualSwap;
    procedure Setbolthslowmotion(const Value: boolean);
  protected
    procedure Execute; override;
    procedure VisualSwap(A, B, I, J: Integer);
    procedure Sort(var A: array of Integer); virtual; abstract;
  public
    constructor Create(Box: TPaintBox; var SortArray: TSortArray);
    property  bolTHslowmotion: boolean read Fbolthslowmotion write Setbolthslowmotion;

  end;


procedure SIRegister_TThreadSortForm(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TForm', 'TThreadSortForm') do
  with CL.AddClassN(CL.FindClass('TForm'),'TThreadSortForm') do
  begin
    RegisterProperty('BubbleSortBox', 'TPaintBox', iptrw);
    RegisterProperty('SelectionSortBox', 'TPaintBox', iptrw);
    RegisterProperty('QuickSortBox', 'TPaintBox', iptrw);
    RegisterProperty('Bevel1', 'TBevel', iptrw);
    RegisterProperty('Bevel2', 'TBevel', iptrw);
    RegisterProperty('Bevel3', 'TBevel', iptrw);
    RegisterProperty('StartBtn', 'TButton', iptrw);
    RegisterProperty('Label1', 'TLabel', iptrw);
    RegisterProperty('Label2', 'TLabel', iptrw);
    RegisterProperty('Label3', 'TLabel', iptrw);
    RegisterProperty('BitBtn1slowmotion', 'TBitBtn', iptrw);
    RegisterMethod('Procedure StartBtnClick( Sender : TObject)');
    RegisterMethod('Procedure BubbleSortBoxPaint( Sender : TObject)');
    RegisterMethod('Procedure SelectionSortBoxPaint( Sender : TObject)');
    RegisterMethod('Procedure QuickSortBoxPaint( Sender : TObject)');
    RegisterMethod('Procedure FormCreate( Sender : TObject)');
    RegisterMethod('Procedure FormDestroy( Sender : TObject)');
    RegisterMethod('Procedure FormKeyPress( Sender : TObject; var Key : Char)');
    RegisterMethod('Procedure BitBtn1slowmotionClick( Sender : TObject)');
    RegisterMethod('Procedure ThreadDone( Sender : TObject)');
    RegisterProperty('mouse', 'boolean', iptrw);
  end;
end;



//----------------------------------------------
 DiskSize returns -1 if the drive number is invalid. Drive parameter can be 
 set to: 0 = Current drive, 1 = A, 2 = B, 3 = C and so on. 


DRIVE_UNKNOWN
0 The drive type cannot be determined.
 
DRIVE_NO_ROOT_DIR
1 The root path is invalid; for example, there is no volume mounted at the specified path.
 
DRIVE_REMOVABLE
2 The drive has removable media; for example, a floppy drive, thumb drive, or flash card reader.
 
DRIVE_FIXED
3 The drive has fixed media; for example, a hard drive or flash drive.
 
DRIVE_REMOTE
4 The drive is a remote (network) drive.
 
DRIVE_CDROM
5 The drive is a CD-ROM drive.
 
DRIVE_RAMDISK
6 The drive is a RAM disk.

***********************************Thread Class *****************************
  TThread = class
  private
{$IFDEF MSWINDOWS}
    FHandle: THandle;
    FThreadID: THandle;
{$ENDIF}
{$IFDEF LINUX}
    // ** FThreadID is not THandle in Linux **
    FThreadID: Cardinal;
    FCreateSuspendedSem: TSemaphore;
    FInitialSuspendDone: Boolean;
{$ENDIF}
    FCreateSuspended: Boolean;
    FTerminated: Boolean;
    FSuspended: Boolean;
    FFreeOnTerminate: Boolean;
    FFinished: Boolean;
    FReturnValue: Integer;
    FOnTerminate: TNotifyEvent;
    FSynchronize: TSynchronizeRecord;
    FFatalException: TObject;
    procedure CallOnTerminate;
    class procedure Synchronize(ASyncRec: PSynchronizeRecord; QueueEvent: Boolean = False); overload;
{$IFDEF MSWINDOWS}
    function GetPriority: TThreadPriority;
    procedure SetPriority(Value: TThreadPriority);
{$ENDIF}
{$IFDEF LINUX}
    // ** Priority is an Integer value in Linux
    function GetPriority: Integer;
    procedure SetPriority(Value: Integer);
    function GetPolicy: Integer;
    procedure SetPolicy(Value: Integer);
{$ENDIF}
    procedure SetSuspended(Value: Boolean);
  protected
    procedure CheckThreadError(ErrCode: Integer); overload;
    procedure CheckThreadError(Success: Boolean); overload;
    procedure DoTerminate; virtual;
    procedure Execute; virtual; abstract;
    procedure Queue(AMethod: TThreadMethod); overload;
    procedure Synchronize(AMethod: TThreadMethod); overload;
    property ReturnValue: Integer read FReturnValue write FReturnValue;
    property Terminated: Boolean read FTerminated;
  public
    constructor Create(CreateSuspended: Boolean);
    destructor Destroy; override;
    procedure AfterConstruction; override;
    procedure Resume;
    procedure Suspend;
    procedure Terminate;
    function WaitFor: LongWord;
    class procedure Queue(AThread: TThread; AMethod: TThreadMethod); overload;
    class procedure RemoveQueuedEvents(AThread: TThread; AMethod: TThreadMethod);
    class procedure StaticQueue(AThread: TThread; AMethod: TThreadMethod);
    class procedure Synchronize(AThread: TThread; AMethod: TThreadMethod); overload;
    class procedure StaticSynchronize(AThread: TThread; AMethod: TThreadMethod);
    property FatalException: TObject read FFatalException;
    property FreeOnTerminate: Boolean read FFreeOnTerminate write FFreeOnTerminate;
{$IFDEF MSWINDOWS}
    property Handle: THandle read FHandle;
    property Priority: TThreadPriority read GetPriority write SetPriority;
{$ENDIF}
{$IFDEF LINUX}
    // ** Priority is an Integer **
    property Priority: Integer read GetPriority write SetPriority;
    property Policy: Integer read GetPolicy write SetPolicy;
{$ENDIF}
    property Suspended: Boolean read FSuspended write SetSuspended;
{$IFDEF MSWINDOWS}
    property ThreadID: THandle read FThreadID;
{$ENDIF}
{$IFDEF LINUX}
    // ** ThreadId is Cardinal **
    property ThreadID: Cardinal read FThreadID;
{$ENDIF}
    property OnTerminate: TNotifyEvent read FOnTerminate write FOnTerminate;
  end;
  
  
  Trick 6: 1, 2, 4, 5, 7, 8
Step1: Choose a number from 1 to 6.
Step2: Multiply the number with 9.
Step3: Multiply the result with 111.
Step4: Multiply the result by 1001.
Step5: Divide the answer by 7.
Answer: All the above numbers will be present.

 
Understanding the SynEdit Highlighter
SynEdit - Highlighter relationship
***************************************************************************
SynEdit <-> Highlighter have a n to 1 relationship.

    1 (instance of a) Highlighter can serve n (many) (instances of) SynEdits
    Each SynEdit only has one Highlighter
    But: one text (text-buffer) can have many highlighters, if shared by several SynEdit (each SynEdit will have one HL, but all HL will work on the same document) 

As a result of this:

    no Highlighter Instance has a (fixed) reference to the SynEdit. 
     (Highlighters however keep a list of SynEditTextBuffers to which they are attached) 
     All data for the Highlighter is (and must be) stored on the SynEdit (actually on the TextBuffer of SynEdit (referred to as "Lines"). 

However SynEdit ensures before each call to the Highlighter that Highlighter.CurrentLines is set to the current SynEdits Lines. This way the highlighter can access the data whenever needed. The Format of the data-storage is determined by the highlighter (TSynCustomHighlighter.AttachToLines)
Scanning and Returning Highlight attributes

The Highlighter is expected to work on a per Line base.

If any text was modified, SynEdit will call (TSynCustomHighlighter.ScanFrom / Currently called from TSynEdit.ScanFrom) with the line range. The Highlighter should know the state of the previous line.
If Highlight attributes are required SynEdit will request them per Line too. SynEdit will loop through individual tokens on a line. This currently happens from nested proc PaintLines in SynEdit.PaintTextLines. It calls TSynCustomHighlighter.StartAtLineIndex, followed by HL.GetTokenEx/HL.GetTokenAttribute for as long as HL.GetEol is false 

Also the BaseClass for the Highlighter's data (see AttachToLines) is based on per line storage, and SynEdit's TextBuffer (Lines) do maintenance on this data to keep it synchronized. That is when ever lines of text are inserted or removed, so are entries inserted or removed from the highlighters data (hence it must have one entry per line).
Usually Highlighters store the end-of-line-status in this field. So if the highlighter is going to work on a line, it will continue with the state-entry from the previous line. 
maXboy or maXbox


//////////////////////////////////////////////////////////////////////
//  Find all Files of today date  [getTodayFiles]                   //
//  #sign:max: APSN21: 20.10.2013 11:47:39 
//  Purpose: check performance and HD control                       //
//  #path>ples\E:\maxbox\maxbox3\examples\                          //
//  Lines of Code #locs:476
//////////////////////////////////////////////////////////////////////
