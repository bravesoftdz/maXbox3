
********** File 1: E:\maxbox3\mXGit39988\maxbox3\source\DBGrids.pas

190:   TDBGridColumnsState = (csDefault, csCustomized);


192:   TDBGridColumns = class(TCollection)
  private
    procedure SetColumn(Index: Integer; Value: TColumn);
198:     procedure SetState(NewState: TDBGridColumnsState);
    function GetState: TDBGridColumnsState;
    procedure SetState(NewState: TDBGridColumnsState);
199:     function GetState: TDBGridColumnsState;
  protected
    procedure SaveToStream(S: TStream);
212:     property State: TDBGridColumnsState read GetState write SetState;
    property Grid: TCustomDBGrid read FGrid;

284:   TDBGridOption = (dgEditing, dgAlwaysShowEditor, dgTitles, dgIndicator,
    dgColumnResize, dgColLines, dgRowLines, dgTabs, dgRowSelect,
    dgAlwaysShowSelection, dgConfirmDelete, dgCancelOnExit, dgMultiSelect);
287:   TDBGridOptions = set of TDBGridOption;

    DataCol: Integer; Column: TColumn; State: TGridDrawState) of object;
308:   TDBGridClickEvent = procedure (Column: TColumn) of object;

    FLayoutFromDataset: Boolean;
320:     FOptions: TDBGridOptions;
    FTitleOffset, FIndicatorOffset: Byte;
    FEditText: string;
335:     FColumns: TDBGridColumns;
    FVisibleColumns: TList;
    FOnColumnMoved: TMovedEvent;
341:     FOnCellClick: TDBGridClickEvent;
    FOnTitleClick:TDBGridClickEvent;
    FOnCellClick: TDBGridClickEvent;
342:     FOnTitleClick:TDBGridClickEvent;
    FDragCol: TColumn;
    procedure SetIme;
358:     procedure SetColumns(Value: TDBGridColumns);
    procedure SetDataSource(Value: TDataSource);
    procedure SetDataSource(Value: TDataSource);
360:     procedure SetOptions(Value: TDBGridOptions);
    procedure SetSelectedField(Value: TField);
    procedure ColWidthsChanged; override;
405:     function  CreateColumns: TDBGridColumns; dynamic;
    function  CreateEditor: TInplaceEdit; override;
      const MousePt: TPoint): Boolean; override;
457:  //   property Columns: TDBGridColumns read FColumns write SetColumns;
    property DefaultDrawing: Boolean read FDefaultDrawing write FDefaultDrawing default True;
    property LayoutLock: Byte read FLayoutLock;
462:    { property Options: TDBGridOptions read FOptions write SetOptions
      default [dgEditing, dgTitles, dgIndicator, dgColumnResize, dgColLines,
    property OnColumnMoved: TMovedEvent read FOnColumnMoved write FOnColumnMoved;
479:     property OnCellClick: TDBGridClickEvent read FOnCellClick write FOnCellClick;
    property OnTitleClick: TDBGridClickEvent read FOnTitleClick write FOnTitleClick;
    property OnCellClick: TDBGridClickEvent read FOnCellClick write FOnCellClick;
480:     property OnTitleClick: TDBGridClickEvent read FOnTitleClick write FOnTitleClick;
  //public
    property DataSource: TDataSource read GetDataSource write SetDataSource;
500:     property Columns: TDBGridColumns read FColumns write SetColumns;
    property Options: TDBGridOptions read FOptions write SetOptions
    property Columns: TDBGridColumns read FColumns write SetColumns;
501:     property Options: TDBGridOptions read FOptions write SetOptions
      default [dgEditing, dgTitles, dgIndicator, dgColumnResize, dgColLines,

508:   TDBGrid = class(TCustomDBGrid)
  public

611: { TDBGridInplaceEdit }


613: { TDBGridInplaceEdit adds support for a button on the in-place editor,
  which can be used to drop down a table-based lookup list, a stringlist-based

620:   TDBGridInplaceEdit = class(TInplaceEditList)
  private

635: constructor TDBGridInplaceEdit.Create(Owner: TComponent);
begin

641: procedure TDBGridInplaceEdit.CloseUp(Accept: Boolean);
var

680: procedure TDBGridInplaceEdit.DoEditButtonClick;
begin

685: procedure TDBGridInplaceEdit.DropDown;
var

714: procedure TDBGridInplaceEdit.UpdateContents;
var
  Grid := nil;
1143:   if Assigned(Collection) and (Collection is TDBGridColumns) then
    Grid := TDBGridColumns(Collection).Grid;
  if Assigned(Collection) and (Collection is TDBGridColumns) then
1144:     Grid := TDBGridColumns(Collection).Grid;
  if Assigned(Grid) then Grid.BeginLayout;
begin
1377:   if Assigned(Collection) and (Collection is TDBGridColumns) then
    Result := TDBGridColumns(Collection).Grid
  if Assigned(Collection) and (Collection is TDBGridColumns) then
1378:     Result := TDBGridColumns(Collection).Grid
  else

1826: { TDBGridColumns }


1828: constructor TDBGridColumns.Create(Grid: TCustomDBGrid; ColumnClass: TColumnClass);
begin

1834: function TDBGridColumns.Add: TColumn;
begin

1839: function TDBGridColumns.GetColumn(Index: Integer): TColumn;
begin

1844: function TDBGridColumns.GetOwner: TPersistent;
begin

1849: procedure TDBGridColumns.LoadFromFile(const Filename: string);
var
  private
1864:     FColumns: TDBGridColumns;
  published
  published
1866:     property Columns: TDBGridColumns read FColumns write FColumns;
  end;

1869: procedure TDBGridColumns.LoadFromStream(S: TStream);
var

1884: procedure TDBGridColumns.RestoreDefaults;
var

1897: procedure TDBGridColumns.RebuildColumns;


1928: procedure TDBGridColumns.SaveToFile(const Filename: string);
var

1940: procedure TDBGridColumns.SaveToStream(S: TStream);
var

1953: procedure TDBGridColumns.SetColumn(Index: Integer; Value: TColumn);
begin

1958: procedure TDBGridColumns.SetState(NewState: TDBGridColumnsState);
begin

1967: procedure TDBGridColumns.Update(Item: TCollectionItem);
var

1984: function TDBGridColumns.InternalAdd: TColumn;
begin

1990: function TDBGridColumns.GetState: TDBGridColumnsState;
begin
begin
1992:   Result := TDBGridColumnsState((Count > 0) and Items[0].IsStored);
end;

2422: function TCustomDBGrid.CreateColumns: TDBGridColumns;
begin
begin
2424:   Result := TDBGridColumns.Create(Self, TColumn);
end;
begin
2434:   Result := TDBGridInplaceEdit.Create(Self);
end;
  StoreIt: Boolean;
2570:   vState: TDBGridColumnsState;
begin
begin
2923:   TDBGridInplaceEdit(InplaceEditor).FUseDataList := False;
  Column := Columns[SelectedIndex];
             Result := esPickList;
2944:              TDBGridInplaceEdit(InplaceEditor).FUseDataList := True;
           end;

3756: procedure TCustomDBGrid.SetColumns(Value: TDBGridColumns);
begin

3808: procedure TCustomDBGrid.SetOptions(Value: TDBGridOptions);
const
  NewGridOptions: TGridOptions;
3814:   ChangedOptions: TDBGridOptions;
begin
  begin
4140:     TDBGridInplaceEdit(InplaceEditor).ImeName := ImeName;
    TDBGridInplaceEdit(InplaceEditor).ImeMode := ImeMode;
    TDBGridInplaceEdit(InplaceEditor).ImeName := ImeName;
4141:     TDBGridInplaceEdit(InplaceEditor).ImeMode := ImeMode;
  end;


********** File 2: E:\maxbox3\mXGit39988\maxbox3\source\uPSI_DBCGrids.pas

115:     RegisterProperty('OnCellClick', 'TDBGridClickEvent', iptrw);
    RegisterProperty('OnTitleClick', 'TDBGridClickEvent', iptrw);
    RegisterProperty('OnCellClick', 'TDBGridClickEvent', iptrw);
116:     RegisterProperty('OnTitleClick', 'TDBGridClickEvent', iptrw);
    RegisterProperty('ONKEYDOWN', 'TKeyEvent', iptrw);


********** File 3: E:\maxbox3\mXGit39988\maxbox3\source\uPSI_DBGrids.pas
{ compile-time registration functions }
25: procedure SIRegister_TDBGrid(CL: TPSPascalCompiler);
procedure SIRegister_TCustomDBGrid(CL: TPSPascalCompiler);
procedure SIRegister_TGridDataLink(CL: TPSPascalCompiler);
29: procedure SIRegister_TDBGridColumns(CL: TPSPascalCompiler);
procedure SIRegister_TColumn(CL: TPSPascalCompiler);
{ run-time registration functions }
35: procedure RIRegister_TDBGrid(CL: TPSRuntimeClassImporter);
procedure RIRegister_TCustomDBGrid(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGridDataLink(CL: TPSRuntimeClassImporter);
39: procedure RIRegister_TDBGridColumns(CL: TPSRuntimeClassImporter);
procedure RIRegister_TColumn(CL: TPSRuntimeClassImporter);
(*----------------------------------------------------------------------------*)
73: procedure SIRegister_TDBGrid(CL: TPSPascalCompiler);
begin
begin
75:   //with RegClassS(CL,'TCustomDBGrid', 'TDBGrid') do
  with CL.AddClassN(CL.FindClass('TCustomDBGrid'),'TDBGrid') do begin
  //with RegClassS(CL,'TCustomDBGrid', 'TDBGrid') do
76:   with CL.AddClassN(CL.FindClass('TCustomDBGrid'),'TDBGrid') do begin
    RegisterPublishedProperties;

111:     RegisterProperty('Columns', 'TDBGridColumns', iptrw);
   // RegisterProperty('SelectedRows','TBookmarkList',iptr);
    RegisterProperty('Parent', 'TWinControl', iptRW);
119:     RegisterProperty('Options', 'TDBGridOptions', iptRW);
    RegisterProperty('Canvas', 'TCanvas', iptr);
    RegisterMethod('Procedure ColExit');
164:     RegisterMethod('Function CreateColumns : TDBGridColumns');
    RegisterMethod('Function CreateDataLink : TGridDataLink');
    RegisterMethod('Function UseRightToLeftAlignmentForField( const AField : TField; Alignment : TAlignment) : Boolean');
185:     //RegisterProperty('Columns', 'TDBGridColumns', iptrw);
    RegisterProperty('DefaultDrawing', 'Boolean', iptrw);
    RegisterProperty('LayoutLock', 'Byte', iptr);
190:     //RegisterProperty('Options', 'TDBGridOptions', iptrw);
    RegisterProperty('ReadOnly', 'Boolean', iptrw);
    RegisterProperty('OnColumnMoved', 'TMovedEvent', iptrw);
204:     RegisterProperty('OnCellClick', 'TDBGridClickEvent', iptrw);
    RegisterProperty('OnTitleClick', 'TDBGridClickEvent', iptrw);
    RegisterProperty('OnCellClick', 'TDBGridClickEvent', iptrw);
205:     RegisterProperty('OnTitleClick', 'TDBGridClickEvent', iptrw);
    RegisterProperty('ONKEYDOWN', 'TKeyEvent', iptrw);
(*----------------------------------------------------------------------------*)
259: procedure SIRegister_TDBGridColumns(CL: TPSPascalCompiler);
begin
begin
261:   //with RegClassS(CL,'TCollection', 'TDBGridColumns') do
  with CL.AddClassN(CL.FindClass('TCollection'),'TDBGridColumns') do begin
  //with RegClassS(CL,'TCollection', 'TDBGridColumns') do
262:   with CL.AddClassN(CL.FindClass('TCollection'),'TDBGridColumns') do begin
    RegisterMethod('Constructor Create( Grid : TCustomDBGrid; ColumnClass : TColumnClass)');
    RegisterMethod('Procedure SaveToStream( S : TStream)');
271:     RegisterProperty('State', 'TDBGridColumnsState', iptrw);
    RegisterProperty('Grid', 'TCustomDBGrid', iptr);
  CL.AddClassN(CL.FindClass('TOBJECT'),'TColumn');
350:   //CL.AddClassN(CL.FindClass('TOBJECT'),'TDBGridColumns');
   CL.AddClassN(CL.FindClass('TOBJECT'),'TCustomDBGrid');
  //CL.AddTypeS('TColumnClass', 'class of TColumn');
356:   CL.AddTypeS('TDBGridColumnsState', '( csDefault, csCustomized )');
  SIRegister_TDBGridColumns(CL);
  CL.AddTypeS('TDBGridColumnsState', '( csDefault, csCustomized )');
357:   SIRegister_TDBGridColumns(CL);
  SIRegister_TGridDataLink(CL);
  SIRegister_TBookmarkList(CL);
360:   CL.AddTypeS('TDBGridOption', '( dgEditing, dgAlwaysShowEditor, dgTitles, dgIn'
   +'dicator, dgColumnResize, dgColLines, dgRowLines, dgTabs, dgRowSelect, dgAl'
   +'waysShowSelection, dgConfirmDelete, dgCancelOnExit, dgMultiSelect )');
363:   CL.AddTypeS('TDBGridOptions', 'set of TDBGridOption');
  CL.AddTypeS('TDrawDataCellEvent', 'Procedure ( Sender : TObject; const Rect :'
   +' : TRect; DataCol : Integer; Column : TColumn; State : TGridDrawState)');
368:   CL.AddTypeS('TDBGridClickEvent', 'Procedure ( Column : TColumn)');
  SIRegister_TCustomDBGrid(CL);
  SIRegister_TCustomDBGrid(CL);
370:   SIRegister_TDBGrid(CL);
 CL.AddConstantN('IndicatorWidth','LongInt').SetInt( 11);

380: procedure TBitmapCanvas_R(Self: TDBGrid; var T: TCanvas); begin T:= Self.Canvas; end;

(*----------------------------------------------------------------------------*)
391: procedure TCustomDBGridColumns_W(Self: TCustomDBGrid; const T: TDBGridColumns);
begin Self.Columns:= T;
(*----------------------------------------------------------------------------*)
396: procedure TCustomDBGridColumns_R(Self: TCustomDBGrid; var T: TDBGridColumns);
begin T:= Self.Columns;
 (*--------------------------template--------------------------------------------*)
401: procedure TCustomDBGridOptions_W(Self: TCustomDBGrid; const T: TDBGridOptions);
begin Self.Options:= T;
(*----------------------------------------------------------------------------*)
406: procedure TCustomDBGridOptions_R(Self: TCustomDBGrid; var T: TDBGridOptions);
begin T:= Self.Options;

435: procedure TCustomDBSelectedRows_R(Self: TDBGrid; var T: TBookmarkList);
begin T:= Self.selectedRows;
(*----------------------------------------------------------------------------*)
442: procedure TCustomDBGridOnTitleClick_W(Self: TCustomDBGrid; const T: TDBGridClickEvent);
begin Self.OnTitleClick := T; end;
(*----------------------------------------------------------------------------*)
446: procedure TCustomDBGridOnTitleClick_R(Self: TCustomDBGrid; var T: TDBGridClickEvent);
begin T := Self.OnTitleClick; end;
(*----------------------------------------------------------------------------*)
450: procedure TCustomDBGridOnCellClick_W(Self: TCustomDBGrid; const T: TDBGridClickEvent);
begin Self.OnCellClick := T; end;
(*----------------------------------------------------------------------------*)
454: procedure TCustomDBGridOnCellClick_R(Self: TCustomDBGrid; var T: TDBGridClickEvent);
begin T := Self.OnCellClick; end;
(*----------------------------------------------------------------------------*)
518: procedure TCustomDBGridColor_W(Self: TDBGrid; const T: TColor);
begin Self.Color:= T; end;
(*----------------------------------------------------------------------------*)
522: procedure TCustomDBGridColor_R(Self: TDBGrid; var T: TColor);
begin T := Self.Color; end;
(*----------------------------------------------------------------------------*)
526: procedure TCustomDBGridBrush_W(Self: TDBGrid; const T: TBrush);
begin //Self.Brush:= T;

557: procedure TCustomDBGridBorderStyle_W(Self: TDBGrid; const T: tborderstyle);
begin Self.borderstyle:= T; end;
(*----------------------------------------------------------------------------*)
561: procedure TCustomDBGridborderstyle_R(Self: TDBGrid; var T: tborderstyle);
begin T := Self.borderstyle; end;

564: procedure TCustomDBGridFont_W(Self: TDBGrid; const T: TFont);
begin Self.font:= T; end;
(*----------------------------------------------------------------------------*)
568: procedure TCustomDBGridfont_R(Self: TDBGrid; var T: tfont);
begin T := Self.font; end;
(*----------------------------------------------------------------------------*)
590: {procedure TCustomDBGridOptions_W(Self: TCustomDBGrid; const T: TDBGridOptions);
begin Self.Options := T; end;
(*----------------------------------------------------------------------------*)
594: procedure TCustomDBGridOptions_R(Self: TCustomDBGrid; var T: TDBGridOptions);
begin T := Self.Options; end;}
(*----------------------------------------------------------------------------*)
618: {procedure TCustomDBGridColumns_W(Self: TCustomDBGrid; const T: TDBGridColumns);
begin Self.Columns := T; end;
(*----------------------------------------------------------------------------*)
622: procedure TCustomDBGridColumns_R(Self: TCustomDBGrid; var T: TDBGridColumns);
begin T := Self.Columns; end;}
(*----------------------------------------------------------------------------*)
684: procedure TDBGridColumnsItems_W(Self: TDBGridColumns; const T: TColumn; const t1: Integer);
begin Self.Items[t1] := T; end;
(*----------------------------------------------------------------------------*)
688: procedure TDBGridColumnsItems_R(Self: TDBGridColumns; var T: TColumn; const t1: Integer);
begin T := Self.Items[t1]; end;
(*----------------------------------------------------------------------------*)
692: procedure TDBGridColumnsGrid_R(Self: TDBGridColumns; var T: TCustomDBGrid);
begin T := Self.Grid; end;
(*----------------------------------------------------------------------------*)
696: procedure TDBGridColumnsState_W(Self: TDBGridColumns; const T: TDBGridColumnsState);
begin Self.State := T; end;
(*----------------------------------------------------------------------------*)
700: procedure TDBGridColumnsState_R(Self: TDBGridColumns; var T: TDBGridColumnsState);
begin T := Self.State; end;
begin Self.ONCLICK := T; end;
889: procedure TITEMONCLICK_R(Self: TDBGrid; var T: TNOTIFYEVENT);
begin T := Self.ONCLICK; end; }

892: procedure TITEMONDBLCLICK_W(Self: TDBGrid; const T: TNOTIFYEVENT);
begin Self.ONDBLCLICK := T; end;
begin Self.ONDBLCLICK := T; end;
894: procedure TITEMONDBLCLICK_R(Self: TDBGrid; var T: TNOTIFYEVENT);
begin T := Self.ONDBLCLICK; end;
begin T := Self.ONDBLCLICK; end;
896: procedure TITEMONENTER_W(Self: TDBGrid; const T: TNOTIFYEVENT);
begin Self.ONENTER:= T; end;
begin Self.ONENTER:= T; end;
898: procedure TITEMONENTER_R(Self: TDBGrid; var T: TNOTIFYEVENT);
begin T := Self.ONENTER; end;
begin T := Self.ONENTER; end;
900: procedure TITEMONEXIT_W(Self: TDBGrid; const T: TNOTIFYEVENT);
begin Self.ONEXIT:= T; end;
begin Self.ONEXIT:= T; end;
902: procedure TITEMONEXIT_R(Self: TDBGrid; var T: TNOTIFYEVENT);
begin T := Self.ONEXIT; end;
(*----------------------------------------------------------------------------*)
907: procedure RIRegister_TDBGrid(CL: TPSRuntimeClassImporter);
begin
begin
909:   with CL.Add(TDBGrid) do begin
     RegisterPropertyHelper(@TCustomDBSelectedRows_R,nil,'SelectedRows');
(*----------------------------------------------------------------------------*)
1083: procedure RIRegister_TDBGridColumns(CL: TPSRuntimeClassImporter);
begin
begin
1085:   with CL.Add(TDBGridColumns) do begin
    RegisterConstructor(@TDBGridColumns.Create, 'Create');
  with CL.Add(TDBGridColumns) do begin
1086:     RegisterConstructor(@TDBGridColumns.Create, 'Create');
    RegisterMethod(@TDBGridColumns.Add, 'Add');
    RegisterConstructor(@TDBGridColumns.Create, 'Create');
1087:     RegisterMethod(@TDBGridColumns.Add, 'Add');
    RegisterMethod(@TDBGridColumns.LoadFromFile, 'LoadFromFile');
    RegisterMethod(@TDBGridColumns.Add, 'Add');
1088:     RegisterMethod(@TDBGridColumns.LoadFromFile, 'LoadFromFile');
    RegisterMethod(@TDBGridColumns.LoadFromStream, 'LoadFromStream');
    RegisterMethod(@TDBGridColumns.LoadFromFile, 'LoadFromFile');
1089:     RegisterMethod(@TDBGridColumns.LoadFromStream, 'LoadFromStream');
    RegisterMethod(@TDBGridColumns.RestoreDefaults, 'RestoreDefaults');
    RegisterMethod(@TDBGridColumns.LoadFromStream, 'LoadFromStream');
1090:     RegisterMethod(@TDBGridColumns.RestoreDefaults, 'RestoreDefaults');
    RegisterMethod(@TDBGridColumns.RebuildColumns, 'RebuildColumns');
    RegisterMethod(@TDBGridColumns.RestoreDefaults, 'RestoreDefaults');
1091:     RegisterMethod(@TDBGridColumns.RebuildColumns, 'RebuildColumns');
    RegisterMethod(@TDBGridColumns.SaveToFile, 'SaveToFile');
    RegisterMethod(@TDBGridColumns.RebuildColumns, 'RebuildColumns');
1092:     RegisterMethod(@TDBGridColumns.SaveToFile, 'SaveToFile');
    RegisterMethod(@TDBGridColumns.SaveToStream, 'SaveToStream');
    RegisterMethod(@TDBGridColumns.SaveToFile, 'SaveToFile');
1093:     RegisterMethod(@TDBGridColumns.SaveToStream, 'SaveToStream');
    RegisterPropertyHelper(@TDBGridColumnsState_R,@TDBGridColumnsState_W,'State');
    RegisterMethod(@TDBGridColumns.SaveToStream, 'SaveToStream');
1094:     RegisterPropertyHelper(@TDBGridColumnsState_R,@TDBGridColumnsState_W,'State');
    RegisterPropertyHelper(@TDBGridColumnsGrid_R,nil,'Grid');
    RegisterPropertyHelper(@TDBGridColumnsState_R,@TDBGridColumnsState_W,'State');
1095:     RegisterPropertyHelper(@TDBGridColumnsGrid_R,nil,'Grid');
    RegisterPropertyHelper(@TDBGridColumnsItems_R,@TDBGridColumnsItems_W,'Items');
    RegisterPropertyHelper(@TDBGridColumnsGrid_R,nil,'Grid');
1096:     RegisterPropertyHelper(@TDBGridColumnsItems_R,@TDBGridColumnsItems_W,'Items');
  end;
  RIRegister_TColumn(CL);
1167:   RIRegister_TDBGridColumns(CL);
  RIRegister_TGridDataLink(CL);
  RIRegister_TCustomDBGrid(CL);
1171:   RIRegister_TDBGrid(CL);
end;


********** File 4: E:\maxbox3\mXGit39988\maxbox3\source\fundamentals_lib\ExcelExport.pas
    function ExportTable(ADataSet: TDataSet; AFileName: string): Boolean;
22:     function ExportGrid(AGrid: TDBGrid; AFileName: string): Boolean;
  end;
// ---------------------------------------------------------------------------------------------------------------------
524: function TJsExcelExport.ExportGrid(AGrid: TDBGrid; AFileName: string): Boolean;
var MaxCols:integer;


********** File 5: E:\maxbox3\mXGit39988\maxbox3\source\fundamentals_lib\JvDBGrid.pas
  private
190:     FParentDBGrid: TJvDBGrid;
    function GetItem(Index: Integer): TJvDBGridControl;
  public
196:     constructor Create(ParentDBGrid: TJvDBGrid);
    function Add: TJvDBGridControl;
    procedure RestoreColumnsLayout(const AppStorage: TJvCustomAppStorage; const Section: string);
335:     function GetOptions: TDBGridOptions;
    procedure SetOptions(Value: TDBGridOptions);
    function GetOptions: TDBGridOptions;
336:     procedure SetOptions(Value: TDBGridOptions);
    function GetMasterColumn(ACol, ARow: Longint): TColumn;
    property AutoSort: Boolean read FAutoSort write FAutoSort default True;
510:     property Options: TDBGridOptions read GetOptions write SetOptions default DefJvGridOptions;
    property FixedCols: Integer read GetFixedCols write SetFixedCols default 0;
      if ActiveList = DataList then
771:         with TCustomDBGrid(Grid), TDBGrid(Grid).Columns[SelectedIndex].Field do
        begin
      if (not VarIsNull(ListValue)) and EditCanModify then
779:         with TCustomDBGrid(Grid), TDBGrid(Grid).Columns[SelectedIndex].Field do
          Text := ListValue;
  begin
795:     with TDBGrid(Grid) do
      Column := Columns[SelectedIndex];
  end;
835:   with TDBGrid(Grid) do
    Column := Columns[SelectedIndex];
  begin
868:     Result := dgAlwaysShowEditor in TDBGrid(Grid).Options;
  end;

942: constructor TJvDBGridControls.Create(ParentDBGrid: TJvDBGrid);
begin
  inherited Create(TJvDBGridControl);
945:   FParentDBGrid := ParentDBGrid;
end;
begin
966:   Result := FParentDBGrid;
end;

1738: function TJvDBGrid.GetOptions: TDBGridOptions;
begin

1752: procedure TJvDBGrid.SetOptions(Value: TDBGridOptions);
var


********** File 6: E:\maxbox3\mXGit39988\maxbox3\source\fundamentals_lib\JvDBGridExport.pas

44:   EJvExportDBGridException = class(EJVCLException);
  TJvWordGridFormat = $10..$17;
  private
79:     FGrid: TDBGrid;
    FColumnCount: Integer;
    property UseFieldGetText: Boolean read FUseFieldGetText write FUseFieldGetText default False;
106:     property Grid: TDBGrid read FGrid write FGrid;
    property FileName: TFileName read FFileName write FFileName;
  if not Assigned(Grid) then
340:     raise EJvExportDBGridException.CreateRes(@RsEGridIsUnassigned);
  if not Assigned(Grid.DataSource) or not Assigned(Grid.DataSource.DataSet) then
  if not Assigned(Grid.DataSource) or not Assigned(Grid.DataSource.DataSet) then
342:     raise EJvExportDBGridException.CreateRes(@RsEDataSetDataSourceIsUnassigned);
//  if FileName = '' then
//  if FileName = '' then
344: //    raise EJvExportDBGridException.Create(RsFilenameEmpty);
  CheckVisibleColumn;
      HandleException;
439: //      raise EJvExportDBGridException.Create(RsNoWordApplication);
    end;
  if not Assigned(Grid) then
786:     raise EJvExportDBGridException.CreateRes(@RsEGridIsUnassigned);
  if not Assigned(Grid.DataSource) or not Assigned(Grid.DataSource.DataSet) then
  if not Assigned(Grid.DataSource) or not Assigned(Grid.DataSource.DataSet) then
788:     raise EJvExportDBGridException.CreateRes(@RsEDataSetDataSourceIsUnassigned);
  CheckVisibleColumn;


********** File 7: E:\maxbox3\mXGit39988\maxbox3\source\fundamentals_lib\uPSI_ExcelExport.pas
    RegisterMethod('Function ExportTable( ADataSet : TDataSet; AFileName : string) : Boolean');
58:     RegisterMethod('Function ExportGrid( AGrid : TDBGrid; AFileName : string) : Boolean');
  end;


********** File 8: E:\maxbox3\mXGit39988\maxbox3\source\fundamentals_lib\uPSI_JvDBGridExport.pas
    RegisterProperty('UseFieldGetText', 'Boolean', iptrw);
242:     RegisterProperty('Grid', 'TDBGrid', iptrw);
    RegisterProperty('FileName', 'TFileName', iptrw);
  CL.AddTypeS('TWordOrientation', '( woPortrait, woLandscape )');
257:   CL.AddClassN(CL.FindClass('TOBJECT'),'EJvExportDBGridException');
  CL.AddTypeS('TOleServerClose', '( scNever, scNewInstance, scAlways )');
(*----------------------------------------------------------------------------*)
475: procedure TJvCustomDBGridExportGrid_W(Self: TJvCustomDBGridExport; const T: TDBGrid);
begin Self.Grid := T; end;
(*----------------------------------------------------------------------------*)
479: procedure TJvCustomDBGridExportGrid_R(Self: TJvCustomDBGridExport; var T: TDBGrid);
begin T := Self.Grid; end;
begin
604:   with CL.Add(EJvExportDBGridException) do
  RIRegister_TJvCustomDBGridExport(CL);


********** File 9: E:\maxbox3\mXGit39988\maxbox3\source\REST\AdoMain.pas
    DetailDataSource: TDataSource;
27:     DetailGrid: TDBGrid;
    MasterGrid: TDBGrid;
    DetailGrid: TDBGrid;
28:     MasterGrid: TDBGrid;
    DBMemo1: TDBMemo;
    TestButton: TButton;
180:     FieldSchemaGrid: TDBGrid;
    FieldSchemaSource: TDataSource;
      end;
789:       if ActiveControl is TDBGrid then
        GridColEnter(TDBGrid(ActiveControl));
      if ActiveControl is TDBGrid then
790:         GridColEnter(TDBGrid(ActiveControl));
    end;
begin
825:   Field := (Sender as TDBGrid).SelectedField;
  if Assigned(Field) then
  begin
828:     (Sender as TDBGrid).Hint := Field.ClassName;
    StatusBar.Panels[0].Text := Field.ClassName;
  if not Assigned(FActiveDataSet) then Exit;
1639:   ActiveDataSource := (Sender as TDBGrid).DataSource;
  DBNavigator1.DataSource := ActiveDataSource;


********** File 10: E:\maxbox3\mXGit39988\maxbox3\source\REST\JvDBGrid.pas
  private
193:     FParentDBGrid: TJvDBGrid;
    function GetItem(Index: Integer): TJvDBGridControl;
  public
199:     constructor Create(ParentDBGrid: TJvDBGrid);
    function Add: TJvDBGridControl;
    procedure RestoreColumnsLayout(const AppStorage: TJvCustomAppStorage; const Section: string);
338:     function GetOptions: TDBGridOptions;
    procedure SetOptions(Value: TDBGridOptions);
    function GetOptions: TDBGridOptions;
339:     procedure SetOptions(Value: TDBGridOptions);
    function GetMasterColumn(ACol, ARow: Longint): TColumn;
    property AutoSort: Boolean read FAutoSort write FAutoSort default True;
513:     property Options: TDBGridOptions read GetOptions write SetOptions default DefJvGridOptions;
    property FixedCols: Integer read GetFixedCols write SetFixedCols default 0;
      if ActiveList = DataList then
774:         with TCustomDBGrid(Grid), TDBGrid(Grid).Columns[SelectedIndex].Field do
        begin
      if (not VarIsNull(ListValue)) and EditCanModify then
782:         with TCustomDBGrid(Grid), TDBGrid(Grid).Columns[SelectedIndex].Field do
          Text := ListValue;
  begin
798:     with TDBGrid(Grid) do
      Column := Columns[SelectedIndex];
  end;
838:   with TDBGrid(Grid) do
    Column := Columns[SelectedIndex];
  begin
871:     Result := dgAlwaysShowEditor in TDBGrid(Grid).Options;
  end;

945: constructor TJvDBGridControls.Create(ParentDBGrid: TJvDBGrid);
begin
  inherited Create(TJvDBGridControl);
948:   FParentDBGrid := ParentDBGrid;
end;
begin
969:   Result := FParentDBGrid;
end;

1741: function TJvDBGrid.GetOptions: TDBGridOptions;
begin

1755: procedure TJvDBGrid.SetOptions(Value: TDBGridOptions);
var


********** File 11: E:\maxbox3\mXGit39988\maxbox3\source\REST\JvDBUltimGrid.pas

159:   TJvDBUltimGrid = class(TDBGrid)
  private


********** File 12: E:\maxbox3\mXGit39988\maxbox3\source\REST\PRINTGRI.PAS
    tmpFile         :Text;
32:     FDBGrid         :TDBGrid;
    FHeaderInTitle  :Boolean;
    { Published declarations }
77:     property DBGrid:TDBGrid read FDBGrid write FDBGrid;
    property PrintAdmTitle:String read FPrintADMTitle write FPrintADMTitle;


********** File 13: E:\maxbox3\mXGit39988\maxbox3\source\REST\uPSI_Printgri.pas
    RegisterProperty('LinesFont', 'TFont', iptrw);
74:     RegisterProperty('DBGrid', 'TDBGrid', iptrw);
    RegisterProperty('PrintAdmTitle', 'String', iptrw);
(*----------------------------------------------------------------------------*)
239: procedure TPrintGridDBGrid_W(Self: TPrintGrid; const T: TDBGrid);
begin Self.DBGrid := T; end;
(*----------------------------------------------------------------------------*)
243: procedure TPrintGridDBGrid_R(Self: TPrintGrid; var T: TDBGrid);
begin T := Self.DBGrid; end;

Found 13 files of: 15:03:2015
"Search and Found for TDBGrid
"Search Total Count of Files/Words: 2292
"Found of Words: 202
"Found of Files: 13
0 h run time is: 00:00:730
