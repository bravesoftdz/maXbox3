program DataSetDemo_BetaTester;

// this is in progress with no simple solution at first sight!
// _28 interpreter of runmax

var dataSet1: TDataSet;
    myDataSource: TDataSource;
    //my: TClientDataset;
    //my: TDatabase;

const E6= 1000000;    


procedure Define_Let_OpenDB;
var i: integer;
begin
  //Dataset1 := aTable1;                 
  //dataSet1.DataSource:= dataSet1;
  //dataset1.connectionstring
  // field definitions
  //MyDataSource := TDataSource.Create(Self);
  dataSet1:= TDataSet.create(self);
  with dataSet1 do begin
    FieldDefs.Clear;
    FieldDefs.Add('ID', ftInteger, 0, True);
    //FieldDefs.Add('TimeStamp', ftDateTime);
    FieldDefs.Add('Status', ftInteger, 0, True);
    FieldDefs.Add('Created', ftDateTime,0, true);
    FieldDefs.Add('Volume', ftFloat, 0, True);
    //CreateDataSet;
    //Post;
    Close;
    //myDataSource.dataSet:= dataSet1;
    //Open;
    //FieldDefs.Add('Folder', ftBoolean, 1, True);
  end;
    //dataSet1.datasource.open;
    
    {dataSet1.open;
    dataSet1.active:= true;
    dataSet1.state; }
    //dataSet1.createDataSet;
  for i := 1 to 10 do begin
    dataSet1.Append;
    with dataSet1 do begin
      FieldByName('ID').AsInteger := i;
      FieldByName('Status').AsString := 'Code'+IntToStr(i);
      FieldByName('Created').AsDateTime := Date();
      FieldByName('Volume').AsFloat := Random(10000);
      Post;
    end  
  end;
  
  for i := 1 to 10 do begin
    dataSet1.open
    writeln(inttoStr(dataSet1.FieldByName('ID').asInteger))
  end;  
  
{table.FieldDefs.Add('ID', ftInteger, 0, False);
table.FieldDefs.Add('Status', ftString, 10, False);
table.FieldDefs.Add('Created', ftDate, 0, False);
table.FieldDefs.Add('Volume', ftFloat, 0, False);}
  //DBGrid1.Datasource := Datasource1;
  //myset.datasource:=  myset;
  //.open
end;  


procedure erdeMondEquation;
var howmuch, howlong, size, a,b,c: single;
    distance: integer;
begin
  //writeln(floattostr(ln(1024)/ln(2)))
  //writeln(floattostr(exp(1)))
  howlong:= power(2,40.8042)*0.2
  writeln(floattostr(howlong/1000000))
  howmuch:= ln(384000 / 0.2*E6)/ln(2) 
  writeln(floattostr(power(2,howmuch)*0.2 /E6))
  //writeln(floattostr(384000/power(2,42)*E6))
end;         

procedure simulatemoon;
var papersize: single;
    counter: integer;
begin
  papersize:= 0.2;
  counter:= 0;
  repeat
    papersize:= (papersize * 2);
    inc(counter);
    writeln(floattosTr((papersize/E6)))
  until (papersize/E6) > (384000)
    writeln(inttoStr(counter))
end;  

begin
  Define_Let_OpenDB;
  //erdeMondEquation;
  //simulateMoon;
end.


I noticed whenever I start my laptop (running XP SP3), it automatically connects to the following two IP addresses for a brief seconds.

"netstat -a" results:
TCP SOCRATEASE:1056 60-241-16-172.static.tpgi.com.au:888 SYN_SENT
TCP SOCRATEASE:1057 122.14.178.61.dail.lz.gs.dynamic.163data.com.cn:6666 SYN_SENT

sometimes it's:
TCP SOCRATEASE:1077 60.241.16.172:888 ESTABLISHED

I brought up "msconfig" window, cleaned and double checked the "startup" tab and "servies" tab, turned off all-non essential non-Microsoft services and etc.
Then I reboot the machine and run the "netstat -a" again, but the two suspicious TCP connection still show up.

I ran the Kaspersky on my computer, it came up with nothing.
I ran the Ad-Aware, still nothing.

clearly, 60.241.16.172 belongs to "tpgi.com.au", an Australian ISP.
122.14.178.61 belongs to 163data.com.cn, an Chinese ISP.

so my question is:

what applications/viruses would need to "phone home" the two suspicious IP addresses?

And are there any logginig tools for me to find out what programs in my computer is trying to connect to those IP addresses?

The DOS "netstat" command can only show me the active IP connections, but it doesn't say who's sending them.

procedure TForm1.FormShow(Sender: TObject);
var
  i:integer;
begin
  i:=1;
  while i <= ADODataSet1.RecordCount do
  begin
     ComboBox1.Items.Add(ADODataSet1.Fieldbyname('name').AsString);
     ADODataSet1.Next;
   i:=i+1;
  end;
end; 

end. 

//In this example we use dbdemos database with Country table  

begin
    Tabelle.FieldDefs.Add('Ident',ftInteger,0,True); // ich mach mir immer einen eigenen Ident
    Tabelle.FieldDefs.Add('Vorname',ftString,50,False); // Tabellenfeld Vorname 50 Zeichen
    Tabelle.FieldDefs.Add('Name',ftString,50,False); // Tabellenfeld Name 50 Zeichen
    Tabelle.FieldDefs.Add('Strasse',ftString,30,False); // Tabellenfeld Strasse 30 Zeichen
    Tabelle.FieldDefs.Add('PLZ',ftString,6,False); // usw
    Tabelle.FieldDefs.Add('Ort',ftString,30,False);
    Tabelle.FieldDefs.Add('Telefon',ftString,30,False);
    Tabelle.FieldDefs.Add('EMail',ftString,30,False);
    Tabelle.IndexDefs.Add('', 'Ident', [ixPrimary, ixUnique]); // und setzte ihn auch als einziartig
    Tabelle.CreateTable;
    end;

object ADODataSet1: TADODataSet
    ConnectionString =
      'Provider=Microsoft.Jet.OLEDB.4.0;Data Source=C:\Program Files\Co' +
      'mmon Files\Borland Shared\Data\dbdemos.mdb;Persist Security Info' +
      '=False'
    CommandText = 'select Name  from country'
  end
  
  
TABLE 16.1. PRIMARY TDataSet PROPERTIES.

Property 	Description
Active 	Opens the dataset when set to True and closes it when set to False.
AutoCalcFields 	Determines when calculated fields are calculated.
Bof 	Returns True if the cursor is on the first record in the dataset and False if it isn't.
CachedUpdates 	When True, updates are held in a cache on the client machine until an entire transaction is complete. When False, all changes to the database are made on a record-by-record basis.
CanModify 	Determines whether the user can edit the data in the dataset.
DataSource 	The DataSource component associated with this dataset.
DatabaseName 	The name of the database that is currently being used.
Eof Returns True if the cursor is at the end of the file and False if it isn't.
FieldCount 	The number of fields in the dataset. Because a dataset might be dynamic (the results of a query, for example), the number of fields can vary from one dataset request to the next.
Fields 	An array of TFields objects that contains information about the fields in the dataset.
FieldValues 	Returns the value of the specified field for the current record. The value is represented as a Variant.
Filter 	An expression that determines which records a dataset contains.
Filtered When True, the dataset is filtered based on either the Filter property or the OnFilterRecord event. When False, the entire dataset is returned.
FilterOptions 	Determines how filters are applied.
Found 	Indicates whether a find operation is successful.
Handle 	A BDE cursor handle to the dataset. This is used only when making direct calls to the BDE.
Modified Indicates whether the current record has been modified.
RecNo 	The current record number in the dataset.
RecordCount 	Returns the number of records in the dataset.
State 	Returns the current state of the dataset (dsEdit, dsBrowse, dsInsert, and so on).
UpdateObject 	Specifies the TUpdateObject component to use for cached updates.
UpdatesPending 	When True, the cached update buffer contains edits not yet applied to the dataset.


TABLE 16.2. PRIMARY TDataSet METHODS.

Method 	Description
Append 	Creates an empty record and adds it to the end of the dataset.
AppendRecord 	Appends a record to the end of the dataset with the given field data and posts the edit.
ApplyUpdates 	Instructs the database to apply any pending cached updates. Updates are not actually written until the CommitUpdates method is called.
Cancel 	Cancels any edits to the current record if the edits have not yet been posted.
CancelUpdates 	Cancels any pending cached updates.
ClearFields 	Clears the contents of all fields in the current record.
CommitUpdates 	Instructs the database to apply updates and clear the cached updates buffer.
Close 	Closes the dataset.
Delete 	Deletes the current record.
DisableControls 	Disables input for all data controls associated with the dataset.
Edit 	Enables editing of the current record.
EnableControls 	Enables input for all data controls associated with the dataset.
FetchAll 	Gets all records from the cursor to the end of the dataset and stores them locally.
FieldByName 	Returns the TField pointer for a field name.

FindFirst

	

Finds the first record that matches the current filter criteria.

FindNext 	Finds the next record that matches the current filter criteria.
FindLast 	Finds the last record that matches the current filter criteria.
FindPrior 	Finds the previous record that matches the current filter criteria.
First 	Moves the cursor to the first record in the dataset.
FreeBookmark 	Erases a bookmark set previously with GetBookmark and frees the memory allocated for the bookmark.
GetBookmark 	Sets a bookmark at the current record.
GetFieldNames 	Retrieves a list of the field names in the dataset.
GotoBookmark 	Places the cursor at the record indicated by the specified bookmark.
Insert 	Inserts a record and puts the dataset in edit mode.
InsertRecord 	Inserts a record in the dataset with the given field data and posts the edit.
Last 	Positions the cursor on the last record in the dataset.
Locate 	Searches the dataset for a particular record.
Lookup 	Locates a record by the fastest possible means and returns the data contained in the record.
MoveBy 	Moves the cursor by the specified number of rows.
Next 	Moves the cursor to the next record.
Open 	Opens the dataset.
Post 	Writes the edited record data to the database or to the cached update buffer.
Prior 	Moves the cursor to the previous record.
Refresh 	Updates the data in the dataset from the database.
RevertRecord 	When cached updates are used, this method discards changes previously made to the record but not yet written to the database.
SetFields 	Sets the values for all fields in a record.
UpdateStatus Returns the current update status when cached updates are enabled.  