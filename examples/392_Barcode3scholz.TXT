PROGRAM BarcodeGenerator3_TAR_Archive;
// dont 
//#sign max: APSN21: 02.12.2013 19:06:09 
//#path:E:\maxbox\maxbox3\examples\
//#tech>.81perf: 0:0:1.843 threads: 5 192.168.1.53 19:06:09 3.9.9.81
//TODO: Save the barcode to a file
                               

const
  //change to your OS in Barcode
  
  BARCODETEXT = '00100000000000012345';
  SAVENAME ='BARCODESAS';
  
  REG_KEY_TEAMVIEWER8 = '\SOFTWARE\Wow6432Node\TeamViewer\Version8';
  REG_VAL_CLIENTID = 'ClientID';
  
var  
   XmlDocument: IXmlDocument;
   XmlNodeList: IXmlNode;
   barcode1, bcode2: TASBarcode;
   midip: TIdIgmpHdr;
   dbform: TForm;


function Endian64(x: Int64): Int64;
begin
  Result:= (x and $00000000000000FF) shl 56;
  Result:= Result + (x and $000000000000FF00) shl 40;
  Result:= Result + (x and $0000000000FF0000) shl 24;
  Result:= Result + (x and $00000000FF000000) shl 8;
  Result:= Result + (x and $000000FF00000000) shr 8;
  Result:= Result + (x and $0000FF0000000000) shr 24;
  Result:= Result + (x and $00FF000000000000) shr 40;
  Result:= Result + (x and $FF00000000000000) shr 56;
end;

procedure BarcodePrint;
begin
    printer.BeginDoc
    Barcode1.Top := ConvertMmToPixelsY(20.0);
    Barcode1.Left := ConvertMmToPixelsX(20.0);
    Barcode1.Height := ConvertMmToPixelsY(30.0);
    Barcode1.Modul := ConvertMmToPixelsX(0.35);
    Barcode1.Angle := 45;
    Barcode1.Typ := bcCode_2_5_interleaved;
    Barcode1.DrawBarcode(printer.Canvas);
    printer.EndDoc;
end;  


procedure TMainForm_DoOpenFile(const Filename: String);
 var FFilename: String;
   
begin
  //AttributMemo.Clear;
  //ValueMemo.Clear;
  FFilename := Exepath + 'firstdemo.txt';
  //Caption := Filename + ' - ' + Application.Title;
  //XmlDocument:= LoadXmlDocument(FFilename);
  //CreateTreeView;
end;

{************** Code Graph Save ***********}
procedure Tfrm_btnSave(Sender: TObject);
begin
  saveCanvas2(dbform.canvas,exepath+SAVENAME+'.png');
    SearchAndOpenDoc(ExePath+SAVENAME+'.png');
   // SearchAndOpenDoc(ExePath+SAVENAME+inttostr(cntr)+'.png');
  writeln('barcode saved as '+ExePath+SAVENAME+'.png'); 

end;


procedure CreateMyFastForm;
 //diaform:= CreateMessageDialog('my fast form perform',mtconfirmation, []);
var 
    //dbform: TForm;
    ard: TRadioGroup;
    //mimg: TImage;
begin
   dbform:= CreateMessageDialog('My Fast Form Template - FFP BSP00100000000000012345',mtwarning,
                                        [mball, mbyes, mbhelp, mbok]);
   with dbform do begin
     font.size:= 12;
     caption:= 'FFP Barcode Generator XML Demo - BSP00100000000000012345';
     setBounds(50,50,1100,600)
     FormStyle:= fsStayontop;
     //Color:= 12234;  //clWebGold;//12234;
     autoScroll:= true;
   with TLabel.Create(self) do begin
     parent:= dbform;
     SetBounds(400,60,500,600)
     font.size:= 18;
     //dblist.Add('All Converted to...XML')
     caption:= 'Barcode Test entry in a DB list dblist.text...';
   end;  
   with TRadioGroup.Create(self) do begin
     parent:= dbform;
     top:= 130;
     left:= 60;
     items.add('first entry of');
     items.add('second entry off');
     items.add('third entry off');
     ItemIndex:= 2; 
     //writeln(Items.Strings[ItemIndex]); 
   end;
  with TBitBtn.Create(self) do begin
    Parent:= dbform;
    setbounds(850, 490,190, 40);
    caption:= 'Barcode to File';
    font.size:= 12;
    glyph.LoadFromResourceName(getHINSTANCE,'TASBARCODE'); 
    onclick:= @Tfrm_btnSave;
  end;
  with TBitBtn.Create(self) do begin
    Parent:= dbform;
    setbounds(850, 320,190, 150);
    caption:= 'File to Barcode';
    font.size:= 12;
    glyph.LoadFromResourceName(getHINSTANCE,'JVGAMMAPANELCOLORS'); 
    //onclick:= @GetMediaData2;
  end;
  
   Show;
   Canvas.Draw(400,120,getBitMap(Exepath+'\examples\citymax.bmp'));

  with Barcode1 do begin
    Top := 400;
    Left := 50;
    Height:= 150;
    //Barcode1.Width:= 230;
    //barcode1.assign
    //Barcode1.Angle := 70;
    Typ := bcCode_2_5_interleaved;
    Showtext:= bcoBoth;
    text:= BARCODETEXT; //'00100000000000012345';
    DrawBarcode(Canvas);
    
    //Print;
 
    // text:= 'BSP00100000000000012345';
  
    Typ := bcCodeEAN128C; //bcCode_2_5_interleaved;
    Left:= 320;
    //text:= '0123456789';
    //text:= '00100000000000012345'
    text:= BARCODETEXT;
    //text:= inttoStr(ord('B')+ord('S')+ord('P'));
    DrawBarcode(Canvas);
    Typ := bcCode128C; //bcCodePostNet; //,bcCodeEAN128C; //bcCode_2_5_interleaved;
    Left:= 600;
    text:= BARCODETEXT; //'00100000000000012345';
    DrawBarcode(Canvas);
   end;
   
   {with TDebugBox.create(self) do begin
     visible:= true;
     //show;
     //free;
   end;}  
    //Barcode1.DrawText(dbform.Canvas);  

  end; //dbform
   //SelectDirectory
end;


//type bool = boolean;
//TODO: Returns the Date and Time of the last modification of the given File

function FileTimeGMT2 (FileName: STRING): TDateTime;
         // Returns the Date and Time of the last modification of the given File
         // The Result is zero if the file could not be found
         // The Result is given in UTC (GMT) time zone
VAR
  Handle         : THandle;
  FindData       : TWin32FindData;
  SystemFileTime : TSystemTime;
  mf: TFileTime;
begin
  Result := 0.0;
  Handle := FindFirstFile (PChar (FileName), FindData);
  IF Handle <> INVALID_HANDLE_VALUE THEN BEGIN
    WFindClose (Handle);
    IF (FindData.dwFileAttributes AND FILE_ATTRIBUTE_DIRECTORY) = 0 THEN
      // FileTimeToSystemTime(FindData.ftLastWriteTime, SystemFileTime); 
      IF FileTimeToSystemTime(FindData.ftLastWriteTime, SystemFileTime) THEN BEGIN
        with SystemFileTime do begin
          if messagebeep(4) then 
            Result:= EncodeDate (wYear, wMonth, wDay) +
          EncodeTime (wHour, wMinute, wSecond, wMilliseconds);
        end;
      END;
    END;
END;

//DONE: Returns the Date and Time of the last $71A90000 File
                                 
//TODO:#1 Returns the Date and Time of the last modification of the given File

//11746: else if MaxMask(sl[I], '*/? TODO (#?#)*:*') then
{11746: else if PRIORITY SETMask(sl[I]X, */? TODO (#3#): then }
//11746: * TODO (#3#): else if PRIORITY SETMask(sl[I]X, then 

 var iint: integer;
  
 begin
  writeln('TeamViewerID: '+getTeamViewerID);
  writeln('addressinfo '+addressinfo($71A90000));
  writeln(datetimetostr(FileTimeGMT(exepath+'maxbox3.exe')));
  writeln(datetimetostr(FileTimeGMT2(exepath+'maxbox3.exe')));
  //TODO: check GREP with startfinder3 on behalf
  //Grep
  //Procedure RecurseDirectory2(Dir : String; IncludeSubs : boolean);
  //RecurseDirectory2(Exepath,false);
  //CreateUpdateTAR;
  //CopyDirTree(exepath+'\source\devtools',exepath+'crypt',[]);
   //TODO>: some of the copydirtree doesnt' work!
   //Streamseek
  
   
    // maxform1.TodoList1click(self);
    barcode1:= TASBarcode.create(self);
    bcode2:= TASBarcode.create(self);
    CreateMyFastForm;
    barcode1.Free;
    bcode2.Free;
    //ParseURL
    writeln(QuoteStr('this is the box on','*'));
    //sinh
    //Correl
    writeln(floattostr(cosh(34.5)));
    writeln(floattostr(ucosh(34.5)));
    writeln(floattostr(cosh(0.345)));
    writeln(floattostr(ucosh(0.345)));
    writeln(floattostr(cosh(0.0090)));
    writeln(floattostr(ucosh(0.0090)));
    SRand(234567);
    val('1234321',iint, iint);
    writeln(inttostr(iint));
    writeln(floattoStr(floor(2.7)));
    
    
    
end.  


Zu der Ausführung des Barcode
stellen sich das unsere Kunden
folgendermaßen vor:
 
Bestellpositions-ID            BSP00100000000000012345
Material-ID                        MTS00100000000000012345
Menge                              XXXXX
 

http://www.delphi-central.com/callback.aspx

 public
    { Public-Deklarationen }
    constructor Create(Owner:TComponent); override;
    destructor Destroy; override;
    procedure Assign(Source: TPersistent);override;

    procedure DrawBarcode(Canvas:TCanvas);
    procedure DrawText(Canvas:TCanvas);
    property CanvasHeight :Integer read GetCanvasHeight;
    property CanvasWidth :Integer read GetCanvasWidth;
  published
    { Published-Deklarationen }
   { Height of Barcode (Pixel)}
    property Height : integer read FHeight write SetHeight;
    property Text   : string read FText write SetText;
    property Top    : Integer read FTop write SetTop;
    property Left   : Integer read FLeft write SetLeft;
   { Width of the smallest line in a Barcode }
    property Modul  : integer read FModul  write SetModul;
    property Ratio  : Double read FRatio write SetRatio;
    property Typ    : TBarcodeType read FTyp write SetTyp default bcCode_2_5_interleaved;
   { build CheckSum ? }
    property Checksum:boolean read FCheckSum write SetCheckSum default FALSE;
    property CheckSumMethod:TCheckSumMethod read FCheckSumMethod write FCheckSumMethod default csmModulo10;

   { 0 - 360 degree }
    property Angle  :double read FAngle write SetAngle;

    property ShowText:TBarcodeOption read FShowText write SetShowText default bcoNone;
    property ShowTextFont: TFont read FShowTextFont write SetShowTextFont;
    property ShowTextPosition: TShowTextPosition read FShowTextPosition write SetShowTextPosition default stpTopLeft;
    property Width : integer read GetWidth write SetWidth stored False;
    property Color:TColor read FColor write FColor default clWhite;
    property ColorBar:TColor read FColorBar write FColorBar default clBlack;
      property OnChange:TNotifyEvent read FOnChange write FOnChange;
  end;

function CheckSumModulo10(const data:string):string;

function ConvertMmToPixelsX(const Value:Double):Integer;
function ConvertMmToPixelsY(const Value:Double):Integer;
function ConvertInchToPixelsX(const Value:Double):Integer;
function ConvertInchToPixelsY(const Value:Double):Integer;





TTarArchive Usage
-----------------
- Choose a constructor
- Make an instance of TTarArchive                  TA := TTarArchive.Create (Filename);
- Scan through the archive                         TA.Reset;
                                                   WHILE TA.FindNext (DirRec) DO BEGIN
- Evaluate the DirRec for each file                  ListBox.Items.Add (DirRec.Name);
- Read out the current file                          TA.ReadFile (DestFilename);
  (You can ommit this if you want to
  read in the directory only)                        END;
- You're done                                      TA.Free;


TTarWriter Usage
----------------
- Choose a constructor
- Make an instance of TTarWriter                   TW := TTarWriter.Create ('my.tar');
- Add a file to the tar archive                    TW.AddFile ('foobar.txt');
- Add a string as a file                           TW.AddString (SL.Text, 'joe.txt', Now);
- Destroy TarWriter instance                       TW.Free;
- Now your tar file is ready.


// --- The TAR Archive CLASS
  TTarArchive = CLASS
                PROTECTED
                  FOwnsStream : BOOLEAN;   // True if FStream is owned by the TTarArchive instance
                  FBytesToGo  : INT64;     // Bytes until the next Header Record
                PUBLIC
                  FStream     : TStream;   // Internal Stream
                  CONSTRUCTOR Create (Stream   : TStream);                                OVERLOAD;
                  CONSTRUCTOR Create (Filename : STRING;
                                      FileMode : WORD = fmOpenRead OR fmShareDenyWrite);  OVERLOAD;
                  DESTRUCTOR Destroy;                                       OVERRIDE;
                  PROCEDURE Reset;                                         // Reset File Pointer
                  function  FindNext (VAR DirRec : TTarDirRec) : BOOLEAN;  // Reads next Directory Info Record. FALSE if EOF reached
                  PROCEDURE ReadFile (Buffer   : POINTER); OVERLOAD;       // Reads file data for last Directory Record
                  PROCEDURE ReadFile (Stream   : TStream); OVERLOAD;       // -;-
                  PROCEDURE ReadFile (Filename : STRING);  OVERLOAD;       // -;-
                  function  ReadFile : STRING;           OVERLOAD;         // -;-

                  PROCEDURE GetFilePos (VAR Current, Size : INT64);        // Current File Position
                  PROCEDURE SetFilePos (NewPos : INT64);                   // Set new Current File Position
                END;

  // --- The TAR Archive Writer CLASS
  TTarWriter = CLASS
               PROTECTED
                 FStream      : TStream;
                 FOwnsStream  : BOOLEAN;
                 FFinalized   : BOOLEAN;
                                                   // --- Used at the next "Add" method call: ---
                 FPermissions : TTarPermissions;   // Access permissions
                 FUID         : INTEGER;           // User ID
                 FGID         : INTEGER;           // Group ID
                 FUserName    : STRING;            // User name
                 FGroupName   : STRING;            // Group name
                 FMode        : TTarModes;         // Mode
                 FMagic       : STRING;            // Contents of the "Magic" field
                 CONSTRUCTOR CreateEmpty;
               PUBLIC
                 CONSTRUCTOR Create (TargetStream   : TStream);                            OVERLOAD;
                 CONSTRUCTOR Create (TargetFilename : STRING; Mode : INTEGER = fmCreate);  OVERLOAD;
                 DESTRUCTOR Destroy; OVERRIDE;                   // Writes End-Of-File Tag
                 PROCEDURE AddFile   (Filename : STRING;  TarFilename : STRING = '');
                 PROCEDURE AddStream (Stream   : TStream; TarFilename : STRING; FileDateGmt : TDateTime);
                 PROCEDURE AddString (Contents : STRING;  TarFilename : STRING; FileDateGmt : TDateTime);
                 PROCEDURE AddDir          (Dirname            : STRING; DateGmt : TDateTime; MaxDirSize : INT64 = 0);
                 PROCEDURE AddSymbolicLink (Filename, Linkname : STRING; DateGmt : TDateTime);
                 PROCEDURE AddLink         (Filename, Linkname : STRING; DateGmt : TDateTime);
                 PROCEDURE AddVolumeHeader (VolumeId           : STRING; DateGmt : TDateTime);
                 PROCEDURE Finalize;
                 PROPERTY Permissions : TTarPermissions READ FPermissions WRITE FPermissions;   // Access permissions
                 PROPERTY UID         : INTEGER         READ FUID         WRITE FUID;           // User ID
                 PROPERTY GID         : INTEGER         READ FGID         WRITE FGID;           // Group ID
                 PROPERTY UserName    : STRING          READ FUserName    WRITE FUserName;      // User name
                 PROPERTY GroupName   : STRING          READ FGroupName   WRITE FGroupName;     // Group name
                 PROPERTY Mode        : TTarModes       READ FMode        WRITE FMode;          // Mode
                 PROPERTY Magic       : STRING          READ FMagic       WRITE FMagic;         // Contents of the "Magic" field
               END;




The last slash might be optional. Right?

How about something like this:

$url =~ m|([^/]+)/?$|;
my $end_of_url = $1;

The $ on the end anchors the regular expression to the end of the string. The [^/] means anything that's not a slash and the + after means I want one or more things that are not slashes. Notice that this is in a capture group which are marked with parentheses.

I end the regular expression with /? which means that there may or may not be a slash on the very end of the string. I've put my regular expression between m| and |, so I can use forward slashes without having to constantly escape them.

The last part of the URL is now in $1 and I can set my own scalar variable to save this Result.
share|improve this answer


Bonsoir,

Après avoir vérifié, l'envoi en colis International coûte 17,85  (tarifs visibles sur le site internet de LA POSTE)
Comme convenu, je vous transmets mes coordonnées bancaires pour le paiement de la locomotive :

NOM : Julien BOUYENVAL
Banque : Caisse d'Epargne de Picardie
IBAN : FR76 1802 5201 0104 0607 4504 913
BIC : CEPAFRPP802

BOUYENVAL Julien
1, rue de Metz
02100 SAINT-QUENTIN
France métropolitaine






arduino mapping
http://www.vwlowen.co.uk/arduino/usb-digital/pc-control.htm

http://www.vwlowen.co.uk/arduino/icsp/icsp.htm


  
  
  
 

----app_template_loaded_code----