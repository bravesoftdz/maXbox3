Program Warnings_Test;


{procedure BadConstuct;
function StringCastToObject(sl:TStringList):TEdit;
function BadCopy1:string;
function BadCopy2:string;
function Memoryloss1:string;
procedure Memoryloss2;
procedure LoopBounds;
function BadFormat1:string;
function BadFormat2:string;
function BadFormatDateTime:string;
procedure BadObjectLoop(sl:TStringList);
procedure BadDatasetLoop(Qry:TQuery);
procedure BadQuestion1;
procedure BadQuestion2;}

var frmDummy: TForm;


function BadCopy1:string;
begin
  //Copy from parameter starts at 1, not zero
  Result:=Copy(frmDummy.Caption,0,10);
end;

function BadCopy2:string;
begin
  Result:=BadCopy1;
  //'form' is 4 characters, if will always be false
  if Copy(Result,1,3)='form' then
    Result:='bad';
end;


function Memoryloss1:string;
var
  sl:TStringList;
begin
  sl:=TStringList.Create;
  sl.Add('test');
  Result:=sl[0];
  //the local stringlist sl is not freed
  //this results in a memory leak
end;

procedure Memoryloss2;
var
  sl:TStringList;
begin
  sl:=TStringList.Create;
  if BadCopy1<>'' then
    exit;  //the local stringlist sl is not freed
           //this results in a memory leak
  //FreeAndNil(sl);
end;


procedure BadConstuct;
begin
  //The value returned from this Create is lost,
  //it should be "frmDummy:=TfrmDummy.Create(Application);"
  //This warning is switched off by default
  frmDummy.Create(Application);
end;

function StringCastToObject(sl:TStringList):TEdit;
begin
  //A stringlist of objects is passed in
  //but instead of casting the object on the stringlist,
  //a string is cast by mistake
  //Valid syntax but will cause a crash
  //Should read "ed:=TEditbox(sl.Objects[0]);"
  Result:= TEdit(sl.Objects[0]);
end;


procedure LoopBounds;
var
  st:TStringList;
  x:integer;
begin
  st:=TStringList.Create;
  st.Add('test');
  //st.Count is 1 for 1 item
  //but going from 0 to 1 represents doing something twice
  //It should be "For x:=0 To st.Count-1 do"
  //An error will occurr otherwise when x is 1
  For x:=0 To st.Count do
    Showmessage(st[x]);

  //FreeAndNil(st);
end;

function BadFormat1:string;
var
  d:double;
begin
  d:=1.1;
  //The format command will expect a floating point value
  //for %d but instead gets passed an integer
  //This command produces an error at runtime
  Result:=Format('Format what should be an integer value %x',[d]);
end;

function BadFormat2:string;
var
  s:string;
begin
  s:='some text';
  //The format command expects an array of two strings passed in
  //(one for each %s) but only gets one
  Result:=Format('Text 1=%s,Text 2=%s',[s]);
end;

function BadFormatDateTime:string;
begin
  //The FormatDateTime command uses the letter n to represent minutes
  //but it is a common mistake to use m
  //This often goes unnoticed as hh:mm shows hour and month
  //when it should probably mean hour and minute (hh:nn)
  Result:=FormatDateTime('dd mmm yyyy, hh:mm',Now);
end;

procedure BadObjectLoop(sl:TStringList);
var
  i:integer;
begin
  //if an item is deleted from sl whilst in this loop
  //then the loop count will be one less than expected
  //and there will be an access violation
  //Use either "while i<st.Count" or "For i:=sl.Count-1 downto 0 do"
  For i:= 0 to sl.Count-1 do
    if sl[i]='test' then
      sl.Delete(i);

end;

procedure BadDatasetLoop(Qry:TQuery);
begin
  //The Qry.Next is in the wrong place and the loop condition
  //may never be met
  if Qry<>nil then begin
    Qry.First;
    while not Qry.Eof do begin
      //Some processing
      //...
    end;
    Qry.Next;  //this should be in the above loop
  end;
end;

procedure BadQuestion1;
begin
  //A question is asked but only one button is displayed
  MessageDlg('Are you sure you want to exit ?', mtConfirmation, [mbOK], 0);
end;

procedure BadQuestion2;
begin
  //A question is asked but the result ignored
  MessageDlg('Are you sure you want to exit ?', mtConfirmation, [mbYes,mbNo], 0);
end;



begin

{procedure BadConstuct;
function StringCastToObject(sl:TStringList):TEdit;
function BadCopy1:string;
function BadCopy2:string;
function Memoryloss1:string;
procedure Memoryloss2;
procedure LoopBounds;
function BadFormat1:string;
function BadFormat2:string;
function BadFormatDateTime:string;
procedure BadObjectLoop(sl:TStringList);
procedure BadDatasetLoop(Qry:TQuery);
procedure BadQuestion1;
procedure BadQuestion2;}

BadQuestion1;
BadQuestion2;

end.



----code_cleared_checked----