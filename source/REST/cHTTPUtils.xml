<?xml version="1.0" encoding="utf-8"?>
<namespace name="cHTTPUtils">
  <class name="EHTTP">
    <ancestor name="Exception" namespace="SysUtils">
      <methodref name="Create" visibility="public">
      </methodref>
      <methodref name="CreateFmt" visibility="public">
      </methodref>
      <methodref name="CreateRes" visibility="public">
      </methodref>
      <methodref name="CreateRes" visibility="public">
      </methodref>
      <methodref name="CreateResFmt" visibility="public">
      </methodref>
      <methodref name="CreateResFmt" visibility="public">
      </methodref>
      <methodref name="CreateHelp" visibility="public">
      </methodref>
      <methodref name="CreateFmtHelp" visibility="public">
      </methodref>
      <methodref name="CreateResHelp" visibility="public">
      </methodref>
      <methodref name="CreateResHelp" visibility="public">
      </methodref>
      <methodref name="CreateResFmtHelp" visibility="public">
      </methodref>
      <methodref name="CreateResFmtHelp" visibility="public">
      </methodref>
      <propertyref name="HelpContext" visibility="public">
      </propertyref>
      <propertyref name="Message" visibility="public">
      </propertyref>
      <ancestor name="TObject" namespace="System">
        <methodref name="Create" visibility="public">
        </methodref>
        <methodref name="Free" visibility="public">
        </methodref>
        <methodref name="InitInstance" visibility="public">
        </methodref>
        <methodref name="CleanupInstance" visibility="public">
        </methodref>
        <methodref name="ClassType" visibility="public">
        </methodref>
        <methodref name="ClassName" visibility="public">
        </methodref>
        <methodref name="ClassNameIs" visibility="public">
        </methodref>
        <methodref name="ClassParent" visibility="public">
        </methodref>
        <methodref name="ClassInfo" visibility="public">
        </methodref>
        <methodref name="InstanceSize" visibility="public">
        </methodref>
        <methodref name="InheritsFrom" visibility="public">
        </methodref>
        <methodref name="MethodAddress" visibility="public">
        </methodref>
        <methodref name="MethodName" visibility="public">
        </methodref>
        <methodref name="FieldAddress" visibility="public">
        </methodref>
        <methodref name="GetInterface" visibility="public">
        </methodref>
        <methodref name="GetInterfaceEntry" visibility="public">
        </methodref>
        <methodref name="GetInterfaceTable" visibility="public">
        </methodref>
        <methodref name="SafeCallException" visibility="public">
        </methodref>
        <methodref name="AfterConstruction" visibility="public">
        </methodref>
        <methodref name="BeforeDestruction" visibility="public">
        </methodref>
        <methodref name="Dispatch" visibility="public">
        </methodref>
        <methodref name="DefaultHandler" visibility="public">
        </methodref>
        <methodref name="NewInstance" visibility="public">
        </methodref>
        <methodref name="FreeInstance" visibility="public">
        </methodref>
        <methodref name="Destroy" visibility="public">
        </methodref>
      </ancestor>
    </ancestor>
  </class>
  <class name="EHTTPParser">
    <ancestor name="EHTTP" namespace="cHTTPUtils">
      <ancestor name="Exception" namespace="SysUtils">
        <methodref name="Create" visibility="public">
        </methodref>
        <methodref name="CreateFmt" visibility="public">
        </methodref>
        <methodref name="CreateRes" visibility="public">
        </methodref>
        <methodref name="CreateRes" visibility="public">
        </methodref>
        <methodref name="CreateResFmt" visibility="public">
        </methodref>
        <methodref name="CreateResFmt" visibility="public">
        </methodref>
        <methodref name="CreateHelp" visibility="public">
        </methodref>
        <methodref name="CreateFmtHelp" visibility="public">
        </methodref>
        <methodref name="CreateResHelp" visibility="public">
        </methodref>
        <methodref name="CreateResHelp" visibility="public">
        </methodref>
        <methodref name="CreateResFmtHelp" visibility="public">
        </methodref>
        <methodref name="CreateResFmtHelp" visibility="public">
        </methodref>
        <propertyref name="HelpContext" visibility="public">
        </propertyref>
        <propertyref name="Message" visibility="public">
        </propertyref>
        <ancestor name="TObject" namespace="System">
          <methodref name="Create" visibility="public">
          </methodref>
          <methodref name="Free" visibility="public">
          </methodref>
          <methodref name="InitInstance" visibility="public">
          </methodref>
          <methodref name="CleanupInstance" visibility="public">
          </methodref>
          <methodref name="ClassType" visibility="public">
          </methodref>
          <methodref name="ClassName" visibility="public">
          </methodref>
          <methodref name="ClassNameIs" visibility="public">
          </methodref>
          <methodref name="ClassParent" visibility="public">
          </methodref>
          <methodref name="ClassInfo" visibility="public">
          </methodref>
          <methodref name="InstanceSize" visibility="public">
          </methodref>
          <methodref name="InheritsFrom" visibility="public">
          </methodref>
          <methodref name="MethodAddress" visibility="public">
          </methodref>
          <methodref name="MethodName" visibility="public">
          </methodref>
          <methodref name="FieldAddress" visibility="public">
          </methodref>
          <methodref name="GetInterface" visibility="public">
          </methodref>
          <methodref name="GetInterfaceEntry" visibility="public">
          </methodref>
          <methodref name="GetInterfaceTable" visibility="public">
          </methodref>
          <methodref name="SafeCallException" visibility="public">
          </methodref>
          <methodref name="AfterConstruction" visibility="public">
          </methodref>
          <methodref name="BeforeDestruction" visibility="public">
          </methodref>
          <methodref name="Dispatch" visibility="public">
          </methodref>
          <methodref name="DefaultHandler" visibility="public">
          </methodref>
          <methodref name="NewInstance" visibility="public">
          </methodref>
          <methodref name="FreeInstance" visibility="public">
          </methodref>
          <methodref name="Destroy" visibility="public">
          </methodref>
        </ancestor>
      </ancestor>
    </ancestor>
  </class>
  <set name="AnsiCharSet" type="Char" />
  <array name="AnsiStringArray">
    <element type="string" />
  </array>
  <const name="hpNone" type="THTTPProtocolEnum">
    <value>
      hpNone
    </value>
  </const>
  <const name="hpCustom" type="THTTPProtocolEnum">
    <value>
      hpCustom
    </value>
  </const>
  <const name="hpHTTP" type="THTTPProtocolEnum">
    <value>
      hpHTTP
    </value>
  </const>
  <const name="hpHTTPS" type="THTTPProtocolEnum">
    <value>
      hpHTTPS
    </value>
  </const>
  <enum name="THTTPProtocolEnum">
    <element name="hpNone" />
    <element name="hpCustom" />
    <element name="hpHTTP" />
    <element name="hpHTTPS" />
  </enum>
  <const name="hvNone" type="THTTPVersionEnum">
    <value>
      hvNone
    </value>
  </const>
  <const name="hvCustom" type="THTTPVersionEnum">
    <value>
      hvCustom
    </value>
  </const>
  <const name="hvHTTP10" type="THTTPVersionEnum">
    <value>
      hvHTTP10
    </value>
  </const>
  <const name="hvHTTP11" type="THTTPVersionEnum">
    <value>
      hvHTTP11
    </value>
  </const>
  <enum name="THTTPVersionEnum">
    <element name="hvNone" />
    <element name="hvCustom" />
    <element name="hvHTTP10" />
    <element name="hvHTTP11" />
  </enum>
  <struct name="THTTPVersion">
    <field name="Version" type="THTTPVersionEnum" visibility="public" />
    <field name="Protocol" type="THTTPProtocolEnum" visibility="public" />
    <field name="CustomProtocol" type="string" visibility="public" />
    <field name="CustomMajVersion" type="Integer" visibility="public" />
    <field name="CustomMinVersion" type="Integer" visibility="public" />
  </struct>
  <const name="hntCustom" type="THTTPHeaderNameEnum">
    <value>
      hntCustom
    </value>
  </const>
  <const name="hntHost" type="THTTPHeaderNameEnum">
    <value>
      hntHost
    </value>
  </const>
  <const name="hntContentType" type="THTTPHeaderNameEnum">
    <value>
      hntContentType
    </value>
  </const>
  <const name="hntContentLength" type="THTTPHeaderNameEnum">
    <value>
      hntContentLength
    </value>
  </const>
  <const name="hntContentTransferEncoding" type="THTTPHeaderNameEnum">
    <value>
      hntContentTransferEncoding
    </value>
  </const>
  <const name="hntContentLocation" type="THTTPHeaderNameEnum">
    <value>
      hntContentLocation
    </value>
  </const>
  <const name="hntContentLanguage" type="THTTPHeaderNameEnum">
    <value>
      hntContentLanguage
    </value>
  </const>
  <const name="hntContentEncoding" type="THTTPHeaderNameEnum">
    <value>
      hntContentEncoding
    </value>
  </const>
  <const name="hntTransferEncoding" type="THTTPHeaderNameEnum">
    <value>
      hntTransferEncoding
    </value>
  </const>
  <const name="hntDate" type="THTTPHeaderNameEnum">
    <value>
      hntDate
    </value>
  </const>
  <const name="hntServer" type="THTTPHeaderNameEnum">
    <value>
      hntServer
    </value>
  </const>
  <const name="hntUserAgent" type="THTTPHeaderNameEnum">
    <value>
      hntUserAgent
    </value>
  </const>
  <const name="hntLocation" type="THTTPHeaderNameEnum">
    <value>
      hntLocation
    </value>
  </const>
  <const name="hntConnection" type="THTTPHeaderNameEnum">
    <value>
      hntConnection
    </value>
  </const>
  <const name="hntExpires" type="THTTPHeaderNameEnum">
    <value>
      hntExpires
    </value>
  </const>
  <const name="hntCacheControl" type="THTTPHeaderNameEnum">
    <value>
      hntCacheControl
    </value>
  </const>
  <const name="hntSetCookie" type="THTTPHeaderNameEnum">
    <value>
      hntSetCookie
    </value>
  </const>
  <const name="hntCookie" type="THTTPHeaderNameEnum">
    <value>
      hntCookie
    </value>
  </const>
  <const name="hntAuthorization" type="THTTPHeaderNameEnum">
    <value>
      hntAuthorization
    </value>
  </const>
  <const name="hntVia" type="THTTPHeaderNameEnum">
    <value>
      hntVia
    </value>
  </const>
  <const name="hntWarning" type="THTTPHeaderNameEnum">
    <value>
      hntWarning
    </value>
  </const>
  <const name="hntContentRange" type="THTTPHeaderNameEnum">
    <value>
      hntContentRange
    </value>
  </const>
  <const name="hntXForwardedFor" type="THTTPHeaderNameEnum">
    <value>
      hntXForwardedFor
    </value>
  </const>
  <const name="hntPragma" type="THTTPHeaderNameEnum">
    <value>
      hntPragma
    </value>
  </const>
  <const name="hntXPoweredBy" type="THTTPHeaderNameEnum">
    <value>
      hntXPoweredBy
    </value>
  </const>
  <const name="hntWWWAuthenticate" type="THTTPHeaderNameEnum">
    <value>
      hntWWWAuthenticate
    </value>
  </const>
  <const name="hntLastModified" type="THTTPHeaderNameEnum">
    <value>
      hntLastModified
    </value>
  </const>
  <const name="hntETag" type="THTTPHeaderNameEnum">
    <value>
      hntETag
    </value>
  </const>
  <const name="hntProxyAuthorization" type="THTTPHeaderNameEnum">
    <value>
      hntProxyAuthorization
    </value>
  </const>
  <const name="hntReferer" type="THTTPHeaderNameEnum">
    <value>
      hntReferer
    </value>
  </const>
  <const name="hntAge" type="THTTPHeaderNameEnum">
    <value>
      hntAge
    </value>
  </const>
  <const name="hntAcceptRanges" type="THTTPHeaderNameEnum">
    <value>
      hntAcceptRanges
    </value>
  </const>
  <const name="hntAcceptEncoding" type="THTTPHeaderNameEnum">
    <value>
      hntAcceptEncoding
    </value>
  </const>
  <const name="hntAcceptLanguage" type="THTTPHeaderNameEnum">
    <value>
      hntAcceptLanguage
    </value>
  </const>
  <const name="hntAcceptCharset" type="THTTPHeaderNameEnum">
    <value>
      hntAcceptCharset
    </value>
  </const>
  <const name="hntIfModifiedSince" type="THTTPHeaderNameEnum">
    <value>
      hntIfModifiedSince
    </value>
  </const>
  <const name="hntIfUnmodifiedSince" type="THTTPHeaderNameEnum">
    <value>
      hntIfUnmodifiedSince
    </value>
  </const>
  <const name="hntRetryAfter" type="THTTPHeaderNameEnum">
    <value>
      hntRetryAfter
    </value>
  </const>
  <const name="hntUpgrade" type="THTTPHeaderNameEnum">
    <value>
      hntUpgrade
    </value>
  </const>
  <const name="hntStatus" type="THTTPHeaderNameEnum">
    <value>
      hntStatus
    </value>
  </const>
  <const name="hntProxyConnection" type="THTTPHeaderNameEnum">
    <value>
      hntProxyConnection
    </value>
  </const>
  <const name="hntOrigin" type="THTTPHeaderNameEnum">
    <value>
      hntOrigin
    </value>
  </const>
  <const name="hntKeepAlive" type="THTTPHeaderNameEnum">
    <value>
      hntKeepAlive
    </value>
  </const>
  <enum name="THTTPHeaderNameEnum">
    <element name="hntCustom" />
    <element name="hntHost" />
    <element name="hntContentType" />
    <element name="hntContentLength" />
    <element name="hntContentTransferEncoding" />
    <element name="hntContentLocation" />
    <element name="hntContentLanguage" />
    <element name="hntContentEncoding" />
    <element name="hntTransferEncoding" />
    <element name="hntDate" />
    <element name="hntServer" />
    <element name="hntUserAgent" />
    <element name="hntLocation" />
    <element name="hntConnection" />
    <element name="hntExpires" />
    <element name="hntCacheControl" />
    <element name="hntSetCookie" />
    <element name="hntCookie" />
    <element name="hntAuthorization" />
    <element name="hntVia" />
    <element name="hntWarning" />
    <element name="hntContentRange" />
    <element name="hntXForwardedFor" />
    <element name="hntPragma" />
    <element name="hntXPoweredBy" />
    <element name="hntWWWAuthenticate" />
    <element name="hntLastModified" />
    <element name="hntETag" />
    <element name="hntProxyAuthorization" />
    <element name="hntReferer" />
    <element name="hntAge" />
    <element name="hntAcceptRanges" />
    <element name="hntAcceptEncoding" />
    <element name="hntAcceptLanguage" />
    <element name="hntAcceptCharset" />
    <element name="hntIfModifiedSince" />
    <element name="hntIfUnmodifiedSince" />
    <element name="hntRetryAfter" />
    <element name="hntUpgrade" />
    <element name="hntStatus" />
    <element name="hntProxyConnection" />
    <element name="hntOrigin" />
    <element name="hntKeepAlive" />
  </enum>
  <struct name="THTTPHeaderName">
    <field name="Value" type="THTTPHeaderNameEnum" visibility="public" />
    <field name="Custom" type="string" visibility="public" />
  </struct>
  <struct name="THTTPCustomHeader">
    <field name="FieldName" type="string" visibility="public" />
    <field name="FieldValue" type="string" visibility="public" />
  </struct>
  <pointer name="PHTTPCustomHeader" type="THTTPCustomHeader" indircnt="1" />
  <const name="hcltNone" type="THTTPContentLengthEnum">
    <value>
      hcltNone
    </value>
  </const>
  <const name="hcltByteCount" type="THTTPContentLengthEnum">
    <value>
      hcltByteCount
    </value>
  </const>
  <enum name="THTTPContentLengthEnum">
    <element name="hcltNone" />
    <element name="hcltByteCount" />
  </enum>
  <struct name="THTTPContentLength">
    <field name="Value" type="THTTPContentLengthEnum" visibility="public" />
    <field name="ByteCount" type="Int64" visibility="public" />
  </struct>
  <pointer name="PHTTPContentLength" type="THTTPContentLength" indircnt="1" />
  <const name="hctmCustom" type="THTTPContentTypeMajor">
    <value>
      hctmCustom
    </value>
  </const>
  <const name="hctmText" type="THTTPContentTypeMajor">
    <value>
      hctmText
    </value>
  </const>
  <const name="hctmImage" type="THTTPContentTypeMajor">
    <value>
      hctmImage
    </value>
  </const>
  <enum name="THTTPContentTypeMajor">
    <element name="hctmCustom" />
    <element name="hctmText" />
    <element name="hctmImage" />
  </enum>
  <const name="hctNone" type="THTTPContentTypeEnum">
    <value>
      hctNone
    </value>
  </const>
  <const name="hctCustomParts" type="THTTPContentTypeEnum">
    <value>
      hctCustomParts
    </value>
  </const>
  <const name="hctCustomString" type="THTTPContentTypeEnum">
    <value>
      hctCustomString
    </value>
  </const>
  <const name="hctTextHtml" type="THTTPContentTypeEnum">
    <value>
      hctTextHtml
    </value>
  </const>
  <const name="hctTextAscii" type="THTTPContentTypeEnum">
    <value>
      hctTextAscii
    </value>
  </const>
  <const name="hctTextCss" type="THTTPContentTypeEnum">
    <value>
      hctTextCss
    </value>
  </const>
  <const name="hctTextPlain" type="THTTPContentTypeEnum">
    <value>
      hctTextPlain
    </value>
  </const>
  <const name="hctTextXml" type="THTTPContentTypeEnum">
    <value>
      hctTextXml
    </value>
  </const>
  <const name="hctTextCustom" type="THTTPContentTypeEnum">
    <value>
      hctTextCustom
    </value>
  </const>
  <const name="hctImageJpeg" type="THTTPContentTypeEnum">
    <value>
      hctImageJpeg
    </value>
  </const>
  <const name="hctImagePng" type="THTTPContentTypeEnum">
    <value>
      hctImagePng
    </value>
  </const>
  <const name="hctImageGif" type="THTTPContentTypeEnum">
    <value>
      hctImageGif
    </value>
  </const>
  <const name="hctImageCustom" type="THTTPContentTypeEnum">
    <value>
      hctImageCustom
    </value>
  </const>
  <const name="hctApplicationJSON" type="THTTPContentTypeEnum">
    <value>
      hctApplicationJSON
    </value>
  </const>
  <const name="hctApplicationOctetStream" type="THTTPContentTypeEnum">
    <value>
      hctApplicationOctetStream
    </value>
  </const>
  <const name="hctApplicationJavaScript" type="THTTPContentTypeEnum">
    <value>
      hctApplicationJavaScript
    </value>
  </const>
  <const name="hctApplicationCustom" type="THTTPContentTypeEnum">
    <value>
      hctApplicationCustom
    </value>
  </const>
  <const name="hctAudioCustom" type="THTTPContentTypeEnum">
    <value>
      hctAudioCustom
    </value>
  </const>
  <const name="hctVideoCustom" type="THTTPContentTypeEnum">
    <value>
      hctVideoCustom
    </value>
  </const>
  <enum name="THTTPContentTypeEnum">
    <element name="hctNone" />
    <element name="hctCustomParts" />
    <element name="hctCustomString" />
    <element name="hctTextHtml" />
    <element name="hctTextAscii" />
    <element name="hctTextCss" />
    <element name="hctTextPlain" />
    <element name="hctTextXml" />
    <element name="hctTextCustom" />
    <element name="hctImageJpeg" />
    <element name="hctImagePng" />
    <element name="hctImageGif" />
    <element name="hctImageCustom" />
    <element name="hctApplicationJSON" />
    <element name="hctApplicationOctetStream" />
    <element name="hctApplicationJavaScript" />
    <element name="hctApplicationCustom" />
    <element name="hctAudioCustom" />
    <element name="hctVideoCustom" />
  </enum>
  <struct name="THTTPContentType">
    <field name="Value" type="THTTPContentTypeEnum" visibility="public" />
    <field name="CustomMajor" type="string" visibility="public" />
    <field name="CustomMinor" type="string" visibility="public" />
    <field name="Parameters" type="AnsiStringArray" visibility="public" />
    <field name="CustomStr" type="string" visibility="public" />
  </struct>
  <const name="hdNone" type="THTTPDateFieldEnum">
    <value>
      hdNone
    </value>
  </const>
  <const name="hdCustom" type="THTTPDateFieldEnum">
    <value>
      hdCustom
    </value>
  </const>
  <const name="hdParts" type="THTTPDateFieldEnum">
    <value>
      hdParts
    </value>
  </const>
  <const name="hdDateTime" type="THTTPDateFieldEnum">
    <value>
      hdDateTime
    </value>
  </const>
  <enum name="THTTPDateFieldEnum">
    <element name="hdNone" />
    <element name="hdCustom" />
    <element name="hdParts" />
    <element name="hdDateTime" />
  </enum>
  <struct name="THTTPDateField">
    <field name="Value" type="THTTPDateFieldEnum" visibility="public" />
    <field name="DayOfWeek" type="Integer" visibility="public" />
    <field name="Day" type="Integer" visibility="public" />
    <field name="Month" type="Integer" visibility="public" />
    <field name="Year" type="Integer" visibility="public" />
    <field name="Hour" type="Integer" visibility="public" />
    <field name="Min" type="Integer" visibility="public" />
    <field name="Sec" type="Integer" visibility="public" />
    <field name="TimeZoneGMT" type="Boolean" visibility="public" />
    <field name="CustomTimeZone" type="string" visibility="public" />
    <field name="DateTime" type="TDateTime" visibility="public" />
    <field name="Custom" type="string" visibility="public" />
  </struct>
  <const name="hteNone" type="THTTPTransferEncodingEnum">
    <value>
      hteNone
    </value>
  </const>
  <const name="hteCustom" type="THTTPTransferEncodingEnum">
    <value>
      hteCustom
    </value>
  </const>
  <const name="hteChunked" type="THTTPTransferEncodingEnum">
    <value>
      hteChunked
    </value>
  </const>
  <enum name="THTTPTransferEncodingEnum">
    <element name="hteNone" />
    <element name="hteCustom" />
    <element name="hteChunked" />
  </enum>
  <struct name="THTTPTransferEncoding">
    <field name="Value" type="THTTPTransferEncodingEnum" visibility="public" />
    <field name="Custom" type="string" visibility="public" />
  </struct>
  <const name="hcfNone" type="THTTPConnectionFieldEnum">
    <value>
      hcfNone
    </value>
  </const>
  <const name="hcfCustom" type="THTTPConnectionFieldEnum">
    <value>
      hcfCustom
    </value>
  </const>
  <const name="hcfClose" type="THTTPConnectionFieldEnum">
    <value>
      hcfClose
    </value>
  </const>
  <const name="hcfKeepAlive" type="THTTPConnectionFieldEnum">
    <value>
      hcfKeepAlive
    </value>
  </const>
  <enum name="THTTPConnectionFieldEnum">
    <element name="hcfNone" />
    <element name="hcfCustom" />
    <element name="hcfClose" />
    <element name="hcfKeepAlive" />
  </enum>
  <struct name="THTTPConnectionField">
    <field name="Value" type="THTTPConnectionFieldEnum" visibility="public" />
    <field name="Custom" type="string" visibility="public" />
  </struct>
  <const name="hafNone" type="THTTPAgeFieldEnum">
    <value>
      hafNone
    </value>
  </const>
  <const name="hafCustom" type="THTTPAgeFieldEnum">
    <value>
      hafCustom
    </value>
  </const>
  <const name="hafAge" type="THTTPAgeFieldEnum">
    <value>
      hafAge
    </value>
  </const>
  <enum name="THTTPAgeFieldEnum">
    <element name="hafNone" />
    <element name="hafCustom" />
    <element name="hafAge" />
  </enum>
  <struct name="THTTPAgeField">
    <field name="Value" type="THTTPAgeFieldEnum" visibility="public" />
    <field name="Age" type="Int64" visibility="public" />
    <field name="Custom" type="string" visibility="public" />
  </struct>
  <const name="hccfNone" type="THTTPCacheControlFieldEnum">
    <value>
      hccfNone
    </value>
  </const>
  <const name="hccfDecoded" type="THTTPCacheControlFieldEnum">
    <value>
      hccfDecoded
    </value>
  </const>
  <const name="hccfCustom" type="THTTPCacheControlFieldEnum">
    <value>
      hccfCustom
    </value>
  </const>
  <enum name="THTTPCacheControlFieldEnum">
    <element name="hccfNone" />
    <element name="hccfDecoded" />
    <element name="hccfCustom" />
  </enum>
  <const name="hccsfNoCache" type="THTTPCacheControlRequestSubField">
    <value>
      hccsfNoCache
    </value>
  </const>
  <const name="hccsfNoStore" type="THTTPCacheControlRequestSubField">
    <value>
      hccsfNoStore
    </value>
  </const>
  <const name="hccsfMaxAge" type="THTTPCacheControlRequestSubField">
    <value>
      hccsfMaxAge
    </value>
  </const>
  <const name="hccsfMaxStale" type="THTTPCacheControlRequestSubField">
    <value>
      hccsfMaxStale
    </value>
  </const>
  <const name="hccsfMinFresh" type="THTTPCacheControlRequestSubField">
    <value>
      hccsfMinFresh
    </value>
  </const>
  <const name="hccsfNoTransform" type="THTTPCacheControlRequestSubField">
    <value>
      hccsfNoTransform
    </value>
  </const>
  <const name="hccsfOnlyIfCached" type="THTTPCacheControlRequestSubField">
    <value>
      hccsfOnlyIfCached
    </value>
  </const>
  <enum name="THTTPCacheControlRequestSubField">
    <element name="hccsfNoCache" />
    <element name="hccsfNoStore" />
    <element name="hccsfMaxAge" />
    <element name="hccsfMaxStale" />
    <element name="hccsfMinFresh" />
    <element name="hccsfNoTransform" />
    <element name="hccsfOnlyIfCached" />
  </enum>
  <const name="hccrfPublic" type="THTTPCacheControlResponseSubField">
    <value>
      hccrfPublic
    </value>
  </const>
  <const name="hccrfPrivate" type="THTTPCacheControlResponseSubField">
    <value>
      hccrfPrivate
    </value>
  </const>
  <const name="hccrfNoCache" type="THTTPCacheControlResponseSubField">
    <value>
      hccrfNoCache
    </value>
  </const>
  <const name="hccrfNoStore" type="THTTPCacheControlResponseSubField">
    <value>
      hccrfNoStore
    </value>
  </const>
  <const name="hccrfNoTransform" type="THTTPCacheControlResponseSubField">
    <value>
      hccrfNoTransform
    </value>
  </const>
  <const name="hccrfMustRevalidate" type="THTTPCacheControlResponseSubField">
    <value>
      hccrfMustRevalidate
    </value>
  </const>
  <const name="hccrfProxyRevalidate" type="THTTPCacheControlResponseSubField">
    <value>
      hccrfProxyRevalidate
    </value>
  </const>
  <const name="hccrfMaxAge" type="THTTPCacheControlResponseSubField">
    <value>
      hccrfMaxAge
    </value>
  </const>
  <const name="hccrfSMaxAge" type="THTTPCacheControlResponseSubField">
    <value>
      hccrfSMaxAge
    </value>
  </const>
  <enum name="THTTPCacheControlResponseSubField">
    <element name="hccrfPublic" />
    <element name="hccrfPrivate" />
    <element name="hccrfNoCache" />
    <element name="hccrfNoStore" />
    <element name="hccrfNoTransform" />
    <element name="hccrfMustRevalidate" />
    <element name="hccrfProxyRevalidate" />
    <element name="hccrfMaxAge" />
    <element name="hccrfSMaxAge" />
  </enum>
  <struct name="THTTPCacheControlField">
    <field name="Value" type="THTTPCacheControlFieldEnum" visibility="public" />
  </struct>
  <const name="hceNone" type="THTTPContentEncodingEnum">
    <value>
      hceNone
    </value>
  </const>
  <const name="hceCustom" type="THTTPContentEncodingEnum">
    <value>
      hceCustom
    </value>
  </const>
  <const name="hceIdentity" type="THTTPContentEncodingEnum">
    <value>
      hceIdentity
    </value>
  </const>
  <const name="hceCompress" type="THTTPContentEncodingEnum">
    <value>
      hceCompress
    </value>
  </const>
  <const name="hceDeflate" type="THTTPContentEncodingEnum">
    <value>
      hceDeflate
    </value>
  </const>
  <const name="hceExi" type="THTTPContentEncodingEnum">
    <value>
      hceExi
    </value>
  </const>
  <const name="hceGzip" type="THTTPContentEncodingEnum">
    <value>
      hceGzip
    </value>
  </const>
  <const name="hcePack200Gzip" type="THTTPContentEncodingEnum">
    <value>
      hcePack200Gzip
    </value>
  </const>
  <enum name="THTTPContentEncodingEnum">
    <element name="hceNone" />
    <element name="hceCustom" />
    <element name="hceIdentity" />
    <element name="hceCompress" />
    <element name="hceDeflate" />
    <element name="hceExi" />
    <element name="hceGzip" />
    <element name="hcePack200Gzip" />
  </enum>
  <struct name="THTTPContentEncoding">
    <field name="Value" type="THTTPContentEncodingEnum" visibility="public" />
    <field name="Custom" type="string" visibility="public" />
  </struct>
  <const name="hcefNone" type="THTTPContentEncodingFieldEnum">
    <value>
      hcefNone
    </value>
  </const>
  <const name="hcefList" type="THTTPContentEncodingFieldEnum">
    <value>
      hcefList
    </value>
  </const>
  <enum name="THTTPContentEncodingFieldEnum">
    <element name="hcefNone" />
    <element name="hcefList" />
  </enum>
  <struct name="THTTPContentEncodingField">
    <field name="Value" type="THTTPContentEncodingFieldEnum" visibility="public" />
    <field name="List" type=".3" visibility="public" />
  </struct>
  <const name="hrafNone" type="THTTPRetryAfterFieldEnum">
    <value>
      hrafNone
    </value>
  </const>
  <const name="hrafCustom" type="THTTPRetryAfterFieldEnum">
    <value>
      hrafCustom
    </value>
  </const>
  <const name="harfDate" type="THTTPRetryAfterFieldEnum">
    <value>
      harfDate
    </value>
  </const>
  <const name="harfSeconds" type="THTTPRetryAfterFieldEnum">
    <value>
      harfSeconds
    </value>
  </const>
  <enum name="THTTPRetryAfterFieldEnum">
    <element name="hrafNone" />
    <element name="hrafCustom" />
    <element name="harfDate" />
    <element name="harfSeconds" />
  </enum>
  <struct name="THTTPRetryAfterField">
    <field name="Value" type="THTTPRetryAfterFieldEnum" visibility="public" />
    <field name="Custom" type="string" visibility="public" />
    <field name="Date" type="TDateTime" visibility="public" />
    <field name="Seconds" type="Int64" visibility="public" />
  </struct>
  <const name="hcrfNone" type="THTTPContentRangeFieldEnum">
    <value>
      hcrfNone
    </value>
  </const>
  <const name="hcrfCustom" type="THTTPContentRangeFieldEnum">
    <value>
      hcrfCustom
    </value>
  </const>
  <const name="hcrfByteRange" type="THTTPContentRangeFieldEnum">
    <value>
      hcrfByteRange
    </value>
  </const>
  <enum name="THTTPContentRangeFieldEnum">
    <element name="hcrfNone" />
    <element name="hcrfCustom" />
    <element name="hcrfByteRange" />
  </enum>
  <struct name="THTTPContentRangeField">
    <field name="Value" type="THTTPContentRangeFieldEnum" visibility="public" />
    <field name="ByteFirst" type="Int64" visibility="public" />
    <field name="ByteLast" type="Int64" visibility="public" />
    <field name="ByteSize" type="Int64" visibility="public" />
    <field name="Custom" type="string" visibility="public" />
  </struct>
  <const name="hscoNone" type="THTTPSetCookieFieldEnum">
    <value>
      hscoNone
    </value>
  </const>
  <const name="hscoDecoded" type="THTTPSetCookieFieldEnum">
    <value>
      hscoDecoded
    </value>
  </const>
  <const name="hscoCustom" type="THTTPSetCookieFieldEnum">
    <value>
      hscoCustom
    </value>
  </const>
  <enum name="THTTPSetCookieFieldEnum">
    <element name="hscoNone" />
    <element name="hscoDecoded" />
    <element name="hscoCustom" />
  </enum>
  <struct name="THTTPSetCookieCustomField">
    <field name="Name" type="string" visibility="public" />
    <field name="Value" type="string" visibility="public" />
  </struct>
  <pointer name="PHTTPSetCookieCustomField" type="THTTPSetCookieCustomField" indircnt="1" />
  <array name="THTTPSetCookieCustomFieldArray">
    <element type="THTTPSetCookieCustomField" />
  </array>
  <struct name="THTTPSetCookieField">
    <field name="Value" type="THTTPSetCookieFieldEnum" visibility="public" />
    <field name="Domain" type="string" visibility="public" />
    <field name="Path" type="string" visibility="public" />
    <field name="Expires" type="THTTPDateField" visibility="public" />
    <field name="MaxAge" type="Int64" visibility="public" />
    <field name="HttpOnly" type="Boolean" visibility="public" />
    <field name="Secure" type="Boolean" visibility="public" />
    <field name="CustomFields" type="THTTPSetCookieCustomFieldArray" visibility="public" />
    <field name="Custom" type="string" visibility="public" />
  </struct>
  <pointer name="PHTTPSetCookieField" type="THTTPSetCookieField" indircnt="1" />
  <array name="THTTPSetCookieFieldArray">
    <element type="THTTPSetCookieField" />
  </array>
  <const name="hcoNone" type="THTTPCookieFieldEnum">
    <value>
      hcoNone
    </value>
  </const>
  <const name="hcoDecoded" type="THTTPCookieFieldEnum">
    <value>
      hcoDecoded
    </value>
  </const>
  <const name="hcoCustom" type="THTTPCookieFieldEnum">
    <value>
      hcoCustom
    </value>
  </const>
  <enum name="THTTPCookieFieldEnum">
    <element name="hcoNone" />
    <element name="hcoDecoded" />
    <element name="hcoCustom" />
  </enum>
  <struct name="THTTPCookieFieldEntry">
    <field name="Name" type="string" visibility="public" />
    <field name="Value" type="string" visibility="public" />
  </struct>
  <pointer name="PHTTPCookieFieldEntry" type="THTTPCookieFieldEntry" indircnt="1" />
  <array name="THTTPCookieFieldEntryArray">
    <element type="THTTPCookieFieldEntry" />
  </array>
  <struct name="THTTPCookieField">
    <field name="Value" type="THTTPCookieFieldEnum" visibility="public" />
    <field name="Entries" type="THTTPCookieFieldEntryArray" visibility="public" />
    <field name="Custom" type="string" visibility="public" />
  </struct>
  <struct name="THTTPCommonHeaders">
    <field name="TransferEncoding" type="THTTPTransferEncoding" visibility="public" />
    <field name="ContentType" type="THTTPContentType" visibility="public" />
    <field name="ContentLength" type="THTTPContentLength" visibility="public" />
    <field name="Connection" type="THTTPConnectionField" visibility="public" />
    <field name="ProxyConnection" type="THTTPConnectionField" visibility="public" />
    <field name="Date" type="THTTPDateField" visibility="public" />
    <field name="ContentEncoding" type="THTTPContentEncodingField" visibility="public" />
  </struct>
  <array name="THTTPFixedHeaders">
    <element type="string" />
  </array>
  <array name="THTTPCustomHeaders">
    <element type="THTTPCustomHeader" />
  </array>
  <const name="hmNone" type="THTTPMethodEnum">
    <value>
      hmNone
    </value>
  </const>
  <const name="hmCustom" type="THTTPMethodEnum">
    <value>
      hmCustom
    </value>
  </const>
  <const name="hmGET" type="THTTPMethodEnum">
    <value>
      hmGET
    </value>
  </const>
  <const name="hmPUT" type="THTTPMethodEnum">
    <value>
      hmPUT
    </value>
  </const>
  <const name="hmPOST" type="THTTPMethodEnum">
    <value>
      hmPOST
    </value>
  </const>
  <const name="hmCONNECT" type="THTTPMethodEnum">
    <value>
      hmCONNECT
    </value>
  </const>
  <const name="hmHEAD" type="THTTPMethodEnum">
    <value>
      hmHEAD
    </value>
  </const>
  <const name="hmDELETE" type="THTTPMethodEnum">
    <value>
      hmDELETE
    </value>
  </const>
  <const name="hmOPTIONS" type="THTTPMethodEnum">
    <value>
      hmOPTIONS
    </value>
  </const>
  <const name="hmTRACE" type="THTTPMethodEnum">
    <value>
      hmTRACE
    </value>
  </const>
  <enum name="THTTPMethodEnum">
    <element name="hmNone" />
    <element name="hmCustom" />
    <element name="hmGET" />
    <element name="hmPUT" />
    <element name="hmPOST" />
    <element name="hmCONNECT" />
    <element name="hmHEAD" />
    <element name="hmDELETE" />
    <element name="hmOPTIONS" />
    <element name="hmTRACE" />
  </enum>
  <struct name="THTTPMethod">
    <field name="Value" type="THTTPMethodEnum" visibility="public" />
    <field name="Custom" type="string" visibility="public" />
  </struct>
  <struct name="THTTPRequestStartLine">
    <field name="Method" type="THTTPMethod" visibility="public" />
    <field name="URI" type="string" visibility="public" />
    <field name="Version" type="THTTPVersion" visibility="public" />
  </struct>
  <struct name="THTTPRequestHeader">
    <field name="CommonHeaders" type="THTTPCommonHeaders" visibility="public" />
    <field name="FixedHeaders" type="THTTPFixedHeaders" visibility="public" />
    <field name="CustomHeaders" type="THTTPCustomHeaders" visibility="public" />
    <field name="Cookie" type="THTTPCookieField" visibility="public" />
    <field name="IfModifiedSince" type="THTTPDateField" visibility="public" />
    <field name="IfUnmodifiedSince" type="THTTPDateField" visibility="public" />
  </struct>
  <pointer name="PHTTPRequestHeader" type="THTTPRequestHeader" indircnt="1" />
  <struct name="THTTPRequest">
    <field name="StartLine" type="THTTPRequestStartLine" visibility="public" />
    <field name="Header" type="THTTPRequestHeader" visibility="public" />
    <field name="HeaderComplete" type="Boolean" visibility="public" />
    <field name="HasContent" type="Boolean" visibility="public" />
  </struct>
  <const name="hslmNone" type="THTTPResponseStartLineMessage">
    <value>
      hslmNone
    </value>
  </const>
  <const name="hslmCustom" type="THTTPResponseStartLineMessage">
    <value>
      hslmCustom
    </value>
  </const>
  <const name="hslmOK" type="THTTPResponseStartLineMessage">
    <value>
      hslmOK
    </value>
  </const>
  <enum name="THTTPResponseStartLineMessage">
    <element name="hslmNone" />
    <element name="hslmCustom" />
    <element name="hslmOK" />
  </enum>
  <struct name="THTTPResponseStartLine">
    <field name="Version" type="THTTPVersion" visibility="public" />
    <field name="Code" type="Integer" visibility="public" />
    <field name="Msg" type="THTTPResponseStartLineMessage" visibility="public" />
    <field name="CustomMsg" type="string" visibility="public" />
  </struct>
  <struct name="THTTPResponseHeader">
    <field name="CommonHeaders" type="THTTPCommonHeaders" visibility="public" />
    <field name="FixedHeaders" type="THTTPFixedHeaders" visibility="public" />
    <field name="CustomHeaders" type="THTTPCustomHeaders" visibility="public" />
    <field name="Cookies" type="THTTPSetCookieFieldArray" visibility="public" />
    <field name="Expires" type="THTTPDateField" visibility="public" />
    <field name="LastModified" type="THTTPDateField" visibility="public" />
    <field name="Age" type="THTTPAgeField" visibility="public" />
  </struct>
  <pointer name="PHTTPResponseHeader" type="THTTPResponseHeader" indircnt="1" />
  <struct name="cTHTTPResponse">
    <field name="StartLine" type="THTTPResponseStartLine" visibility="public" />
    <field name="Header" type="THTTPResponseHeader" visibility="public" />
    <field name="HeaderComplete" type="Boolean" visibility="public" />
    <field name="HasContent" type="Boolean" visibility="public" />
  </struct>
  <struct name="THTTPResponse" alias="cTHTTPResponse" namespace="cHTTPUtils">
    <field name="StartLine" type="THTTPResponseStartLine" visibility="public" />
    <field name="Header" type="THTTPResponseHeader" visibility="public" />
    <field name="HeaderComplete" type="Boolean" visibility="public" />
    <field name="HasContent" type="Boolean" visibility="public" />
  </struct>
  <class name="TAnsiStringBuilder">
    <ancestor name="TObject" namespace="System">
      <methodref name="Create" visibility="public">
      </methodref>
      <methodref name="Free" visibility="public">
      </methodref>
      <methodref name="InitInstance" visibility="public">
      </methodref>
      <methodref name="CleanupInstance" visibility="public">
      </methodref>
      <methodref name="ClassType" visibility="public">
      </methodref>
      <methodref name="ClassName" visibility="public">
      </methodref>
      <methodref name="ClassNameIs" visibility="public">
      </methodref>
      <methodref name="ClassParent" visibility="public">
      </methodref>
      <methodref name="ClassInfo" visibility="public">
      </methodref>
      <methodref name="InstanceSize" visibility="public">
      </methodref>
      <methodref name="InheritsFrom" visibility="public">
      </methodref>
      <methodref name="MethodAddress" visibility="public">
      </methodref>
      <methodref name="MethodName" visibility="public">
      </methodref>
      <methodref name="FieldAddress" visibility="public">
      </methodref>
      <methodref name="GetInterface" visibility="public">
      </methodref>
      <methodref name="GetInterfaceEntry" visibility="public">
      </methodref>
      <methodref name="GetInterfaceTable" visibility="public">
      </methodref>
      <methodref name="SafeCallException" visibility="public">
      </methodref>
      <methodref name="AfterConstruction" visibility="public">
      </methodref>
      <methodref name="BeforeDestruction" visibility="public">
      </methodref>
      <methodref name="Dispatch" visibility="public">
      </methodref>
      <methodref name="DefaultHandler" visibility="public">
      </methodref>
      <methodref name="NewInstance" visibility="public">
      </methodref>
      <methodref name="FreeInstance" visibility="public">
      </methodref>
      <methodref name="Destroy" visibility="public">
      </methodref>
    </ancestor>
    <members>
      <field name="FString" type="string" visibility="protected" />
      <field name="FLength" type="Integer" visibility="protected" />
      <procedure name="EnsureCapacity" visibility="protected">
        <parameters>
          <parameter name="L" type="Integer" paramflags="const" />
        </parameters>
      </procedure>
      <function name="GetAsAnsiString" visibility="protected">
        <parameters>
          <retval type="string" />
        </parameters>
      </function>
      <procedure name="SetAsAnsiString" visibility="protected">
        <parameters>
          <parameter name="S" type="string" paramflags="const" />
        </parameters>
      </procedure>
      <function name="GetAsString" visibility="protected">
        <parameters>
          <retval type="string" />
        </parameters>
      </function>
      <constructor name="Create" visibility="public">
        <parameters>
          <parameter name="S" type="string" paramflags="const">
            <value>
              
            </value>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="Create" visibility="public">
        <parameters>
          <parameter name="Capacity" type="Integer" paramflags="const" />
        </parameters>
      </constructor>
      <property name="Length" visibility="public" read="FLength" type="Integer" />
      <property name="AsAnsiString" visibility="public" read="GetAsAnsiString" write="SetAsAnsiString" type="string" />
      <property name="AsString" visibility="public" read="GetAsString" type="string" />
      <procedure name="Clear" visibility="public">
      </procedure>
      <procedure name="Assign" visibility="public">
        <parameters>
          <parameter name="S" type="TAnsiStringBuilder" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="Append" visibility="public" procflags="overload">
        <parameters>
          <parameter name="S" type="string" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="AppendCRLF" visibility="public">
      </procedure>
      <procedure name="AppendLn" visibility="public">
        <parameters>
          <parameter name="S" type="string" paramflags="const">
            <value>
              
            </value>
          </parameter>
        </parameters>
      </procedure>
      <procedure name="Append" visibility="public" procflags="overload">
        <parameters>
          <parameter name="S" type="string" paramflags="const" />
          <parameter name="Count" type="Integer" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="AppendCh" visibility="public" procflags="overload">
        <parameters>
          <parameter name="C" type="Char" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="AppendCh" visibility="public" procflags="overload">
        <parameters>
          <parameter name="C" type="Char" paramflags="const" />
          <parameter name="Count" type="Integer" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="Append" visibility="public" procflags="overload">
        <parameters>
          <parameter name="BufPtr" type="Pointer" paramflags="const" />
          <parameter name="Size" type="Integer" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="Append" visibility="public" procflags="overload">
        <parameters>
          <parameter name="S" type="TAnsiStringBuilder" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="Pack" visibility="public">
      </procedure>
    </members>
  </class>
  <const name="hsoNone" type="THTTPStringOption">
    <value>
      hsoNone
    </value>
  </const>
  <enum name="THTTPStringOption">
    <element name="hsoNone" />
  </enum>
  <set name="THTTPStringOptions" type="THTTPStringOption">
    <element name="hsoNone" />
  </set>
  <class name="cTHTTPParser">
    <ancestor name="TObject" namespace="System">
      <methodref name="Create" visibility="public">
      </methodref>
      <methodref name="Free" visibility="public">
      </methodref>
      <methodref name="InitInstance" visibility="public">
      </methodref>
      <methodref name="CleanupInstance" visibility="public">
      </methodref>
      <methodref name="ClassType" visibility="public">
      </methodref>
      <methodref name="ClassName" visibility="public">
      </methodref>
      <methodref name="ClassNameIs" visibility="public">
      </methodref>
      <methodref name="ClassParent" visibility="public">
      </methodref>
      <methodref name="ClassInfo" visibility="public">
      </methodref>
      <methodref name="InstanceSize" visibility="public">
      </methodref>
      <methodref name="InheritsFrom" visibility="public">
      </methodref>
      <methodref name="MethodAddress" visibility="public">
      </methodref>
      <methodref name="MethodName" visibility="public">
      </methodref>
      <methodref name="FieldAddress" visibility="public">
      </methodref>
      <methodref name="GetInterface" visibility="public">
      </methodref>
      <methodref name="GetInterfaceEntry" visibility="public">
      </methodref>
      <methodref name="GetInterfaceTable" visibility="public">
      </methodref>
      <methodref name="SafeCallException" visibility="public">
      </methodref>
      <methodref name="AfterConstruction" visibility="public">
      </methodref>
      <methodref name="BeforeDestruction" visibility="public">
      </methodref>
      <methodref name="Dispatch" visibility="public">
      </methodref>
      <methodref name="DefaultHandler" visibility="public">
      </methodref>
      <methodref name="NewInstance" visibility="public">
      </methodref>
      <methodref name="FreeInstance" visibility="public">
      </methodref>
      <methodref name="Destroy" visibility="public">
      </methodref>
    </ancestor>
    <members>
      <field name="FBufPtr" type="Pointer" visibility="private" />
      <field name="FBufSize" type="Integer" visibility="private" />
      <field name="FBufPos" type="Integer" visibility="private" />
      <field name="FBufStrRef" type="string" visibility="private" />
      <function name="EOF" visibility="private">
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="MatchStrAndCh" visibility="private">
        <parameters>
          <parameter name="S" type="string" paramflags="const" />
          <parameter name="CaseSensitive" type="Boolean" paramflags="const" />
          <parameter name="C" type="AnsiCharSet" paramflags="const" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="MatchStr" visibility="private">
        <parameters>
          <parameter name="S" type="string" paramflags="const" />
          <parameter name="CaseSensitive" type="Boolean" paramflags="const" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="SkipStrAndCh" visibility="private">
        <parameters>
          <parameter name="S" type="string" paramflags="const" />
          <parameter name="DelimSet" type="AnsiCharSet" paramflags="const" />
          <parameter name="SkipDelim" type="Boolean" paramflags="const" />
          <parameter name="CaseSensitive" type="Boolean" paramflags="const" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="SkipCh" visibility="private">
        <parameters>
          <parameter name="C" type="AnsiCharSet" paramflags="const" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="SkipAllCh" visibility="private">
        <parameters>
          <parameter name="C" type="AnsiCharSet" paramflags="const" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="SkipToStr" visibility="private">
        <parameters>
          <parameter name="S" type="string" paramflags="const" />
          <parameter name="CaseSensitive" type="Boolean" paramflags="const" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="SkipCRLF" visibility="private">
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="SkipSpace" visibility="private">
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="SkipLWS" visibility="private">
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="SkipToCRLF" visibility="private">
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="ExtractAllCh" visibility="private">
        <parameters>
          <parameter name="C" type="AnsiCharSet" paramflags="const" />
          <retval type="string" />
        </parameters>
      </function>
      <function name="ExtractTo" visibility="private">
        <parameters>
          <parameter name="C" type="AnsiCharSet" paramflags="const" />
          <parameter name="S" type="string" paramflags="var" />
          <parameter name="SkipDelim" type="Boolean" paramflags="const" />
          <retval type="Char" />
        </parameters>
      </function>
      <function name="ExtractStrTo" visibility="private">
        <parameters>
          <parameter name="C" type="AnsiCharSet" paramflags="const" />
          <parameter name="SkipDelim" type="Boolean" paramflags="const" />
          <retval type="string" />
        </parameters>
      </function>
      <function name="ExtractInt" visibility="private">
        <parameters>
          <parameter name="Default" type="Int64" paramflags="const" />
          <retval type="Int64" />
        </parameters>
      </function>
      <function name="ExtractIntTo" visibility="private">
        <parameters>
          <parameter name="C" type="AnsiCharSet" paramflags="const" />
          <parameter name="SkipDelim" type="Boolean" paramflags="const" />
          <parameter name="Default" type="Int64" paramflags="const" />
          <retval type="Int64" />
        </parameters>
      </function>
      <procedure name="ParseCustomVersion" visibility="private">
        <parameters>
          <parameter name="Protocol" type="THTTPVersion" paramflags="var" />
        </parameters>
      </procedure>
      <procedure name="ParseVersion" visibility="private">
        <parameters>
          <parameter name="Version" type="THTTPVersion" paramflags="var" />
        </parameters>
      </procedure>
      <procedure name="ParseHeaderName" visibility="private">
        <parameters>
          <parameter name="HeaderName" type="THTTPHeaderName" paramflags="var" />
        </parameters>
      </procedure>
      <procedure name="ParseHeaderValue" visibility="private">
        <parameters>
          <parameter name="HeaderValue" type="string" paramflags="var" />
        </parameters>
      </procedure>
      <procedure name="ParseTransferEncoding" visibility="private">
        <parameters>
          <parameter name="Value" type="THTTPTransferEncoding" paramflags="var" />
        </parameters>
      </procedure>
      <procedure name="ParseContentType" visibility="private">
        <parameters>
          <parameter name="Value" type="THTTPContentType" paramflags="var" />
        </parameters>
      </procedure>
      <procedure name="ParseContentLength" visibility="private">
        <parameters>
          <parameter name="Value" type="THTTPContentLength" paramflags="var" />
        </parameters>
      </procedure>
      <procedure name="ParseConnectionField" visibility="private">
        <parameters>
          <parameter name="Value" type="THTTPConnectionField" paramflags="var" />
        </parameters>
      </procedure>
      <procedure name="ParseDateField" visibility="private">
        <parameters>
          <parameter name="Value" type="THTTPDateField" paramflags="var" />
        </parameters>
      </procedure>
      <procedure name="ParseAgeField" visibility="private">
        <parameters>
          <parameter name="Value" type="THTTPAgeField" paramflags="var" />
        </parameters>
      </procedure>
      <procedure name="ParseContentEncoding" visibility="private">
        <parameters>
          <parameter name="Value" type="THTTPContentEncoding" paramflags="var" />
        </parameters>
      </procedure>
      <procedure name="ParseContentEncodingField" visibility="private">
        <parameters>
          <parameter name="Value" type="THTTPContentEncodingField" paramflags="var" />
        </parameters>
      </procedure>
      <function name="ParseCommonHeaderValue" visibility="private">
        <parameters>
          <parameter name="HeaderName" type="THTTPHeaderNameEnum" paramflags="const" />
          <parameter name="Headers" type="THTTPCommonHeaders" paramflags="var" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <procedure name="ParseSetCookieField" visibility="private">
        <parameters>
          <parameter name="Cookie" type="THTTPSetCookieField" paramflags="var" />
        </parameters>
      </procedure>
      <function name="ParseHeader" visibility="private">
        <parameters>
          <parameter name="ParseEvent" type="THTTPParserHeaderParseFunc" paramflags="const" />
          <parameter name="HeaderPtr" type="Pointer" paramflags="const" />
          <parameter name="CommonHeaders" type="THTTPCommonHeaders" paramflags="var" />
          <parameter name="HeaderName" type="THTTPHeaderName" paramflags="var" />
          <parameter name="HeaderValue" type="string" paramflags="var" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="ParseContent" visibility="private">
        <parameters>
          <parameter name="Headers" type="THTTPCommonHeaders" paramflags="const" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <procedure name="ParseRequestMethod" visibility="private">
        <parameters>
          <parameter name="Method" type="THTTPMethod" paramflags="var" />
        </parameters>
      </procedure>
      <procedure name="ParseRequestURI" visibility="private">
        <parameters>
          <parameter name="URI" type="string" paramflags="var" />
        </parameters>
      </procedure>
      <function name="ParseRequestStartLine" visibility="private">
        <parameters>
          <parameter name="StartLine" type="THTTPRequestStartLine" paramflags="var" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="ParseRequestHeaderValue" visibility="private">
        <parameters>
          <parameter name="HeaderName" type="THTTPHeaderNameEnum" paramflags="const" />
          <parameter name="HeaderPtr" type="Pointer" paramflags="const" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="ParseRequestHeader" visibility="private">
        <parameters>
          <parameter name="Header" type="THTTPRequestHeader" paramflags="var" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="ParseRequestContent" visibility="private">
        <parameters>
          <parameter name="Request" type="THTTPRequest" paramflags="var" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <procedure name="ParseResponseCode" visibility="private">
        <parameters>
          <parameter name="Code" type="Integer" paramflags="var" />
        </parameters>
      </procedure>
      <function name="ParseResponseStartLine" visibility="private">
        <parameters>
          <parameter name="StartLine" type="THTTPResponseStartLine" paramflags="var" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="ParseResponseHeaderValue" visibility="private">
        <parameters>
          <parameter name="HeaderName" type="THTTPHeaderNameEnum" paramflags="const" />
          <parameter name="HeaderPtr" type="Pointer" paramflags="const" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="ParseResponseHeader" visibility="private">
        <parameters>
          <parameter name="Header" type="THTTPResponseHeader" paramflags="var" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="ParseResponseContent" visibility="private">
        <parameters>
          <parameter name="Response" type="cTHTTPResponse" paramflags="var" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <constructor name="Create" visibility="public">
        <parameters>
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public">
        <parameters>
        </parameters>
      </destructor>
      <procedure name="SetTextBuf" visibility="public">
        <parameters>
          <parameter name="Buf" paramflags="const" />
          <parameter name="BufSize" type="Integer" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="SetTextStr" visibility="public">
        <parameters>
          <parameter name="S" type="string" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="ParseRequest" visibility="public">
        <parameters>
          <parameter name="Request" type="THTTPRequest" paramflags="var" />
        </parameters>
      </procedure>
      <procedure name="ParseResponse" visibility="public">
        <parameters>
          <parameter name="Response" type="cTHTTPResponse" paramflags="var" />
        </parameters>
      </procedure>
    </members>
  </class>
  <class name="THTTPParser" alias="cTHTTPParser" namespace="cHTTPUtils">
    <ancestor name="TObject" namespace="System">
      <methodref name="Create" visibility="public">
      </methodref>
      <methodref name="Free" visibility="public">
      </methodref>
      <methodref name="InitInstance" visibility="public">
      </methodref>
      <methodref name="CleanupInstance" visibility="public">
      </methodref>
      <methodref name="ClassType" visibility="public">
      </methodref>
      <methodref name="ClassName" visibility="public">
      </methodref>
      <methodref name="ClassNameIs" visibility="public">
      </methodref>
      <methodref name="ClassParent" visibility="public">
      </methodref>
      <methodref name="ClassInfo" visibility="public">
      </methodref>
      <methodref name="InstanceSize" visibility="public">
      </methodref>
      <methodref name="InheritsFrom" visibility="public">
      </methodref>
      <methodref name="MethodAddress" visibility="public">
      </methodref>
      <methodref name="MethodName" visibility="public">
      </methodref>
      <methodref name="FieldAddress" visibility="public">
      </methodref>
      <methodref name="GetInterface" visibility="public">
      </methodref>
      <methodref name="GetInterfaceEntry" visibility="public">
      </methodref>
      <methodref name="GetInterfaceTable" visibility="public">
      </methodref>
      <methodref name="SafeCallException" visibility="public">
      </methodref>
      <methodref name="AfterConstruction" visibility="public">
      </methodref>
      <methodref name="BeforeDestruction" visibility="public">
      </methodref>
      <methodref name="Dispatch" visibility="public">
      </methodref>
      <methodref name="DefaultHandler" visibility="public">
      </methodref>
      <methodref name="NewInstance" visibility="public">
      </methodref>
      <methodref name="FreeInstance" visibility="public">
      </methodref>
      <methodref name="Destroy" visibility="public">
      </methodref>
    </ancestor>
    <members>
      <field name="FBufPtr" type="Pointer" visibility="private" />
      <field name="FBufSize" type="Integer" visibility="private" />
      <field name="FBufPos" type="Integer" visibility="private" />
      <field name="FBufStrRef" type="string" visibility="private" />
      <function name="EOF" visibility="private">
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="MatchStrAndCh" visibility="private">
        <parameters>
          <parameter name="S" type="string" paramflags="const" />
          <parameter name="CaseSensitive" type="Boolean" paramflags="const" />
          <parameter name="C" type="AnsiCharSet" paramflags="const" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="MatchStr" visibility="private">
        <parameters>
          <parameter name="S" type="string" paramflags="const" />
          <parameter name="CaseSensitive" type="Boolean" paramflags="const" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="SkipStrAndCh" visibility="private">
        <parameters>
          <parameter name="S" type="string" paramflags="const" />
          <parameter name="DelimSet" type="AnsiCharSet" paramflags="const" />
          <parameter name="SkipDelim" type="Boolean" paramflags="const" />
          <parameter name="CaseSensitive" type="Boolean" paramflags="const" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="SkipCh" visibility="private">
        <parameters>
          <parameter name="C" type="AnsiCharSet" paramflags="const" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="SkipAllCh" visibility="private">
        <parameters>
          <parameter name="C" type="AnsiCharSet" paramflags="const" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="SkipToStr" visibility="private">
        <parameters>
          <parameter name="S" type="string" paramflags="const" />
          <parameter name="CaseSensitive" type="Boolean" paramflags="const" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="SkipCRLF" visibility="private">
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="SkipSpace" visibility="private">
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="SkipLWS" visibility="private">
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="SkipToCRLF" visibility="private">
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="ExtractAllCh" visibility="private">
        <parameters>
          <parameter name="C" type="AnsiCharSet" paramflags="const" />
          <retval type="string" />
        </parameters>
      </function>
      <function name="ExtractTo" visibility="private">
        <parameters>
          <parameter name="C" type="AnsiCharSet" paramflags="const" />
          <parameter name="S" type="string" paramflags="var" />
          <parameter name="SkipDelim" type="Boolean" paramflags="const" />
          <retval type="Char" />
        </parameters>
      </function>
      <function name="ExtractStrTo" visibility="private">
        <parameters>
          <parameter name="C" type="AnsiCharSet" paramflags="const" />
          <parameter name="SkipDelim" type="Boolean" paramflags="const" />
          <retval type="string" />
        </parameters>
      </function>
      <function name="ExtractInt" visibility="private">
        <parameters>
          <parameter name="Default" type="Int64" paramflags="const" />
          <retval type="Int64" />
        </parameters>
      </function>
      <function name="ExtractIntTo" visibility="private">
        <parameters>
          <parameter name="C" type="AnsiCharSet" paramflags="const" />
          <parameter name="SkipDelim" type="Boolean" paramflags="const" />
          <parameter name="Default" type="Int64" paramflags="const" />
          <retval type="Int64" />
        </parameters>
      </function>
      <procedure name="ParseCustomVersion" visibility="private">
        <parameters>
          <parameter name="Protocol" type="THTTPVersion" paramflags="var" />
        </parameters>
      </procedure>
      <procedure name="ParseVersion" visibility="private">
        <parameters>
          <parameter name="Version" type="THTTPVersion" paramflags="var" />
        </parameters>
      </procedure>
      <procedure name="ParseHeaderName" visibility="private">
        <parameters>
          <parameter name="HeaderName" type="THTTPHeaderName" paramflags="var" />
        </parameters>
      </procedure>
      <procedure name="ParseHeaderValue" visibility="private">
        <parameters>
          <parameter name="HeaderValue" type="string" paramflags="var" />
        </parameters>
      </procedure>
      <procedure name="ParseTransferEncoding" visibility="private">
        <parameters>
          <parameter name="Value" type="THTTPTransferEncoding" paramflags="var" />
        </parameters>
      </procedure>
      <procedure name="ParseContentType" visibility="private">
        <parameters>
          <parameter name="Value" type="THTTPContentType" paramflags="var" />
        </parameters>
      </procedure>
      <procedure name="ParseContentLength" visibility="private">
        <parameters>
          <parameter name="Value" type="THTTPContentLength" paramflags="var" />
        </parameters>
      </procedure>
      <procedure name="ParseConnectionField" visibility="private">
        <parameters>
          <parameter name="Value" type="THTTPConnectionField" paramflags="var" />
        </parameters>
      </procedure>
      <procedure name="ParseDateField" visibility="private">
        <parameters>
          <parameter name="Value" type="THTTPDateField" paramflags="var" />
        </parameters>
      </procedure>
      <procedure name="ParseAgeField" visibility="private">
        <parameters>
          <parameter name="Value" type="THTTPAgeField" paramflags="var" />
        </parameters>
      </procedure>
      <procedure name="ParseContentEncoding" visibility="private">
        <parameters>
          <parameter name="Value" type="THTTPContentEncoding" paramflags="var" />
        </parameters>
      </procedure>
      <procedure name="ParseContentEncodingField" visibility="private">
        <parameters>
          <parameter name="Value" type="THTTPContentEncodingField" paramflags="var" />
        </parameters>
      </procedure>
      <function name="ParseCommonHeaderValue" visibility="private">
        <parameters>
          <parameter name="HeaderName" type="THTTPHeaderNameEnum" paramflags="const" />
          <parameter name="Headers" type="THTTPCommonHeaders" paramflags="var" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <procedure name="ParseSetCookieField" visibility="private">
        <parameters>
          <parameter name="Cookie" type="THTTPSetCookieField" paramflags="var" />
        </parameters>
      </procedure>
      <function name="ParseHeader" visibility="private">
        <parameters>
          <parameter name="ParseEvent" type="THTTPParserHeaderParseFunc" paramflags="const" />
          <parameter name="HeaderPtr" type="Pointer" paramflags="const" />
          <parameter name="CommonHeaders" type="THTTPCommonHeaders" paramflags="var" />
          <parameter name="HeaderName" type="THTTPHeaderName" paramflags="var" />
          <parameter name="HeaderValue" type="string" paramflags="var" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="ParseContent" visibility="private">
        <parameters>
          <parameter name="Headers" type="THTTPCommonHeaders" paramflags="const" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <procedure name="ParseRequestMethod" visibility="private">
        <parameters>
          <parameter name="Method" type="THTTPMethod" paramflags="var" />
        </parameters>
      </procedure>
      <procedure name="ParseRequestURI" visibility="private">
        <parameters>
          <parameter name="URI" type="string" paramflags="var" />
        </parameters>
      </procedure>
      <function name="ParseRequestStartLine" visibility="private">
        <parameters>
          <parameter name="StartLine" type="THTTPRequestStartLine" paramflags="var" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="ParseRequestHeaderValue" visibility="private">
        <parameters>
          <parameter name="HeaderName" type="THTTPHeaderNameEnum" paramflags="const" />
          <parameter name="HeaderPtr" type="Pointer" paramflags="const" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="ParseRequestHeader" visibility="private">
        <parameters>
          <parameter name="Header" type="THTTPRequestHeader" paramflags="var" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="ParseRequestContent" visibility="private">
        <parameters>
          <parameter name="Request" type="THTTPRequest" paramflags="var" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <procedure name="ParseResponseCode" visibility="private">
        <parameters>
          <parameter name="Code" type="Integer" paramflags="var" />
        </parameters>
      </procedure>
      <function name="ParseResponseStartLine" visibility="private">
        <parameters>
          <parameter name="StartLine" type="THTTPResponseStartLine" paramflags="var" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="ParseResponseHeaderValue" visibility="private">
        <parameters>
          <parameter name="HeaderName" type="THTTPHeaderNameEnum" paramflags="const" />
          <parameter name="HeaderPtr" type="Pointer" paramflags="const" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="ParseResponseHeader" visibility="private">
        <parameters>
          <parameter name="Header" type="THTTPResponseHeader" paramflags="var" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="ParseResponseContent" visibility="private">
        <parameters>
          <parameter name="Response" type="cTHTTPResponse" paramflags="var" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <constructor name="Create" visibility="public">
        <parameters>
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public">
        <parameters>
        </parameters>
      </destructor>
      <procedure name="SetTextBuf" visibility="public">
        <parameters>
          <parameter name="Buf" paramflags="const" />
          <parameter name="BufSize" type="Integer" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="SetTextStr" visibility="public">
        <parameters>
          <parameter name="S" type="string" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="ParseRequest" visibility="public">
        <parameters>
          <parameter name="Request" type="THTTPRequest" paramflags="var" />
        </parameters>
      </procedure>
      <procedure name="ParseResponse" visibility="public">
        <parameters>
          <parameter name="Response" type="cTHTTPResponse" paramflags="var" />
        </parameters>
      </procedure>
    </members>
  </class>
  <const name="crctFixedSize" type="THTTPContentDecoderContentType">
    <value>
      crctFixedSize
    </value>
  </const>
  <const name="crctChunked" type="THTTPContentDecoderContentType">
    <value>
      crctChunked
    </value>
  </const>
  <const name="crctUnsized" type="THTTPContentDecoderContentType">
    <value>
      crctUnsized
    </value>
  </const>
  <enum name="THTTPContentDecoderContentType">
    <element name="crctFixedSize" />
    <element name="crctChunked" />
    <element name="crctUnsized" />
  </enum>
  <const name="crcsChunkHeader" type="THTTPContentDecoderChunkState">
    <value>
      crcsChunkHeader
    </value>
  </const>
  <const name="crcsContent" type="THTTPContentDecoderChunkState">
    <value>
      crcsContent
    </value>
  </const>
  <const name="crcsContentCRLF" type="THTTPContentDecoderChunkState">
    <value>
      crcsContentCRLF
    </value>
  </const>
  <const name="crcsTrailer" type="THTTPContentDecoderChunkState">
    <value>
      crcsTrailer
    </value>
  </const>
  <const name="crcsFinished" type="THTTPContentDecoderChunkState">
    <value>
      crcsFinished
    </value>
  </const>
  <enum name="THTTPContentDecoderChunkState">
    <element name="crcsChunkHeader" />
    <element name="crcsContent" />
    <element name="crcsContentCRLF" />
    <element name="crcsTrailer" />
    <element name="crcsFinished" />
  </enum>
  <class name="THTTPContentDecoder">
    <ancestor name="TObject" namespace="System">
      <methodref name="Create" visibility="public">
      </methodref>
      <methodref name="Free" visibility="public">
      </methodref>
      <methodref name="InitInstance" visibility="public">
      </methodref>
      <methodref name="CleanupInstance" visibility="public">
      </methodref>
      <methodref name="ClassType" visibility="public">
      </methodref>
      <methodref name="ClassName" visibility="public">
      </methodref>
      <methodref name="ClassNameIs" visibility="public">
      </methodref>
      <methodref name="ClassParent" visibility="public">
      </methodref>
      <methodref name="ClassInfo" visibility="public">
      </methodref>
      <methodref name="InstanceSize" visibility="public">
      </methodref>
      <methodref name="InheritsFrom" visibility="public">
      </methodref>
      <methodref name="MethodAddress" visibility="public">
      </methodref>
      <methodref name="MethodName" visibility="public">
      </methodref>
      <methodref name="FieldAddress" visibility="public">
      </methodref>
      <methodref name="GetInterface" visibility="public">
      </methodref>
      <methodref name="GetInterfaceEntry" visibility="public">
      </methodref>
      <methodref name="GetInterfaceTable" visibility="public">
      </methodref>
      <methodref name="SafeCallException" visibility="public">
      </methodref>
      <methodref name="AfterConstruction" visibility="public">
      </methodref>
      <methodref name="BeforeDestruction" visibility="public">
      </methodref>
      <methodref name="Dispatch" visibility="public">
      </methodref>
      <methodref name="DefaultHandler" visibility="public">
      </methodref>
      <methodref name="NewInstance" visibility="public">
      </methodref>
      <methodref name="FreeInstance" visibility="public">
      </methodref>
      <methodref name="Destroy" visibility="public">
      </methodref>
    </ancestor>
    <members>
      <field name="FReadProc" type="THTTPContentDecoderReadProc" visibility="private" />
      <field name="FContentProc" type="THTTPContentDecoderContentProc" visibility="private" />
      <field name="FCompleteProc" type="THTTPContentDecoderProc" visibility="private" />
      <field name="FOnLog" type="THTTPContentDecoderLogEvent" visibility="private" />
      <field name="FContentType" type="THTTPContentDecoderContentType" visibility="private" />
      <field name="FContentSize" type="Int64" visibility="private" />
      <field name="FContentReceived" type="Int64" visibility="private" />
      <field name="FContentComplete" type="Boolean" visibility="private" />
      <field name="FChunkState" type="THTTPContentDecoderChunkState" visibility="private" />
      <field name="FChunkBuf" type="TTCPBuffer" visibility="private" />
      <field name="FChunkSize" type="Int64" visibility="private" />
      <field name="FChunkProcessed" type="Int64" visibility="private" />
      <procedure name="Init" visibility="private">
      </procedure>
      <procedure name="Log" visibility="private" procflags="overload">
        <parameters>
          <parameter name="LogMsg" type="string" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="Log" visibility="private" procflags="overload">
        <parameters>
          <parameter name="LogMsg" type="string" paramflags="const" />
          <parameter name="LogArgs" paramflags="const">
            <array name="LogArgs">
              <element type="TVarRec" />
            </array>
          </parameter>
        </parameters>
      </procedure>
      <procedure name="TriggerContentBuffer" visibility="private">
        <parameters>
          <parameter name="Buf" paramflags="const" />
          <parameter name="Size" type="Integer" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="TriggerContentComplete" visibility="private">
      </procedure>
      <procedure name="TriggerTrailer" visibility="private">
        <parameters>
          <parameter name="Hdr" type="string" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="ProcessFixedSize" visibility="private">
      </procedure>
      <procedure name="ProcessUnsized" visibility="private">
      </procedure>
      <function name="ProcessChunked_FillBuf" visibility="private">
        <parameters>
          <parameter name="Size" type="Integer" paramflags="const" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="ProcessChunked_FillBufBlock" visibility="private">
        <parameters>
          <parameter name="Size" type="Integer" paramflags="const" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="ProcessChunked_FillBufToCRLF" visibility="private">
        <parameters>
          <parameter name="BlockSize" type="Integer" paramflags="const" />
          <retval type="Integer" />
        </parameters>
      </function>
      <function name="ProcessChunked_ReadStrToCRLF" visibility="private">
        <parameters>
          <parameter name="BlockSize" type="Integer" paramflags="const" />
          <parameter name="Str" type="string" paramflags="var" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="ProcessChunked_ExpectCRLF" visibility="private">
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="ProcessChunked_BufferCRLFPosition" visibility="private">
        <parameters>
          <retval type="Integer" />
        </parameters>
      </function>
      <function name="ProcessChunked_ReadHeader" visibility="private">
        <parameters>
          <parameter name="HdrStr" type="string" paramflags="var" />
          <parameter name="ChunkSize" type="Int64" paramflags="var" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="ProcessChunked_Header" visibility="private">
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="ProcessChunked_Content" visibility="private">
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="ProcessChunked_ContentCRLF" visibility="private">
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="ProcessChunked_Trailer" visibility="private">
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <procedure name="ProcessChunked_Finalise" visibility="private">
      </procedure>
      <procedure name="ProcessChunked" visibility="private">
      </procedure>
      <constructor name="Create" visibility="public">
        <parameters>
          <parameter name="ReadProc" type="THTTPContentDecoderReadProc" paramflags="const" />
          <parameter name="ContentProc" type="THTTPContentDecoderContentProc" paramflags="const" />
          <parameter name="CompleteProc" type="THTTPContentDecoderProc" paramflags="const" />
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public">
        <parameters>
        </parameters>
      </destructor>
      <event name="OnLog" visibility="public" read="FOnLog" write="FOnLog" type="THTTPContentDecoderLogEvent" />
      <property name="ContentSize" visibility="public" read="FContentSize" type="Int64" />
      <property name="ContentReceived" visibility="public" read="FContentReceived" type="Int64" />
      <property name="ContentComplete" visibility="public" read="FContentComplete" type="Boolean" />
      <procedure name="InitDecoder" visibility="public">
        <parameters>
          <parameter name="CommonHeaders" type="THTTPCommonHeaders" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="Process" visibility="public">
      </procedure>
    </members>
  </class>
  <const name="hcrmEvent" type="THTTPContentReaderMechanism">
    <value>
      hcrmEvent
    </value>
  </const>
  <const name="hcrmString" type="THTTPContentReaderMechanism">
    <value>
      hcrmString
    </value>
  </const>
  <const name="hcrmStream" type="THTTPContentReaderMechanism">
    <value>
      hcrmStream
    </value>
  </const>
  <const name="hcrmFile" type="THTTPContentReaderMechanism">
    <value>
      hcrmFile
    </value>
  </const>
  <enum name="THTTPContentReaderMechanism">
    <element name="hcrmEvent" />
    <element name="hcrmString" />
    <element name="hcrmStream" />
    <element name="hcrmFile" />
  </enum>
  <class name="THTTPContentReader">
    <ancestor name="TObject" namespace="System">
      <methodref name="Create" visibility="public">
      </methodref>
      <methodref name="Free" visibility="public">
      </methodref>
      <methodref name="InitInstance" visibility="public">
      </methodref>
      <methodref name="CleanupInstance" visibility="public">
      </methodref>
      <methodref name="ClassType" visibility="public">
      </methodref>
      <methodref name="ClassName" visibility="public">
      </methodref>
      <methodref name="ClassNameIs" visibility="public">
      </methodref>
      <methodref name="ClassParent" visibility="public">
      </methodref>
      <methodref name="ClassInfo" visibility="public">
      </methodref>
      <methodref name="InstanceSize" visibility="public">
      </methodref>
      <methodref name="InheritsFrom" visibility="public">
      </methodref>
      <methodref name="MethodAddress" visibility="public">
      </methodref>
      <methodref name="MethodName" visibility="public">
      </methodref>
      <methodref name="FieldAddress" visibility="public">
      </methodref>
      <methodref name="GetInterface" visibility="public">
      </methodref>
      <methodref name="GetInterfaceEntry" visibility="public">
      </methodref>
      <methodref name="GetInterfaceTable" visibility="public">
      </methodref>
      <methodref name="SafeCallException" visibility="public">
      </methodref>
      <methodref name="AfterConstruction" visibility="public">
      </methodref>
      <methodref name="BeforeDestruction" visibility="public">
      </methodref>
      <methodref name="Dispatch" visibility="public">
      </methodref>
      <methodref name="DefaultHandler" visibility="public">
      </methodref>
      <methodref name="NewInstance" visibility="public">
      </methodref>
      <methodref name="FreeInstance" visibility="public">
      </methodref>
      <methodref name="Destroy" visibility="public">
      </methodref>
    </ancestor>
    <members>
      <field name="FReadProc" type="THTTPContentReaderReadProc" visibility="private" />
      <field name="FContentProc" type="THTTPContentReaderContentProc" visibility="private" />
      <field name="FCompleteProc" type="THTTPContentReaderProc" visibility="private" />
      <field name="FOnLog" type="THTTPContentReaderLogEvent" visibility="private" />
      <field name="FMechanism" type="THTTPContentReaderMechanism" visibility="private" />
      <field name="FContentStream" type="TStream" visibility="private" />
      <field name="FContentFileName" type="string" visibility="private" />
      <field name="FContentDecoder" type="THTTPContentDecoder" visibility="private" />
      <field name="FContentStringBuilder" type="TAnsiStringBuilder" visibility="private" />
      <field name="FContentString" type="string" visibility="private" />
      <field name="FContentFile" type="TStream" visibility="private" />
      <field name="FContentComplete" type="Boolean" visibility="private" />
      <procedure name="Init" visibility="private">
      </procedure>
      <procedure name="Log" visibility="private" procflags="overload">
        <parameters>
          <parameter name="LogMsg" type="string" paramflags="const" />
          <parameter name="LogLevel" type="Integer" paramflags="const">
            <value>
              $0
            </value>
          </parameter>
        </parameters>
      </procedure>
      <procedure name="Log" visibility="private" procflags="overload">
        <parameters>
          <parameter name="LogMsg" type="string" paramflags="const" />
          <parameter name="LogArgs" paramflags="const">
            <array name="LogArgs">
              <element type="TVarRec" />
            </array>
          </parameter>
          <parameter name="LogLevel" type="Integer" paramflags="const">
            <value>
              $0
            </value>
          </parameter>
        </parameters>
      </procedure>
      <procedure name="ContentDecoderLog" visibility="private">
        <parameters>
          <parameter name="Sender" type="THTTPContentDecoder" paramflags="const" />
          <parameter name="LogMsg" type="string" paramflags="const" />
        </parameters>
      </procedure>
      <function name="ContentDecoderReadProc" visibility="private">
        <parameters>
          <parameter name="Sender" type="THTTPContentDecoder" paramflags="const" />
          <parameter name="Buf" paramflags="var" />
          <parameter name="Size" type="Integer" paramflags="const" />
          <retval type="Integer" />
        </parameters>
      </function>
      <procedure name="ContentDecoderContentProc" visibility="private">
        <parameters>
          <parameter name="Sender" type="THTTPContentDecoder" paramflags="const" />
          <parameter name="Buf" paramflags="const" />
          <parameter name="Size" type="Integer" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="ContentDecoderCompleteProc" visibility="private">
        <parameters>
          <parameter name="Sender" type="THTTPContentDecoder" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="InternalReset" visibility="private">
      </procedure>
      <constructor name="Create" visibility="public">
        <parameters>
          <parameter name="ReadProc" type="THTTPContentReaderReadProc" paramflags="const" />
          <parameter name="ContentProc" type="THTTPContentReaderContentProc" paramflags="const" />
          <parameter name="CompleteProc" type="THTTPContentReaderProc" paramflags="const" />
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public">
        <parameters>
        </parameters>
      </destructor>
      <event name="OnLog" visibility="public" read="FOnLog" write="FOnLog" type="THTTPContentReaderLogEvent" />
      <property name="Mechanism" visibility="public" read="FMechanism" write="FMechanism" type="THTTPContentReaderMechanism" />
      <property name="ContentStream" visibility="public" read="FContentStream" write="FContentStream" type="TStream" />
      <property name="ContentFileName" visibility="public" read="FContentFileName" write="FContentFileName" type="string" />
      <procedure name="InitReader" visibility="public">
        <parameters>
          <parameter name="CommonHeaders" type="THTTPCommonHeaders" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="Process" visibility="public">
      </procedure>
      <property name="ContentComplete" visibility="public" read="FContentComplete" type="Boolean" />
      <property name="ContentString" visibility="public" read="FContentString" type="string" />
      <procedure name="Reset" visibility="public">
      </procedure>
    </members>
  </class>
  <const name="hctmEvent" type="THTTPContentWriterMechanism">
    <value>
      hctmEvent
    </value>
  </const>
  <const name="hctmString" type="THTTPContentWriterMechanism">
    <value>
      hctmString
    </value>
  </const>
  <const name="hctmStream" type="THTTPContentWriterMechanism">
    <value>
      hctmStream
    </value>
  </const>
  <const name="hctmFile" type="THTTPContentWriterMechanism">
    <value>
      hctmFile
    </value>
  </const>
  <enum name="THTTPContentWriterMechanism">
    <element name="hctmEvent" />
    <element name="hctmString" />
    <element name="hctmStream" />
    <element name="hctmFile" />
  </enum>
  <class name="THTTPContentWriter">
    <ancestor name="TObject" namespace="System">
      <methodref name="Create" visibility="public">
      </methodref>
      <methodref name="Free" visibility="public">
      </methodref>
      <methodref name="InitInstance" visibility="public">
      </methodref>
      <methodref name="CleanupInstance" visibility="public">
      </methodref>
      <methodref name="ClassType" visibility="public">
      </methodref>
      <methodref name="ClassName" visibility="public">
      </methodref>
      <methodref name="ClassNameIs" visibility="public">
      </methodref>
      <methodref name="ClassParent" visibility="public">
      </methodref>
      <methodref name="ClassInfo" visibility="public">
      </methodref>
      <methodref name="InstanceSize" visibility="public">
      </methodref>
      <methodref name="InheritsFrom" visibility="public">
      </methodref>
      <methodref name="MethodAddress" visibility="public">
      </methodref>
      <methodref name="MethodName" visibility="public">
      </methodref>
      <methodref name="FieldAddress" visibility="public">
      </methodref>
      <methodref name="GetInterface" visibility="public">
      </methodref>
      <methodref name="GetInterfaceEntry" visibility="public">
      </methodref>
      <methodref name="GetInterfaceTable" visibility="public">
      </methodref>
      <methodref name="SafeCallException" visibility="public">
      </methodref>
      <methodref name="AfterConstruction" visibility="public">
      </methodref>
      <methodref name="BeforeDestruction" visibility="public">
      </methodref>
      <methodref name="Dispatch" visibility="public">
      </methodref>
      <methodref name="DefaultHandler" visibility="public">
      </methodref>
      <methodref name="NewInstance" visibility="public">
      </methodref>
      <methodref name="FreeInstance" visibility="public">
      </methodref>
      <methodref name="Destroy" visibility="public">
      </methodref>
    </ancestor>
    <members>
      <field name="FWriteProc" type="THTTPContentWriterWriteProc" visibility="private" />
      <field name="FOnLog" type="THTTPContentWriterLogEvent" visibility="private" />
      <field name="FMechanism" type="THTTPContentWriterMechanism" visibility="private" />
      <field name="FContentString" type="string" visibility="private" />
      <field name="FContentStream" type="TStream" visibility="private" />
      <field name="FContentFileName" type="string" visibility="private" />
      <field name="FContentFile" type="TStream" visibility="private" />
      <field name="FContentComplete" type="Boolean" visibility="private" />
      <procedure name="Init" visibility="private">
      </procedure>
      <procedure name="Log" visibility="private">
        <parameters>
          <parameter name="LogMsg" type="string" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="WriteBuf" visibility="private">
        <parameters>
          <parameter name="Buf" paramflags="const" />
          <parameter name="Size" type="Integer" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="WriteStr" visibility="private">
        <parameters>
          <parameter name="S" type="string" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="InternalReset" visibility="private">
      </procedure>
      <constructor name="Create" visibility="public">
        <parameters>
          <parameter name="WriteProc" type="THTTPContentWriterWriteProc" paramflags="const" />
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public">
        <parameters>
        </parameters>
      </destructor>
      <event name="OnLog" visibility="public" read="FOnLog" write="FOnLog" type="THTTPContentWriterLogEvent" />
      <property name="Mechanism" visibility="public" read="FMechanism" write="FMechanism" type="THTTPContentWriterMechanism" />
      <property name="ContentString" visibility="public" read="FContentString" write="FContentString" type="string" />
      <property name="ContentStream" visibility="public" read="FContentStream" write="FContentStream" type="TStream" />
      <property name="ContentFileName" visibility="public" read="FContentFileName" write="FContentFileName" type="string" />
      <procedure name="InitContent" visibility="public">
        <parameters>
          <parameter name="ContentLength" type="Int64" paramflags="var" />
        </parameters>
      </procedure>
      <procedure name="SendContent" visibility="public">
      </procedure>
      <property name="ContentComplete" visibility="public" read="FContentComplete" type="Boolean" />
      <procedure name="FinaliseContent" visibility="public">
      </procedure>
      <procedure name="Reset" visibility="public">
      </procedure>
    </members>
  </class>
  <function name="HTTPMessageHasContent" visibility="public">
    <parameters>
      <parameter name="H" type="THTTPCommonHeaders" paramflags="const" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <procedure name="InitHTTPRequest" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPRequest" paramflags="var" />
    </parameters>
  </procedure>
  <procedure name="InitHTTPResponse" visibility="public">
    <parameters>
      <parameter name="A" type="cTHTTPResponse" paramflags="var" />
    </parameters>
  </procedure>
  <procedure name="ClearHTTPVersion" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPVersion" paramflags="var" />
    </parameters>
  </procedure>
  <procedure name="ClearHTTPContentLength" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPContentLength" paramflags="var" />
    </parameters>
  </procedure>
  <procedure name="ClearHTTPContentType" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPContentType" paramflags="var" />
    </parameters>
  </procedure>
  <procedure name="ClearHTTPDateField" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPDateField" paramflags="var" />
    </parameters>
  </procedure>
  <procedure name="ClearHTTPTransferEncoding" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPTransferEncoding" paramflags="var" />
    </parameters>
  </procedure>
  <procedure name="ClearHTTPConnectionField" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPConnectionField" paramflags="var" />
    </parameters>
  </procedure>
  <procedure name="ClearHTTPAgeField" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPAgeField" paramflags="var" />
    </parameters>
  </procedure>
  <procedure name="ClearHTTPContentEncoding" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPContentEncoding" paramflags="var" />
    </parameters>
  </procedure>
  <procedure name="ClearHTTPContentEncodingField" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPContentEncodingField" paramflags="var" />
    </parameters>
  </procedure>
  <procedure name="ClearHTTPContentRangeField" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPContentRangeField" paramflags="var" />
    </parameters>
  </procedure>
  <procedure name="ClearHTTPSetCookieField" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPSetCookieField" paramflags="var" />
    </parameters>
  </procedure>
  <procedure name="ClearHTTPCommonHeaders" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPCommonHeaders" paramflags="var" />
    </parameters>
  </procedure>
  <procedure name="ClearHTTPFixedHeaders" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPFixedHeaders" paramflags="var" />
    </parameters>
  </procedure>
  <procedure name="ClearHTTPCustomHeaders" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPCustomHeaders" paramflags="var" />
    </parameters>
  </procedure>
  <procedure name="ClearHTTPCookieField" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPCookieField" paramflags="var" />
    </parameters>
  </procedure>
  <procedure name="ClearHTTPMethod" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPMethod" paramflags="var" />
    </parameters>
  </procedure>
  <procedure name="ClearHTTPRequestStartLine" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPRequestStartLine" paramflags="var" />
    </parameters>
  </procedure>
  <procedure name="ClearHTTPRequestHeader" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPRequestHeader" paramflags="var" />
    </parameters>
  </procedure>
  <procedure name="ClearHTTPRequest" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPRequest" paramflags="var" />
    </parameters>
  </procedure>
  <procedure name="ClearHTTPResponseStartLine" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPResponseStartLine" paramflags="var" />
    </parameters>
  </procedure>
  <procedure name="ClearHTTPResponseHeader" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPResponseHeader" paramflags="var" />
    </parameters>
  </procedure>
  <procedure name="ClearHTTPResponse" visibility="public">
    <parameters>
      <parameter name="A" type="cTHTTPResponse" paramflags="var" />
    </parameters>
  </procedure>
  <procedure name="BuildStrHTTPVersion" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPVersion" paramflags="const" />
      <parameter name="B" type="TAnsiStringBuilder" paramflags="const" />
      <parameter name="P" type="THTTPStringOptions" paramflags="const" />
    </parameters>
  </procedure>
  <procedure name="BuildStrHTTPContentLengthValue" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPContentLength" paramflags="const" />
      <parameter name="B" type="TAnsiStringBuilder" paramflags="const" />
      <parameter name="P" type="THTTPStringOptions" paramflags="const" />
    </parameters>
  </procedure>
  <procedure name="BuildStrHTTPContentLength" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPContentLength" paramflags="const" />
      <parameter name="B" type="TAnsiStringBuilder" paramflags="const" />
      <parameter name="P" type="THTTPStringOptions" paramflags="const" />
    </parameters>
  </procedure>
  <procedure name="BuildStrHTTPContentTypeValue" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPContentType" paramflags="const" />
      <parameter name="B" type="TAnsiStringBuilder" paramflags="const" />
      <parameter name="P" type="THTTPStringOptions" paramflags="const" />
    </parameters>
  </procedure>
  <procedure name="BuildStrHTTPContentType" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPContentType" paramflags="const" />
      <parameter name="B" type="TAnsiStringBuilder" paramflags="const" />
      <parameter name="P" type="THTTPStringOptions" paramflags="const" />
    </parameters>
  </procedure>
  <procedure name="BuildStrRFCDateTime" visibility="public">
    <parameters>
      <parameter name="DOW" type="Integer" paramflags="const" />
      <parameter name="Da" type="Integer" paramflags="const" />
      <parameter name="Mo" type="Integer" paramflags="const" />
      <parameter name="Ye" type="Integer" paramflags="const" />
      <parameter name="Ho" type="Integer" paramflags="const" />
      <parameter name="Mi" type="Integer" paramflags="const" />
      <parameter name="Se" type="Integer" paramflags="const" />
      <parameter name="TZ" type="string" paramflags="const" />
      <parameter name="B" type="TAnsiStringBuilder" paramflags="const" />
      <parameter name="P" type="THTTPStringOptions" paramflags="const" />
    </parameters>
  </procedure>
  <procedure name="BuildStrHTTPDateFieldValue" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPDateField" paramflags="const" />
      <parameter name="B" type="TAnsiStringBuilder" paramflags="const" />
      <parameter name="P" type="THTTPStringOptions" paramflags="const" />
    </parameters>
  </procedure>
  <procedure name="BuildStrHTTPDateField" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPDateField" paramflags="const" />
      <parameter name="B" type="TAnsiStringBuilder" paramflags="const" />
      <parameter name="P" type="THTTPStringOptions" paramflags="const" />
    </parameters>
  </procedure>
  <procedure name="BuildStrHTTPTransferEncodingValue" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPTransferEncoding" paramflags="const" />
      <parameter name="B" type="TAnsiStringBuilder" paramflags="const" />
      <parameter name="P" type="THTTPStringOptions" paramflags="const" />
    </parameters>
  </procedure>
  <procedure name="BuildStrHTTPTransferEncoding" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPTransferEncoding" paramflags="const" />
      <parameter name="B" type="TAnsiStringBuilder" paramflags="const" />
      <parameter name="P" type="THTTPStringOptions" paramflags="const" />
    </parameters>
  </procedure>
  <procedure name="BuildStrHTTPContentRangeField" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPContentRangeField" paramflags="const" />
      <parameter name="B" type="TAnsiStringBuilder" paramflags="const" />
      <parameter name="P" type="THTTPStringOptions" paramflags="const" />
    </parameters>
  </procedure>
  <procedure name="BuildStrHTTPConnectionFieldValue" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPConnectionField" paramflags="const" />
      <parameter name="B" type="TAnsiStringBuilder" paramflags="const" />
      <parameter name="P" type="THTTPStringOptions" paramflags="const" />
    </parameters>
  </procedure>
  <procedure name="BuildStrHTTPConnectionField" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPConnectionField" paramflags="const" />
      <parameter name="B" type="TAnsiStringBuilder" paramflags="const" />
      <parameter name="P" type="THTTPStringOptions" paramflags="const" />
    </parameters>
  </procedure>
  <procedure name="BuildStrHTTPAgeField" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPAgeField" paramflags="const" />
      <parameter name="B" type="TAnsiStringBuilder" paramflags="const" />
      <parameter name="P" type="THTTPStringOptions" paramflags="const" />
    </parameters>
  </procedure>
  <procedure name="BuildStrHTTPContentEncoding" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPContentEncoding" paramflags="const" />
      <parameter name="B" type="TAnsiStringBuilder" paramflags="const" />
      <parameter name="P" type="THTTPStringOptions" paramflags="const" />
    </parameters>
  </procedure>
  <procedure name="BuildStrHTTPContentEncodingField" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPContentEncodingField" paramflags="const" />
      <parameter name="B" type="TAnsiStringBuilder" paramflags="const" />
      <parameter name="P" type="THTTPStringOptions" paramflags="const" />
    </parameters>
  </procedure>
  <procedure name="BuildStrHTTPProxyConnectionField" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPConnectionField" paramflags="const" />
      <parameter name="B" type="TAnsiStringBuilder" paramflags="const" />
      <parameter name="P" type="THTTPStringOptions" paramflags="const" />
    </parameters>
  </procedure>
  <procedure name="BuildStrHTTPCommonHeaders" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPCommonHeaders" paramflags="const" />
      <parameter name="B" type="TAnsiStringBuilder" paramflags="const" />
      <parameter name="P" type="THTTPStringOptions" paramflags="const" />
    </parameters>
  </procedure>
  <procedure name="BuildStrHTTPFixedHeaders" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPFixedHeaders" paramflags="const" />
      <parameter name="B" type="TAnsiStringBuilder" paramflags="const" />
      <parameter name="P" type="THTTPStringOptions" paramflags="const" />
    </parameters>
  </procedure>
  <procedure name="BuildStrHTTPCustomHeaders" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPCustomHeaders" paramflags="const" />
      <parameter name="B" type="TAnsiStringBuilder" paramflags="const" />
      <parameter name="P" type="THTTPStringOptions" paramflags="const" />
    </parameters>
  </procedure>
  <procedure name="BuildStrHTTPSetCookieFieldValue" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPSetCookieField" paramflags="const" />
      <parameter name="B" type="TAnsiStringBuilder" paramflags="const" />
      <parameter name="P" type="THTTPStringOptions" paramflags="const" />
    </parameters>
  </procedure>
  <procedure name="BuildStrHTTPCookieFieldValue" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPCookieField" paramflags="const" />
      <parameter name="B" type="TAnsiStringBuilder" paramflags="const" />
      <parameter name="P" type="THTTPStringOptions" paramflags="const" />
    </parameters>
  </procedure>
  <procedure name="BuildStrHTTPCookieField" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPCookieField" paramflags="const" />
      <parameter name="B" type="TAnsiStringBuilder" paramflags="const" />
      <parameter name="P" type="THTTPStringOptions" paramflags="const" />
    </parameters>
  </procedure>
  <procedure name="BuildStrHTTPMethod" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPMethod" paramflags="const" />
      <parameter name="B" type="TAnsiStringBuilder" paramflags="const" />
      <parameter name="P" type="THTTPStringOptions" paramflags="const" />
    </parameters>
  </procedure>
  <procedure name="BuildStrHTTPRequestStartLine" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPRequestStartLine" paramflags="const" />
      <parameter name="B" type="TAnsiStringBuilder" paramflags="const" />
      <parameter name="P" type="THTTPStringOptions" paramflags="const" />
    </parameters>
  </procedure>
  <procedure name="BuildStrHTTPRequestHeader" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPRequestHeader" paramflags="const" />
      <parameter name="B" type="TAnsiStringBuilder" paramflags="const" />
      <parameter name="P" type="THTTPStringOptions" paramflags="const" />
    </parameters>
  </procedure>
  <procedure name="BuildStrHTTPRequest" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPRequest" paramflags="const" />
      <parameter name="B" type="TAnsiStringBuilder" paramflags="const" />
      <parameter name="P" type="THTTPStringOptions" paramflags="const" />
    </parameters>
  </procedure>
  <procedure name="BuildStrHTTPResponseCookieFieldArray" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPSetCookieFieldArray" paramflags="const" />
      <parameter name="B" type="TAnsiStringBuilder" paramflags="const" />
      <parameter name="P" type="THTTPStringOptions" paramflags="const" />
    </parameters>
  </procedure>
  <procedure name="BuildStrHTTPResponseStartLine" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPResponseStartLine" paramflags="const" />
      <parameter name="B" type="TAnsiStringBuilder" paramflags="const" />
      <parameter name="P" type="THTTPStringOptions" paramflags="const" />
    </parameters>
  </procedure>
  <procedure name="BuildStrHTTPResponseHeader" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPResponseHeader" paramflags="const" />
      <parameter name="B" type="TAnsiStringBuilder" paramflags="const" />
      <parameter name="P" type="THTTPStringOptions" paramflags="const" />
    </parameters>
  </procedure>
  <procedure name="BuildStrHTTPResponse" visibility="public">
    <parameters>
      <parameter name="A" type="cTHTTPResponse" paramflags="const" />
      <parameter name="B" type="TAnsiStringBuilder" paramflags="const" />
      <parameter name="P" type="THTTPStringOptions" paramflags="const" />
    </parameters>
  </procedure>
  <function name="HTTPContentTypeValueToStr" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPContentType" paramflags="const" />
      <retval type="string" />
    </parameters>
  </function>
  <function name="HTTPSetCookieFieldValueToStr" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPSetCookieField" paramflags="const" />
      <retval type="string" />
    </parameters>
  </function>
  <function name="HTTPCookieFieldValueToStr" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPCookieField" paramflags="const" />
      <retval type="string" />
    </parameters>
  </function>
  <function name="HTTPMethodToStr" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPMethod" paramflags="const" />
      <retval type="string" />
    </parameters>
  </function>
  <function name="HTTPRequestToStr" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPRequest" paramflags="const" />
      <retval type="string" />
    </parameters>
  </function>
  <function name="HTTPResponseToStr" visibility="public">
    <parameters>
      <parameter name="A" type="cTHTTPResponse" paramflags="const" />
      <retval type="string" />
    </parameters>
  </function>
  <procedure name="PrepareCookie" visibility="public">
    <parameters>
      <parameter name="A" type="THTTPCookieField" paramflags="var" />
      <parameter name="B" type="THTTPSetCookieFieldArray" paramflags="const" />
      <parameter name="Domain" type="string" paramflags="const" />
      <parameter name="Secure" type="Boolean" paramflags="const" />
    </parameters>
  </procedure>
  <procedure name="SelfTestReader" visibility="public">
  </procedure>
  <procedure name="SelfTest" visibility="public">
  </procedure>
</namespace>
