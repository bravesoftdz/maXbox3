unit uPSI_PJEnvVars;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_PJEnvVars = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TPJEnvVars(CL: TPSPascalCompiler);
procedure SIRegister_TPJEnvVarsEnumerator(CL: TPSPascalCompiler);
procedure SIRegister_PJEnvVars(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TPJEnvVars(CL: TPSRuntimeClassImporter);
procedure RIRegister_TPJEnvVarsEnumerator(CL: TPSRuntimeClassImporter);
procedure RIRegister_PJEnvVars_Routines(S: TPSExec);

procedure Register;

implementation


uses
   Types
  ,PJEnvVars
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_PJEnvVars]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TPJEnvVars(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TComponent', 'TPJEnvVars') do
  with CL.AddClassN(CL.FindClass('TComponent'),'TPJEnvVars') do
  begin
    RegisterMethod('Procedure EnumNames( Callback : TPJEnvVarsEnum; Data : Pointer)');
    RegisterMethod('Function GetEnumerator : TPJEnvVarsEnumerator');
    RegisterMethod('Procedure DeleteVar( const Name : string)');
    RegisterProperty('Count', 'Integer', iptr);
    RegisterProperty('Values', 'string string', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TPJEnvVarsEnumerator(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TPJEnvVarsEnumerator') do
  with CL.AddClassN(CL.FindClass('TObject'),'TPJEnvVarsEnumerator') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Function GetCurrent : string');
    RegisterMethod('Function MoveNext : Boolean');
    RegisterProperty('Current', 'string', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_PJEnvVars(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('TStringDynArray', 'array of string');
 CL.AddDelphiFunction('Function GetEnvVarValue( const VarName : string) : string');
 CL.AddDelphiFunction('Function SetEnvVarValue( const VarName, VarValue : string) : Integer');
 CL.AddDelphiFunction('Function DeleteEnvVar( const VarName : string) : Integer');
 CL.AddDelphiFunction('Function CreateEnvBlock( const NewEnv : TStrings; const IncludeCurrent : Boolean; const Buffer : Pointer; const BufSize : Integer) : Integer');
 CL.AddDelphiFunction('Function ExpandEnvVars( const Str : string) : string');
 CL.AddDelphiFunction('Function GetAllEnvVars( const Vars : TStrings) : Integer');
 CL.AddDelphiFunction('Procedure GetAllEnvVarNames( const Names : TStrings);');
 CL.AddDelphiFunction('Function GetAllEnvVarNames1 : TStringDynArray;');
 CL.AddDelphiFunction('Function EnvBlockSize : Integer');
  CL.AddTypeS('TPJEnvVarsEnum', 'Procedure ( const VarName : string; Data : Poi'
   +'nter)');
  SIRegister_TPJEnvVarsEnumerator(CL);
  SIRegister_TPJEnvVars(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EPJEnvVars');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EPJEnvVars');
 CL.AddDelphiFunction('Procedure Register');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TPJEnvVarsValues_W(Self: TPJEnvVars; const T: string; const t1: string);
begin Self.Values[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TPJEnvVarsValues_R(Self: TPJEnvVars; var T: string; const t1: string);
begin T := Self.Values[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TPJEnvVarsCount_R(Self: TPJEnvVars; var T: Integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure TPJEnvVarsEnumeratorCurrent_R(Self: TPJEnvVarsEnumerator; var T: string);
begin T := Self.Current; end;

(*----------------------------------------------------------------------------*)
Function GetAllEnvVarNames1_P : TStringDynArray;
Begin Result := PJEnvVars.GetAllEnvVarNames; END;

(*----------------------------------------------------------------------------*)
Procedure GetAllEnvVarNames_P( const Names : TStrings);
Begin PJEnvVars.GetAllEnvVarNames(Names); END;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TPJEnvVars(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPJEnvVars) do
  begin
    RegisterMethod(@TPJEnvVars.EnumNames, 'EnumNames');
    RegisterMethod(@TPJEnvVars.GetEnumerator, 'GetEnumerator');
    RegisterMethod(@TPJEnvVars.DeleteVar, 'DeleteVar');
    RegisterPropertyHelper(@TPJEnvVarsCount_R,nil,'Count');
    RegisterPropertyHelper(@TPJEnvVarsValues_R,@TPJEnvVarsValues_W,'Values');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TPJEnvVarsEnumerator(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPJEnvVarsEnumerator) do
  begin
    RegisterConstructor(@TPJEnvVarsEnumerator.Create, 'Create');
    RegisterMethod(@TPJEnvVarsEnumerator.GetCurrent, 'GetCurrent');
    RegisterMethod(@TPJEnvVarsEnumerator.MoveNext, 'MoveNext');
    RegisterPropertyHelper(@TPJEnvVarsEnumeratorCurrent_R,nil,'Current');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_PJEnvVars_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@GetEnvVarValue, 'GetEnvVarValue', cdRegister);
 S.RegisterDelphiFunction(@SetEnvVarValue, 'SetEnvVarValue', cdRegister);
 S.RegisterDelphiFunction(@DeleteEnvVar, 'DeleteEnvVar', cdRegister);
 S.RegisterDelphiFunction(@CreateEnvBlock, 'CreateEnvBlock', cdRegister);
 S.RegisterDelphiFunction(@ExpandEnvVars, 'ExpandEnvVars', cdRegister);
 S.RegisterDelphiFunction(@GetAllEnvVars, 'GetAllEnvVars', cdRegister);
 S.RegisterDelphiFunction(@GetAllEnvVarNames, 'GetAllEnvVarNames', cdRegister);
 S.RegisterDelphiFunction(@GetAllEnvVarNames1, 'GetAllEnvVarNames1', cdRegister);
 S.RegisterDelphiFunction(@EnvBlockSize, 'EnvBlockSize', cdRegister);
  RIRegister_TPJEnvVarsEnumerator(CL);
  RIRegister_TPJEnvVars(CL);
  with CL.Add(EPJEnvVars) do
  with CL.Add(EPJEnvVars) do
 S.RegisterDelphiFunction(@Register, 'Register', cdRegister);
end;

 
 
{ TPSImport_PJEnvVars }
(*----------------------------------------------------------------------------*)
procedure TPSImport_PJEnvVars.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_PJEnvVars(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_PJEnvVars.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_PJEnvVars(ri);
  RIRegister_PJEnvVars_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
