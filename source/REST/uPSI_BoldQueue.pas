unit uPSI_BoldQueue;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_BoldQueue = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TBoldQueue(CL: TPSPascalCompiler);
procedure SIRegister_TBoldQueueable(CL: TPSPascalCompiler);
procedure SIRegister_BoldQueue(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_BoldQueue_Routines(S: TPSExec);
procedure RIRegister_TBoldQueue(CL: TPSRuntimeClassImporter);
procedure RIRegister_TBoldQueueable(CL: TPSRuntimeClassImporter);
procedure RIRegister_BoldQueue(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   BoldBase
  ,BoldEventQueue
  ,BoldQueue
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_BoldQueue]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TBoldQueue(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TBoldMemoryManagedObject', 'TBoldQueue') do
  with CL.AddClassN(CL.FindClass('TBoldMemoryManagedObject'),'TBoldQueue') do begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure AddEventToPredisplayQueue( Event : TNotifyEvent; Sender : TObject; Receiver : TObject)');
    RegisterMethod('Procedure RemoveFromPreDisplayQueue( Receiver : TObject)');
    RegisterMethod('Procedure PerformPreDisplayQueue');
    RegisterMethod('Procedure DeActivateDisplayQueue');
    RegisterMethod('Procedure ActivateDisplayQueue');
    RegisterProperty('DisplayMode', 'TBoldQueueDisplayMode', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TBoldQueueable(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TBoldFlaggedObject', 'TBoldQueueable') do
  with CL.AddClassN(CL.FindClass('TBoldFlaggedObject'),'TBoldQueueable') do begin
    RegisterMethod('Constructor Create( aMatchObject : TObject)');
    RegisterMethod('Function DisplayAll : Boolean');
    RegisterMethod('Procedure ApplyAll');
    RegisterMethod('Procedure ApplyAllMatching( anObject : TObject)');
    RegisterMethod('Procedure DiscardChangeAll');
    RegisterMethod('Procedure DiscardChangeAllMatching( anObject : TObject)');
    RegisterMethod('Procedure AddToPreDisplayQueue( Event : TNotifyEvent; Sender : TObject; Receiver : TObject)');
    RegisterMethod('Procedure RemoveFromPreDisplayQueue( Receiver : TObject)');
    RegisterMethod('Procedure Apply');
    RegisterMethod('Procedure DiscardChange');
    RegisterProperty('MatchObject', 'TObject', iptr);
    RegisterProperty('IsInDisplayList', 'Boolean', iptr);
    RegisterProperty('PrioritizedQueuable', 'TBoldQueueable', iptrw);
    RegisterProperty('StronglyDependedOfPrioritized', 'Boolean', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_BoldQueue(CL: TPSPascalCompiler);
begin
 //CL.AddConstantN('befIsInDisplayList','').SetString( BoldElementFlag0);
 //CL.AddConstantN('befStronglyDependedOfPrioritized','').SetString( BoldElementFlag1);
 //CL.AddConstantN('befFollowerSelected','').SetString( BoldElementFlag2);
  CL.AddClassN(CL.FindClass('TOBJECT'),'TBoldQueue');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TBoldQueueable');
  CL.AddTypeS('TBoldQueueDisplayMode', '( dmDisplayOne, dmDisplayAll )');
  SIRegister_TBoldQueueable(CL);
  SIRegister_TBoldQueue(CL);
 CL.AddDelphiFunction('Function BoldQueueFinalized : Boolean');
 CL.AddDelphiFunction('Function BoldInstalledQueue : TBoldQueue');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TBoldQueueDisplayMode_W(Self: TBoldQueue; const T: TBoldQueueDisplayMode);
begin Self.DisplayMode := T; end;

(*----------------------------------------------------------------------------*)
procedure TBoldQueueDisplayMode_R(Self: TBoldQueue; var T: TBoldQueueDisplayMode);
begin T := Self.DisplayMode; end;

(*----------------------------------------------------------------------------*)
procedure TBoldQueueableStronglyDependedOfPrioritized_W(Self: TBoldQueueable; const T: Boolean);
begin Self.StronglyDependedOfPrioritized := T; end;

(*----------------------------------------------------------------------------*)
procedure TBoldQueueableStronglyDependedOfPrioritized_R(Self: TBoldQueueable; var T: Boolean);
begin T := Self.StronglyDependedOfPrioritized; end;

(*----------------------------------------------------------------------------*)
procedure TBoldQueueablePrioritizedQueuable_W(Self: TBoldQueueable; const T: TBoldQueueable);
begin Self.PrioritizedQueuable := T; end;

(*----------------------------------------------------------------------------*)
procedure TBoldQueueablePrioritizedQueuable_R(Self: TBoldQueueable; var T: TBoldQueueable);
begin T := Self.PrioritizedQueuable; end;

(*----------------------------------------------------------------------------*)
procedure TBoldQueueableIsInDisplayList_R(Self: TBoldQueueable; var T: Boolean);
begin T := Self.IsInDisplayList; end;

(*----------------------------------------------------------------------------*)
procedure TBoldQueueableMatchObject_R(Self: TBoldQueueable; var T: TObject);
begin T := Self.MatchObject; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_BoldQueue_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@BoldQueueFinalized, 'BoldQueueFinalized', cdRegister);
 S.RegisterDelphiFunction(@BoldInstalledQueue, 'BoldInstalledQueue', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TBoldQueue(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TBoldQueue) do begin
    RegisterVirtualConstructor(@TBoldQueue.Create, 'Create');
    RegisterMethod(@TBoldQueue.AddEventToPredisplayQueue, 'AddEventToPredisplayQueue');
    RegisterMethod(@TBoldQueue.RemoveFromPreDisplayQueue, 'RemoveFromPreDisplayQueue');
    RegisterMethod(@TBoldQueue.PerformPreDisplayQueue, 'PerformPreDisplayQueue');
    //RegisterVirtualAbstractMethod(@TBoldQueue, @!.DeActivateDisplayQueue, 'DeActivateDisplayQueue');
    //RegisterVirtualAbstractMethod(@TBoldQueue, @!.ActivateDisplayQueue, 'ActivateDisplayQueue');
    RegisterPropertyHelper(@TBoldQueueDisplayMode_R,@TBoldQueueDisplayMode_W,'DisplayMode');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TBoldQueueable(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TBoldQueueable) do begin
    RegisterConstructor(@TBoldQueueable.Create, 'Create');
    RegisterMethod(@TBoldQueueable.DisplayAll, 'DisplayAll');
    RegisterMethod(@TBoldQueueable.ApplyAll, 'ApplyAll');
    RegisterMethod(@TBoldQueueable.ApplyAllMatching, 'ApplyAllMatching');
    RegisterMethod(@TBoldQueueable.DiscardChangeAll, 'DiscardChangeAll');
    RegisterMethod(@TBoldQueueable.DiscardChangeAllMatching, 'DiscardChangeAllMatching');
    RegisterMethod(@TBoldQueueable.AddToPreDisplayQueue, 'AddToPreDisplayQueue');
    RegisterMethod(@TBoldQueueable.RemoveFromPreDisplayQueue, 'RemoveFromPreDisplayQueue');
    //RegisterVirtualAbstractMethod(@TBoldQueueable, @!.Apply, 'Apply');
    //RegisterVirtualAbstractMethod(@TBoldQueueable, @!.DiscardChange, 'DiscardChange');
    RegisterPropertyHelper(@TBoldQueueableMatchObject_R,nil,'MatchObject');
    RegisterPropertyHelper(@TBoldQueueableIsInDisplayList_R,nil,'IsInDisplayList');
    RegisterPropertyHelper(@TBoldQueueablePrioritizedQueuable_R,@TBoldQueueablePrioritizedQueuable_W,'PrioritizedQueuable');
    RegisterPropertyHelper(@TBoldQueueableStronglyDependedOfPrioritized_R,@TBoldQueueableStronglyDependedOfPrioritized_W,'StronglyDependedOfPrioritized');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_BoldQueue(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TBoldQueue) do
  with CL.Add(TBoldQueueable) do
  RIRegister_TBoldQueueable(CL);
  RIRegister_TBoldQueue(CL);
end;



{ TPSImport_BoldQueue }
(*----------------------------------------------------------------------------*)
procedure TPSImport_BoldQueue.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_BoldQueue(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_BoldQueue.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_BoldQueue(ri);
  RIRegister_BoldQueue_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
