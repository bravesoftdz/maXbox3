<?xml version="1.0" encoding="utf-8"?>
<namespace name="SimpleXML">
  <const name="BinXmlSignatureSize" type="Integer">
    <value>
      $E
    </value>
  </const>
  <const name="BinXmlSignature" type="string" visibility="public" />
  <const name="BINXML_USE_WIDE_CHARS" type="Integer">
    <value>
      $1
    </value>
  </const>
  <const name="BINXML_COMPRESSED" type="Integer">
    <value>
      $2
    </value>
  </const>
  <const name="DefaultHashSize" type="Integer">
    <value>
      $1F3
    </value>
  </const>
  <const name="AnsiCodepage" type="Integer">
    <value>
      $0
    </value>
  </const>
  <const name="XSTR_NULL" type="string">
    <value>
      {{null}}
    </value>
  </const>
  <const name="SourceBufferSize" type="Integer">
    <value>
      $4000
    </value>
  </const>
  <pointer name="PXmlChar" alias="PAnsiChar" namespace="System" type="Char" indircnt="1" />
  <type name="TXmlChar" type="Char" />
  <type name="TXmlString" type="AnsiString" />
  <type name="RawByteString" type="AnsiString" />
  <const name="NODE_INVALID" type="TXmlNodeType">
    <value>
      NODE_INVALID
    </value>
  </const>
  <const name="NODE_ELEMENT" type="TXmlNodeType">
    <value>
      NODE_ELEMENT
    </value>
  </const>
  <const name="NODE_TEXT" type="TXmlNodeType">
    <value>
      NODE_TEXT
    </value>
  </const>
  <const name="NODE_CDATA_SECTION" type="TXmlNodeType">
    <value>
      NODE_CDATA_SECTION
    </value>
  </const>
  <const name="NODE_PROCESSING_INSTRUCTION" type="TXmlNodeType">
    <value>
      NODE_PROCESSING_INSTRUCTION
    </value>
  </const>
  <const name="NODE_COMMENT" type="TXmlNodeType">
    <value>
      NODE_COMMENT
    </value>
  </const>
  <const name="NODE_DOCUMENT" type="TXmlNodeType">
    <value>
      NODE_DOCUMENT
    </value>
  </const>
  <enum name="TXmlNodeType">
    <element name="NODE_INVALID" />
    <element name="NODE_ELEMENT" />
    <element name="NODE_TEXT" />
    <element name="NODE_CDATA_SECTION" />
    <element name="NODE_PROCESSING_INSTRUCTION" />
    <element name="NODE_COMMENT" />
    <element name="NODE_DOCUMENT" />
  </enum>
  <interface name="IXmlBase">
    <function name="GetObject" visibility="public" procflags="abstract virtual">
      <parameters>
        <retval type="TObject" />
      </parameters>
    </function>
  </interface>
  <interface name="IXmlNameTable">
    <function name="GetID" visibility="public" procflags="abstract virtual">
      <parameters>
        <parameter name="aName" type="string" paramflags="const" />
        <retval type="NativeInt" />
      </parameters>
    </function>
    <function name="GetName" visibility="public" procflags="abstract virtual">
      <parameters>
        <parameter name="anID" type="NativeInt" />
        <retval type="string" />
      </parameters>
    </function>
  </interface>
  <interface name="IXmlNodeList">
    <function name="Get_Count" visibility="public" procflags="abstract virtual">
      <parameters>
        <retval type="Integer" />
      </parameters>
    </function>
    <function name="Get_Item" visibility="public" procflags="abstract virtual">
      <parameters>
        <parameter name="anIndex" type="Integer" />
        <retval type="IXmlNode" />
      </parameters>
    </function>
    <procedure name="Exchange" visibility="public" procflags="abstract virtual">
      <parameters>
        <parameter name="Index1" type="Integer" />
        <parameter name="Index2" type="Integer" />
      </parameters>
    </procedure>
    <function name="Get_XML" visibility="public" procflags="abstract virtual">
      <parameters>
        <retval type="string" />
      </parameters>
    </function>
    <property name="Count" visibility="public" read="Get_Count" type="Integer" />
    <property name="Item" visibility="public" read="Get_Item" type="IXmlNode" />
    <property name="XML" visibility="public" read="Get_XML" type="string" />
  </interface>
  <interface name="IXmlNode">
    <function name="Get_NameTable" visibility="public" procflags="abstract virtual">
      <parameters>
        <retval type="IXmlNameTable" />
      </parameters>
    </function>
    <function name="Get_NodeName" visibility="public" procflags="abstract virtual">
      <parameters>
        <retval type="string" />
      </parameters>
    </function>
    <function name="Get_NodeNameID" visibility="public" procflags="abstract virtual">
      <parameters>
        <retval type="NativeInt" />
      </parameters>
    </function>
    <function name="Get_NodeType" visibility="public" procflags="abstract virtual">
      <parameters>
        <retval type="TXmlNodeType" />
      </parameters>
    </function>
    <function name="Get_Text" visibility="public" procflags="abstract virtual">
      <parameters>
        <retval type="string" />
      </parameters>
    </function>
    <procedure name="Set_Text" visibility="public" procflags="abstract virtual">
      <parameters>
        <parameter name="aValue" type="string" paramflags="const" />
      </parameters>
    </procedure>
    <function name="Get_DataType" visibility="public" procflags="abstract virtual">
      <parameters>
        <retval type="Integer" />
      </parameters>
    </function>
    <function name="Get_TypedValue" visibility="public" procflags="abstract virtual">
      <parameters>
        <retval type="Variant" />
      </parameters>
    </function>
    <procedure name="Set_TypedValue" visibility="public" procflags="abstract virtual">
      <parameters>
        <parameter name="aValue" type="Variant" paramflags="const" />
      </parameters>
    </procedure>
    <function name="Get_XML" visibility="public" procflags="abstract virtual">
      <parameters>
        <retval type="string" />
      </parameters>
    </function>
    <function name="CloneNode" visibility="public" procflags="abstract virtual">
      <parameters>
        <parameter name="aDeep" type="Boolean">
          <value>
            True
          </value>
        </parameter>
        <retval type="IXmlNode" />
      </parameters>
    </function>
    <function name="Get_ParentNode" visibility="public" procflags="abstract virtual">
      <parameters>
        <retval type="IXmlNode" />
      </parameters>
    </function>
    <function name="Get_OwnerDocument" visibility="public" procflags="abstract virtual">
      <parameters>
        <retval type="IXmlDocument" />
      </parameters>
    </function>
    <function name="Get_ChildNodes" visibility="public" procflags="abstract virtual">
      <parameters>
        <retval type="IXmlNodeList" />
      </parameters>
    </function>
    <procedure name="AppendChild" visibility="public" procflags="abstract virtual">
      <parameters>
        <parameter name="aChild" type="IXmlNode" paramflags="const" />
      </parameters>
    </procedure>
    <procedure name="InsertBefore" visibility="public" procflags="abstract virtual">
      <parameters>
        <parameter name="aChild" type="IXmlNode" paramflags="const" />
        <parameter name="aBefore" type="IXmlNode" paramflags="const" />
      </parameters>
    </procedure>
    <procedure name="ReplaceChild" visibility="public" procflags="abstract virtual">
      <parameters>
        <parameter name="aNewChild" type="IXmlNode" paramflags="const" />
        <parameter name="anOldChild" type="IXmlNode" paramflags="const" />
      </parameters>
    </procedure>
    <procedure name="RemoveChild" visibility="public" procflags="abstract virtual">
      <parameters>
        <parameter name="aChild" type="IXmlNode" paramflags="const" />
      </parameters>
    </procedure>
    <procedure name="ExchangeChilds" visibility="public" procflags="abstract virtual">
      <parameters>
        <parameter name="aChild1" type="IXmlNode" paramflags="const" />
        <parameter name="aChild2" type="IXmlNode" paramflags="const" />
      </parameters>
    </procedure>
    <function name="AppendElement" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aNameID" type="NativeInt" />
        <retval type="IXmlElement" />
      </parameters>
    </function>
    <function name="AppendElement" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aName" type="string" paramflags="const" />
        <retval type="IXmlElement" />
      </parameters>
    </function>
    <function name="AppendText" visibility="public" procflags="abstract virtual">
      <parameters>
        <parameter name="aData" type="string" paramflags="const" />
        <retval type="IXmlText" />
      </parameters>
    </function>
    <function name="AppendCDATA" visibility="public" procflags="abstract virtual">
      <parameters>
        <parameter name="aData" type="string" paramflags="const" />
        <retval type="IXmlCDATASection" />
      </parameters>
    </function>
    <function name="AppendComment" visibility="public" procflags="abstract virtual">
      <parameters>
        <parameter name="aData" type="string" paramflags="const" />
        <retval type="IXmlComment" />
      </parameters>
    </function>
    <function name="AppendProcessingInstruction" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aTargetID" type="NativeInt" />
        <parameter name="aData" type="string" paramflags="const" />
        <retval type="IXmlProcessingInstruction" />
      </parameters>
    </function>
    <function name="AppendProcessingInstruction" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aTarget" type="string" paramflags="const" />
        <parameter name="aData" type="string" paramflags="const" />
        <retval type="IXmlProcessingInstruction" />
      </parameters>
    </function>
    <function name="GetChildText" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aName" type="string" paramflags="const" />
        <parameter name="aDefault" type="string" paramflags="const">
          <value>
            
          </value>
        </parameter>
        <retval type="string" />
      </parameters>
    </function>
    <function name="GetChildText" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aNameID" type="NativeInt" />
        <parameter name="aDefault" type="string" paramflags="const">
          <value>
            
          </value>
        </parameter>
        <retval type="string" />
      </parameters>
    </function>
    <procedure name="SetChildText" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aName" type="string" paramflags="const" />
        <parameter name="aValue" type="string" paramflags="const" />
      </parameters>
    </procedure>
    <procedure name="SetChildText" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aNameID" type="NativeInt" />
        <parameter name="aValue" type="string" paramflags="const" />
      </parameters>
    </procedure>
    <function name="NeedChild" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aNameID" type="NativeInt" />
        <retval type="IXmlNode" />
      </parameters>
    </function>
    <function name="NeedChild" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aName" type="string" paramflags="const" />
        <retval type="IXmlNode" />
      </parameters>
    </function>
    <function name="EnsureChild" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aNameID" type="NativeInt" />
        <retval type="IXmlNode" />
      </parameters>
    </function>
    <function name="EnsureChild" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aName" type="string" paramflags="const" />
        <retval type="IXmlNode" />
      </parameters>
    </function>
    <procedure name="RemoveAllChilds" visibility="public" procflags="abstract virtual">
    </procedure>
    <function name="SelectNodes" visibility="public" procflags="abstract virtual">
      <parameters>
        <parameter name="anExpression" type="string" paramflags="const" />
        <retval type="IXmlNodeList" />
      </parameters>
    </function>
    <function name="SelectSingleNode" visibility="public" procflags="abstract virtual">
      <parameters>
        <parameter name="anExpression" type="string" paramflags="const" />
        <retval type="IXmlNode" />
      </parameters>
    </function>
    <function name="FullPath" visibility="public" procflags="abstract virtual">
      <parameters>
        <retval type="string" />
      </parameters>
    </function>
    <function name="FindElement" visibility="public" procflags="abstract virtual">
      <parameters>
        <parameter name="anElementName" type="string" paramflags="const" />
        <parameter name="anAttrName" type="string" paramflags="const" />
        <parameter name="anAttrValue" type="Variant" paramflags="const" />
        <retval type="IXmlElement" />
      </parameters>
    </function>
    <function name="Get_AttrCount" visibility="public" procflags="abstract virtual">
      <parameters>
        <retval type="Integer" />
      </parameters>
    </function>
    <function name="Get_AttrNameID" visibility="public" procflags="abstract virtual">
      <parameters>
        <parameter name="anIndex" type="Integer" />
        <retval type="NativeInt" />
      </parameters>
    </function>
    <function name="Get_AttrName" visibility="public" procflags="abstract virtual">
      <parameters>
        <parameter name="anIndex" type="Integer" />
        <retval type="string" />
      </parameters>
    </function>
    <procedure name="RemoveAttr" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aName" type="string" paramflags="const" />
      </parameters>
    </procedure>
    <procedure name="RemoveAttr" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aNameID" type="NativeInt" />
      </parameters>
    </procedure>
    <procedure name="RemoveAllAttrs" visibility="public" procflags="abstract virtual">
    </procedure>
    <function name="AttrExists" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aNameID" type="NativeInt" />
        <retval type="Boolean" />
      </parameters>
    </function>
    <function name="AttrExists" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aName" type="string" paramflags="const" />
        <retval type="Boolean" />
      </parameters>
    </function>
    <function name="GetAttrType" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aNameID" type="NativeInt" />
        <retval type="Integer" />
      </parameters>
    </function>
    <function name="GetAttrType" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aName" type="string" paramflags="const" />
        <retval type="Integer" />
      </parameters>
    </function>
    <function name="GetVarAttr" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aNameID" type="NativeInt" />
        <parameter name="aDefault" type="Variant" paramflags="const" />
        <retval type="Variant" />
      </parameters>
    </function>
    <function name="GetVarAttr" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aName" type="string" paramflags="const" />
        <parameter name="aDefault" type="Variant" paramflags="const" />
        <retval type="Variant" />
      </parameters>
    </function>
    <procedure name="SetVarAttr" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aNameID" type="NativeInt" />
        <parameter name="aValue" type="Variant" paramflags="const" />
      </parameters>
    </procedure>
    <procedure name="SetVarAttr" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aName" type="string" paramflags="const" />
        <parameter name="aValue" type="Variant" />
      </parameters>
    </procedure>
    <function name="NeedAttr" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aNameID" type="NativeInt" />
        <retval type="string" />
      </parameters>
    </function>
    <function name="NeedAttr" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aName" type="string" paramflags="const" />
        <retval type="string" />
      </parameters>
    </function>
    <function name="GetAttr" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aNameID" type="NativeInt" />
        <parameter name="aDefault" type="string" paramflags="const">
          <value>
            
          </value>
        </parameter>
        <retval type="string" />
      </parameters>
    </function>
    <function name="GetAttr" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aName" type="string" paramflags="const" />
        <parameter name="aDefault" type="string" paramflags="const">
          <value>
            
          </value>
        </parameter>
        <retval type="string" />
      </parameters>
    </function>
    <procedure name="SetAttr" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aNameID" type="NativeInt" />
        <parameter name="aValue" type="string" paramflags="const" />
      </parameters>
    </procedure>
    <procedure name="SetAttr" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aName" type="string" paramflags="const" />
        <parameter name="aValue" type="string" paramflags="const" />
      </parameters>
    </procedure>
    <function name="GetBytesAttr" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aNameID" type="NativeInt" />
        <parameter name="aDefault" type="TBytes" paramflags="const">
          <value>
            nil
          </value>
        </parameter>
        <retval type="TBytes" />
      </parameters>
    </function>
    <function name="GetBytesAttr" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aName" type="string" paramflags="const" />
        <parameter name="aDefault" type="TBytes" paramflags="const">
          <value>
            nil
          </value>
        </parameter>
        <retval type="TBytes" />
      </parameters>
    </function>
    <function name="GetBoolAttr" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aNameID" type="NativeInt" />
        <parameter name="aDefault" type="Boolean">
          <value>
            False
          </value>
        </parameter>
        <retval type="Boolean" />
      </parameters>
    </function>
    <function name="GetBoolAttr" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aName" type="string" paramflags="const" />
        <parameter name="aDefault" type="Boolean">
          <value>
            False
          </value>
        </parameter>
        <retval type="Boolean" />
      </parameters>
    </function>
    <procedure name="SetBoolAttr" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aNameID" type="NativeInt" />
        <parameter name="aValue" type="Boolean">
          <value>
            False
          </value>
        </parameter>
      </parameters>
    </procedure>
    <procedure name="SetBoolAttr" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aName" type="string" paramflags="const" />
        <parameter name="aValue" type="Boolean" />
      </parameters>
    </procedure>
    <function name="GetIntAttr" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aNameID" type="NativeInt" />
        <parameter name="aDefault" type="Integer">
          <value>
            $0
          </value>
        </parameter>
        <retval type="Integer" />
      </parameters>
    </function>
    <function name="GetIntAttr" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aName" type="string" paramflags="const" />
        <parameter name="aDefault" type="Integer">
          <value>
            $0
          </value>
        </parameter>
        <retval type="Integer" />
      </parameters>
    </function>
    <procedure name="SetIntAttr" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aNameID" type="NativeInt" />
        <parameter name="aValue" type="Integer" />
      </parameters>
    </procedure>
    <procedure name="SetIntAttr" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aName" type="string" paramflags="const" />
        <parameter name="aValue" type="Integer" />
      </parameters>
    </procedure>
    <function name="GetDateTimeAttr" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aNameID" type="NativeInt" />
        <parameter name="aDefault" type="TDateTime">
          <value>
            0
          </value>
        </parameter>
        <retval type="TDateTime" />
      </parameters>
    </function>
    <function name="GetDateTimeAttr" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aName" type="string" paramflags="const" />
        <parameter name="aDefault" type="TDateTime">
          <value>
            0
          </value>
        </parameter>
        <retval type="TDateTime" />
      </parameters>
    </function>
    <procedure name="SetDateTimeAttr" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aNameID" type="NativeInt" />
        <parameter name="aValue" type="TDateTime" />
      </parameters>
    </procedure>
    <procedure name="SetDateTimeAttr" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aName" type="string" paramflags="const" />
        <parameter name="aValue" type="TDateTime" />
      </parameters>
    </procedure>
    <function name="GetFloatAttr" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aNameID" type="NativeInt" />
        <parameter name="aDefault" type="Double">
          <value>
            0
          </value>
        </parameter>
        <retval type="Double" />
      </parameters>
    </function>
    <function name="GetFloatAttr" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aName" type="string" paramflags="const" />
        <parameter name="aDefault" type="Double">
          <value>
            0
          </value>
        </parameter>
        <retval type="Double" />
      </parameters>
    </function>
    <procedure name="SetFloatAttr" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aNameID" type="NativeInt" />
        <parameter name="aValue" type="Double" />
      </parameters>
    </procedure>
    <procedure name="SetFloatAttr" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aName" type="string" paramflags="const" />
        <parameter name="aValue" type="Double" />
      </parameters>
    </procedure>
    <function name="GetHexAttr" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aName" type="string" paramflags="const" />
        <parameter name="aDefault" type="Integer">
          <value>
            $0
          </value>
        </parameter>
        <retval type="Integer" />
      </parameters>
    </function>
    <function name="GetHexAttr" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aNameID" type="NativeInt" />
        <parameter name="aDefault" type="Integer">
          <value>
            $0
          </value>
        </parameter>
        <retval type="Integer" />
      </parameters>
    </function>
    <procedure name="SetHexAttr" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aName" type="string" paramflags="const" />
        <parameter name="aValue" type="Integer" />
        <parameter name="aDigits" type="Integer">
          <value>
            $8
          </value>
        </parameter>
      </parameters>
    </procedure>
    <procedure name="SetHexAttr" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aNameID" type="NativeInt" />
        <parameter name="aValue" type="Integer" />
        <parameter name="aDigits" type="Integer">
          <value>
            $8
          </value>
        </parameter>
      </parameters>
    </procedure>
    <function name="GetEnumAttr" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aName" type="string" paramflags="const" />
        <parameter name="aValues" paramflags="const">
          <array name="aValues">
            <element type="string" />
          </array>
        </parameter>
        <parameter name="aDefault" type="Integer">
          <value>
            $0
          </value>
        </parameter>
        <retval type="Integer" />
      </parameters>
    </function>
    <function name="GetEnumAttr" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aNameID" type="NativeInt" />
        <parameter name="aValues" paramflags="const">
          <array name="aValues">
            <element type="string" />
          </array>
        </parameter>
        <parameter name="aDefault" type="Integer">
          <value>
            $0
          </value>
        </parameter>
        <retval type="Integer" />
      </parameters>
    </function>
    <function name="NeedEnumAttr" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aName" type="string" paramflags="const" />
        <parameter name="aValues" paramflags="const">
          <array name="aValues">
            <element type="string" />
          </array>
        </parameter>
        <retval type="Integer" />
      </parameters>
    </function>
    <function name="NeedEnumAttr" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aNameID" type="NativeInt" />
        <parameter name="aValues" paramflags="const">
          <array name="aValues">
            <element type="string" />
          </array>
        </parameter>
        <retval type="Integer" />
      </parameters>
    </function>
    <function name="Get_Values" visibility="public" procflags="abstract virtual">
      <parameters>
        <parameter name="aName" type="string" paramflags="const" />
        <retval type="Variant" />
      </parameters>
    </function>
    <procedure name="Set_Values" visibility="public" procflags="abstract virtual">
      <parameters>
        <parameter name="aName" type="string" paramflags="const" />
        <parameter name="aValue" type="Variant" paramflags="const" />
      </parameters>
    </procedure>
    <function name="AsElement" visibility="public" procflags="abstract virtual">
      <parameters>
        <retval type="IXmlElement" />
      </parameters>
    </function>
    <function name="AsText" visibility="public" procflags="abstract virtual">
      <parameters>
        <retval type="IXmlText" />
      </parameters>
    </function>
    <function name="AsCDATASection" visibility="public" procflags="abstract virtual">
      <parameters>
        <retval type="IXmlCDATASection" />
      </parameters>
    </function>
    <function name="AsComment" visibility="public" procflags="abstract virtual">
      <parameters>
        <retval type="IXmlComment" />
      </parameters>
    </function>
    <function name="AsProcessingInstruction" visibility="public" procflags="abstract virtual">
      <parameters>
        <retval type="IXmlProcessingInstruction" />
      </parameters>
    </function>
    <property name="NodeName" visibility="public" read="Get_NodeName" type="string" />
    <property name="NodeNameID" visibility="public" read="Get_NodeNameID" type="NativeInt" />
    <property name="NodeType" visibility="public" read="Get_NodeType" type="TXmlNodeType" />
    <property name="ParentNode" visibility="public" read="Get_ParentNode" type="IXmlNode" />
    <property name="OwnerDocument" visibility="public" read="Get_OwnerDocument" type="IXmlDocument" />
    <property name="NameTable" visibility="public" read="Get_NameTable" type="IXmlNameTable" />
    <property name="ChildNodes" visibility="public" read="Get_ChildNodes" type="IXmlNodeList" />
    <property name="AttrCount" visibility="public" read="Get_AttrCount" type="Integer" />
    <property name="AttrNames" visibility="public" read="Get_AttrName" type="string" />
    <property name="AttrNameIDs" visibility="public" read="Get_AttrNameID" type="NativeInt" />
    <property name="Text" visibility="public" read="Get_Text" write="Set_Text" type="string" />
    <property name="DataType" visibility="public" read="Get_DataType" type="Integer" />
    <property name="TypedValue" visibility="public" read="Get_TypedValue" write="Set_TypedValue" type="Variant" />
    <property name="XML" visibility="public" read="Get_XML" type="string" />
    <property name="Values" visibility="public" read="Get_Values" write="Set_Values" type="Variant" />
  </interface>
  <interface name="IXmlElement">
    <procedure name="ReplaceTextByCDATASection" visibility="public" procflags="abstract virtual">
      <parameters>
        <parameter name="aText" type="string" paramflags="const" />
      </parameters>
    </procedure>
    <procedure name="ReplaceTextByBinaryData" visibility="public" procflags="abstract virtual">
      <parameters>
        <parameter name="aData" paramflags="const" />
        <parameter name="aSize" type="Integer" />
        <parameter name="aMaxLineLength" type="Integer" />
      </parameters>
    </procedure>
    <function name="GetTextAsBinaryData" visibility="public" procflags="abstract virtual">
      <parameters>
        <retval type="TBytes" />
      </parameters>
    </function>
  </interface>
  <interface name="IXmlCharacterData">
  </interface>
  <interface name="IXmlText">
  </interface>
  <interface name="IXmlCDATASection">
  </interface>
  <interface name="IXmlComment">
  </interface>
  <interface name="IXmlProcessingInstruction">
  </interface>
  <interface name="IXmlDocument">
    <function name="Get_DocumentElement" visibility="public" procflags="abstract virtual">
      <parameters>
        <retval type="IXmlElement" />
      </parameters>
    </function>
    <function name="Get_BinaryXML" visibility="public" procflags="abstract virtual">
      <parameters>
        <retval type="string" />
      </parameters>
    </function>
    <function name="Get_PreserveWhiteSpace" visibility="public" procflags="abstract virtual">
      <parameters>
        <retval type="Boolean" />
      </parameters>
    </function>
    <procedure name="Set_PreserveWhiteSpace" visibility="public" procflags="abstract virtual">
      <parameters>
        <parameter name="aValue" type="Boolean" />
      </parameters>
    </procedure>
    <function name="Get_OnTagEnd" visibility="public" procflags="abstract virtual">
      <parameters>
        <retval type="THookTag" />
      </parameters>
    </function>
    <procedure name="Set_OnTagEnd" visibility="public" procflags="abstract virtual">
      <parameters>
        <parameter name="aValue" type="THookTag" />
      </parameters>
    </procedure>
    <function name="Get_OnTagBegin" visibility="public" procflags="abstract virtual">
      <parameters>
        <retval type="THookTag" />
      </parameters>
    </function>
    <procedure name="Set_OnTagBegin" visibility="public" procflags="abstract virtual">
      <parameters>
        <parameter name="aValue" type="THookTag" />
      </parameters>
    </procedure>
    <function name="NewDocument" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aVersion" type="string" paramflags="const" />
        <parameter name="anEncoding" type="string" paramflags="const" />
        <parameter name="aRootElementNameID" type="NativeInt" />
        <retval type="IXmlElement" />
      </parameters>
    </function>
    <function name="NewDocument" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aVersion" type="string" paramflags="const" />
        <parameter name="anEncoding" type="string" paramflags="const" />
        <parameter name="aRootElementName" type="string" paramflags="const" />
        <retval type="IXmlElement" />
      </parameters>
    </function>
    <function name="CreateElement" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aNameID" type="NativeInt" />
        <retval type="IXmlElement" />
      </parameters>
    </function>
    <function name="CreateElement" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aName" type="string" paramflags="const" />
        <retval type="IXmlElement" />
      </parameters>
    </function>
    <function name="CreateText" visibility="public" procflags="abstract virtual">
      <parameters>
        <parameter name="aData" type="string" paramflags="const" />
        <retval type="IXmlText" />
      </parameters>
    </function>
    <function name="CreateCDATASection" visibility="public" procflags="abstract virtual">
      <parameters>
        <parameter name="aData" type="string" paramflags="const" />
        <retval type="IXmlCDATASection" />
      </parameters>
    </function>
    <function name="CreateComment" visibility="public" procflags="abstract virtual">
      <parameters>
        <parameter name="aData" type="string" paramflags="const" />
        <retval type="IXmlComment" />
      </parameters>
    </function>
    <function name="CreateProcessingInstruction" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aTarget" type="string" paramflags="const" />
        <parameter name="aData" type="string" paramflags="const" />
        <retval type="IXmlProcessingInstruction" />
      </parameters>
    </function>
    <function name="CreateProcessingInstruction" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aTargetID" type="NativeInt" />
        <parameter name="aData" type="string" paramflags="const" />
        <retval type="IXmlProcessingInstruction" />
      </parameters>
    </function>
    <procedure name="LoadXML" visibility="public" procflags="abstract virtual">
      <parameters>
        <parameter name="aXML" type="string" paramflags="const" />
      </parameters>
    </procedure>
    <procedure name="LoadBinaryXML" visibility="public" procflags="abstract virtual">
      <parameters>
        <parameter name="aXML" type="string" paramflags="const" />
      </parameters>
    </procedure>
    <procedure name="Load" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aStream" type="TStream" />
      </parameters>
    </procedure>
    <procedure name="Load" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aFileName" type="string" paramflags="const" />
      </parameters>
    </procedure>
    <procedure name="LoadResource" visibility="public" procflags="abstract virtual">
      <parameters>
        <parameter name="aType" type="PAnsiChar" />
        <parameter name="aName" type="PAnsiChar" />
      </parameters>
    </procedure>
    <procedure name="Save" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aStream" type="TStream" />
      </parameters>
    </procedure>
    <procedure name="Save" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aFileName" type="string" paramflags="const" />
      </parameters>
    </procedure>
    <procedure name="SaveBinary" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aStream" type="TStream" />
        <parameter name="anOptions" type="Cardinal">
          <value>
            $0
          </value>
        </parameter>
      </parameters>
    </procedure>
    <procedure name="SaveBinary" visibility="public" procflags="abstract overload virtual">
      <parameters>
        <parameter name="aFileName" type="string" paramflags="const" />
        <parameter name="anOptions" type="Cardinal">
          <value>
            $0
          </value>
        </parameter>
      </parameters>
    </procedure>
    <property name="PreserveWhiteSpace" visibility="public" read="Get_PreserveWhiteSpace" write="Set_PreserveWhiteSpace" type="Boolean" />
    <property name="DocumentElement" visibility="public" read="Get_DocumentElement" type="IXmlElement" />
    <property name="BinaryXML" visibility="public" read="Get_BinaryXML" type="string" />
    <event name="OnTagBegin" visibility="public" read="Get_OnTagBegin" write="Set_OnTagBegin" type="THookTag" />
    <event name="OnTagEnd" visibility="public" read="Get_OnTagEnd" write="Set_OnTagEnd" type="THookTag" />
  </interface>
  <variable name="DefaultPreserveWhiteSpace" type="Boolean" visibility="public" />
  <variable name="DefaultIndentText" type="string" visibility="public" />
  <variable name="XMLPathDelimiter" type="string" visibility="public" />
  <variable name="XMLCodepage" type="Word" visibility="public" />
  <function name="TextToXML" visibility="public">
    <parameters>
      <parameter name="aText" type="string" paramflags="const" />
      <retval type="string" />
    </parameters>
  </function>
  <function name="XSTRToFloat" visibility="public">
    <parameters>
      <parameter name="s" type="string" paramflags="const" />
      <retval type="Double" />
    </parameters>
  </function>
  <function name="FloatToXSTR" visibility="public">
    <parameters>
      <parameter name="v" type="Double" />
      <retval type="string" />
    </parameters>
  </function>
  <function name="XSTRToDateTime" visibility="public">
    <parameters>
      <parameter name="s" type="string" paramflags="const" />
      <retval type="TDateTime" />
    </parameters>
  </function>
  <function name="DateTimeToXSTR" visibility="public">
    <parameters>
      <parameter name="v" type="TDateTime" />
      <retval type="string" />
    </parameters>
  </function>
  <function name="VarToXSTR" visibility="public">
    <parameters>
      <parameter name="v" type="TVarData" paramflags="const" />
      <retval type="string" />
    </parameters>
  </function>
  <procedure name="PrepareToSaveXml" visibility="public">
    <parameters>
      <parameter name="anElem" type="IXmlElement" paramflags="var" />
      <parameter name="aChildName" type="string" paramflags="const" />
    </parameters>
  </procedure>
  <function name="PrepareToLoadXml" visibility="public">
    <parameters>
      <parameter name="anElem" type="IXmlElement" paramflags="var" />
      <parameter name="aChildName" type="string" paramflags="const" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="IsXmlDataString" visibility="public">
    <parameters>
      <parameter name="aData" type="string" paramflags="const" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="XmlIsInBinaryFormat" visibility="public">
    <parameters>
      <parameter name="aData" type="string" paramflags="const" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="BinToBase64" visibility="public">
    <parameters>
      <parameter name="aBin" paramflags="const" />
      <parameter name="aSize" type="Integer" />
      <parameter name="aMaxLineLength" type="Integer">
        <value>
          $50
        </value>
      </parameter>
      <retval type="string" />
    </parameters>
  </function>
  <function name="Base64ToBin" visibility="public">
    <parameters>
      <parameter name="aBase64" type="string" paramflags="const" />
      <retval type="TBytes" />
    </parameters>
  </function>
  <function name="CreateNameTable" visibility="public">
    <parameters>
      <parameter name="aHashTableSize" type="Integer">
        <value>
          $1F3
        </value>
      </parameter>
      <retval type="IXmlNameTable" />
    </parameters>
  </function>
  <function name="CreateXmlElement" visibility="public">
    <parameters>
      <parameter name="aName" type="string" paramflags="const" />
      <parameter name="aNameTable" type="IXmlNameTable" paramflags="const">
        <value>
          nil
        </value>
      </parameter>
      <retval type="IXmlElement" />
    </parameters>
  </function>
  <function name="CreateXmlDocument" visibility="public">
    <parameters>
      <parameter name="aRootElementName" type="string" paramflags="const">
        <value>
          
        </value>
      </parameter>
      <parameter name="aVersion" type="string" paramflags="const">
        <value>
          
        </value>
      </parameter>
      <parameter name="anEncoding" type="string" paramflags="const">
        <value>
          
        </value>
      </parameter>
      <parameter name="aNameTable" type="IXmlNameTable" paramflags="const">
        <value>
          nil
        </value>
      </parameter>
      <retval type="IXmlDocument" />
    </parameters>
  </function>
  <function name="LoadXmlDocumentFromXML" visibility="public">
    <parameters>
      <parameter name="aXML" type="string" paramflags="const" />
      <retval type="IXmlDocument" />
    </parameters>
  </function>
  <function name="LoadXmlDocumentFromBinaryXML" visibility="public">
    <parameters>
      <parameter name="aXML" type="string" paramflags="const" />
      <retval type="IXmlDocument" />
    </parameters>
  </function>
  <function name="LoadXmlDocument" visibility="public" procflags="overload">
    <parameters>
      <parameter name="aStream" type="TStream" />
      <retval type="IXmlDocument" />
    </parameters>
  </function>
  <function name="LoadXmlDocument" visibility="public" procflags="overload">
    <parameters>
      <parameter name="aFileName" type="string" paramflags="const" />
      <retval type="IXmlDocument" />
    </parameters>
  </function>
  <function name="LoadXmlDocument" visibility="public" procflags="overload">
    <parameters>
      <parameter name="aResType" type="PAnsiChar" />
      <parameter name="aResName" type="PAnsiChar" />
      <retval type="IXmlDocument" />
    </parameters>
  </function>
</namespace>
