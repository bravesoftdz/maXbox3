unit uPSI_JclFileUtils_max;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_JclFileUtils_max = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TJclFileMaskComparator(CL: TPSPascalCompiler);
procedure SIRegister_TJclMappedTextReader(CL: TPSPascalCompiler);
procedure SIRegister_TJclFileMappingStream(CL: TPSPascalCompiler);
procedure SIRegister_TJclSwapFileMapping(CL: TPSPascalCompiler);
procedure SIRegister_TJclFileMapping(CL: TPSPascalCompiler);
procedure SIRegister_TJclCustomFileMapping(CL: TPSPascalCompiler);
procedure SIRegister_TJclFileMappingView(CL: TPSPascalCompiler);
procedure SIRegister_TJclTempFileStream(CL: TPSPascalCompiler);
procedure SIRegister_TJclFileVersionInfo(CL: TPSPascalCompiler);
procedure SIRegister_TJclFileEnumerator(CL: TPSPascalCompiler);
procedure SIRegister_IJclFileEnumerator(CL: TPSPascalCompiler);
procedure SIRegister_TJclFileAttributeMask(CL: TPSPascalCompiler);
procedure SIRegister_TJclCustomFileAttrMask(CL: TPSPascalCompiler);
procedure SIRegister_JclFileUtils_max(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TJclFileMaskComparator(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJclMappedTextReader(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJclFileMappingStream(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJclSwapFileMapping(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJclFileMapping(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJclCustomFileMapping(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJclFileMappingView(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJclTempFileStream(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJclFileVersionInfo(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJclFileEnumerator(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJclFileAttributeMask(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJclCustomFileAttrMask(CL: TPSRuntimeClassImporter);
procedure RIRegister_JclFileUtils_max_Routines(S: TPSExec);

procedure Register;

implementation


uses
   JclUnitVersioning
  ,Types
  ,Libc
  ,Windows
  ,JclBase
  ,JclFileUtils_max
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_JclFileUtils_max]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TJclFileMaskComparator(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TJclFileMaskComparator') do
  with CL.AddClassN(CL.FindClass('TObject'),'TJclFileMaskComparator') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Function Compare( const NameExt : string) : Boolean');
    RegisterProperty('Count', 'Integer', iptr);
    RegisterProperty('Exts', 'string Integer', iptr);
    RegisterProperty('FileMask', 'string', iptrw);
    RegisterProperty('Masks', 'string Integer', iptr);
    RegisterProperty('Names', 'string Integer', iptr);
    RegisterProperty('Separator', 'Char', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJclMappedTextReader(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TPersistent', 'TJclMappedTextReader') do
  with CL.AddClassN(CL.FindClass('TPersistent'),'TJclMappedTextReader') do
  begin
    RegisterMethod('Constructor Create2( MemoryStream : TCustomMemoryStream; FreeStream : Boolean; const AIndexOption : TJclMappedTextReaderIndex);');
    RegisterMethod('Constructor Create3( const FileName : string; const AIndexOption : TJclMappedTextReaderIndex);');
    RegisterMethod('Procedure GoBegin');
    RegisterMethod('Function Read : Char');
    RegisterMethod('Function ReadLn : string');
    RegisterProperty('AsString', 'string', iptr);
    RegisterProperty('Chars', 'Char Integer', iptr);
    RegisterProperty('Content', 'PChar', iptr);
    RegisterProperty('Eof', 'Boolean', iptr);
    RegisterProperty('IndexOption', 'TJclMappedTextReaderIndex', iptr);
    RegisterProperty('Lines', 'string Integer', iptr);
    RegisterProperty('LineCount', 'Integer', iptr);
    RegisterProperty('PositionFromLine', 'Integer Integer', iptr);
    RegisterProperty('Position', 'Integer', iptrw);
    RegisterProperty('Size', 'Integer', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJclFileMappingStream(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomMemoryStream', 'TJclFileMappingStream') do
  with CL.AddClassN(CL.FindClass('TCustomMemoryStream'),'TJclFileMappingStream') do
  begin
    RegisterMethod('Constructor Create( const FileName : string; FileMode : WordfmShareDenyWrite)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJclSwapFileMapping(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJclCustomFileMapping', 'TJclSwapFileMapping') do
  with CL.AddClassN(CL.FindClass('TJclCustomFileMapping'),'TJclSwapFileMapping') do
  begin
    RegisterMethod('Constructor Create( const Name : string; Protect : Cardinal; const MaximumSize : Int64; SecAttr : PSecurityAttributes)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJclFileMapping(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJclCustomFileMapping', 'TJclFileMapping') do
  with CL.AddClassN(CL.FindClass('TJclCustomFileMapping'),'TJclFileMapping') do
  begin
    RegisterMethod('Constructor Create( const FileName : string; FileMode : Cardinal; const Name : string; Protect : Cardinal; const MaximumSize : Int64; SecAttr : PSecurityAttributes);');
    RegisterMethod('Constructor Create1( const FileHandle : THandle; const Name : string; Protect : Cardinal; const MaximumSize : Int64; SecAttr : PSecurityAttributes);');
    RegisterProperty('FileHandle', 'THandle', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJclCustomFileMapping(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TJclCustomFileMapping') do
  with CL.AddClassN(CL.FindClass('TObject'),'TJclCustomFileMapping') do
  begin
    RegisterMethod('Constructor Open( const Name : string; const InheritHandle : Boolean; const DesiredAccess : Cardinal)');
    RegisterMethod('Function Add( const Access, Count : Cardinal; const Offset : Int64) : Integer');
    RegisterMethod('Function AddAt( const Access, Count : Cardinal; const Offset : Int64; const Address : Pointer) : Integer');
    RegisterMethod('Procedure Delete( const Index : Integer)');
    RegisterMethod('Function IndexOf( const View : TJclFileMappingView) : Integer');
    RegisterProperty('Count', 'Integer', iptr);
    RegisterProperty('Existed', 'Boolean', iptr);
    RegisterProperty('Handle', 'THandle', iptr);
    RegisterProperty('Name', 'string', iptr);
    RegisterProperty('RoundViewOffset', 'TJclFileMappingRoundOffset', iptrw);
    RegisterProperty('Views', 'TJclFileMappingView Integer', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJclFileMappingView(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomMemoryStream', 'TJclFileMappingView') do
  with CL.AddClassN(CL.FindClass('TCustomMemoryStream'),'TJclFileMappingView') do
  begin
    RegisterMethod('Constructor Create( const FileMap : TJclCustomFileMapping; Access, Size : Cardinal; ViewOffset : Int64)');
    RegisterMethod('Constructor CreateAt( FileMap : TJclCustomFileMapping; Access, Size : Cardinal; ViewOffset : Int64; Address : Pointer)');
    RegisterMethod('Function Flush( const Count : Cardinal) : Boolean');
    RegisterMethod('Procedure LoadFromStream( const Stream : TStream)');
    RegisterMethod('Procedure LoadFromFile( const FileName : string)');
    RegisterProperty('Index', 'Integer', iptr);
    RegisterProperty('FileMapping', 'TJclCustomFileMapping', iptr);
    RegisterProperty('Offset', 'Int64', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJclTempFileStream(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'THandleStream', 'TJclTempFileStream') do
  with CL.AddClassN(CL.FindClass('THandleStream'),'TJclTempFileStream') do
  begin
    RegisterMethod('Constructor Create( const Prefix : string)');
    RegisterProperty('FileName', 'string', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJclFileVersionInfo(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TJclFileVersionInfo') do
  with CL.AddClassN(CL.FindClass('TObject'),'TJclFileVersionInfo') do
  begin
    RegisterMethod('Constructor Attach( VersionInfoData : Pointer; Size : Integer)');
    RegisterMethod('Constructor Create( const FileName : string)');
    RegisterMethod('Function VersionLanguageId( const LangIdRec : TLangIdRec) : string');
    RegisterMethod('Function VersionLanguageName( const LangId : Word) : string');
    RegisterMethod('Function TranslationMatchesLanguages( Exact : Boolean) : Boolean');
    RegisterProperty('BinFileVersion', 'string', iptr);
    RegisterProperty('BinProductVersion', 'string', iptr);
    RegisterProperty('Comments', 'string', iptr);
    RegisterProperty('CompanyName', 'string', iptr);
    RegisterProperty('FileDescription', 'string', iptr);
    RegisterProperty('FixedInfo', 'TVSFixedFileInfo', iptr);
    RegisterProperty('FileFlags', 'TFileFlags', iptr);
    RegisterProperty('FileOS', 'DWORD', iptr);
    RegisterProperty('FileSubType', 'DWORD', iptr);
    RegisterProperty('FileType', 'DWORD', iptr);
    RegisterProperty('FileVersion', 'string', iptr);
    RegisterProperty('Items', 'TStrings', iptr);
    RegisterProperty('InternalName', 'string', iptr);
    RegisterProperty('LanguageCount', 'Integer', iptr);
    RegisterProperty('LanguageIds', 'string Integer', iptr);
    RegisterProperty('LanguageIndex', 'Integer', iptrw);
    RegisterProperty('Languages', 'TLangIdRec Integer', iptr);
    RegisterProperty('LanguageNames', 'string Integer', iptr);
    RegisterProperty('LegalCopyright', 'string', iptr);
    RegisterProperty('LegalTradeMarks', 'string', iptr);
    RegisterProperty('OriginalFilename', 'string', iptr);
    RegisterProperty('PrivateBuild', 'string', iptr);
    RegisterProperty('ProductName', 'string', iptr);
    RegisterProperty('ProductVersion', 'string', iptr);
    RegisterProperty('SpecialBuild', 'string', iptr);
    RegisterProperty('TranslationCount', 'Integer', iptr);
    RegisterProperty('Translations', 'TLangIdRec Integer', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJclFileEnumerator(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TPersistent', 'TJclFileEnumerator') do
  with CL.AddClassN(CL.FindClass('TPersistent'),'TJclFileEnumerator') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure AfterConstruction');
    RegisterMethod('Procedure Assign( Source : TPersistent)');
    RegisterMethod('Function FillList( List : TStrings) : TFileSearchTaskID');
    RegisterMethod('Function ForEach2( Handler : TFileHandler) : TFileSearchTaskID;');
    RegisterMethod('Function ForEach3( Handler : TFileHandlerEx) : TFileSearchTaskID;');
    RegisterMethod('Procedure StopTask( ID : TFileSearchTaskID)');
    RegisterMethod('Procedure StopAllTasks( Silently : Boolean)');
    RegisterProperty('FileMask', 'string', iptrw);
    RegisterProperty('IncludeSubDirectories', 'Boolean', iptrw);
    RegisterProperty('IncludeHiddenSubDirectories', 'Boolean', iptrw);
    RegisterProperty('SearchOption', 'Boolean TFileSearchOption', iptrw);
    RegisterProperty('LastChangeAfterAsString', 'string', iptrw);
    RegisterProperty('LastChangeBeforeAsString', 'string', iptrw);
    RegisterProperty('CaseSensitiveSearch', 'Boolean', iptrw);
    RegisterProperty('FileMasks', 'TStrings', iptrw);
    RegisterProperty('RootDirectory', 'string', iptrw);
    RegisterProperty('SubDirectoryMask', 'string', iptrw);
    RegisterProperty('AttributeMask', 'TJclFileAttributeMask', iptrw);
    RegisterProperty('FileSizeMin', 'Int64', iptrw);
    RegisterProperty('FileSizeMax', 'Int64', iptrw);
    RegisterProperty('LastChangeAfter', 'TDateTime', iptrw);
    RegisterProperty('LastChangeBefore', 'TDateTime', iptrw);
    RegisterProperty('Options', 'TFileSearchOptions', iptrw);
    RegisterProperty('RunningTasks', 'Integer', iptr);
    RegisterProperty('SynchronizationMode', 'TFileEnumeratorSyncMode', iptrw);
    RegisterProperty('OnEnterDirectory', 'TFileHandler', iptrw);
    RegisterProperty('OnTerminateTask', 'TFileSearchTerminationEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IJclFileEnumerator(CL: TPSPascalCompiler);
begin
  //with RegInterfaceS(CL,'IUNKNOWN', 'IJclFileEnumerator') do
  with CL.AddInterface(CL.FindInterface('IUNKNOWN'),IJclFileEnumerator, 'IJclFileEnumerator') do
  begin
    RegisterMethod('Function GetAttributeMask : TJclFileAttributeMask', cdRegister);
    RegisterMethod('Function GetCaseSensitiveSearch : Boolean', cdRegister);
    RegisterMethod('Function GetRootDirectory : string', cdRegister);
    RegisterMethod('Function GetFileMask : string', cdRegister);
    RegisterMethod('Function GetFileMasks : TStrings', cdRegister);
    RegisterMethod('Function GetFileSizeMax : Int64', cdRegister);
    RegisterMethod('Function GetFileSizeMin : Int64', cdRegister);
    RegisterMethod('Function GetIncludeSubDirectories : Boolean', cdRegister);
    RegisterMethod('Function GetIncludeHiddenSubDirectories : Boolean', cdRegister);
    RegisterMethod('Function GetLastChangeAfter : TDateTime', cdRegister);
    RegisterMethod('Function GetLastChangeBefore : TDateTime', cdRegister);
    RegisterMethod('Function GetLastChangeAfterStr : string', cdRegister);
    RegisterMethod('Function GetLastChangeBeforeStr : string', cdRegister);
    RegisterMethod('Function GetRunningTasks : Integer', cdRegister);
    RegisterMethod('Function GetSubDirectoryMask : string', cdRegister);
    RegisterMethod('Function GetSynchronizationMode : TFileEnumeratorSyncMode', cdRegister);
    RegisterMethod('Function GetOnEnterDirectory : TFileHandler', cdRegister);
    RegisterMethod('Function GetOnTerminateTask : TFileSearchTerminationEvent', cdRegister);
    RegisterMethod('Function GetOption( const Option : TFileSearchOption) : Boolean', cdRegister);
    RegisterMethod('Function GetOptions : TFileSearchoptions', cdRegister);
    RegisterMethod('Procedure SetAttributeMask( const Value : TJclFileAttributeMask)', cdRegister);
    RegisterMethod('Procedure SetCaseSensitiveSearch( const Value : Boolean)', cdRegister);
    RegisterMethod('Procedure SetRootDirectory( const Value : string)', cdRegister);
    RegisterMethod('Procedure SetFileMask( const Value : string)', cdRegister);
    RegisterMethod('Procedure SetFileMasks( const Value : TStrings)', cdRegister);
    RegisterMethod('Procedure SetFileSizeMax( const Value : Int64)', cdRegister);
    RegisterMethod('Procedure SetFileSizeMin( const Value : Int64)', cdRegister);
    RegisterMethod('Procedure SetIncludeSubDirectories( const Value : Boolean)', cdRegister);
    RegisterMethod('Procedure SetIncludeHiddenSubDirectories( const Value : Boolean)', cdRegister);
    RegisterMethod('Procedure SetLastChangeAfter( const Value : TDateTime)', cdRegister);
    RegisterMethod('Procedure SetLastChangeBefore( const Value : TDateTime)', cdRegister);
    RegisterMethod('Procedure SetLastChangeAfterStr( const Value : string)', cdRegister);
    RegisterMethod('Procedure SetLastChangeBeforeStr( const Value : string)', cdRegister);
    RegisterMethod('Procedure SetOption( const Option : TFileSearchOption; const Value : Boolean)', cdRegister);
    RegisterMethod('Procedure SetOptions( const Value : TFileSearchOptions)', cdRegister);
    RegisterMethod('Procedure SetSubDirectoryMask( const Value : string)', cdRegister);
    RegisterMethod('Procedure SetSynchronizationMode( const Value : TFileEnumeratorSyncMode)', cdRegister);
    RegisterMethod('Procedure SetOnEnterDirectory( const Value : TFileHandler)', cdRegister);
    RegisterMethod('Procedure SetOnTerminateTask( const Value : TFileSearchTerminationEvent)', cdRegister);
    RegisterMethod('Function FillList( List : TStrings) : TFileSearchTaskID', cdRegister);
    RegisterMethod('Function ForEach( Handler : TFileHandler) : TFileSearchTaskID;', cdRegister);
    RegisterMethod('Function ForEach1( Handler : TFileHandlerEx) : TFileSearchTaskID;', cdRegister);
    RegisterMethod('Procedure StopTask( ID : TFileSearchTaskID)', cdRegister);
    RegisterMethod('Procedure StopAllTasks( Silently : Boolean)', cdRegister);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJclFileAttributeMask(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TJclCustomFileAttrMask', 'TJclFileAttributeMask') do
  with CL.AddClassN(CL.FindClass('TJclCustomFileAttrMask'),'TJclFileAttributeMask') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJclCustomFileAttrMask(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TPersistent', 'TJclCustomFileAttrMask') do
  with CL.AddClassN(CL.FindClass('TPersistent'),'TJclCustomFileAttrMask') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure Assign( Source : TPersistent)');
    RegisterMethod('Procedure Clear');
    RegisterMethod('Function Match( FileAttributes : Integer) : Boolean;');
    RegisterMethod('Function Match1( const FileInfo : TSearchRec) : Boolean;');
    RegisterProperty('Required', 'Integer', iptrw);
    RegisterProperty('Rejected', 'Integer', iptrw);
    RegisterProperty('Attribute', 'TAttributeInterest Integer', iptrw);
    SetDefaultPropery('Attribute');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_JclFileUtils_max(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('ERROR_NO_MORE_FILES','LongInt').SetInt( 18);
 CL.AddDelphiFunction('Function stat64( FileName : PChar; var StatBuffer : TStatBuf64) : Integer');
 CL.AddDelphiFunction('Function fstat64( FileDes : Integer; var StatBuffer : TStatBuf64) : Integer');
 CL.AddDelphiFunction('Function lstat64( FileName : PChar; var StatBuffer : TStatBuf64) : Integer');
 CL.AddConstantN('PathSeparator','String').SetString( '/');
 CL.AddConstantN('DirDelimiter','String').SetString( '/');
 CL.AddConstantN('DirSeparator','String').SetString( ':');
 CL.AddConstantN('PathDevicePrefix','String').SetString( '\\.\');
 CL.AddConstantN('PathSeparator','String').SetString( '\');
 CL.AddConstantN('DirDelimiter','String').SetString( '\');
 CL.AddConstantN('DirSeparator','String').SetString( ';');
 CL.AddConstantN('PathUncPrefix','String').SetString( '\\');
 CL.AddConstantN('faNormalFile','LongWord').SetUInt( $00000080);
 CL.AddConstantN('faUnixSpecific','').SetString( faSymLink);
  CL.AddTypeS('TCompactPath', '( cpCenter, cpEnd )');
 CL.AddDelphiFunction('Function PathAddSeparator( const Path : string) : string');
 CL.AddDelphiFunction('Function PathAddExtension( const Path, Extension : string) : string');
 CL.AddDelphiFunction('Function PathAppend( const Path, Append : string) : string');
 CL.AddDelphiFunction('Function PathBuildRoot( const Drive : Byte) : string');
 CL.AddDelphiFunction('Function PathCanonicalize( const Path : string) : string');
 CL.AddDelphiFunction('Function PathCommonPrefix( const Path1, Path2 : string) : Integer');
 CL.AddDelphiFunction('Function PathCompactPath( const DC : HDC; const Path : string; const Width : Integer; CmpFmt : TCompactPath) : string');
 CL.AddDelphiFunction('Procedure PathExtractElements( const Source : string; var Drive, Path, FileName, Ext : string)');
 CL.AddDelphiFunction('Function PathExtractFileDirFixed( const S : string) : string');
 CL.AddDelphiFunction('Function PathExtractFileNameNoExt( const Path : string) : string');
 CL.AddDelphiFunction('Function PathExtractPathDepth( const Path : string; Depth : Integer) : string');
 CL.AddDelphiFunction('Function PathGetDepth( const Path : string) : Integer');
 CL.AddDelphiFunction('Function PathGetLongName( const Path : string) : string');
 CL.AddDelphiFunction('Function PathGetShortName( const Path : string) : string');
 CL.AddDelphiFunction('Function PathGetLongName( const Path : string) : string');
 CL.AddDelphiFunction('Function PathGetShortName( const Path : string) : string');
 CL.AddDelphiFunction('Function PathGetRelativePath( Origin, Destination : string) : string');
 CL.AddDelphiFunction('Function PathGetTempPath : string');
 CL.AddDelphiFunction('Function PathIsAbsolute( const Path : string) : Boolean');
 CL.AddDelphiFunction('Function PathIsChild( const Path, Base : string) : Boolean');
 CL.AddDelphiFunction('Function PathIsDiskDevice( const Path : string) : Boolean');
 CL.AddDelphiFunction('Function PathIsUNC( const Path : string) : Boolean');
 CL.AddDelphiFunction('Function PathRemoveSeparator( const Path : string) : string');
 CL.AddDelphiFunction('Function PathRemoveExtension( const Path : string) : string');
 CL.AddDelphiFunction('Function PathGetPhysicalPath( const LocalizedPath : string) : string');
 CL.AddDelphiFunction('Function PathGetLocalizedPath( const PhysicalPath : string) : string');
  CL.AddTypeS('TFileListOption', '( flFullNames, flRecursive, flMaskedSubfolder'
   +'s )');
  CL.AddTypeS('TFileListOptions', 'set of TFileListOption');
  CL.AddTypeS('TJclAttributeMatch', '( amAny, amExact, amSubSetOf, amSuperSetOf'
   +', amCustom )');
  CL.AddTypeS('TFileHandler', 'Procedure ( const FileName : string)');
  CL.AddTypeS('TFileHandlerEx', 'Procedure ( const Directory : string; const Fi'
   +'leInfo : TSearchRec)');
 CL.AddDelphiFunction('Function BuildFileList( const Path : string; const Attr : Integer; const List : TStrings) : Boolean');
 CL.AddDelphiFunction('Function AdvBuildFileList( const Path : string; const Attr : Integer; const Files : TStrings; const AttributeMatch : TJclAttributeMatch; const Options : TFileListOptions; const SubfoldersMask : string; const FileMatchFunc : TFileMatchFunc) : Boolean');
 CL.AddDelphiFunction('Function VerifyFileAttributeMask( var RejectedAttributes, RequiredAttributes : Integer) : Boolean');
 CL.AddDelphiFunction('Function IsFileAttributeMatch( FileAttributes, RejectedAttributes, RequiredAttributes : Integer) : Boolean');
 CL.AddDelphiFunction('Function FileAttributesStr( const FileInfo : TSearchRec) : string');
 CL.AddDelphiFunction('Function IsFileNameMatch( FileName : string; const Mask : string; const CaseSensitive : BooleanTrue) : Boolean');
 CL.AddDelphiFunction('Procedure EnumFiles( const Path : string; HandleFile : TFileHandlerEx; RejectedAttributes : Integer; RequiredAttributes : Integer; Abort : PBoolean)');
 CL.AddDelphiFunction('Procedure EnumDirectories( const Root : string; const HandleDirectory : TFileHandler; const IncludeHiddenDirectories : Boolean; const SubDirectoriesMask : string; Abort : PBoolean; ResolveSymLinks : Boolean)');
 CL.AddDelphiFunction('Procedure CreateEmptyFile( const FileName : string)');
 CL.AddDelphiFunction('Function CloseVolume( var Volume : THandle) : Boolean');
 CL.AddDelphiFunction('Function DeleteDirectory( const DirectoryName : string; MoveToRecycleBin : Boolean) : Boolean');
 CL.AddDelphiFunction('Function CopyDirectory( ExistingDirectoryName, NewDirectoryName : string) : Boolean');
 CL.AddDelphiFunction('Function MoveDirectory( ExistingDirectoryName, NewDirectoryName : string) : Boolean');
 CL.AddDelphiFunction('Function DelTree( const Path : string) : Boolean');
 CL.AddDelphiFunction('Function DelTreeEx( const Path : string; AbortOnFailure : Boolean; Progress : TDelTreeProgress) : Boolean');
 CL.AddDelphiFunction('Function DiskInDrive( Drive : Char) : Boolean');
 CL.AddDelphiFunction('Function DirectoryExists( const Name : string; ResolveSymLinks : Boolean) : Boolean');
 CL.AddDelphiFunction('Function FileCreateTemp( var Prefix : string) : THandle');
 CL.AddDelphiFunction('Function FileBackup( const FileName : string; Move : Boolean) : Boolean');
 CL.AddDelphiFunction('Function FileCopy( const ExistingFileName, NewFileName : string; ReplaceExisting : Boolean) : Boolean');
 CL.AddDelphiFunction('Function FileDelete( const FileName : string; MoveToRecycleBin : Boolean) : Boolean');
 CL.AddDelphiFunction('Function FileExists( const FileName : string) : Boolean');
 CL.AddDelphiFunction('Function FileMove( const ExistingFileName, NewFileName : string; ReplaceExisting : Boolean) : Boolean');
 CL.AddDelphiFunction('Function FileRestore( const FileName : string) : Boolean');
 CL.AddDelphiFunction('Function GetBackupFileName( const FileName : string) : string');
 CL.AddDelphiFunction('Function IsBackupFileName( const FileName : string) : Boolean');
 CL.AddDelphiFunction('Function FileGetDisplayName( const FileName : string) : string');
 CL.AddDelphiFunction('Function FileGetGroupName( const FileName : string; ResolveSymLinks : Boolean) : string');
 CL.AddDelphiFunction('Function FileGetOwnerName( const FileName : string; ResolveSymLinks : Boolean) : string');
 CL.AddDelphiFunction('Function FileGetSize( const FileName : string) : Int64');
 CL.AddDelphiFunction('Function FileGetTempName( const Prefix : string) : string');
 CL.AddDelphiFunction('Function FileGetTypeName( const FileName : string) : string');
 CL.AddDelphiFunction('Function FindUnusedFileName( FileName : string; const FileExt : string; NumberPrefix : string) : string');
 CL.AddDelphiFunction('Function ForceDirectories( Name : string) : Boolean');
 CL.AddDelphiFunction('Function GetDirectorySize( const Path : string) : Int64');
 CL.AddDelphiFunction('Function GetDriveTypeStr( const Drive : Char) : string');
 CL.AddDelphiFunction('Function GetFileAgeCoherence( const FileName : string) : Boolean');
 CL.AddDelphiFunction('Procedure GetFileAttributeList( const Items : TStrings; const Attr : Integer)');
 CL.AddDelphiFunction('Procedure GetFileAttributeListEx( const Items : TStrings; const Attr : Integer)');
 CL.AddDelphiFunction('Function GetFileInformation( const FileName : string; out FileInfo : TSearchRec) : Boolean;');
 CL.AddDelphiFunction('Function GetFileInformation1( const FileName : string) : TSearchRec;');
 CL.AddDelphiFunction('Function GetFileStatus( const FileName : string; out StatBuf : TStatBuf64; const ResolveSymLinks : Boolean) : Integer');
 CL.AddDelphiFunction('Function GetFileLastWrite( const FileName : string) : TFileTime;');
 CL.AddDelphiFunction('Function GetFileLastWrite1( const FileName : string; out LocalTime : TDateTime) : Boolean;');
 CL.AddDelphiFunction('Function GetFileLastAccess( const FileName : string) : TFileTime;');
 CL.AddDelphiFunction('Function GetFileLastAccess1( const FileName : string; out LocalTime : TDateTime) : Boolean;');
 CL.AddDelphiFunction('Function GetFileCreation( const FileName : string) : TFileTime;');
 CL.AddDelphiFunction('Function GetFileCreation1( const FileName : string; out LocalTime : TDateTime) : Boolean;');
 CL.AddDelphiFunction('Function GetFileLastWrite( const FileName : string; out TimeStamp : Integer; ResolveSymLinks : Boolean) : Boolean;');
 CL.AddDelphiFunction('Function GetFileLastWrite1( const FileName : string; out LocalTime : TDateTime; ResolveSymLinks : Boolean) : Boolean;');
 CL.AddDelphiFunction('Function GetFileLastWrite2( const FileName : string; ResolveSymLinks : Boolean) : Integer;');
 CL.AddDelphiFunction('Function GetFileLastAccess( const FileName : string; out TimeStamp : Integer; ResolveSymLinks : Boolean) : Boolean;');
 CL.AddDelphiFunction('Function GetFileLastAccess1( const FileName : string; out LocalTime : TDateTime; ResolveSymLinks : Boolean) : Boolean;');
 CL.AddDelphiFunction('Function GetFileLastAccess2( const FileName : string; ResolveSymLinks : Boolean) : Integer;');
 CL.AddDelphiFunction('Function GetFileLastAttrChange( const FileName : string; out TimeStamp : Integer; ResolveSymLinks : Boolean) : Boolean;');
 CL.AddDelphiFunction('Function GetFileLastAttrChange1( const FileName : string; out LocalTime : TDateTime; ResolveSymLinks : Boolean) : Boolean;');
 CL.AddDelphiFunction('Function GetFileLastAttrChange2( const FileName : string; ResolveSymLinks : Boolean) : Integer;');
 CL.AddDelphiFunction('Function GetModulePath( const Module : HMODULE) : string');
 CL.AddDelphiFunction('Function GetSizeOfFile( const FileName : string) : Int64;');
 CL.AddDelphiFunction('Function GetSizeOfFile1( const FileInfo : TSearchRec) : Int64;');
 CL.AddDelphiFunction('Function GetSizeOfFile2( Handle : THandle) : Int64;');
 CL.AddDelphiFunction('Function GetStandardFileInfo( const FileName : string) : TWin32FileAttributeData');
 CL.AddDelphiFunction('Function IsDirectory( const FileName : string; ResolveSymLinks : Boolean) : Boolean');
 CL.AddDelphiFunction('Function IsRootDirectory( const CanonicFileName : string) : Boolean');
 CL.AddDelphiFunction('Function LockVolume( const Volume : string; var Handle : THandle) : Boolean');
 CL.AddDelphiFunction('Function OpenVolume( const Drive : Char) : THandle');
 CL.AddDelphiFunction('Function SetDirLastWrite( const DirName : string; const DateTime : TDateTime) : Boolean');
 CL.AddDelphiFunction('Function SetDirLastAccess( const DirName : string; const DateTime : TDateTime) : Boolean');
 CL.AddDelphiFunction('Function SetDirCreation( const DirName : string; const DateTime : TDateTime) : Boolean');
 CL.AddDelphiFunction('Function SetFileLastWrite( const FileName : string; const DateTime : TDateTime) : Boolean');
 CL.AddDelphiFunction('Function SetFileLastAccess( const FileName : string; const DateTime : TDateTime) : Boolean');
 CL.AddDelphiFunction('Function SetFileCreation( const FileName : string; const DateTime : TDateTime) : Boolean');
 CL.AddDelphiFunction('Procedure ShredFile( const FileName : string; Times : Integer)');
 CL.AddDelphiFunction('Function UnlockVolume( var Handle : THandle) : Boolean');
 CL.AddDelphiFunction('Function CreateSymbolicLink( const Name, Target : string) : Boolean');
 CL.AddDelphiFunction('Function SymbolicLinkTarget( const Name : string) : string');
  CL.AddTypeS('TAttributeInterest', '( aiIgnored, aiRejected, aiRequired )');
  SIRegister_TJclCustomFileAttrMask(CL);
  SIRegister_TJclFileAttributeMask(CL);
  CL.AddTypeS('TFileSearchOption', '( fsIncludeSubDirectories, fsIncludeHiddenS'
   +'ubDirectories, fsLastChangeAfter, fsLastChangeBefore, fsMaxSize, fsMinSize'
   +' )');
  CL.AddTypeS('TFileSearchOptions', 'set of TFileSearchOption');
  CL.AddTypeS('TFileSearchTaskID', 'Integer');
  CL.AddTypeS('TFileSearchTerminationEvent', 'Procedure ( const ID : TFileSearc'
   +'hTaskID; const Aborted : Boolean)');
  CL.AddTypeS('TFileEnumeratorSyncMode', '( smPerFile, smPerDirectory )');
  SIRegister_IJclFileEnumerator(CL);
  SIRegister_TJclFileEnumerator(CL);
 CL.AddDelphiFunction('Function FileSearch : IJclFileEnumerator');
  CL.AddTypeS('TFileFlag', '( ffDebug, ffInfoInferred, ffPatched, ffPreRelease,'
   +' ffPrivateBuild, ffSpecialBuild )');
  CL.AddTypeS('TFileFlags', 'set of TFileFlag');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EJclFileVersionInfoError');
  SIRegister_TJclFileVersionInfo(CL);
 CL.AddDelphiFunction('Function OSIdentToString( const OSIdent : DWORD) : string');
 CL.AddDelphiFunction('Function OSFileTypeToString( const OSFileType : DWORD; const OSFileSubType : DWORD) : string');
 CL.AddDelphiFunction('Function VersionResourceAvailable( const FileName : string) : Boolean');
  CL.AddTypeS('TFileVersionFormat', '( vfMajorMinor, vfFull )');
 CL.AddDelphiFunction('Function FormatVersionString( const HiV, LoV : Word) : string;');
 CL.AddDelphiFunction('Function FormatVersionString1( const Major, Minor, Build, Revision : Word) : string;');
 CL.AddDelphiFunction('Function FormatVersionString2( const FixedInfo : TVSFixedFileInfo; VersionFormat : TFileVersionFormat) : string;');
 CL.AddDelphiFunction('Procedure VersionExtractFileInfo( const FixedInfo : TVSFixedFileInfo; var Major, Minor, Build, Revision : Word)');
 CL.AddDelphiFunction('Procedure VersionExtractProductInfo( const FixedInfo : TVSFixedFileInfo; var Major, Minor, Build, Revision : Word)');
 CL.AddDelphiFunction('Function VersionFixedFileInfo( const FileName : string; var FixedInfo : TVSFixedFileInfo) : Boolean');
 CL.AddDelphiFunction('Function VersionFixedFileInfoString( const FileName : string; VersionFormat : TFileVersionFormat; const NotAvailableText : string) : string');
  SIRegister_TJclTempFileStream(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'TJclCustomFileMapping');
  SIRegister_TJclFileMappingView(CL);
  CL.AddTypeS('TJclFileMappingRoundOffset', '( rvDown, rvUp )');
  SIRegister_TJclCustomFileMapping(CL);
  SIRegister_TJclFileMapping(CL);
  SIRegister_TJclSwapFileMapping(CL);
  SIRegister_TJclFileMappingStream(CL);
  CL.AddTypeS('TJclMappedTextReaderIndex', '( tiNoIndex, tiFull )');
  CL.AddTypeS('PPCharArray', '^TPCharArray // will not work');
  SIRegister_TJclMappedTextReader(CL);
  SIRegister_TJclFileMaskComparator(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EJclPathError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EJclFileUtilsError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EJclTempFileStreamError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EJclTempFileStreamError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EJclFileMappingError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EJclFileMappingViewError');
 CL.AddDelphiFunction('Function PathGetLongName2( const Path : string) : string');
 CL.AddDelphiFunction('Function Win32DeleteFile( const FileName : string; MoveToRecycleBin : Boolean) : Boolean');
 CL.AddDelphiFunction('Function Win32MoveFileReplaceExisting( const SrcFileName, DstFileName : string) : Boolean');
 CL.AddDelphiFunction('Function Win32BackupFile( const FileName : string; Move : Boolean) : Boolean');
 CL.AddDelphiFunction('Function Win32RestoreFile( const FileName : string) : Boolean');
 CL.AddDelphiFunction('Function SamePath( const Path1, Path2 : string) : Boolean');
 CL.AddDelphiFunction('Procedure PathListAddItems( var List : string; const Items : string)');
 CL.AddDelphiFunction('Procedure PathListIncludeItems( var List : string; const Items : string)');
 CL.AddDelphiFunction('Procedure PathListDelItems( var List : string; const Items : string)');
 CL.AddDelphiFunction('Procedure PathListDelItem( var List : string; const Index : Integer)');
 CL.AddDelphiFunction('Function PathListItemCount( const List : string) : Integer');
 CL.AddDelphiFunction('Function PathListGetItem( const List : string; const Index : Integer) : string');
 CL.AddDelphiFunction('Procedure PathListSetItem( var List : string; const Index : Integer; const Value : string)');
 CL.AddDelphiFunction('Function PathListItemIndex( const List, Item : string) : Integer');
 CL.AddDelphiFunction('Function ParamName( Index : Integer; const Separator : string; const AllowedPrefixCharacters : string; TrimName : Boolean) : string');
 CL.AddDelphiFunction('Function ParamValue( Index : Integer; const Separator : string; TrimValue : Boolean) : string;');
 CL.AddDelphiFunction('Function ParamValue1( const SearchName : string; const Separator : string; CaseSensitive : Boolean; const AllowedPrefixCharacters : string; TrimValue : Boolean) : string;');
 CL.AddDelphiFunction('Function ParamPos( const SearchName : string; const Separator : string; CaseSensitive : Boolean; const AllowedPrefixCharacters : string) : Integer');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
Function ParamValue1_P( const SearchName : string; const Separator : string; CaseSensitive : Boolean; const AllowedPrefixCharacters : string; TrimValue : Boolean) : string;
Begin Result := JclFileUtils_max.ParamValue(SearchName, Separator, CaseSensitive, AllowedPrefixCharacters, TrimValue); END;

(*----------------------------------------------------------------------------*)
Function ParamValue_P( Index : Integer; const Separator : string; TrimValue : Boolean) : string;
Begin Result := JclFileUtils_max.ParamValue(Index, Separator, TrimValue); END;

(*----------------------------------------------------------------------------*)
procedure TJclFileMaskComparatorSeparator_W(Self: TJclFileMaskComparator; const T: Char);
begin Self.Separator := T; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileMaskComparatorSeparator_R(Self: TJclFileMaskComparator; var T: Char);
begin T := Self.Separator; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileMaskComparatorNames_R(Self: TJclFileMaskComparator; var T: string; const t1: Integer);
begin T := Self.Names[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileMaskComparatorMasks_R(Self: TJclFileMaskComparator; var T: string; const t1: Integer);
begin T := Self.Masks[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileMaskComparatorFileMask_W(Self: TJclFileMaskComparator; const T: string);
begin Self.FileMask := T; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileMaskComparatorFileMask_R(Self: TJclFileMaskComparator; var T: string);
begin T := Self.FileMask; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileMaskComparatorExts_R(Self: TJclFileMaskComparator; var T: string; const t1: Integer);
begin T := Self.Exts[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileMaskComparatorCount_R(Self: TJclFileMaskComparator; var T: Integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure TJclMappedTextReaderSize_R(Self: TJclMappedTextReader; var T: Integer);
begin T := Self.Size; end;

(*----------------------------------------------------------------------------*)
procedure TJclMappedTextReaderPosition_W(Self: TJclMappedTextReader; const T: Integer);
begin Self.Position := T; end;

(*----------------------------------------------------------------------------*)
procedure TJclMappedTextReaderPosition_R(Self: TJclMappedTextReader; var T: Integer);
begin T := Self.Position; end;

(*----------------------------------------------------------------------------*)
procedure TJclMappedTextReaderPositionFromLine_R(Self: TJclMappedTextReader; var T: Integer; const t1: Integer);
begin T := Self.PositionFromLine[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TJclMappedTextReaderLineCount_R(Self: TJclMappedTextReader; var T: Integer);
begin T := Self.LineCount; end;

(*----------------------------------------------------------------------------*)
procedure TJclMappedTextReaderLines_R(Self: TJclMappedTextReader; var T: string; const t1: Integer);
begin T := Self.Lines[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TJclMappedTextReaderIndexOption_R(Self: TJclMappedTextReader; var T: TJclMappedTextReaderIndex);
begin T := Self.IndexOption; end;

(*----------------------------------------------------------------------------*)
procedure TJclMappedTextReaderEof_R(Self: TJclMappedTextReader; var T: Boolean);
begin T := Self.Eof; end;

(*----------------------------------------------------------------------------*)
procedure TJclMappedTextReaderContent_R(Self: TJclMappedTextReader; var T: PChar);
begin T := Self.Content; end;

(*----------------------------------------------------------------------------*)
procedure TJclMappedTextReaderChars_R(Self: TJclMappedTextReader; var T: Char; const t1: Integer);
begin T := Self.Chars[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TJclMappedTextReaderAsString_R(Self: TJclMappedTextReader; var T: string);
begin T := Self.AsString; end;

(*----------------------------------------------------------------------------*)
Function TJclMappedTextReaderCreate3_P(Self: TClass; CreateNewInstance: Boolean;  const FileName : string; const AIndexOption : TJclMappedTextReaderIndex):TObject;
Begin Result := TJclMappedTextReader.Create(FileName, AIndexOption); END;

(*----------------------------------------------------------------------------*)
Function TJclMappedTextReaderCreate2_P(Self: TClass; CreateNewInstance: Boolean;  MemoryStream : TCustomMemoryStream; FreeStream : Boolean; const AIndexOption : TJclMappedTextReaderIndex):TObject;
Begin Result := TJclMappedTextReader.Create(MemoryStream, FreeStream, AIndexOption); END;

(*----------------------------------------------------------------------------*)
procedure TJclFileMappingFileHandle_R(Self: TJclFileMapping; var T: THandle);
begin T := Self.FileHandle; end;

(*----------------------------------------------------------------------------*)
Function TJclFileMappingCreate1_P(Self: TClass; CreateNewInstance: Boolean;  const FileHandle : THandle; const Name : string; Protect : Cardinal; const MaximumSize : Int64; SecAttr : PSecurityAttributes):TObject;
Begin Result := TJclFileMapping.Create(FileHandle, Name, Protect, MaximumSize, SecAttr); END;

(*----------------------------------------------------------------------------*)
Function TJclFileMappingCreate_P(Self: TClass; CreateNewInstance: Boolean;  const FileName : string; FileMode : Cardinal; const Name : string; Protect : Cardinal; const MaximumSize : Int64; SecAttr : PSecurityAttributes):TObject;
Begin Result := TJclFileMapping.Create(FileName, FileMode, Name, Protect, MaximumSize, SecAttr); END;

(*----------------------------------------------------------------------------*)
procedure TJclCustomFileMappingViews_R(Self: TJclCustomFileMapping; var T: TJclFileMappingView; const t1: Integer);
begin T := Self.Views[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TJclCustomFileMappingRoundViewOffset_W(Self: TJclCustomFileMapping; const T: TJclFileMappingRoundOffset);
begin Self.RoundViewOffset := T; end;

(*----------------------------------------------------------------------------*)
procedure TJclCustomFileMappingRoundViewOffset_R(Self: TJclCustomFileMapping; var T: TJclFileMappingRoundOffset);
begin T := Self.RoundViewOffset; end;

(*----------------------------------------------------------------------------*)
procedure TJclCustomFileMappingName_R(Self: TJclCustomFileMapping; var T: string);
begin T := Self.Name; end;

(*----------------------------------------------------------------------------*)
procedure TJclCustomFileMappingHandle_R(Self: TJclCustomFileMapping; var T: THandle);
begin T := Self.Handle; end;

(*----------------------------------------------------------------------------*)
procedure TJclCustomFileMappingExisted_R(Self: TJclCustomFileMapping; var T: Boolean);
begin T := Self.Existed; end;

(*----------------------------------------------------------------------------*)
procedure TJclCustomFileMappingCount_R(Self: TJclCustomFileMapping; var T: Integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileMappingViewOffset_R(Self: TJclFileMappingView; var T: Int64);
begin T := Self.Offset; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileMappingViewFileMapping_R(Self: TJclFileMappingView; var T: TJclCustomFileMapping);
begin T := Self.FileMapping; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileMappingViewIndex_R(Self: TJclFileMappingView; var T: Integer);
begin T := Self.Index; end;

(*----------------------------------------------------------------------------*)
procedure TJclTempFileStreamFileName_R(Self: TJclTempFileStream; var T: string);
begin T := Self.FileName; end;

(*----------------------------------------------------------------------------*)
Function FormatVersionString2_P( const FixedInfo : TVSFixedFileInfo; VersionFormat : TFileVersionFormat) : string;
Begin Result := JclFileUtils_max.FormatVersionString(FixedInfo, VersionFormat); END;

(*----------------------------------------------------------------------------*)
Function FormatVersionString1_P( const Major, Minor, Build, Revision : Word) : string;
Begin Result := JclFileUtils_max.FormatVersionString(Major, Minor, Build, Revision); END;

(*----------------------------------------------------------------------------*)
Function FormatVersionString_P( const HiV, LoV : Word) : string;
Begin Result := JclFileUtils_max.FormatVersionString(HiV, LoV); END;

(*----------------------------------------------------------------------------*)
procedure TJclFileVersionInfoTranslations_R(Self: TJclFileVersionInfo; var T: TLangIdRec; const t1: Integer);
begin T := Self.Translations[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileVersionInfoTranslationCount_R(Self: TJclFileVersionInfo; var T: Integer);
begin T := Self.TranslationCount; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileVersionInfoSpecialBuild_R(Self: TJclFileVersionInfo; var T: string);
begin T := Self.SpecialBuild; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileVersionInfoProductVersion_R(Self: TJclFileVersionInfo; var T: string);
begin T := Self.ProductVersion; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileVersionInfoProductName_R(Self: TJclFileVersionInfo; var T: string);
begin T := Self.ProductName; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileVersionInfoPrivateBuild_R(Self: TJclFileVersionInfo; var T: string);
begin T := Self.PrivateBuild; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileVersionInfoOriginalFilename_R(Self: TJclFileVersionInfo; var T: string);
begin T := Self.OriginalFilename; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileVersionInfoLegalTradeMarks_R(Self: TJclFileVersionInfo; var T: string);
begin T := Self.LegalTradeMarks; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileVersionInfoLegalCopyright_R(Self: TJclFileVersionInfo; var T: string);
begin T := Self.LegalCopyright; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileVersionInfoLanguageNames_R(Self: TJclFileVersionInfo; var T: string; const t1: Integer);
begin T := Self.LanguageNames[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileVersionInfoLanguages_R(Self: TJclFileVersionInfo; var T: TLangIdRec; const t1: Integer);
begin T := Self.Languages[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileVersionInfoLanguageIndex_W(Self: TJclFileVersionInfo; const T: Integer);
begin Self.LanguageIndex := T; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileVersionInfoLanguageIndex_R(Self: TJclFileVersionInfo; var T: Integer);
begin T := Self.LanguageIndex; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileVersionInfoLanguageIds_R(Self: TJclFileVersionInfo; var T: string; const t1: Integer);
begin T := Self.LanguageIds[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileVersionInfoLanguageCount_R(Self: TJclFileVersionInfo; var T: Integer);
begin T := Self.LanguageCount; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileVersionInfoInternalName_R(Self: TJclFileVersionInfo; var T: string);
begin T := Self.InternalName; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileVersionInfoItems_R(Self: TJclFileVersionInfo; var T: TStrings);
begin T := Self.Items; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileVersionInfoFileVersion_R(Self: TJclFileVersionInfo; var T: string);
begin T := Self.FileVersion; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileVersionInfoFileType_R(Self: TJclFileVersionInfo; var T: DWORD);
begin T := Self.FileType; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileVersionInfoFileSubType_R(Self: TJclFileVersionInfo; var T: DWORD);
begin T := Self.FileSubType; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileVersionInfoFileOS_R(Self: TJclFileVersionInfo; var T: DWORD);
begin T := Self.FileOS; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileVersionInfoFileFlags_R(Self: TJclFileVersionInfo; var T: TFileFlags);
begin T := Self.FileFlags; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileVersionInfoFixedInfo_R(Self: TJclFileVersionInfo; var T: TVSFixedFileInfo);
begin T := Self.FixedInfo; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileVersionInfoFileDescription_R(Self: TJclFileVersionInfo; var T: string);
begin T := Self.FileDescription; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileVersionInfoCompanyName_R(Self: TJclFileVersionInfo; var T: string);
begin T := Self.CompanyName; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileVersionInfoComments_R(Self: TJclFileVersionInfo; var T: string);
begin T := Self.Comments; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileVersionInfoBinProductVersion_R(Self: TJclFileVersionInfo; var T: string);
begin T := Self.BinProductVersion; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileVersionInfoBinFileVersion_R(Self: TJclFileVersionInfo; var T: string);
begin T := Self.BinFileVersion; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileEnumeratorOnTerminateTask_W(Self: TJclFileEnumerator; const T: TFileSearchTerminationEvent);
begin Self.OnTerminateTask := T; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileEnumeratorOnTerminateTask_R(Self: TJclFileEnumerator; var T: TFileSearchTerminationEvent);
begin T := Self.OnTerminateTask; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileEnumeratorOnEnterDirectory_W(Self: TJclFileEnumerator; const T: TFileHandler);
begin Self.OnEnterDirectory := T; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileEnumeratorOnEnterDirectory_R(Self: TJclFileEnumerator; var T: TFileHandler);
begin T := Self.OnEnterDirectory; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileEnumeratorSynchronizationMode_W(Self: TJclFileEnumerator; const T: TFileEnumeratorSyncMode);
begin Self.SynchronizationMode := T; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileEnumeratorSynchronizationMode_R(Self: TJclFileEnumerator; var T: TFileEnumeratorSyncMode);
begin T := Self.SynchronizationMode; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileEnumeratorRunningTasks_R(Self: TJclFileEnumerator; var T: Integer);
begin T := Self.RunningTasks; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileEnumeratorOptions_W(Self: TJclFileEnumerator; const T: TFileSearchOptions);
begin Self.Options := T; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileEnumeratorOptions_R(Self: TJclFileEnumerator; var T: TFileSearchOptions);
begin T := Self.Options; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileEnumeratorLastChangeBefore_W(Self: TJclFileEnumerator; const T: TDateTime);
begin Self.LastChangeBefore := T; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileEnumeratorLastChangeBefore_R(Self: TJclFileEnumerator; var T: TDateTime);
begin T := Self.LastChangeBefore; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileEnumeratorLastChangeAfter_W(Self: TJclFileEnumerator; const T: TDateTime);
begin Self.LastChangeAfter := T; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileEnumeratorLastChangeAfter_R(Self: TJclFileEnumerator; var T: TDateTime);
begin T := Self.LastChangeAfter; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileEnumeratorFileSizeMax_W(Self: TJclFileEnumerator; const T: Int64);
begin Self.FileSizeMax := T; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileEnumeratorFileSizeMax_R(Self: TJclFileEnumerator; var T: Int64);
begin T := Self.FileSizeMax; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileEnumeratorFileSizeMin_W(Self: TJclFileEnumerator; const T: Int64);
begin Self.FileSizeMin := T; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileEnumeratorFileSizeMin_R(Self: TJclFileEnumerator; var T: Int64);
begin T := Self.FileSizeMin; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileEnumeratorAttributeMask_W(Self: TJclFileEnumerator; const T: TJclFileAttributeMask);
begin Self.AttributeMask := T; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileEnumeratorAttributeMask_R(Self: TJclFileEnumerator; var T: TJclFileAttributeMask);
begin T := Self.AttributeMask; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileEnumeratorSubDirectoryMask_W(Self: TJclFileEnumerator; const T: string);
begin Self.SubDirectoryMask := T; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileEnumeratorSubDirectoryMask_R(Self: TJclFileEnumerator; var T: string);
begin T := Self.SubDirectoryMask; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileEnumeratorRootDirectory_W(Self: TJclFileEnumerator; const T: string);
begin Self.RootDirectory := T; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileEnumeratorRootDirectory_R(Self: TJclFileEnumerator; var T: string);
begin T := Self.RootDirectory; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileEnumeratorFileMasks_W(Self: TJclFileEnumerator; const T: TStrings);
begin Self.FileMasks := T; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileEnumeratorFileMasks_R(Self: TJclFileEnumerator; var T: TStrings);
begin T := Self.FileMasks; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileEnumeratorCaseSensitiveSearch_W(Self: TJclFileEnumerator; const T: Boolean);
begin Self.CaseSensitiveSearch := T; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileEnumeratorCaseSensitiveSearch_R(Self: TJclFileEnumerator; var T: Boolean);
begin T := Self.CaseSensitiveSearch; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileEnumeratorLastChangeBeforeAsString_W(Self: TJclFileEnumerator; const T: string);
begin Self.LastChangeBeforeAsString := T; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileEnumeratorLastChangeBeforeAsString_R(Self: TJclFileEnumerator; var T: string);
begin T := Self.LastChangeBeforeAsString; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileEnumeratorLastChangeAfterAsString_W(Self: TJclFileEnumerator; const T: string);
begin Self.LastChangeAfterAsString := T; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileEnumeratorLastChangeAfterAsString_R(Self: TJclFileEnumerator; var T: string);
begin T := Self.LastChangeAfterAsString; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileEnumeratorSearchOption_W(Self: TJclFileEnumerator; const T: Boolean; const t1: TFileSearchOption);
begin Self.SearchOption[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileEnumeratorSearchOption_R(Self: TJclFileEnumerator; var T: Boolean; const t1: TFileSearchOption);
begin T := Self.SearchOption[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileEnumeratorIncludeHiddenSubDirectories_W(Self: TJclFileEnumerator; const T: Boolean);
begin Self.IncludeHiddenSubDirectories := T; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileEnumeratorIncludeHiddenSubDirectories_R(Self: TJclFileEnumerator; var T: Boolean);
begin T := Self.IncludeHiddenSubDirectories; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileEnumeratorIncludeSubDirectories_W(Self: TJclFileEnumerator; const T: Boolean);
begin Self.IncludeSubDirectories := T; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileEnumeratorIncludeSubDirectories_R(Self: TJclFileEnumerator; var T: Boolean);
begin T := Self.IncludeSubDirectories; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileEnumeratorFileMask_W(Self: TJclFileEnumerator; const T: string);
begin Self.FileMask := T; end;

(*----------------------------------------------------------------------------*)
procedure TJclFileEnumeratorFileMask_R(Self: TJclFileEnumerator; var T: string);
begin T := Self.FileMask; end;

(*----------------------------------------------------------------------------*)
Function TJclFileEnumeratorForEach3_P(Self: TJclFileEnumerator;  Handler : TFileHandlerEx) : TFileSearchTaskID;
Begin Result := Self.ForEach(Handler); END;

(*----------------------------------------------------------------------------*)
Function TJclFileEnumeratorForEach2_P(Self: TJclFileEnumerator;  Handler : TFileHandler) : TFileSearchTaskID;
Begin Result := Self.ForEach(Handler); END;

(*----------------------------------------------------------------------------*)
Function IJclFileEnumeratorForEach1_P(Self: IJclFileEnumerator;  Handler : TFileHandlerEx) : TFileSearchTaskID;
Begin Result := Self.ForEach(Handler); END;

(*----------------------------------------------------------------------------*)
Function IJclFileEnumeratorForEach_P(Self: IJclFileEnumerator;  Handler : TFileHandler) : TFileSearchTaskID;
Begin Result := Self.ForEach(Handler); END;

(*----------------------------------------------------------------------------*)
procedure TJclCustomFileAttrMaskAttribute_W(Self: TJclCustomFileAttrMask; const T: TAttributeInterest; const t1: Integer);
begin Self.Attribute[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TJclCustomFileAttrMaskAttribute_R(Self: TJclCustomFileAttrMask; var T: TAttributeInterest; const t1: Integer);
begin T := Self.Attribute[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TJclCustomFileAttrMaskRejected_W(Self: TJclCustomFileAttrMask; const T: Integer);
begin Self.Rejected := T; end;

(*----------------------------------------------------------------------------*)
procedure TJclCustomFileAttrMaskRejected_R(Self: TJclCustomFileAttrMask; var T: Integer);
begin T := Self.Rejected; end;

(*----------------------------------------------------------------------------*)
procedure TJclCustomFileAttrMaskRequired_W(Self: TJclCustomFileAttrMask; const T: Integer);
begin Self.Required := T; end;

(*----------------------------------------------------------------------------*)
procedure TJclCustomFileAttrMaskRequired_R(Self: TJclCustomFileAttrMask; var T: Integer);
begin T := Self.Required; end;

(*----------------------------------------------------------------------------*)
Function TJclCustomFileAttrMaskMatch1_P(Self: TJclCustomFileAttrMask;  const FileInfo : TSearchRec) : Boolean;
Begin Result := Self.Match(FileInfo); END;

(*----------------------------------------------------------------------------*)
Function TJclCustomFileAttrMaskMatch_P(Self: TJclCustomFileAttrMask;  FileAttributes : Integer) : Boolean;
Begin Result := Self.Match(FileAttributes); END;

(*----------------------------------------------------------------------------*)
Function GetSizeOfFile2_P( Handle : THandle) : Int64;
Begin Result := JclFileUtils_max.GetSizeOfFile(Handle); END;

(*----------------------------------------------------------------------------*)
Function GetSizeOfFile1_P( const FileInfo : TSearchRec) : Int64;
Begin Result := JclFileUtils_max.GetSizeOfFile(FileInfo); END;

(*----------------------------------------------------------------------------*)
Function GetSizeOfFile_P( const FileName : string) : Int64;
Begin Result := JclFileUtils_max.GetSizeOfFile(FileName); END;

(*----------------------------------------------------------------------------*)
Function GetFileLastAttrChange2_P( const FileName : string; ResolveSymLinks : Boolean) : Integer;
Begin Result := JclFileUtils_max.GetFileLastAttrChange(FileName, ResolveSymLinks); END;

(*----------------------------------------------------------------------------*)
Function GetFileLastAttrChange1_P( const FileName : string; out LocalTime : TDateTime; ResolveSymLinks : Boolean) : Boolean;
Begin Result := JclFileUtils_max.GetFileLastAttrChange(FileName, LocalTime, ResolveSymLinks); END;

(*----------------------------------------------------------------------------*)
Function GetFileLastAttrChange_P( const FileName : string; out TimeStamp : Integer; ResolveSymLinks : Boolean) : Boolean;
Begin Result := JclFileUtils_max.GetFileLastAttrChange(FileName, TimeStamp, ResolveSymLinks); END;

(*----------------------------------------------------------------------------*)
Function GetFileLastAccess2_P( const FileName : string; ResolveSymLinks : Boolean) : Integer;
Begin Result := JclFileUtils_max.GetFileLastAccess(FileName, ResolveSymLinks); END;

(*----------------------------------------------------------------------------*)
Function GetFileLastAccess1_P( const FileName : string; out LocalTime : TDateTime; ResolveSymLinks : Boolean) : Boolean;
Begin Result := JclFileUtils_max.GetFileLastAccess(FileName, LocalTime, ResolveSymLinks); END;

(*----------------------------------------------------------------------------*)
Function GetFileLastAccess_P( const FileName : string; out TimeStamp : Integer; ResolveSymLinks : Boolean) : Boolean;
Begin Result := JclFileUtils_max.GetFileLastAccess(FileName, TimeStamp, ResolveSymLinks); END;

(*----------------------------------------------------------------------------*)
Function GetFileLastWrite2_P( const FileName : string; ResolveSymLinks : Boolean) : Integer;
Begin Result := JclFileUtils_max.GetFileLastWrite(FileName, ResolveSymLinks); END;

(*----------------------------------------------------------------------------*)
Function GetFileLastWrite1_P( const FileName : string; out LocalTime : TDateTime; ResolveSymLinks : Boolean) : Boolean;
Begin Result := JclFileUtils_max.GetFileLastWrite(FileName, LocalTime, ResolveSymLinks); END;

(*----------------------------------------------------------------------------*)
Function GetFileLastWrite_P( const FileName : string; out TimeStamp : Integer; ResolveSymLinks : Boolean) : Boolean;
Begin Result := JclFileUtils_max.GetFileLastWrite(FileName, TimeStamp, ResolveSymLinks); END;

(*----------------------------------------------------------------------------*)
Function GetFileCreation1_P( const FileName : string; out LocalTime : TDateTime) : Boolean;
Begin Result := JclFileUtils_max.GetFileCreation(FileName, LocalTime); END;

(*----------------------------------------------------------------------------*)
Function GetFileCreation_P( const FileName : string) : TFileTime;
Begin Result := JclFileUtils_max.GetFileCreation(FileName); END;

(*----------------------------------------------------------------------------*)
Function GetFileLastAccess1_P( const FileName : string; out LocalTime : TDateTime) : Boolean;
Begin Result := JclFileUtils_max.GetFileLastAccess(FileName, LocalTime); END;

(*----------------------------------------------------------------------------*)
Function GetFileLastAccess_P( const FileName : string) : TFileTime;
Begin Result := JclFileUtils_max.GetFileLastAccess(FileName); END;

(*----------------------------------------------------------------------------*)
Function GetFileLastWrite1_P( const FileName : string; out LocalTime : TDateTime) : Boolean;
Begin Result := JclFileUtils_max.GetFileLastWrite(FileName, LocalTime); END;

(*----------------------------------------------------------------------------*)
Function GetFileLastWrite_P( const FileName : string) : TFileTime;
Begin Result := JclFileUtils_max.GetFileLastWrite(FileName); END;

(*----------------------------------------------------------------------------*)
Function GetFileInformation1_P( const FileName : string) : TSearchRec;
Begin Result := JclFileUtils_max.GetFileInformation(FileName); END;

(*----------------------------------------------------------------------------*)
Function GetFileInformation_P( const FileName : string; out FileInfo : TSearchRec) : Boolean;
Begin Result := JclFileUtils_max.GetFileInformation(FileName, FileInfo); END;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJclFileMaskComparator(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJclFileMaskComparator) do
  begin
    RegisterConstructor(@TJclFileMaskComparator.Create, 'Create');
    RegisterMethod(@TJclFileMaskComparator.Compare, 'Compare');
    RegisterPropertyHelper(@TJclFileMaskComparatorCount_R,nil,'Count');
    RegisterPropertyHelper(@TJclFileMaskComparatorExts_R,nil,'Exts');
    RegisterPropertyHelper(@TJclFileMaskComparatorFileMask_R,@TJclFileMaskComparatorFileMask_W,'FileMask');
    RegisterPropertyHelper(@TJclFileMaskComparatorMasks_R,nil,'Masks');
    RegisterPropertyHelper(@TJclFileMaskComparatorNames_R,nil,'Names');
    RegisterPropertyHelper(@TJclFileMaskComparatorSeparator_R,@TJclFileMaskComparatorSeparator_W,'Separator');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJclMappedTextReader(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJclMappedTextReader) do
  begin
    RegisterConstructor(@TJclMappedTextReaderCreate2_P, 'Create2');
    RegisterConstructor(@TJclMappedTextReaderCreate3_P, 'Create3');
    RegisterMethod(@TJclMappedTextReader.GoBegin, 'GoBegin');
    RegisterMethod(@TJclMappedTextReader.Read, 'Read');
    RegisterMethod(@TJclMappedTextReader.ReadLn, 'ReadLn');
    RegisterPropertyHelper(@TJclMappedTextReaderAsString_R,nil,'AsString');
    RegisterPropertyHelper(@TJclMappedTextReaderChars_R,nil,'Chars');
    RegisterPropertyHelper(@TJclMappedTextReaderContent_R,nil,'Content');
    RegisterPropertyHelper(@TJclMappedTextReaderEof_R,nil,'Eof');
    RegisterPropertyHelper(@TJclMappedTextReaderIndexOption_R,nil,'IndexOption');
    RegisterPropertyHelper(@TJclMappedTextReaderLines_R,nil,'Lines');
    RegisterPropertyHelper(@TJclMappedTextReaderLineCount_R,nil,'LineCount');
    RegisterPropertyHelper(@TJclMappedTextReaderPositionFromLine_R,nil,'PositionFromLine');
    RegisterPropertyHelper(@TJclMappedTextReaderPosition_R,@TJclMappedTextReaderPosition_W,'Position');
    RegisterPropertyHelper(@TJclMappedTextReaderSize_R,nil,'Size');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJclFileMappingStream(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJclFileMappingStream) do
  begin
    RegisterConstructor(@TJclFileMappingStream.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJclSwapFileMapping(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJclSwapFileMapping) do
  begin
    RegisterConstructor(@TJclSwapFileMapping.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJclFileMapping(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJclFileMapping) do
  begin
    RegisterConstructor(@TJclFileMappingCreate_P, 'Create');
    RegisterConstructor(@TJclFileMappingCreate1_P, 'Create1');
    RegisterPropertyHelper(@TJclFileMappingFileHandle_R,nil,'FileHandle');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJclCustomFileMapping(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJclCustomFileMapping) do
  begin
    RegisterConstructor(@TJclCustomFileMapping.Open, 'Open');
    RegisterMethod(@TJclCustomFileMapping.Add, 'Add');
    RegisterMethod(@TJclCustomFileMapping.AddAt, 'AddAt');
    RegisterMethod(@TJclCustomFileMapping.Delete, 'Delete');
    RegisterMethod(@TJclCustomFileMapping.IndexOf, 'IndexOf');
    RegisterPropertyHelper(@TJclCustomFileMappingCount_R,nil,'Count');
    RegisterPropertyHelper(@TJclCustomFileMappingExisted_R,nil,'Existed');
    RegisterPropertyHelper(@TJclCustomFileMappingHandle_R,nil,'Handle');
    RegisterPropertyHelper(@TJclCustomFileMappingName_R,nil,'Name');
    RegisterPropertyHelper(@TJclCustomFileMappingRoundViewOffset_R,@TJclCustomFileMappingRoundViewOffset_W,'RoundViewOffset');
    RegisterPropertyHelper(@TJclCustomFileMappingViews_R,nil,'Views');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJclFileMappingView(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJclFileMappingView) do
  begin
    RegisterConstructor(@TJclFileMappingView.Create, 'Create');
    RegisterConstructor(@TJclFileMappingView.CreateAt, 'CreateAt');
    RegisterMethod(@TJclFileMappingView.Flush, 'Flush');
    RegisterMethod(@TJclFileMappingView.LoadFromStream, 'LoadFromStream');
    RegisterMethod(@TJclFileMappingView.LoadFromFile, 'LoadFromFile');
    RegisterPropertyHelper(@TJclFileMappingViewIndex_R,nil,'Index');
    RegisterPropertyHelper(@TJclFileMappingViewFileMapping_R,nil,'FileMapping');
    RegisterPropertyHelper(@TJclFileMappingViewOffset_R,nil,'Offset');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJclTempFileStream(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJclTempFileStream) do
  begin
    RegisterConstructor(@TJclTempFileStream.Create, 'Create');
    RegisterPropertyHelper(@TJclTempFileStreamFileName_R,nil,'FileName');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJclFileVersionInfo(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJclFileVersionInfo) do
  begin
    RegisterConstructor(@TJclFileVersionInfo.Attach, 'Attach');
    RegisterConstructor(@TJclFileVersionInfo.Create, 'Create');
    RegisterMethod(@TJclFileVersionInfo.VersionLanguageId, 'VersionLanguageId');
    RegisterMethod(@TJclFileVersionInfo.VersionLanguageName, 'VersionLanguageName');
    RegisterMethod(@TJclFileVersionInfo.TranslationMatchesLanguages, 'TranslationMatchesLanguages');
    RegisterPropertyHelper(@TJclFileVersionInfoBinFileVersion_R,nil,'BinFileVersion');
    RegisterPropertyHelper(@TJclFileVersionInfoBinProductVersion_R,nil,'BinProductVersion');
    RegisterPropertyHelper(@TJclFileVersionInfoComments_R,nil,'Comments');
    RegisterPropertyHelper(@TJclFileVersionInfoCompanyName_R,nil,'CompanyName');
    RegisterPropertyHelper(@TJclFileVersionInfoFileDescription_R,nil,'FileDescription');
    RegisterPropertyHelper(@TJclFileVersionInfoFixedInfo_R,nil,'FixedInfo');
    RegisterPropertyHelper(@TJclFileVersionInfoFileFlags_R,nil,'FileFlags');
    RegisterPropertyHelper(@TJclFileVersionInfoFileOS_R,nil,'FileOS');
    RegisterPropertyHelper(@TJclFileVersionInfoFileSubType_R,nil,'FileSubType');
    RegisterPropertyHelper(@TJclFileVersionInfoFileType_R,nil,'FileType');
    RegisterPropertyHelper(@TJclFileVersionInfoFileVersion_R,nil,'FileVersion');
    RegisterPropertyHelper(@TJclFileVersionInfoItems_R,nil,'Items');
    RegisterPropertyHelper(@TJclFileVersionInfoInternalName_R,nil,'InternalName');
    RegisterPropertyHelper(@TJclFileVersionInfoLanguageCount_R,nil,'LanguageCount');
    RegisterPropertyHelper(@TJclFileVersionInfoLanguageIds_R,nil,'LanguageIds');
    RegisterPropertyHelper(@TJclFileVersionInfoLanguageIndex_R,@TJclFileVersionInfoLanguageIndex_W,'LanguageIndex');
    RegisterPropertyHelper(@TJclFileVersionInfoLanguages_R,nil,'Languages');
    RegisterPropertyHelper(@TJclFileVersionInfoLanguageNames_R,nil,'LanguageNames');
    RegisterPropertyHelper(@TJclFileVersionInfoLegalCopyright_R,nil,'LegalCopyright');
    RegisterPropertyHelper(@TJclFileVersionInfoLegalTradeMarks_R,nil,'LegalTradeMarks');
    RegisterPropertyHelper(@TJclFileVersionInfoOriginalFilename_R,nil,'OriginalFilename');
    RegisterPropertyHelper(@TJclFileVersionInfoPrivateBuild_R,nil,'PrivateBuild');
    RegisterPropertyHelper(@TJclFileVersionInfoProductName_R,nil,'ProductName');
    RegisterPropertyHelper(@TJclFileVersionInfoProductVersion_R,nil,'ProductVersion');
    RegisterPropertyHelper(@TJclFileVersionInfoSpecialBuild_R,nil,'SpecialBuild');
    RegisterPropertyHelper(@TJclFileVersionInfoTranslationCount_R,nil,'TranslationCount');
    RegisterPropertyHelper(@TJclFileVersionInfoTranslations_R,nil,'Translations');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJclFileEnumerator(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJclFileEnumerator) do
  begin
    RegisterConstructor(@TJclFileEnumerator.Create, 'Create');
    RegisterMethod(@TJclFileEnumerator.AfterConstruction, 'AfterConstruction');
    RegisterMethod(@TJclFileEnumerator.Assign, 'Assign');
    RegisterMethod(@TJclFileEnumerator.FillList, 'FillList');
    RegisterMethod(@TJclFileEnumeratorForEach2_P, 'ForEach2');
    RegisterMethod(@TJclFileEnumeratorForEach3_P, 'ForEach3');
    RegisterMethod(@TJclFileEnumerator.StopTask, 'StopTask');
    RegisterMethod(@TJclFileEnumerator.StopAllTasks, 'StopAllTasks');
    RegisterPropertyHelper(@TJclFileEnumeratorFileMask_R,@TJclFileEnumeratorFileMask_W,'FileMask');
    RegisterPropertyHelper(@TJclFileEnumeratorIncludeSubDirectories_R,@TJclFileEnumeratorIncludeSubDirectories_W,'IncludeSubDirectories');
    RegisterPropertyHelper(@TJclFileEnumeratorIncludeHiddenSubDirectories_R,@TJclFileEnumeratorIncludeHiddenSubDirectories_W,'IncludeHiddenSubDirectories');
    RegisterPropertyHelper(@TJclFileEnumeratorSearchOption_R,@TJclFileEnumeratorSearchOption_W,'SearchOption');
    RegisterPropertyHelper(@TJclFileEnumeratorLastChangeAfterAsString_R,@TJclFileEnumeratorLastChangeAfterAsString_W,'LastChangeAfterAsString');
    RegisterPropertyHelper(@TJclFileEnumeratorLastChangeBeforeAsString_R,@TJclFileEnumeratorLastChangeBeforeAsString_W,'LastChangeBeforeAsString');
    RegisterPropertyHelper(@TJclFileEnumeratorCaseSensitiveSearch_R,@TJclFileEnumeratorCaseSensitiveSearch_W,'CaseSensitiveSearch');
    RegisterPropertyHelper(@TJclFileEnumeratorFileMasks_R,@TJclFileEnumeratorFileMasks_W,'FileMasks');
    RegisterPropertyHelper(@TJclFileEnumeratorRootDirectory_R,@TJclFileEnumeratorRootDirectory_W,'RootDirectory');
    RegisterPropertyHelper(@TJclFileEnumeratorSubDirectoryMask_R,@TJclFileEnumeratorSubDirectoryMask_W,'SubDirectoryMask');
    RegisterPropertyHelper(@TJclFileEnumeratorAttributeMask_R,@TJclFileEnumeratorAttributeMask_W,'AttributeMask');
    RegisterPropertyHelper(@TJclFileEnumeratorFileSizeMin_R,@TJclFileEnumeratorFileSizeMin_W,'FileSizeMin');
    RegisterPropertyHelper(@TJclFileEnumeratorFileSizeMax_R,@TJclFileEnumeratorFileSizeMax_W,'FileSizeMax');
    RegisterPropertyHelper(@TJclFileEnumeratorLastChangeAfter_R,@TJclFileEnumeratorLastChangeAfter_W,'LastChangeAfter');
    RegisterPropertyHelper(@TJclFileEnumeratorLastChangeBefore_R,@TJclFileEnumeratorLastChangeBefore_W,'LastChangeBefore');
    RegisterPropertyHelper(@TJclFileEnumeratorOptions_R,@TJclFileEnumeratorOptions_W,'Options');
    RegisterPropertyHelper(@TJclFileEnumeratorRunningTasks_R,nil,'RunningTasks');
    RegisterPropertyHelper(@TJclFileEnumeratorSynchronizationMode_R,@TJclFileEnumeratorSynchronizationMode_W,'SynchronizationMode');
    RegisterPropertyHelper(@TJclFileEnumeratorOnEnterDirectory_R,@TJclFileEnumeratorOnEnterDirectory_W,'OnEnterDirectory');
    RegisterPropertyHelper(@TJclFileEnumeratorOnTerminateTask_R,@TJclFileEnumeratorOnTerminateTask_W,'OnTerminateTask');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJclFileAttributeMask(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJclFileAttributeMask) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJclCustomFileAttrMask(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJclCustomFileAttrMask) do
  begin
    RegisterConstructor(@TJclCustomFileAttrMask.Create, 'Create');
    RegisterMethod(@TJclCustomFileAttrMask.Assign, 'Assign');
    RegisterMethod(@TJclCustomFileAttrMask.Clear, 'Clear');
    RegisterMethod(@TJclCustomFileAttrMaskMatch_P, 'Match');
    RegisterMethod(@TJclCustomFileAttrMaskMatch1_P, 'Match1');
    RegisterPropertyHelper(@TJclCustomFileAttrMaskRequired_R,@TJclCustomFileAttrMaskRequired_W,'Required');
    RegisterPropertyHelper(@TJclCustomFileAttrMaskRejected_R,@TJclCustomFileAttrMaskRejected_W,'Rejected');
    RegisterPropertyHelper(@TJclCustomFileAttrMaskAttribute_R,@TJclCustomFileAttrMaskAttribute_W,'Attribute');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_JclFileUtils_max_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@stat64, 'stat64', CdCdecl);
 S.RegisterDelphiFunction(@fstat64, 'fstat64', CdCdecl);
 S.RegisterDelphiFunction(@lstat64, 'lstat64', CdCdecl);
 S.RegisterDelphiFunction(@PathAddSeparator, 'PathAddSeparator', cdRegister);
 S.RegisterDelphiFunction(@PathAddExtension, 'PathAddExtension', cdRegister);
 S.RegisterDelphiFunction(@PathAppend, 'PathAppend', cdRegister);
 S.RegisterDelphiFunction(@PathBuildRoot, 'PathBuildRoot', cdRegister);
 S.RegisterDelphiFunction(@PathCanonicalize, 'PathCanonicalize', cdRegister);
 S.RegisterDelphiFunction(@PathCommonPrefix, 'PathCommonPrefix', cdRegister);
 S.RegisterDelphiFunction(@PathCompactPath, 'PathCompactPath', cdRegister);
 S.RegisterDelphiFunction(@PathExtractElements, 'PathExtractElements', cdRegister);
 S.RegisterDelphiFunction(@PathExtractFileDirFixed, 'PathExtractFileDirFixed', cdRegister);
 S.RegisterDelphiFunction(@PathExtractFileNameNoExt, 'PathExtractFileNameNoExt', cdRegister);
 S.RegisterDelphiFunction(@PathExtractPathDepth, 'PathExtractPathDepth', cdRegister);
 S.RegisterDelphiFunction(@PathGetDepth, 'PathGetDepth', cdRegister);
 S.RegisterDelphiFunction(@PathGetLongName, 'PathGetLongName', cdRegister);
 S.RegisterDelphiFunction(@PathGetShortName, 'PathGetShortName', cdRegister);
 S.RegisterDelphiFunction(@PathGetLongName, 'PathGetLongName', cdRegister);
 S.RegisterDelphiFunction(@PathGetShortName, 'PathGetShortName', cdRegister);
 S.RegisterDelphiFunction(@PathGetRelativePath, 'PathGetRelativePath', cdRegister);
 S.RegisterDelphiFunction(@PathGetTempPath, 'PathGetTempPath', cdRegister);
 S.RegisterDelphiFunction(@PathIsAbsolute, 'PathIsAbsolute', cdRegister);
 S.RegisterDelphiFunction(@PathIsChild, 'PathIsChild', cdRegister);
 S.RegisterDelphiFunction(@PathIsDiskDevice, 'PathIsDiskDevice', cdRegister);
 S.RegisterDelphiFunction(@PathIsUNC, 'PathIsUNC', cdRegister);
 S.RegisterDelphiFunction(@PathRemoveSeparator, 'PathRemoveSeparator', cdRegister);
 S.RegisterDelphiFunction(@PathRemoveExtension, 'PathRemoveExtension', cdRegister);
 S.RegisterDelphiFunction(@PathGetPhysicalPath, 'PathGetPhysicalPath', cdRegister);
 S.RegisterDelphiFunction(@PathGetLocalizedPath, 'PathGetLocalizedPath', cdRegister);
 S.RegisterDelphiFunction(@BuildFileList, 'BuildFileList', cdRegister);
 S.RegisterDelphiFunction(@AdvBuildFileList, 'AdvBuildFileList', cdRegister);
 S.RegisterDelphiFunction(@VerifyFileAttributeMask, 'VerifyFileAttributeMask', cdRegister);
 S.RegisterDelphiFunction(@IsFileAttributeMatch, 'IsFileAttributeMatch', cdRegister);
 S.RegisterDelphiFunction(@FileAttributesStr, 'FileAttributesStr', cdRegister);
 S.RegisterDelphiFunction(@IsFileNameMatch, 'IsFileNameMatch', cdRegister);
 S.RegisterDelphiFunction(@EnumFiles, 'EnumFiles', cdRegister);
 S.RegisterDelphiFunction(@EnumDirectories, 'EnumDirectories', cdRegister);
 S.RegisterDelphiFunction(@CreateEmptyFile, 'CreateEmptyFile', cdRegister);
 S.RegisterDelphiFunction(@CloseVolume, 'CloseVolume', cdRegister);
 S.RegisterDelphiFunction(@DeleteDirectory, 'DeleteDirectory', cdRegister);
 S.RegisterDelphiFunction(@CopyDirectory, 'CopyDirectory', cdRegister);
 S.RegisterDelphiFunction(@MoveDirectory, 'MoveDirectory', cdRegister);
 S.RegisterDelphiFunction(@DelTree, 'DelTree', cdRegister);
 S.RegisterDelphiFunction(@DelTreeEx, 'DelTreeEx', cdRegister);
 S.RegisterDelphiFunction(@DiskInDrive, 'DiskInDrive', cdRegister);
 S.RegisterDelphiFunction(@DirectoryExists, 'DirectoryExists', cdRegister);
 S.RegisterDelphiFunction(@FileCreateTemp, 'FileCreateTemp', cdRegister);
 S.RegisterDelphiFunction(@FileBackup, 'FileBackup', cdRegister);
 S.RegisterDelphiFunction(@FileCopy, 'FileCopy', cdRegister);
 S.RegisterDelphiFunction(@FileDelete, 'FileDelete', cdRegister);
 S.RegisterDelphiFunction(@FileExists, 'FileExists', cdRegister);
 S.RegisterDelphiFunction(@FileMove, 'FileMove', cdRegister);
 S.RegisterDelphiFunction(@FileRestore, 'FileRestore', cdRegister);
 S.RegisterDelphiFunction(@GetBackupFileName, 'GetBackupFileName', cdRegister);
 S.RegisterDelphiFunction(@IsBackupFileName, 'IsBackupFileName', cdRegister);
 S.RegisterDelphiFunction(@FileGetDisplayName, 'FileGetDisplayName', cdRegister);
 S.RegisterDelphiFunction(@FileGetGroupName, 'FileGetGroupName', cdRegister);
 S.RegisterDelphiFunction(@FileGetOwnerName, 'FileGetOwnerName', cdRegister);
 S.RegisterDelphiFunction(@FileGetSize, 'FileGetSize', cdRegister);
 S.RegisterDelphiFunction(@FileGetTempName, 'FileGetTempName', cdRegister);
 S.RegisterDelphiFunction(@FileGetTypeName, 'FileGetTypeName', cdRegister);
 S.RegisterDelphiFunction(@FindUnusedFileName, 'FindUnusedFileName', cdRegister);
 S.RegisterDelphiFunction(@ForceDirectories, 'ForceDirectories', cdRegister);
 S.RegisterDelphiFunction(@GetDirectorySize, 'GetDirectorySize', cdRegister);
 S.RegisterDelphiFunction(@GetDriveTypeStr, 'GetDriveTypeStr', cdRegister);
 S.RegisterDelphiFunction(@GetFileAgeCoherence, 'GetFileAgeCoherence', cdRegister);
 S.RegisterDelphiFunction(@GetFileAttributeList, 'GetFileAttributeList', cdRegister);
 S.RegisterDelphiFunction(@GetFileAttributeListEx, 'GetFileAttributeListEx', cdRegister);
 S.RegisterDelphiFunction(@GetFileInformation, 'GetFileInformation', cdRegister);
 S.RegisterDelphiFunction(@GetFileInformation1, 'GetFileInformation1', cdRegister);
 S.RegisterDelphiFunction(@GetFileStatus, 'GetFileStatus', cdRegister);
 S.RegisterDelphiFunction(@GetFileLastWrite, 'GetFileLastWrite', cdRegister);
 S.RegisterDelphiFunction(@GetFileLastWrite1, 'GetFileLastWrite1', cdRegister);
 S.RegisterDelphiFunction(@GetFileLastAccess, 'GetFileLastAccess', cdRegister);
 S.RegisterDelphiFunction(@GetFileLastAccess1, 'GetFileLastAccess1', cdRegister);
 S.RegisterDelphiFunction(@GetFileCreation, 'GetFileCreation', cdRegister);
 S.RegisterDelphiFunction(@GetFileCreation1, 'GetFileCreation1', cdRegister);
 S.RegisterDelphiFunction(@GetFileLastWrite, 'GetFileLastWrite', cdRegister);
 S.RegisterDelphiFunction(@GetFileLastWrite1, 'GetFileLastWrite1', cdRegister);
 S.RegisterDelphiFunction(@GetFileLastWrite2, 'GetFileLastWrite2', cdRegister);
 S.RegisterDelphiFunction(@GetFileLastAccess, 'GetFileLastAccess', cdRegister);
 S.RegisterDelphiFunction(@GetFileLastAccess1, 'GetFileLastAccess1', cdRegister);
 S.RegisterDelphiFunction(@GetFileLastAccess2, 'GetFileLastAccess2', cdRegister);
 S.RegisterDelphiFunction(@GetFileLastAttrChange, 'GetFileLastAttrChange', cdRegister);
 S.RegisterDelphiFunction(@GetFileLastAttrChange1, 'GetFileLastAttrChange1', cdRegister);
 S.RegisterDelphiFunction(@GetFileLastAttrChange2, 'GetFileLastAttrChange2', cdRegister);
 S.RegisterDelphiFunction(@GetModulePath, 'GetModulePath', cdRegister);
 S.RegisterDelphiFunction(@GetSizeOfFile, 'GetSizeOfFile', cdRegister);
 S.RegisterDelphiFunction(@GetSizeOfFile1, 'GetSizeOfFile1', cdRegister);
 S.RegisterDelphiFunction(@GetSizeOfFile2, 'GetSizeOfFile2', cdRegister);
 S.RegisterDelphiFunction(@GetStandardFileInfo, 'GetStandardFileInfo', cdRegister);
 S.RegisterDelphiFunction(@IsDirectory, 'IsDirectory', cdRegister);
 S.RegisterDelphiFunction(@IsRootDirectory, 'IsRootDirectory', cdRegister);
 S.RegisterDelphiFunction(@LockVolume, 'LockVolume', cdRegister);
 S.RegisterDelphiFunction(@OpenVolume, 'OpenVolume', cdRegister);
 S.RegisterDelphiFunction(@SetDirLastWrite, 'SetDirLastWrite', cdRegister);
 S.RegisterDelphiFunction(@SetDirLastAccess, 'SetDirLastAccess', cdRegister);
 S.RegisterDelphiFunction(@SetDirCreation, 'SetDirCreation', cdRegister);
 S.RegisterDelphiFunction(@SetFileLastWrite, 'SetFileLastWrite', cdRegister);
 S.RegisterDelphiFunction(@SetFileLastAccess, 'SetFileLastAccess', cdRegister);
 S.RegisterDelphiFunction(@SetFileCreation, 'SetFileCreation', cdRegister);
 S.RegisterDelphiFunction(@ShredFile, 'ShredFile', cdRegister);
 S.RegisterDelphiFunction(@UnlockVolume, 'UnlockVolume', cdRegister);
 S.RegisterDelphiFunction(@CreateSymbolicLink, 'CreateSymbolicLink', cdRegister);
 S.RegisterDelphiFunction(@SymbolicLinkTarget, 'SymbolicLinkTarget', cdRegister);
  RIRegister_TJclCustomFileAttrMask(CL);
  RIRegister_TJclFileAttributeMask(CL);
  RIRegister_TJclFileEnumerator(CL);
 S.RegisterDelphiFunction(@FileSearch, 'FileSearch', cdRegister);
  with CL.Add(EJclFileVersionInfoError) do
  RIRegister_TJclFileVersionInfo(CL);
 S.RegisterDelphiFunction(@OSIdentToString, 'OSIdentToString', cdRegister);
 S.RegisterDelphiFunction(@OSFileTypeToString, 'OSFileTypeToString', cdRegister);
 S.RegisterDelphiFunction(@VersionResourceAvailable, 'VersionResourceAvailable', cdRegister);
 S.RegisterDelphiFunction(@FormatVersionString, 'FormatVersionString', cdRegister);
 S.RegisterDelphiFunction(@FormatVersionString1, 'FormatVersionString1', cdRegister);
 S.RegisterDelphiFunction(@FormatVersionString2, 'FormatVersionString2', cdRegister);
 S.RegisterDelphiFunction(@VersionExtractFileInfo, 'VersionExtractFileInfo', cdRegister);
 S.RegisterDelphiFunction(@VersionExtractProductInfo, 'VersionExtractProductInfo', cdRegister);
 S.RegisterDelphiFunction(@VersionFixedFileInfo, 'VersionFixedFileInfo', cdRegister);
 S.RegisterDelphiFunction(@VersionFixedFileInfoString, 'VersionFixedFileInfoString', cdRegister);
  RIRegister_TJclTempFileStream(CL);
  with CL.Add(TJclCustomFileMapping) do
  RIRegister_TJclFileMappingView(CL);
  RIRegister_TJclCustomFileMapping(CL);
  RIRegister_TJclFileMapping(CL);
  RIRegister_TJclSwapFileMapping(CL);
  RIRegister_TJclFileMappingStream(CL);
  RIRegister_TJclMappedTextReader(CL);
  RIRegister_TJclFileMaskComparator(CL);
  with CL.Add(EJclPathError) do
  with CL.Add(EJclFileUtilsError) do
  with CL.Add(EJclTempFileStreamError) do
  with CL.Add(EJclTempFileStreamError) do
  with CL.Add(EJclFileMappingError) do
  with CL.Add(EJclFileMappingViewError) do
 S.RegisterDelphiFunction(@PathGetLongName2, 'PathGetLongName2', cdRegister);
 S.RegisterDelphiFunction(@Win32DeleteFile, 'Win32DeleteFile', cdRegister);
 S.RegisterDelphiFunction(@Win32MoveFileReplaceExisting, 'Win32MoveFileReplaceExisting', cdRegister);
 S.RegisterDelphiFunction(@Win32BackupFile, 'Win32BackupFile', cdRegister);
 S.RegisterDelphiFunction(@Win32RestoreFile, 'Win32RestoreFile', cdRegister);
 S.RegisterDelphiFunction(@SamePath, 'SamePath', cdRegister);
 S.RegisterDelphiFunction(@PathListAddItems, 'PathListAddItems', cdRegister);
 S.RegisterDelphiFunction(@PathListIncludeItems, 'PathListIncludeItems', cdRegister);
 S.RegisterDelphiFunction(@PathListDelItems, 'PathListDelItems', cdRegister);
 S.RegisterDelphiFunction(@PathListDelItem, 'PathListDelItem', cdRegister);
 S.RegisterDelphiFunction(@PathListItemCount, 'PathListItemCount', cdRegister);
 S.RegisterDelphiFunction(@PathListGetItem, 'PathListGetItem', cdRegister);
 S.RegisterDelphiFunction(@PathListSetItem, 'PathListSetItem', cdRegister);
 S.RegisterDelphiFunction(@PathListItemIndex, 'PathListItemIndex', cdRegister);
 S.RegisterDelphiFunction(@ParamName, 'ParamName', cdRegister);
 S.RegisterDelphiFunction(@ParamValue, 'ParamValue', cdRegister);
 S.RegisterDelphiFunction(@ParamValue1, 'ParamValue1', cdRegister);
 S.RegisterDelphiFunction(@ParamPos, 'ParamPos', cdRegister);
end;

 
 
{ TPSImport_JclFileUtils_max }
(*----------------------------------------------------------------------------*)
procedure TPSImport_JclFileUtils_max.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_JclFileUtils_max(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_JclFileUtils_max.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_JclFileUtils_max_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
