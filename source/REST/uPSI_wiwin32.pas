unit uPSI_wiwin32;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_wiwin32 = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_wiwin32(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_wiwin32_Routines(S: TPSExec);

procedure Register;

implementation


uses
   windows
  ,DSiWin32
  ,registry
  ,unitImpersonator
  ,wiglob
  ,jwawinbase
  ,JwaWinnt
  ,JwaWindows
  ,LCLIntf
  ,shellapi
  ,Shlobj
  ,wiwin32
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_wiwin32]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_wiwin32(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('SID_REVISION','LongInt').SetInt( 1);
 CL.AddConstantN('FILENAME_ADVAPI32','String').SetString( 'ADVAPI32.DLL');
 CL.AddConstantN('PROC_CONVERTSIDTOSTRINGSIDA','String').SetString( 'ConvertSidToStringSidA');
 CL.AddDelphiFunction('Function GetDomainUserSidS( const domainName : String; const userName : String; var foundDomain : String) : String');
 CL.AddDelphiFunction('Function GetLocalUserSidStr( const UserName : string) : string');
 CL.AddDelphiFunction('Function getPid4user( const domain : string; const user : string; var pid : dword) : boolean');
 CL.AddDelphiFunction('Function Impersonate2User( const domain : string; const user : string) : boolean');
 CL.AddDelphiFunction('Function GetProcessUserBypid( pid : DWORD; var UserName, Domain : AnsiString) : Boolean');
 CL.AddDelphiFunction('Function KillProcessbyname( const exename : string; var found : integer) : integer');
 CL.AddDelphiFunction('Function getWinProcessList : TStringList');
 CL.AddDelphiFunction('Procedure myimpersontest');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure RIRegister_wiwin32_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@GetDomainUserSidS, 'GetDomainUserSidS', cdRegister);
 S.RegisterDelphiFunction(@GetLocalUserSidStr, 'GetLocalUserSidStr', cdRegister);
 S.RegisterDelphiFunction(@getPid4user, 'getPid4user', cdRegister);
 S.RegisterDelphiFunction(@Impersonate2User, 'Impersonate2User', cdRegister);
 S.RegisterDelphiFunction(@GetProcessUserBypid, 'GetProcessUserBypid', cdRegister);
 S.RegisterDelphiFunction(@KillProcessbyname, 'KillProcessbyname', cdRegister);
 S.RegisterDelphiFunction(@getWinProcessList, 'getWinProcessList', cdRegister);
 S.RegisterDelphiFunction(@myimpersontest, 'myimpersontest', cdRegister);
end;

 
 
{ TPSImport_wiwin32 }
(*----------------------------------------------------------------------------*)
procedure TPSImport_wiwin32.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_wiwin32(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_wiwin32.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_wiwin32(ri);
  RIRegister_wiwin32_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
