unit uPSI_PsAPI;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_PsAPI = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_PsAPI(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_PsAPI_Routines(S: TPSExec);

procedure Register;

implementation


uses
   Windows
  ,PsAPI
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_PsAPI]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_PsAPI(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('PPointer', '^Pointer // will not work');
  CL.AddTypeS('_MODULEINFO', 'record lpBaseOfDll : Pointer; SizeOfImage : DWORD'
   +'; EntryPoint : Pointer; end');
  CL.AddTypeS('MODULEINFO', '_MODULEINFO');
  CL.AddTypeS('LPMODULEINFO', '^_MODULEINFO // will not work');
  CL.AddTypeS('TModuleInfo', '_MODULEINFO');
  CL.AddTypeS('PModuleInfo', 'LPMODULEINFO');
  CL.AddTypeS('_PSAPI_WS_WATCH_INFORMATION', 'record FaultingPc : Pointer; Faul'
   +'tingVa : Pointer; end');
  CL.AddTypeS('PSAPI_WS_WATCH_INFORMATION', '_PSAPI_WS_WATCH_INFORMATION');
  CL.AddTypeS('PPSAPI_WS_WATCH_INFORMATION', '^_PSAPI_WS_WATCH_INFORMATION // w'
   +'ill not work');
  CL.AddTypeS('TPSAPIWsWatchInformation', '_PSAPI_WS_WATCH_INFORMATION');
  CL.AddTypeS('PPSAPIWsWatchInformation', 'PPSAPI_WS_WATCH_INFORMATION');
  CL.AddTypeS('_PROCESS_MEMORY_COUNTERS', 'record cb : DWORD; PageFaultCount : '
   +'DWORD; PeakWorkingSetSize : DWORD; WorkingSetSize : DWORD; QuotaPeakPagedP'
   +'oolUsage : DWORD; QuotaPagedPoolUsage : DWORD; QuotaPeakNonPagedPoolUsage '
   +': DWORD; QuotaNonPagedPoolUsage : DWORD; PagefileUsage : DWORD; PeakPagefi'
   +'leUsage : DWORD; end');
  CL.AddTypeS('PROCESS_MEMORY_COUNTERS', '_PROCESS_MEMORY_COUNTERS');
  CL.AddTypeS('PPROCESS_MEMORY_COUNTERS', '^_PROCESS_MEMORY_COUNTERS // will no'
   +'t work');
  CL.AddTypeS('TProcessMemoryCounters', '_PROCESS_MEMORY_COUNTERS');
  CL.AddTypeS('PProcessMemoryCounters', '^_PROCESS_MEMORY_COUNTERS // will not '
   +'work');
 CL.AddDelphiFunction('Function EnumProcesses( lpidProcess : LPDWORD; cb : DWORD; var cbNeeded : DWORD) : BOOL');
 CL.AddDelphiFunction('Function EnumProcessModules( hProcess : THandle; lphModule : LPDWORD; cb : DWORD; var lpcbNeeded : DWORD) : BOOL');
 CL.AddDelphiFunction('Function GetModuleBaseName( hProcess : THandle; hModule : HMODULE; lpBaseName : PChar; nSize : DWORD) : DWORD');
 CL.AddDelphiFunction('Function GetModuleBaseNameA( hProcess : THandle; hModule : HMODULE; lpBaseName : PAnsiChar; nSize : DWORD) : DWORD');
 CL.AddDelphiFunction('Function GetModuleBaseNameW( hProcess : THandle; hModule : HMODULE; lpBaseName : PWideChar; nSize : DWORD) : DWORD');
 CL.AddDelphiFunction('Function GetModuleFileNameEx( hProcess : THandle; hModule : HMODULE; lpFilename : PChar; nSize : DWORD) : DWORD');
 CL.AddDelphiFunction('Function GetModuleFileNameExA( hProcess : THandle; hModule : HMODULE; lpFilename : PAnsiChar; nSize : DWORD) : DWORD');
 CL.AddDelphiFunction('Function GetModuleFileNameExW( hProcess : THandle; hModule : HMODULE; lpFilename : PWideChar; nSize : DWORD) : DWORD');
 CL.AddDelphiFunction('Function GetModuleInformation( hProcess : THandle; hModule : HMODULE; lpmodinfo : LPMODULEINFO; cb : DWORD) : BOOL');
 CL.AddDelphiFunction('Function EmptyWorkingSet( hProcess : THandle) : BOOL');
 CL.AddDelphiFunction('Function QueryWorkingSet( hProcess : THandle; pv : Pointer; cb : DWORD) : BOOL');
 CL.AddDelphiFunction('Function InitializeProcessForWsWatch( hProcess : THandle) : BOOL');
 CL.AddDelphiFunction('Function GetMappedFileName( hProcess : THandle; lpv : Pointer; lpFilename : PChar; nSize : DWORD) : DWORD');
 CL.AddDelphiFunction('Function GetMappedFileNameA( hProcess : THandle; lpv : Pointer; lpFilename : PAnsiChar; nSize : DWORD) : DWORD');
 CL.AddDelphiFunction('Function GetMappedFileNameW( hProcess : THandle; lpv : Pointer; lpFilename : PWideChar; nSize : DWORD) : DWORD');
 CL.AddDelphiFunction('Function GetDeviceDriverBaseName( ImageBase : Pointer; lpBaseName : PChar; nSize : DWORD) : DWORD');
 CL.AddDelphiFunction('Function GetDeviceDriverBaseNameA( ImageBase : Pointer; lpBaseName : PAnsiChar; nSize : DWORD) : DWORD');
 CL.AddDelphiFunction('Function GetDeviceDriverBaseNameW( ImageBase : Pointer; lpBaseName : PWideChar; nSize : DWORD) : DWORD');
 CL.AddDelphiFunction('Function GetDeviceDriverFileName( ImageBase : Pointer; lpFileName : PChar; nSize : DWORD) : DWORD');
 CL.AddDelphiFunction('Function GetDeviceDriverFileNameA( ImageBase : Pointer; lpFileName : PAnsiChar; nSize : DWORD) : DWORD');
 CL.AddDelphiFunction('Function GetDeviceDriverFileNameW( ImageBase : Pointer; lpFileName : PWideChar; nSize : DWORD) : DWORD');
 CL.AddDelphiFunction('Function EnumDeviceDrivers( lpImageBase : PPointer; cb : DWORD; var lpcbNeeded : DWORD) : BOOL');
 CL.AddDelphiFunction('Function GetProcessMemoryInfo( Process : THandle; ppsmemCounters : PPROCESS_MEMORY_COUNTERS; cb : DWORD) : BOOL');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure RIRegister_PsAPI_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@EnumProcesses, 'EnumProcesses', cdRegister);
 S.RegisterDelphiFunction(@EnumProcessModules, 'EnumProcessModules', cdRegister);
 S.RegisterDelphiFunction(@GetModuleBaseName, 'GetModuleBaseName', cdRegister);
 S.RegisterDelphiFunction(@GetModuleBaseNameA, 'GetModuleBaseNameA', cdRegister);
 S.RegisterDelphiFunction(@GetModuleBaseNameW, 'GetModuleBaseNameW', cdRegister);
 S.RegisterDelphiFunction(@GetModuleFileNameEx, 'GetModuleFileNameEx', cdRegister);
 S.RegisterDelphiFunction(@GetModuleFileNameExA, 'GetModuleFileNameExA', cdRegister);
 S.RegisterDelphiFunction(@GetModuleFileNameExW, 'GetModuleFileNameExW', cdRegister);
 S.RegisterDelphiFunction(@GetModuleInformation, 'GetModuleInformation', cdRegister);
 S.RegisterDelphiFunction(@EmptyWorkingSet, 'EmptyWorkingSet', cdRegister);
 S.RegisterDelphiFunction(@QueryWorkingSet, 'QueryWorkingSet', cdRegister);
 S.RegisterDelphiFunction(@InitializeProcessForWsWatch, 'InitializeProcessForWsWatch', cdRegister);
 S.RegisterDelphiFunction(@GetMappedFileName, 'GetMappedFileName', cdRegister);
 S.RegisterDelphiFunction(@GetMappedFileNameA, 'GetMappedFileNameA', cdRegister);
 S.RegisterDelphiFunction(@GetMappedFileNameW, 'GetMappedFileNameW', cdRegister);
 S.RegisterDelphiFunction(@GetDeviceDriverBaseName, 'GetDeviceDriverBaseName', cdRegister);
 S.RegisterDelphiFunction(@GetDeviceDriverBaseNameA, 'GetDeviceDriverBaseNameA', cdRegister);
 S.RegisterDelphiFunction(@GetDeviceDriverBaseNameW, 'GetDeviceDriverBaseNameW', cdRegister);
 S.RegisterDelphiFunction(@GetDeviceDriverFileName, 'GetDeviceDriverFileName', cdRegister);
 S.RegisterDelphiFunction(@GetDeviceDriverFileNameA, 'GetDeviceDriverFileNameA', cdRegister);
 S.RegisterDelphiFunction(@GetDeviceDriverFileNameW, 'GetDeviceDriverFileNameW', cdRegister);
 S.RegisterDelphiFunction(@EnumDeviceDrivers, 'EnumDeviceDrivers', cdRegister);
 S.RegisterDelphiFunction(@GetProcessMemoryInfo, 'GetProcessMemoryInfo', cdRegister);
end;

 
 
{ TPSImport_PsAPI }
(*----------------------------------------------------------------------------*)
procedure TPSImport_PsAPI.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_PsAPI(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_PsAPI.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_PsAPI(ri);
  RIRegister_PsAPI_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
