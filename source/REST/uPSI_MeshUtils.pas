unit uPSI_MeshUtils;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_MeshUtils = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_MeshUtils(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_MeshUtils_Routines(S: TPSExec);

procedure Register;

implementation


uses
   PersistentClasses
  ,VectorLists
  ,VectorGeometry
  ,MeshUtils
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_MeshUtils]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_MeshUtils(CL: TPSPascalCompiler);
begin
 CL.AddDelphiFunction('Procedure ConvertStripToList( const strip : TAffineVectorList; list : TAffineVectorList);');
 CL.AddDelphiFunction('Procedure ConvertStripToList1( const strip : TIntegerList; list : TIntegerList);');
 CL.AddDelphiFunction('Procedure ConvertStripToList2( const strip : TAffineVectorList; const indices : TIntegerList; list : TAffineVectorList);');
 CL.AddDelphiFunction('Procedure ConvertIndexedListToList( const data : TAffineVectorList; const indices : TIntegerList; list : TAffineVectorList)');
 CL.AddDelphiFunction('Function BuildVectorCountOptimizedIndices( const vertices : TAffineVectorList; const normals : TAffineVectorList; const texCoords : TAffineVectorList) : TIntegerList');
 CL.AddDelphiFunction('Procedure RemapReferences( reference : TAffineVectorList; const indices : TIntegerList);');
 CL.AddDelphiFunction('Procedure RemapReferences1( reference : TIntegerList; const indices : TIntegerList);');
 CL.AddDelphiFunction('Procedure RemapAndCleanupReferences( reference : TAffineVectorList; indices : TIntegerList)');
 CL.AddDelphiFunction('Function RemapIndicesToIndicesMap( remapIndices : TIntegerList) : TIntegerList');
 CL.AddDelphiFunction('Procedure RemapTrianglesIndices( indices, indicesMap : TIntegerList)');
 CL.AddDelphiFunction('Procedure RemapIndices( indices, indicesMap : TIntegerList)');
 CL.AddDelphiFunction('Procedure UnifyTrianglesWinding( indices : TIntegerList)');
 CL.AddDelphiFunction('Procedure InvertTrianglesWinding( indices : TIntegerList)');
 CL.AddDelphiFunction('Function BuildNormals( reference : TAffineVectorList; indices : TIntegerList) : TAffineVectorList');
 CL.AddDelphiFunction('Function BuildNonOrientedEdgesList( triangleIndices : TIntegerList; triangleEdges : TIntegerList; edgesTriangles : TIntegerList) : TIntegerList');
 CL.AddDelphiFunction('Procedure WeldVertices( vertices : TAffineVectorList; indicesMap : TIntegerList; weldRadius : Single)');
 CL.AddDelphiFunction('Function StripifyMesh( indices : TIntegerList; maxVertexIndex : Integer; agglomerateLoneTriangles : Boolean) : TPersistentObjectList');
 CL.AddDelphiFunction('Procedure IncreaseCoherency( indices : TIntegerList; cacheSize : Integer)');
 CL.AddDelphiFunction('Procedure SubdivideTriangles( smoothFactor : Single; vertices : TAffineVectorList; triangleIndices : TIntegerList; normals : TAffineVectorList; onSubdivideEdge : TSubdivideEdgeEvent)');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
Procedure RemapReferences1_P( reference : TIntegerList; const indices : TIntegerList);
Begin MeshUtils.RemapReferences(reference, indices); END;

(*----------------------------------------------------------------------------*)
Procedure RemapReferences_P( reference : TAffineVectorList; const indices : TIntegerList);
Begin MeshUtils.RemapReferences(reference, indices); END;

(*----------------------------------------------------------------------------*)
Procedure ConvertStripToList2_P( const strip : TAffineVectorList; const indices : TIntegerList; list : TAffineVectorList);
Begin MeshUtils.ConvertStripToList(strip, indices, list); END;

(*----------------------------------------------------------------------------*)
Procedure ConvertStripToList1_P( const strip : TIntegerList; list : TIntegerList);
Begin MeshUtils.ConvertStripToList(strip, list); END;

(*----------------------------------------------------------------------------*)
Procedure ConvertStripToList_P( const strip : TAffineVectorList; list : TAffineVectorList);
Begin MeshUtils.ConvertStripToList(strip, list); END;

(*----------------------------------------------------------------------------*)
procedure RIRegister_MeshUtils_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@ConvertStripToList, 'ConvertStripToList', cdRegister);
 S.RegisterDelphiFunction(@ConvertStripToList1, 'ConvertStripToList1', cdRegister);
 S.RegisterDelphiFunction(@ConvertStripToList2, 'ConvertStripToList2', cdRegister);
 S.RegisterDelphiFunction(@ConvertIndexedListToList, 'ConvertIndexedListToList', cdRegister);
 S.RegisterDelphiFunction(@BuildVectorCountOptimizedIndices, 'BuildVectorCountOptimizedIndices', cdRegister);
 S.RegisterDelphiFunction(@RemapReferences, 'RemapReferences', cdRegister);
 S.RegisterDelphiFunction(@RemapReferences1, 'RemapReferences1', cdRegister);
 S.RegisterDelphiFunction(@RemapAndCleanupReferences, 'RemapAndCleanupReferences', cdRegister);
 S.RegisterDelphiFunction(@RemapIndicesToIndicesMap, 'RemapIndicesToIndicesMap', cdRegister);
 S.RegisterDelphiFunction(@RemapTrianglesIndices, 'RemapTrianglesIndices', cdRegister);
 S.RegisterDelphiFunction(@RemapIndices, 'RemapIndices', cdRegister);
 S.RegisterDelphiFunction(@UnifyTrianglesWinding, 'UnifyTrianglesWinding', cdRegister);
 S.RegisterDelphiFunction(@InvertTrianglesWinding, 'InvertTrianglesWinding', cdRegister);
 S.RegisterDelphiFunction(@BuildNormals, 'BuildNormals', cdRegister);
 S.RegisterDelphiFunction(@BuildNonOrientedEdgesList, 'BuildNonOrientedEdgesList', cdRegister);
 S.RegisterDelphiFunction(@WeldVertices, 'WeldVertices', cdRegister);
 S.RegisterDelphiFunction(@StripifyMesh, 'StripifyMesh', cdRegister);
 S.RegisterDelphiFunction(@IncreaseCoherency, 'IncreaseCoherency', cdRegister);
 S.RegisterDelphiFunction(@SubdivideTriangles, 'SubdivideTriangles', cdRegister);
end;

 
 
{ TPSImport_MeshUtils }
(*----------------------------------------------------------------------------*)
procedure TPSImport_MeshUtils.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_MeshUtils(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_MeshUtils.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_MeshUtils(ri);
  RIRegister_MeshUtils_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
