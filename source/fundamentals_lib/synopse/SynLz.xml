<?xml version="1.0" encoding="utf-8"?>
<namespace name="SynLZ">
  <devnotes>
     SynLZ Compression routines
  </devnotes>
  <type name="RawByteString" type="AnsiString" />
  <function name="SynLZcompressdestlen" visibility="public">
    <devnotes>
       get maximum possible (worse) compressed size for out_p
    </devnotes>
    <parameters>
      <parameter name="in_len" type="Integer" />
      <retval type="Integer" />
    </parameters>
  </function>
  <function name="SynLZdecompressdestlen" visibility="public">
    <devnotes>
       get uncompressed size from lz-compressed buffer (to reserve memory, e.g.)
    </devnotes>
    <parameters>
      <parameter name="in_p" type="PAnsiChar" />
      <retval type="Integer" />
    </parameters>
  </function>
  <function name="SynLZcompress1asm" visibility="public">
    <devnotes>
       optimized asm version of the 1st compression method
    </devnotes>
    <parameters>
      <parameter name="src" type="PAnsiChar" />
      <parameter name="size" type="Integer" />
      <parameter name="dst" type="PAnsiChar" />
      <retval type="Integer" />
    </parameters>
  </function>
  <function name="SynLZcompress1pas" visibility="public">
    <devnotes>
       1st compression method uses hashing with a 32bits control word
    </devnotes>
    <parameters>
      <parameter name="src" type="PAnsiChar" />
      <parameter name="size" type="Integer" />
      <parameter name="dst" type="PAnsiChar" />
      <retval type="Integer" />
    </parameters>
  </function>
  <function name="SynLZdecompress1asm" visibility="public">
    <devnotes>
       optimized asm version of the 1st compression method
    </devnotes>
    <parameters>
      <parameter name="src" type="PAnsiChar" />
      <parameter name="size" type="Integer" />
      <parameter name="dst" type="PAnsiChar" />
      <retval type="Integer" />
    </parameters>
  </function>
  <function name="SynLZdecompress1pas" visibility="public">
    <devnotes>
       1st compression method uses hashing with a 32bits control word
    </devnotes>
    <parameters>
      <parameter name="src" type="PAnsiChar" />
      <parameter name="size" type="Integer" />
      <parameter name="dst" type="PAnsiChar" />
      <retval type="Integer" />
    </parameters>
  </function>
  <function name="SynLZdecompress1partial" visibility="public">
    <devnotes>
       1st compression method uses hashing with a 32bits control word
    </devnotes>
    <parameters>
      <parameter name="src" type="PAnsiChar" />
      <parameter name="size" type="Integer" />
      <parameter name="dst" type="PAnsiChar" />
      <parameter name="maxDst" type="Integer" />
      <retval type="Integer" />
    </parameters>
  </function>
  <function name="SynLZcompress2" visibility="public">
    <devnotes>
       2nd compression method optimizes pattern copy -&gt; a bit smaller, but slower
    </devnotes>
    <parameters>
      <parameter name="src" type="PAnsiChar" />
      <parameter name="size" type="Integer" />
      <parameter name="dst" type="PAnsiChar" />
      <retval type="Integer" />
    </parameters>
  </function>
  <function name="SynLZdecompress2" visibility="public">
    <devnotes>
       2nd compression method optimizes pattern copy -&gt; a bit smaller, but slower
    </devnotes>
    <parameters>
      <parameter name="src" type="PAnsiChar" />
      <parameter name="size" type="Integer" />
      <parameter name="dst" type="PAnsiChar" />
      <retval type="Integer" />
    </parameters>
  </function>
  <function name="CompressSynLZ" visibility="public">
    <devnotes>
       compress a data content using the SynLZ algorithm
    </devnotes>
    <parameters>
      <parameter name="Data" type="string" paramflags="var" />
      <parameter name="Compress" type="Boolean" />
      <retval type="string" />
    </parameters>
  </function>
</namespace>
