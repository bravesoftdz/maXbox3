<?xml version="1.0" encoding="utf-8"?>
<namespace name="SynPdf">
  <devnotes>
     PDF file generation
  </devnotes>
  <const name="MWT_IDENTITY" type="Integer">
    <value>
      $1
    </value>
  </const>
  <const name="MWT_LEFTMULTIPLY" type="Integer">
    <value>
      $2
    </value>
  </const>
  <const name="MWT_RIGHTMULTIPLY" type="Integer">
    <value>
      $3
    </value>
  </const>
  <const name="MWT_SET" type="Integer">
    <value>
      $4
    </value>
  </const>
  <const name="MAX_INT64" type="Int64">
    <value>
      $7FFFFFFFFFFFFFFF
    </value>
  </const>
  <pointer name="PSmallIntArray" type="TSmallIntArray" indircnt="1" />
  <array name="TSmallIntArray" low="0" high="255">
    <element type="Smallint" />
  </array>
  <pointer name="PPointArray" type="TPointArray" indircnt="1" />
  <array name="TPointArray" low="0" high="65535">
    <element type="TPoint" />
  </array>
  <pointer name="PSmallPointArray" type="TSmallPointArray" indircnt="1" />
  <array name="TSmallPointArray" low="0" high="65535">
    <element type="TSmallPoint" />
  </array>
  <struct name="TCmapHeader" packed="true">
    <devnotes>
       The 'cmap' table begins with an index containing the table version number
    </devnotes>
    <field name="version" type="Word" visibility="public">
      <devnotes>
         Version number (Set to zero)
      </devnotes>
    </field>
    <field name="numberSubtables" type="Word" visibility="public">
      <devnotes>
         Number of encoding subtables
      </devnotes>
    </field>
  </struct>
  <array name="TCmapSubTableArray" low="0" high="255">
    <devnotes>
       points to every 'cmap' encoding subtables
    </devnotes>
    <element type=":1">
      <devnotes>
         points to every 'cmap' encoding subtables
      </devnotes>
    </element>
  </array>
  <struct name="TCmapHHEA" packed="true">
    <devnotes>
       The 'hhea' table contains information needed to layout fonts whose
    </devnotes>
    <field name="version" type="Integer" visibility="public" />
    <field name="ascent" type="Word" visibility="public" />
    <field name="descent" type="Word" visibility="public" />
    <field name="lineGap" type="Word" visibility="public" />
    <field name="advanceWidthMax" type="Word" visibility="public" />
    <field name="minLeftSideBearing" type="Word" visibility="public" />
    <field name="minRightSideBearing" type="Word" visibility="public" />
    <field name="xMaxExtent" type="Word" visibility="public" />
    <field name="caretSlopeRise" type="Smallint" visibility="public" />
    <field name="caretSlopeRun" type="Smallint" visibility="public" />
    <field name="caretOffset" type="Smallint" visibility="public" />
    <field name="reserved" type="Int64" visibility="public" />
    <field name="metricDataFormat" type="Smallint" visibility="public" />
    <field name="numOfLongHorMetrics" type="Word" visibility="public" />
  </struct>
  <struct name="TCmapHEAD" packed="true">
    <devnotes>
       The 'head' table contains global information about the font
    </devnotes>
    <field name="version" type="Integer" visibility="public" />
    <field name="fontRevision" type="Integer" visibility="public" />
    <field name="checkSumAdjustment" type="Cardinal" visibility="public" />
    <field name="magicNumber" type="Cardinal" visibility="public" />
    <field name="flags" type="Word" visibility="public" />
    <field name="unitsPerEm" type="Word" visibility="public" />
    <field name="createdDate" type="Int64" visibility="public" />
    <field name="modifiedDate" type="Int64" visibility="public" />
    <field name="xMin" type="Smallint" visibility="public" />
    <field name="yMin" type="Smallint" visibility="public" />
    <field name="xMax" type="Smallint" visibility="public" />
    <field name="yMax" type="Smallint" visibility="public" />
    <field name="macStyle" type="Word" visibility="public" />
    <field name="lowestRec" type="Word" visibility="public" />
    <field name="fontDirection" type="Smallint" visibility="public" />
    <field name="indexToLocFormat" type="Smallint" visibility="public" />
    <field name="glyphDataFormat" type="Smallint" visibility="public" />
  </struct>
  <struct name="TCmapFmt4" packed="true">
    <devnotes>
       header for the 'cmap' Format 4 table
    </devnotes>
    <field name="format" type="Word" visibility="public" />
    <field name="length" type="Word" visibility="public" />
    <field name="language" type="Word" visibility="public" />
    <field name="segCountX2" type="Word" visibility="public" />
    <field name="searchRange" type="Word" visibility="public" />
    <field name="entrySelector" type="Word" visibility="public" />
    <field name="rangeShift" type="Word" visibility="public" />
  </struct>
  <type name="PDFString" type="AnsiString" />
  <type name="TPdfDate" type="AnsiString" />
  <class name="EPdfInvalidValue">
    <devnotes>
       PDF exception, raised when an invalid value is given to a constructor
    </devnotes>
    <ancestor name="Exception" namespace="SysUtils">
      <methodref name="Create" visibility="public">
      </methodref>
      <methodref name="CreateFmt" visibility="public">
      </methodref>
      <methodref name="CreateRes" visibility="public">
      </methodref>
      <methodref name="CreateRes" visibility="public">
      </methodref>
      <methodref name="CreateResFmt" visibility="public">
      </methodref>
      <methodref name="CreateResFmt" visibility="public">
      </methodref>
      <methodref name="CreateHelp" visibility="public">
      </methodref>
      <methodref name="CreateFmtHelp" visibility="public">
      </methodref>
      <methodref name="CreateResHelp" visibility="public">
      </methodref>
      <methodref name="CreateResHelp" visibility="public">
      </methodref>
      <methodref name="CreateResFmtHelp" visibility="public">
      </methodref>
      <methodref name="CreateResFmtHelp" visibility="public">
      </methodref>
      <propertyref name="HelpContext" visibility="public">
      </propertyref>
      <propertyref name="Message" visibility="public">
      </propertyref>
      <ancestor name="TObject" namespace="System">
        <methodref name="Create" visibility="public">
        </methodref>
        <methodref name="Free" visibility="public">
        </methodref>
        <methodref name="InitInstance" visibility="public">
        </methodref>
        <methodref name="CleanupInstance" visibility="public">
        </methodref>
        <methodref name="ClassType" visibility="public">
        </methodref>
        <methodref name="ClassName" visibility="public">
        </methodref>
        <methodref name="ClassNameIs" visibility="public">
        </methodref>
        <methodref name="ClassParent" visibility="public">
        </methodref>
        <methodref name="ClassInfo" visibility="public">
        </methodref>
        <methodref name="InstanceSize" visibility="public">
        </methodref>
        <methodref name="InheritsFrom" visibility="public">
        </methodref>
        <methodref name="MethodAddress" visibility="public">
        </methodref>
        <methodref name="MethodName" visibility="public">
        </methodref>
        <methodref name="FieldAddress" visibility="public">
        </methodref>
        <methodref name="GetInterface" visibility="public">
        </methodref>
        <methodref name="GetInterfaceEntry" visibility="public">
        </methodref>
        <methodref name="GetInterfaceTable" visibility="public">
        </methodref>
        <methodref name="SafeCallException" visibility="public">
        </methodref>
        <methodref name="AfterConstruction" visibility="public">
        </methodref>
        <methodref name="BeforeDestruction" visibility="public">
        </methodref>
        <methodref name="Dispatch" visibility="public">
        </methodref>
        <methodref name="DefaultHandler" visibility="public">
        </methodref>
        <methodref name="NewInstance" visibility="public">
        </methodref>
        <methodref name="FreeInstance" visibility="public">
        </methodref>
        <methodref name="Destroy" visibility="public">
        </methodref>
      </ancestor>
    </ancestor>
  </class>
  <class name="EPdfInvalidOperation">
    <devnotes>
       PDF exception, raised when an invalid operation is trigerred
    </devnotes>
    <ancestor name="Exception" namespace="SysUtils">
      <methodref name="Create" visibility="public">
      </methodref>
      <methodref name="CreateFmt" visibility="public">
      </methodref>
      <methodref name="CreateRes" visibility="public">
      </methodref>
      <methodref name="CreateRes" visibility="public">
      </methodref>
      <methodref name="CreateResFmt" visibility="public">
      </methodref>
      <methodref name="CreateResFmt" visibility="public">
      </methodref>
      <methodref name="CreateHelp" visibility="public">
      </methodref>
      <methodref name="CreateFmtHelp" visibility="public">
      </methodref>
      <methodref name="CreateResHelp" visibility="public">
      </methodref>
      <methodref name="CreateResHelp" visibility="public">
      </methodref>
      <methodref name="CreateResFmtHelp" visibility="public">
      </methodref>
      <methodref name="CreateResFmtHelp" visibility="public">
      </methodref>
      <propertyref name="HelpContext" visibility="public">
      </propertyref>
      <propertyref name="Message" visibility="public">
      </propertyref>
      <ancestor name="TObject" namespace="System">
        <methodref name="Create" visibility="public">
        </methodref>
        <methodref name="Free" visibility="public">
        </methodref>
        <methodref name="InitInstance" visibility="public">
        </methodref>
        <methodref name="CleanupInstance" visibility="public">
        </methodref>
        <methodref name="ClassType" visibility="public">
        </methodref>
        <methodref name="ClassName" visibility="public">
        </methodref>
        <methodref name="ClassNameIs" visibility="public">
        </methodref>
        <methodref name="ClassParent" visibility="public">
        </methodref>
        <methodref name="ClassInfo" visibility="public">
        </methodref>
        <methodref name="InstanceSize" visibility="public">
        </methodref>
        <methodref name="InheritsFrom" visibility="public">
        </methodref>
        <methodref name="MethodAddress" visibility="public">
        </methodref>
        <methodref name="MethodName" visibility="public">
        </methodref>
        <methodref name="FieldAddress" visibility="public">
        </methodref>
        <methodref name="GetInterface" visibility="public">
        </methodref>
        <methodref name="GetInterfaceEntry" visibility="public">
        </methodref>
        <methodref name="GetInterfaceTable" visibility="public">
        </methodref>
        <methodref name="SafeCallException" visibility="public">
        </methodref>
        <methodref name="AfterConstruction" visibility="public">
        </methodref>
        <methodref name="BeforeDestruction" visibility="public">
        </methodref>
        <methodref name="Dispatch" visibility="public">
        </methodref>
        <methodref name="DefaultHandler" visibility="public">
        </methodref>
        <methodref name="NewInstance" visibility="public">
        </methodref>
        <methodref name="FreeInstance" visibility="public">
        </methodref>
        <methodref name="Destroy" visibility="public">
        </methodref>
      </ancestor>
    </ancestor>
  </class>
  <const name="pmUseNone" type="TPdfPageMode">
    <value>
      pmUseNone
    </value>
  </const>
  <const name="pmUseOutlines" type="TPdfPageMode">
    <value>
      pmUseOutlines
    </value>
  </const>
  <const name="pmUseThumbs" type="TPdfPageMode">
    <value>
      pmUseThumbs
    </value>
  </const>
  <const name="pmFullScreen" type="TPdfPageMode">
    <value>
      pmFullScreen
    </value>
  </const>
  <enum name="TPdfPageMode">
    <devnotes>
       Page mode determines how the document should appear when opened
    </devnotes>
    <element name="pmUseNone" />
    <element name="pmUseOutlines" />
    <element name="pmUseThumbs" />
    <element name="pmFullScreen" />
  </enum>
  <const name="lcButt_End" type="TLineCapStyle">
    <value>
      lcButt_End
    </value>
  </const>
  <const name="lcRound_End" type="TLineCapStyle">
    <value>
      lcRound_End
    </value>
  </const>
  <const name="lcProjectingSquareEnd" type="TLineCapStyle">
    <value>
      lcProjectingSquareEnd
    </value>
  </const>
  <enum name="TLineCapStyle">
    <devnotes>
       Line cap style specifies the shape to be used at the ends of open
    </devnotes>
    <element name="lcButt_End" />
    <element name="lcRound_End" />
    <element name="lcProjectingSquareEnd" />
  </enum>
  <const name="ljMiterJoin" type="TLineJoinStyle">
    <value>
      ljMiterJoin
    </value>
  </const>
  <const name="ljRoundJoin" type="TLineJoinStyle">
    <value>
      ljRoundJoin
    </value>
  </const>
  <const name="ljBevelJoin" type="TLineJoinStyle">
    <value>
      ljBevelJoin
    </value>
  </const>
  <enum name="TLineJoinStyle">
    <devnotes>
       The line join style specifies the shape to be used at the corners of paths
    </devnotes>
    <element name="ljMiterJoin" />
    <element name="ljRoundJoin" />
    <element name="ljBevelJoin" />
  </enum>
  <const name="trFill" type="TTextRenderingMode">
    <value>
      trFill
    </value>
  </const>
  <const name="trStroke" type="TTextRenderingMode">
    <value>
      trStroke
    </value>
  </const>
  <const name="trFillThenStroke" type="TTextRenderingMode">
    <value>
      trFillThenStroke
    </value>
  </const>
  <const name="trInvisible" type="TTextRenderingMode">
    <value>
      trInvisible
    </value>
  </const>
  <const name="trFillClipping" type="TTextRenderingMode">
    <value>
      trFillClipping
    </value>
  </const>
  <const name="trStrokeClipping" type="TTextRenderingMode">
    <value>
      trStrokeClipping
    </value>
  </const>
  <const name="trFillStrokeClipping" type="TTextRenderingMode">
    <value>
      trFillStrokeClipping
    </value>
  </const>
  <const name="trClipping" type="TTextRenderingMode">
    <value>
      trClipping
    </value>
  </const>
  <enum name="TTextRenderingMode">
    <devnotes>
       The text rendering mode determines whether text is stroked, filled, or used
    </devnotes>
    <element name="trFill" />
    <element name="trStroke" />
    <element name="trFillThenStroke" />
    <element name="trInvisible" />
    <element name="trFillClipping" />
    <element name="trStrokeClipping" />
    <element name="trFillStrokeClipping" />
    <element name="trClipping" />
  </enum>
  <const name="asTextNotes" type="TPdfAnnotationSubType">
    <value>
      asTextNotes
    </value>
  </const>
  <const name="asLink" type="TPdfAnnotationSubType">
    <value>
      asLink
    </value>
  </const>
  <enum name="TPdfAnnotationSubType">
    <devnotes>
       The annotation types determines the valid annotation subtype of TPdfDoc
    </devnotes>
    <element name="asTextNotes" />
    <element name="asLink" />
  </enum>
  <const name="dtXYZ" type="TPdfDestinationType">
    <value>
      dtXYZ
    </value>
  </const>
  <const name="dtFit" type="TPdfDestinationType">
    <value>
      dtFit
    </value>
  </const>
  <const name="dtFitH" type="TPdfDestinationType">
    <value>
      dtFitH
    </value>
  </const>
  <const name="dtFitV" type="TPdfDestinationType">
    <value>
      dtFitV
    </value>
  </const>
  <const name="dtFitR" type="TPdfDestinationType">
    <value>
      dtFitR
    </value>
  </const>
  <const name="dtFitB" type="TPdfDestinationType">
    <value>
      dtFitB
    </value>
  </const>
  <const name="dtFitBH" type="TPdfDestinationType">
    <value>
      dtFitBH
    </value>
  </const>
  <const name="dtFitBV" type="TPdfDestinationType">
    <value>
      dtFitBV
    </value>
  </const>
  <enum name="TPdfDestinationType">
    <devnotes>
       Destination Type determines default user space coordinate system of
    </devnotes>
    <element name="dtXYZ" />
    <element name="dtFit" />
    <element name="dtFitH" />
    <element name="dtFitV" />
    <element name="dtFitR" />
    <element name="dtFitB" />
    <element name="dtFitBH" />
    <element name="dtFitBV" />
  </enum>
  <const name="plSinglePage" type="TPdfPageLayout">
    <value>
      plSinglePage
    </value>
  </const>
  <const name="plOneColumn" type="TPdfPageLayout">
    <value>
      plOneColumn
    </value>
  </const>
  <const name="plTwoColumnLeft" type="TPdfPageLayout">
    <value>
      plTwoColumnLeft
    </value>
  </const>
  <const name="plTwoColumnRight" type="TPdfPageLayout">
    <value>
      plTwoColumnRight
    </value>
  </const>
  <enum name="TPdfPageLayout">
    <devnotes>
       The page layout to be used when the document is opened
    </devnotes>
    <element name="plSinglePage" />
    <element name="plOneColumn" />
    <element name="plTwoColumnLeft" />
    <element name="plTwoColumnRight" />
  </enum>
  <const name="vpHideToolbar" type="TPdfViewerPreference">
    <value>
      vpHideToolbar
    </value>
  </const>
  <const name="vpHideMenubar" type="TPdfViewerPreference">
    <value>
      vpHideMenubar
    </value>
  </const>
  <const name="vpHideWindowUI" type="TPdfViewerPreference">
    <value>
      vpHideWindowUI
    </value>
  </const>
  <const name="vpFitWindow" type="TPdfViewerPreference">
    <value>
      vpFitWindow
    </value>
  </const>
  <const name="vpCenterWindow" type="TPdfViewerPreference">
    <value>
      vpCenterWindow
    </value>
  </const>
  <enum name="TPdfViewerPreference">
    <devnotes>
       Viewer preferences specifying how the reader User Interface must start
    </devnotes>
    <element name="vpHideToolbar" />
    <element name="vpHideMenubar" />
    <element name="vpHideWindowUI" />
    <element name="vpFitWindow" />
    <element name="vpCenterWindow" />
  </enum>
  <set name="TPdfViewerPreferences" type="TPdfViewerPreference">
    <devnotes>
       set of Viewer preferences
    </devnotes>
    <element name="vpHideToolbar" />
    <element name="vpHideMenubar" />
    <element name="vpHideWindowUI" />
    <element name="vpFitWindow" />
    <element name="vpCenterWindow" />
  </set>
  <const name="psA4" type="TPDFPaperSize">
    <value>
      psA4
    </value>
  </const>
  <const name="psA5" type="TPDFPaperSize">
    <value>
      psA5
    </value>
  </const>
  <const name="psA3" type="TPDFPaperSize">
    <value>
      psA3
    </value>
  </const>
  <const name="psLetter" type="TPDFPaperSize">
    <value>
      psLetter
    </value>
  </const>
  <const name="psLegal" type="TPDFPaperSize">
    <value>
      psLegal
    </value>
  </const>
  <const name="psUserDefined" type="TPDFPaperSize">
    <value>
      psUserDefined
    </value>
  </const>
  <enum name="TPDFPaperSize">
    <devnotes>
       available known paper size (psA4 is the default on TPdfDocument creation)
    </devnotes>
    <element name="psA4" />
    <element name="psA5" />
    <element name="psA3" />
    <element name="psLetter" />
    <element name="psLegal" />
    <element name="psUserDefined" />
  </enum>
  <const name="cmNone" type="TPdfCompressionMethod">
    <value>
      cmNone
    </value>
  </const>
  <const name="cmFlateDecode" type="TPdfCompressionMethod">
    <value>
      cmFlateDecode
    </value>
  </const>
  <enum name="TPdfCompressionMethod">
    <devnotes>
       define if streams must be compressed
    </devnotes>
    <element name="cmNone" />
    <element name="cmFlateDecode" />
  </enum>
  <const name="PDF_IN_USE_ENTRY" type="Char">
    <devnotes>
       used for an used xref entry
    </devnotes>
    <value>
      $6E
    </value>
  </const>
  <const name="PDF_FREE_ENTRY" type="Char">
    <devnotes>
       used for an unused (free) xref entry, e.g. the root entry
    </devnotes>
    <value>
      $66
    </value>
  </const>
  <const name="PDF_MAX_GENERATION_NUM" type="Integer">
    <devnotes>
       used e.g. for the root xref entry
    </devnotes>
    <value>
      $FFFF
    </value>
  </const>
  <const name="PDF_ENTRY_CLOSED" type="Integer">
    <value>
      $0
    </value>
  </const>
  <const name="PDF_ENTRY_OPENED" type="Integer">
    <value>
      $1
    </value>
  </const>
  <const name="CRLF" type="Char">
    <devnotes>
       the Carriage Return and Line Feed values used in the PDF file generation
    </devnotes>
    <value>
      $A
    </value>
  </const>
  <const name="LF" type="Char">
    <devnotes>
       the Line Feed value
    </devnotes>
    <value>
      $A
    </value>
  </const>
  <const name="PDF_MIN_HORIZONTALSCALING" type="Integer">
    <value>
      $A
    </value>
  </const>
  <const name="PDF_MAX_HORIZONTALSCALING" type="Integer">
    <value>
      $12C
    </value>
  </const>
  <const name="PDF_MAX_WORDSPACE" type="Integer">
    <value>
      $12C
    </value>
  </const>
  <const name="PDF_MIN_CHARSPACE" type="Integer">
    <value>
      $FFFFFFE2
    </value>
  </const>
  <const name="PDF_MAX_CHARSPACE" type="Integer">
    <value>
      $12C
    </value>
  </const>
  <const name="PDF_MAX_FONTSIZE" type="Integer">
    <value>
      $7D0
    </value>
  </const>
  <const name="PDF_MAX_ZOOMSIZE" type="Integer">
    <value>
      $A
    </value>
  </const>
  <const name="PDF_MAX_LEADING" type="Integer">
    <value>
      $12C
    </value>
  </const>
  <const name="MSWINDOWS_DEFAULT_FONTS" type="RawUTF8" visibility="public">
    <devnotes>
       list of common fonts available by default since Windows 2000
    </devnotes>
  </const>
  <const name="paLeftJustify" type="TPdfAlignment">
    <value>
      paLeftJustify
    </value>
  </const>
  <const name="paRightJustify" type="TPdfAlignment">
    <value>
      paRightJustify
    </value>
  </const>
  <const name="paCenter" type="TPdfAlignment">
    <value>
      paCenter
    </value>
  </const>
  <enum name="TPdfAlignment">
    <devnotes>
       PDF text paragraph alignment
    </devnotes>
    <element name="paLeftJustify" />
    <element name="paRightJustify" />
    <element name="paCenter" />
  </enum>
  <const name="gdHorizontal" type="TGradientDirection">
    <value>
      gdHorizontal
    </value>
  </const>
  <const name="gdVertical" type="TGradientDirection">
    <value>
      gdVertical
    </value>
  </const>
  <enum name="TGradientDirection">
    <devnotes>
       PDF gradient direction
    </devnotes>
    <element name="gdHorizontal" />
    <element name="gdVertical" />
  </enum>
  <struct name="TPdfRect">
    <devnotes>
       a PDF coordinates rectangle
    </devnotes>
    <field name="Left" type="Single" visibility="public" />
    <field name="Top" type="Single" visibility="public" />
    <field name="Right" type="Single" visibility="public" />
    <field name="Bottom" type="Single" visibility="public" />
  </struct>
  <pointer name="PPdfRect" type="TPdfRect" indircnt="1" />
  <struct name="TPdfBox">
    <devnotes>
       a PDF coordinates box
    </devnotes>
    <field name="Left" type="Single" visibility="public" />
    <field name="Top" type="Single" visibility="public" />
    <field name="Width" type="Single" visibility="public" />
    <field name="Height" type="Single" visibility="public" />
  </struct>
  <pointer name="PPdfBox" type="TPdfBox" indircnt="1" />
  <const name="otDirectObject" type="TPdfObjectType">
    <value>
      otDirectObject
    </value>
  </const>
  <const name="otIndirectObject" type="TPdfObjectType">
    <value>
      otIndirectObject
    </value>
  </const>
  <const name="otVirtualObject" type="TPdfObjectType">
    <value>
      otVirtualObject
    </value>
  </const>
  <enum name="TPdfObjectType">
    <devnotes>
       allowed types for PDF objects (i.e. TPdfObject)
    </devnotes>
    <element name="otDirectObject" />
    <element name="otIndirectObject" />
    <element name="otVirtualObject" />
  </enum>
  <const name="fNone">
    <value>
      fNone
    </value>
  </const>
  <const name="fMain">
    <value>
      fMain
    </value>
  </const>
  <const name="fFallBack">
    <value>
      fFallBack
    </value>
  </const>
  <class name="TPdfWrite">
    <devnotes>
       the available encryption levels
       PDF can encode various restrictions on document operations which can be
       set of restrictions on PDF document operations
       abstract class to handle PDF security
       initialize the internal structures with the proper classes
       will create the expected TPdfEncryption instance, depending on aLevel
       handle PDF security with RC4+MD5 scheme in 40-bit and 128-bit
       initialize the internal structures
       buffered writer class, specialized for PDF encoding
    </devnotes>
    <ancestor name="TObject" namespace="System">
      <methodref name="Create" visibility="public">
      </methodref>
      <methodref name="Free" visibility="public">
      </methodref>
      <methodref name="InitInstance" visibility="public">
      </methodref>
      <methodref name="CleanupInstance" visibility="public">
      </methodref>
      <methodref name="ClassType" visibility="public">
      </methodref>
      <methodref name="ClassName" visibility="public">
      </methodref>
      <methodref name="ClassNameIs" visibility="public">
      </methodref>
      <methodref name="ClassParent" visibility="public">
      </methodref>
      <methodref name="ClassInfo" visibility="public">
      </methodref>
      <methodref name="InstanceSize" visibility="public">
      </methodref>
      <methodref name="InheritsFrom" visibility="public">
      </methodref>
      <methodref name="MethodAddress" visibility="public">
      </methodref>
      <methodref name="MethodName" visibility="public">
      </methodref>
      <methodref name="FieldAddress" visibility="public">
      </methodref>
      <methodref name="GetInterface" visibility="public">
      </methodref>
      <methodref name="GetInterfaceEntry" visibility="public">
      </methodref>
      <methodref name="GetInterfaceTable" visibility="public">
      </methodref>
      <methodref name="SafeCallException" visibility="public">
      </methodref>
      <methodref name="AfterConstruction" visibility="public">
      </methodref>
      <methodref name="BeforeDestruction" visibility="public">
      </methodref>
      <methodref name="Dispatch" visibility="public">
      </methodref>
      <methodref name="DefaultHandler" visibility="public">
      </methodref>
      <methodref name="NewInstance" visibility="public">
      </methodref>
      <methodref name="FreeInstance" visibility="public">
      </methodref>
      <methodref name="Destroy" visibility="public">
      </methodref>
    </ancestor>
    <members>
      <field name="B" type="PAnsiChar" visibility="protected" />
      <field name="BEnd" type="PAnsiChar" visibility="protected" />
      <field name="BEnd4" type="PAnsiChar" visibility="protected" />
      <field name="fDestStream" type="TStream" visibility="protected" />
      <field name="fDestStreamPosition" type="Integer" visibility="protected" />
      <field name="fCodePage" type="Integer" visibility="protected" />
      <field name="fAddGlyphFont" type=".5" visibility="protected" />
      <field name="Tmp" visibility="protected">
        <array name="Tmp" low="0" high="511">
          <element type="Char" />
        </array>
      </field>
      <function name="ToWideChar" visibility="protected">
        <devnotes>
           internal Ansi-&gt;Unicode conversion, using the CodePage used in Create()
        </devnotes>
        <parameters>
          <parameter name="Ansi" type="string" paramflags="const" />
          <parameter name="DLen" type="Integer" paramflags="out" />
          <retval type="PWideChar" />
        </parameters>
      </function>
      <function name="AddUnicodeHexTextUniScribe" visibility="protected">
        <devnotes>
           internal method using the Windows Uniscribe API
        </devnotes>
        <parameters>
          <parameter name="PW" type="PWideChar" />
          <parameter name="WinAnsiTTF" type="TPdfFontTrueType" />
          <parameter name="NextLine" type="Boolean" />
          <parameter name="Canvas" type="TPdfCanvas" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <procedure name="AddUnicodeHexTextNoUniScribe" visibility="protected">
        <devnotes>
           internal method NOT using the Windows Uniscribe API
        </devnotes>
        <parameters>
          <parameter name="PW" type="PWideChar" />
          <parameter name="TTF" type="TPdfFontTrueType" />
          <parameter name="NextLine" type="Boolean" />
          <parameter name="Canvas" type="TPdfCanvas" />
        </parameters>
      </procedure>
      <procedure name="AddGlyphFromChar" visibility="protected">
        <devnotes>
           internal methods handling font fall-back
        </devnotes>
        <parameters>
          <parameter name="Char" type="WideChar" />
          <parameter name="Canvas" type="TPdfCanvas" />
          <parameter name="TTF" type="TPdfFontTrueType" />
          <parameter name="NextLine" type="PBoolean" />
        </parameters>
      </procedure>
      <procedure name="AddGlyphFlush" visibility="protected">
        <parameters>
          <parameter name="Canvas" type="TPdfCanvas" />
          <parameter name="TTF" type="TPdfFontTrueType" />
          <parameter name="NextLine" type="PBoolean" />
        </parameters>
      </procedure>
      <constructor name="Create" visibility="public">
        <devnotes>
           create the buffered writer, for a specified destination stream
        </devnotes>
        <parameters>
          <parameter name="DestStream" type="TStream" />
          <parameter name="CodePage" type="Integer" />
        </parameters>
      </constructor>
      <function name="Add" visibility="public" procflags="overload">
        <devnotes>
           add a character to the buffer
        </devnotes>
        <parameters>
          <parameter name="c" type="Char" />
          <retval type="TPdfWrite">
            <devnotes>
               the available encryption levels
               PDF can encode various restrictions on document operations which can be
               set of restrictions on PDF document operations
               abstract class to handle PDF security
               initialize the internal structures with the proper classes
               will create the expected TPdfEncryption instance, depending on aLevel
               handle PDF security with RC4+MD5 scheme in 40-bit and 128-bit
               initialize the internal structures
               buffered writer class, specialized for PDF encoding
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="Add" visibility="public" procflags="overload">
        <devnotes>
           add an integer numerical value to the buffer
        </devnotes>
        <parameters>
          <parameter name="Value" type="Integer" />
          <retval type="TPdfWrite">
            <devnotes>
               the available encryption levels
               PDF can encode various restrictions on document operations which can be
               set of restrictions on PDF document operations
               abstract class to handle PDF security
               initialize the internal structures with the proper classes
               will create the expected TPdfEncryption instance, depending on aLevel
               handle PDF security with RC4+MD5 scheme in 40-bit and 128-bit
               initialize the internal structures
               buffered writer class, specialized for PDF encoding
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="AddWithSpace" visibility="public" procflags="overload">
        <devnotes>
           add an integer numerical value to the buffer
        </devnotes>
        <parameters>
          <parameter name="Value" type="Integer" />
          <retval type="TPdfWrite">
            <devnotes>
               the available encryption levels
               PDF can encode various restrictions on document operations which can be
               set of restrictions on PDF document operations
               abstract class to handle PDF security
               initialize the internal structures with the proper classes
               will create the expected TPdfEncryption instance, depending on aLevel
               handle PDF security with RC4+MD5 scheme in 40-bit and 128-bit
               initialize the internal structures
               buffered writer class, specialized for PDF encoding
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="Add" visibility="public" procflags="overload">
        <devnotes>
           add an integer numerical value to the buffer
        </devnotes>
        <parameters>
          <parameter name="Value" type="Integer" />
          <parameter name="DigitCount" type="Integer" />
          <retval type="TPdfWrite">
            <devnotes>
               the available encryption levels
               PDF can encode various restrictions on document operations which can be
               set of restrictions on PDF document operations
               abstract class to handle PDF security
               initialize the internal structures with the proper classes
               will create the expected TPdfEncryption instance, depending on aLevel
               handle PDF security with RC4+MD5 scheme in 40-bit and 128-bit
               initialize the internal structures
               buffered writer class, specialized for PDF encoding
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="Add" visibility="public" procflags="overload">
        <devnotes>
           add a floating point numerical value to the buffer
        </devnotes>
        <parameters>
          <parameter name="Value" type="Extended" />
          <retval type="TPdfWrite">
            <devnotes>
               the available encryption levels
               PDF can encode various restrictions on document operations which can be
               set of restrictions on PDF document operations
               abstract class to handle PDF security
               initialize the internal structures with the proper classes
               will create the expected TPdfEncryption instance, depending on aLevel
               handle PDF security with RC4+MD5 scheme in 40-bit and 128-bit
               initialize the internal structures
               buffered writer class, specialized for PDF encoding
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="AddWithSpace" visibility="public" procflags="overload">
        <devnotes>
           add a floating point numerical value to the buffer
        </devnotes>
        <parameters>
          <parameter name="Value" type="Extended" />
          <retval type="TPdfWrite">
            <devnotes>
               the available encryption levels
               PDF can encode various restrictions on document operations which can be
               set of restrictions on PDF document operations
               abstract class to handle PDF security
               initialize the internal structures with the proper classes
               will create the expected TPdfEncryption instance, depending on aLevel
               handle PDF security with RC4+MD5 scheme in 40-bit and 128-bit
               initialize the internal structures
               buffered writer class, specialized for PDF encoding
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="AddWithSpace" visibility="public" procflags="overload">
        <devnotes>
           add a floating point numerical value to the buffer
        </devnotes>
        <parameters>
          <parameter name="Value" type="Extended" />
          <parameter name="Decimals" type="Cardinal" />
          <retval type="TPdfWrite">
            <devnotes>
               the available encryption levels
               PDF can encode various restrictions on document operations which can be
               set of restrictions on PDF document operations
               abstract class to handle PDF security
               initialize the internal structures with the proper classes
               will create the expected TPdfEncryption instance, depending on aLevel
               handle PDF security with RC4+MD5 scheme in 40-bit and 128-bit
               initialize the internal structures
               buffered writer class, specialized for PDF encoding
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="Add" visibility="public" procflags="overload">
        <devnotes>
           direct raw write of some data
        </devnotes>
        <parameters>
          <parameter name="Text" type="PAnsiChar" />
          <parameter name="Len" type="Integer" />
          <retval type="TPdfWrite">
            <devnotes>
               the available encryption levels
               PDF can encode various restrictions on document operations which can be
               set of restrictions on PDF document operations
               abstract class to handle PDF security
               initialize the internal structures with the proper classes
               will create the expected TPdfEncryption instance, depending on aLevel
               handle PDF security with RC4+MD5 scheme in 40-bit and 128-bit
               initialize the internal structures
               buffered writer class, specialized for PDF encoding
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="Add" visibility="public" procflags="overload">
        <devnotes>
           direct raw write of some data
        </devnotes>
        <parameters>
          <parameter name="Text" type="string" paramflags="const" />
          <retval type="TPdfWrite">
            <devnotes>
               the available encryption levels
               PDF can encode various restrictions on document operations which can be
               set of restrictions on PDF document operations
               abstract class to handle PDF security
               initialize the internal structures with the proper classes
               will create the expected TPdfEncryption instance, depending on aLevel
               handle PDF security with RC4+MD5 scheme in 40-bit and 128-bit
               initialize the internal structures
               buffered writer class, specialized for PDF encoding
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="AddHex" visibility="public">
        <devnotes>
           hexadecimal write of some row data
        </devnotes>
        <parameters>
          <parameter name="Bin" type="string" paramflags="const" />
          <retval type="TPdfWrite">
            <devnotes>
               the available encryption levels
               PDF can encode various restrictions on document operations which can be
               set of restrictions on PDF document operations
               abstract class to handle PDF security
               initialize the internal structures with the proper classes
               will create the expected TPdfEncryption instance, depending on aLevel
               handle PDF security with RC4+MD5 scheme in 40-bit and 128-bit
               initialize the internal structures
               buffered writer class, specialized for PDF encoding
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="AddHex4" visibility="public">
        <devnotes>
           add a word value, as Big-Endian 4 hexadecimal characters
        </devnotes>
        <parameters>
          <parameter name="aWordValue" type="Cardinal" />
          <retval type="TPdfWrite">
            <devnotes>
               the available encryption levels
               PDF can encode various restrictions on document operations which can be
               set of restrictions on PDF document operations
               abstract class to handle PDF security
               initialize the internal structures with the proper classes
               will create the expected TPdfEncryption instance, depending on aLevel
               handle PDF security with RC4+MD5 scheme in 40-bit and 128-bit
               initialize the internal structures
               buffered writer class, specialized for PDF encoding
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="AddToUnicodeHex" visibility="public">
        <devnotes>
           convert some text into unicode characters, then write it as as Big-Endian
        </devnotes>
        <parameters>
          <parameter name="Text" type="string" paramflags="const" />
          <retval type="TPdfWrite">
            <devnotes>
               the available encryption levels
               PDF can encode various restrictions on document operations which can be
               set of restrictions on PDF document operations
               abstract class to handle PDF security
               initialize the internal structures with the proper classes
               will create the expected TPdfEncryption instance, depending on aLevel
               handle PDF security with RC4+MD5 scheme in 40-bit and 128-bit
               initialize the internal structures
               buffered writer class, specialized for PDF encoding
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="AddUnicodeHex" visibility="public">
        <devnotes>
           write some unicode text as as Big-Endian 4 hexadecimal characters
        </devnotes>
        <parameters>
          <parameter name="PW" type="PWideChar" />
          <parameter name="WideCharCount" type="Integer" />
          <retval type="TPdfWrite">
            <devnotes>
               the available encryption levels
               PDF can encode various restrictions on document operations which can be
               set of restrictions on PDF document operations
               abstract class to handle PDF security
               initialize the internal structures with the proper classes
               will create the expected TPdfEncryption instance, depending on aLevel
               handle PDF security with RC4+MD5 scheme in 40-bit and 128-bit
               initialize the internal structures
               buffered writer class, specialized for PDF encoding
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="AddToUnicodeHexText" visibility="public">
        <devnotes>
           convert some text into unicode characters, then write it as PDF Text
        </devnotes>
        <parameters>
          <parameter name="Text" type="string" paramflags="const" />
          <parameter name="NextLine" type="Boolean" />
          <parameter name="Canvas" type="TPdfCanvas" />
          <retval type="TPdfWrite">
            <devnotes>
               the available encryption levels
               PDF can encode various restrictions on document operations which can be
               set of restrictions on PDF document operations
               abstract class to handle PDF security
               initialize the internal structures with the proper classes
               will create the expected TPdfEncryption instance, depending on aLevel
               handle PDF security with RC4+MD5 scheme in 40-bit and 128-bit
               initialize the internal structures
               buffered writer class, specialized for PDF encoding
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="AddUnicodeHexText" visibility="public">
        <devnotes>
           write some Unicode text, as PDF text
        </devnotes>
        <parameters>
          <parameter name="PW" type="PWideChar" />
          <parameter name="NextLine" type="Boolean" />
          <parameter name="Canvas" type="TPdfCanvas" />
          <retval type="TPdfWrite">
            <devnotes>
               the available encryption levels
               PDF can encode various restrictions on document operations which can be
               set of restrictions on PDF document operations
               abstract class to handle PDF security
               initialize the internal structures with the proper classes
               will create the expected TPdfEncryption instance, depending on aLevel
               handle PDF security with RC4+MD5 scheme in 40-bit and 128-bit
               initialize the internal structures
               buffered writer class, specialized for PDF encoding
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="AddGlyphs" visibility="public">
        <devnotes>
           write some Unicode text, encoded as Glyphs indexes, corresponding
        </devnotes>
        <parameters>
          <parameter name="Glyphs" type="PWORD" />
          <parameter name="GlyphsCount" type="Integer" />
          <parameter name="Canvas" type="TPdfCanvas" />
          <retval type="TPdfWrite">
            <devnotes>
               the available encryption levels
               PDF can encode various restrictions on document operations which can be
               set of restrictions on PDF document operations
               abstract class to handle PDF security
               initialize the internal structures with the proper classes
               will create the expected TPdfEncryption instance, depending on aLevel
               handle PDF security with RC4+MD5 scheme in 40-bit and 128-bit
               initialize the internal structures
               buffered writer class, specialized for PDF encoding
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="AddEscape" visibility="public">
        <devnotes>
           add some WinAnsi text as PDF text
        </devnotes>
        <parameters>
          <parameter name="Text" type="PAnsiChar" />
          <retval type="TPdfWrite">
            <devnotes>
               the available encryption levels
               PDF can encode various restrictions on document operations which can be
               set of restrictions on PDF document operations
               abstract class to handle PDF security
               initialize the internal structures with the proper classes
               will create the expected TPdfEncryption instance, depending on aLevel
               handle PDF security with RC4+MD5 scheme in 40-bit and 128-bit
               initialize the internal structures
               buffered writer class, specialized for PDF encoding
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="AddEscapeText" visibility="public">
        <devnotes>
           add some WinAnsi text as PDF text
        </devnotes>
        <parameters>
          <parameter name="Text" type="PAnsiChar" />
          <parameter name="Font" type="TPdfFont" />
          <retval type="TPdfWrite">
            <devnotes>
               the available encryption levels
               PDF can encode various restrictions on document operations which can be
               set of restrictions on PDF document operations
               abstract class to handle PDF security
               initialize the internal structures with the proper classes
               will create the expected TPdfEncryption instance, depending on aLevel
               handle PDF security with RC4+MD5 scheme in 40-bit and 128-bit
               initialize the internal structures
               buffered writer class, specialized for PDF encoding
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="AddEscapeName" visibility="public">
        <devnotes>
           add some PDF /property value
        </devnotes>
        <parameters>
          <parameter name="Text" type="PAnsiChar" />
          <retval type="TPdfWrite">
            <devnotes>
               the available encryption levels
               PDF can encode various restrictions on document operations which can be
               set of restrictions on PDF document operations
               abstract class to handle PDF security
               initialize the internal structures with the proper classes
               will create the expected TPdfEncryption instance, depending on aLevel
               handle PDF security with RC4+MD5 scheme in 40-bit and 128-bit
               initialize the internal structures
               buffered writer class, specialized for PDF encoding
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="AddColorStr" visibility="public">
        <devnotes>
           add a PDF color, from its TColorRef RGB value
        </devnotes>
        <parameters>
          <parameter name="Color" type="Cardinal" />
          <retval type="TPdfWrite">
            <devnotes>
               the available encryption levels
               PDF can encode various restrictions on document operations which can be
               set of restrictions on PDF document operations
               abstract class to handle PDF security
               initialize the internal structures with the proper classes
               will create the expected TPdfEncryption instance, depending on aLevel
               handle PDF security with RC4+MD5 scheme in 40-bit and 128-bit
               initialize the internal structures
               buffered writer class, specialized for PDF encoding
            </devnotes>
          </retval>
        </parameters>
      </function>
      <procedure name="AddRGB" visibility="public">
        <devnotes>
           add a TBitmap.Scanline[] content into the stream
        </devnotes>
        <parameters>
          <parameter name="P" type="PAnsiChar" />
          <parameter name="PInc" type="Integer" />
          <parameter name="Count" type="Integer" />
        </parameters>
      </procedure>
      <function name="AddIso8601" visibility="public">
        <devnotes>
           add an ISO 8601 encoded date time (e.g. '2010-06-16T15:06:59-07:00')
        </devnotes>
        <parameters>
          <parameter name="DateTime" type="TDateTime" />
          <retval type="TPdfWrite">
            <devnotes>
               the available encryption levels
               PDF can encode various restrictions on document operations which can be
               set of restrictions on PDF document operations
               abstract class to handle PDF security
               initialize the internal structures with the proper classes
               will create the expected TPdfEncryption instance, depending on aLevel
               handle PDF security with RC4+MD5 scheme in 40-bit and 128-bit
               initialize the internal structures
               buffered writer class, specialized for PDF encoding
            </devnotes>
          </retval>
        </parameters>
      </function>
      <procedure name="Save" visibility="public">
        <devnotes>
           flush the internal buffer to the destination stream
        </devnotes>
      </procedure>
      <function name="Position" visibility="public">
        <devnotes>
           return the current position
        </devnotes>
        <parameters>
          <retval type="Integer" />
        </parameters>
      </function>
      <function name="ToPDFString" visibility="public">
        <devnotes>
           get the data written to the Writer as a PDFString
        </devnotes>
        <parameters>
          <retval type="string" />
        </parameters>
      </function>
    </members>
  </class>
  <class name="TPdfObjectMgr">
    <devnotes>
       object manager is a virtual class to manage instance of indirect PDF objects
    </devnotes>
    <ancestor name="TObject" namespace="System">
      <methodref name="Create" visibility="public">
      </methodref>
      <methodref name="Free" visibility="public">
      </methodref>
      <methodref name="InitInstance" visibility="public">
      </methodref>
      <methodref name="CleanupInstance" visibility="public">
      </methodref>
      <methodref name="ClassType" visibility="public">
      </methodref>
      <methodref name="ClassName" visibility="public">
      </methodref>
      <methodref name="ClassNameIs" visibility="public">
      </methodref>
      <methodref name="ClassParent" visibility="public">
      </methodref>
      <methodref name="ClassInfo" visibility="public">
      </methodref>
      <methodref name="InstanceSize" visibility="public">
      </methodref>
      <methodref name="InheritsFrom" visibility="public">
      </methodref>
      <methodref name="MethodAddress" visibility="public">
      </methodref>
      <methodref name="MethodName" visibility="public">
      </methodref>
      <methodref name="FieldAddress" visibility="public">
      </methodref>
      <methodref name="GetInterface" visibility="public">
      </methodref>
      <methodref name="GetInterfaceEntry" visibility="public">
      </methodref>
      <methodref name="GetInterfaceTable" visibility="public">
      </methodref>
      <methodref name="SafeCallException" visibility="public">
      </methodref>
      <methodref name="AfterConstruction" visibility="public">
      </methodref>
      <methodref name="BeforeDestruction" visibility="public">
      </methodref>
      <methodref name="Dispatch" visibility="public">
      </methodref>
      <methodref name="DefaultHandler" visibility="public">
      </methodref>
      <methodref name="NewInstance" visibility="public">
      </methodref>
      <methodref name="FreeInstance" visibility="public">
      </methodref>
      <methodref name="Destroy" visibility="public">
      </methodref>
    </ancestor>
    <members>
      <procedure name="AddObject" visibility="public" procflags="abstract virtual">
        <parameters>
          <parameter name="AObject" type="TPdfObject" />
        </parameters>
      </procedure>
      <function name="GetObject" visibility="public" procflags="abstract virtual">
        <parameters>
          <parameter name="ObjectID" type="Integer" />
          <retval type="TPdfObject">
            <devnotes>
               master class for most PDF objects declaration
            </devnotes>
          </retval>
        </parameters>
      </function>
    </members>
  </class>
  <class name="TPdfObject">
    <devnotes>
       master class for most PDF objects declaration
    </devnotes>
    <ancestor name="TObject" namespace="System">
      <methodref name="Create" visibility="public">
      </methodref>
      <methodref name="Free" visibility="public">
      </methodref>
      <methodref name="InitInstance" visibility="public">
      </methodref>
      <methodref name="CleanupInstance" visibility="public">
      </methodref>
      <methodref name="ClassType" visibility="public">
      </methodref>
      <methodref name="ClassName" visibility="public">
      </methodref>
      <methodref name="ClassNameIs" visibility="public">
      </methodref>
      <methodref name="ClassParent" visibility="public">
      </methodref>
      <methodref name="ClassInfo" visibility="public">
      </methodref>
      <methodref name="InstanceSize" visibility="public">
      </methodref>
      <methodref name="InheritsFrom" visibility="public">
      </methodref>
      <methodref name="MethodAddress" visibility="public">
      </methodref>
      <methodref name="MethodName" visibility="public">
      </methodref>
      <methodref name="FieldAddress" visibility="public">
      </methodref>
      <methodref name="GetInterface" visibility="public">
      </methodref>
      <methodref name="GetInterfaceEntry" visibility="public">
      </methodref>
      <methodref name="GetInterfaceTable" visibility="public">
      </methodref>
      <methodref name="SafeCallException" visibility="public">
      </methodref>
      <methodref name="AfterConstruction" visibility="public">
      </methodref>
      <methodref name="BeforeDestruction" visibility="public">
      </methodref>
      <methodref name="Dispatch" visibility="public">
      </methodref>
      <methodref name="DefaultHandler" visibility="public">
      </methodref>
      <methodref name="NewInstance" visibility="public">
      </methodref>
      <methodref name="FreeInstance" visibility="public">
      </methodref>
      <methodref name="Destroy" visibility="public">
      </methodref>
    </ancestor>
    <members>
      <field name="FObjectType" type="TPdfObjectType" visibility="private" />
      <field name="FObjectNumber" type="Integer" visibility="private" />
      <field name="FGenerationNumber" type="Integer" visibility="private" />
      <field name="FSaveAtTheEnd" type="Boolean" visibility="private" />
      <procedure name="InternalWriteTo" visibility="public" procflags="virtual">
        <parameters>
          <parameter name="W" type="TPdfWrite" paramflags="var" />
        </parameters>
      </procedure>
      <procedure name="SetObjectNumber" visibility="protected">
        <parameters>
          <parameter name="Value" type="Integer" />
        </parameters>
      </procedure>
      <constructor name="Create" visibility="public">
        <devnotes>
           create the PDF object instance
        </devnotes>
        <parameters>
        </parameters>
      </constructor>
      <procedure name="WriteTo" visibility="public">
        <devnotes>
           Write object to specified stream
        </devnotes>
        <parameters>
          <parameter name="W" type="TPdfWrite" paramflags="var" />
        </parameters>
      </procedure>
      <procedure name="WriteValueTo" visibility="public">
        <devnotes>
           write indirect object to specified stream
        </devnotes>
        <parameters>
          <parameter name="W" type="TPdfWrite" paramflags="var" />
        </parameters>
      </procedure>
      <property name="ObjectNumber" visibility="public" read="FObjectNumber" write="SetObjectNumber" type="Integer">
        <devnotes>
           the associated PDF Object Number
        </devnotes>
      </property>
      <property name="GenerationNumber" visibility="public" read="FGenerationNumber" type="Integer">
        <devnotes>
           the associated PDF Generation Number
        </devnotes>
      </property>
      <property name="ObjectType" visibility="public" read="FObjectType" type="TPdfObjectType">
        <devnotes>
           the corresponding type of this PDF object
        </devnotes>
      </property>
    </members>
  </class>
  <class name="TPdfVirtualObject">
    <devnotes>
       a virtual PDF object, with an associated PDF Object Number
    </devnotes>
    <ancestor name="TPdfObject" namespace="SynPdf">
      <methodref name="InternalWriteTo" visibility="public" />
      <methodref name="SetObjectNumber" visibility="protected" />
      <methodref name="Create" visibility="public">
        <devnotes>
           create the PDF object instance
        </devnotes>
      </methodref>
      <methodref name="WriteTo" visibility="public">
        <devnotes>
           Write object to specified stream
        </devnotes>
      </methodref>
      <methodref name="WriteValueTo" visibility="public">
        <devnotes>
           write indirect object to specified stream
        </devnotes>
      </methodref>
      <propertyref name="ObjectNumber" visibility="public">
        <devnotes>
           the associated PDF Object Number
        </devnotes>
      </propertyref>
      <propertyref name="GenerationNumber" visibility="public">
        <devnotes>
           the associated PDF Generation Number
        </devnotes>
      </propertyref>
      <propertyref name="ObjectType" visibility="public">
        <devnotes>
           the corresponding type of this PDF object
        </devnotes>
      </propertyref>
      <ancestor name="TObject" namespace="System">
        <methodref name="Create" visibility="public">
        </methodref>
        <methodref name="Free" visibility="public">
        </methodref>
        <methodref name="InitInstance" visibility="public">
        </methodref>
        <methodref name="CleanupInstance" visibility="public">
        </methodref>
        <methodref name="ClassType" visibility="public">
        </methodref>
        <methodref name="ClassName" visibility="public">
        </methodref>
        <methodref name="ClassNameIs" visibility="public">
        </methodref>
        <methodref name="ClassParent" visibility="public">
        </methodref>
        <methodref name="ClassInfo" visibility="public">
        </methodref>
        <methodref name="InstanceSize" visibility="public">
        </methodref>
        <methodref name="InheritsFrom" visibility="public">
        </methodref>
        <methodref name="MethodAddress" visibility="public">
        </methodref>
        <methodref name="MethodName" visibility="public">
        </methodref>
        <methodref name="FieldAddress" visibility="public">
        </methodref>
        <methodref name="GetInterface" visibility="public">
        </methodref>
        <methodref name="GetInterfaceEntry" visibility="public">
        </methodref>
        <methodref name="GetInterfaceTable" visibility="public">
        </methodref>
        <methodref name="SafeCallException" visibility="public">
        </methodref>
        <methodref name="AfterConstruction" visibility="public">
        </methodref>
        <methodref name="BeforeDestruction" visibility="public">
        </methodref>
        <methodref name="Dispatch" visibility="public">
        </methodref>
        <methodref name="DefaultHandler" visibility="public">
        </methodref>
        <methodref name="NewInstance" visibility="public">
        </methodref>
        <methodref name="FreeInstance" visibility="public">
        </methodref>
        <methodref name="Destroy" visibility="public">
        </methodref>
      </ancestor>
    </ancestor>
    <members>
      <constructor name="Create" visibility="public">
        <parameters>
          <parameter name="AObjectId" type="Integer" />
        </parameters>
      </constructor>
    </members>
  </class>
  <class name="TPdfBoolean">
    <devnotes>
       a PDF object, storing a boolean value
    </devnotes>
    <ancestor name="TPdfObject" namespace="SynPdf">
      <methodref name="InternalWriteTo" visibility="public" />
      <methodref name="SetObjectNumber" visibility="protected" />
      <methodref name="Create" visibility="public">
        <devnotes>
           create the PDF object instance
        </devnotes>
      </methodref>
      <methodref name="WriteTo" visibility="public">
        <devnotes>
           Write object to specified stream
        </devnotes>
      </methodref>
      <methodref name="WriteValueTo" visibility="public">
        <devnotes>
           write indirect object to specified stream
        </devnotes>
      </methodref>
      <propertyref name="ObjectNumber" visibility="public">
        <devnotes>
           the associated PDF Object Number
        </devnotes>
      </propertyref>
      <propertyref name="GenerationNumber" visibility="public">
        <devnotes>
           the associated PDF Generation Number
        </devnotes>
      </propertyref>
      <propertyref name="ObjectType" visibility="public">
        <devnotes>
           the corresponding type of this PDF object
        </devnotes>
      </propertyref>
      <ancestor name="TObject" namespace="System">
        <methodref name="Create" visibility="public">
        </methodref>
        <methodref name="Free" visibility="public">
        </methodref>
        <methodref name="InitInstance" visibility="public">
        </methodref>
        <methodref name="CleanupInstance" visibility="public">
        </methodref>
        <methodref name="ClassType" visibility="public">
        </methodref>
        <methodref name="ClassName" visibility="public">
        </methodref>
        <methodref name="ClassNameIs" visibility="public">
        </methodref>
        <methodref name="ClassParent" visibility="public">
        </methodref>
        <methodref name="ClassInfo" visibility="public">
        </methodref>
        <methodref name="InstanceSize" visibility="public">
        </methodref>
        <methodref name="InheritsFrom" visibility="public">
        </methodref>
        <methodref name="MethodAddress" visibility="public">
        </methodref>
        <methodref name="MethodName" visibility="public">
        </methodref>
        <methodref name="FieldAddress" visibility="public">
        </methodref>
        <methodref name="GetInterface" visibility="public">
        </methodref>
        <methodref name="GetInterfaceEntry" visibility="public">
        </methodref>
        <methodref name="GetInterfaceTable" visibility="public">
        </methodref>
        <methodref name="SafeCallException" visibility="public">
        </methodref>
        <methodref name="AfterConstruction" visibility="public">
        </methodref>
        <methodref name="BeforeDestruction" visibility="public">
        </methodref>
        <methodref name="Dispatch" visibility="public">
        </methodref>
        <methodref name="DefaultHandler" visibility="public">
        </methodref>
        <methodref name="NewInstance" visibility="public">
        </methodref>
        <methodref name="FreeInstance" visibility="public">
        </methodref>
        <methodref name="Destroy" visibility="public">
        </methodref>
      </ancestor>
    </ancestor>
    <members>
      <field name="FValue" type="Boolean" visibility="private" />
      <procedure name="InternalWriteTo" visibility="public" procflags="override">
        <parameters>
          <parameter name="W" type="TPdfWrite" paramflags="var" />
        </parameters>
      </procedure>
      <constructor name="Create" visibility="public">
        <parameters>
          <parameter name="AValue" type="Boolean" />
        </parameters>
      </constructor>
      <property name="Value" visibility="public" read="FValue" write="FValue" type="Boolean" />
    </members>
  </class>
  <class name="TPdfNull">
    <devnotes>
       a PDF object, storing a NULL value
    </devnotes>
    <ancestor name="TPdfObject" namespace="SynPdf">
      <methodref name="InternalWriteTo" visibility="public" />
      <methodref name="SetObjectNumber" visibility="protected" />
      <methodref name="Create" visibility="public">
        <devnotes>
           create the PDF object instance
        </devnotes>
      </methodref>
      <methodref name="WriteTo" visibility="public">
        <devnotes>
           Write object to specified stream
        </devnotes>
      </methodref>
      <methodref name="WriteValueTo" visibility="public">
        <devnotes>
           write indirect object to specified stream
        </devnotes>
      </methodref>
      <propertyref name="ObjectNumber" visibility="public">
        <devnotes>
           the associated PDF Object Number
        </devnotes>
      </propertyref>
      <propertyref name="GenerationNumber" visibility="public">
        <devnotes>
           the associated PDF Generation Number
        </devnotes>
      </propertyref>
      <propertyref name="ObjectType" visibility="public">
        <devnotes>
           the corresponding type of this PDF object
        </devnotes>
      </propertyref>
      <ancestor name="TObject" namespace="System">
        <methodref name="Create" visibility="public">
        </methodref>
        <methodref name="Free" visibility="public">
        </methodref>
        <methodref name="InitInstance" visibility="public">
        </methodref>
        <methodref name="CleanupInstance" visibility="public">
        </methodref>
        <methodref name="ClassType" visibility="public">
        </methodref>
        <methodref name="ClassName" visibility="public">
        </methodref>
        <methodref name="ClassNameIs" visibility="public">
        </methodref>
        <methodref name="ClassParent" visibility="public">
        </methodref>
        <methodref name="ClassInfo" visibility="public">
        </methodref>
        <methodref name="InstanceSize" visibility="public">
        </methodref>
        <methodref name="InheritsFrom" visibility="public">
        </methodref>
        <methodref name="MethodAddress" visibility="public">
        </methodref>
        <methodref name="MethodName" visibility="public">
        </methodref>
        <methodref name="FieldAddress" visibility="public">
        </methodref>
        <methodref name="GetInterface" visibility="public">
        </methodref>
        <methodref name="GetInterfaceEntry" visibility="public">
        </methodref>
        <methodref name="GetInterfaceTable" visibility="public">
        </methodref>
        <methodref name="SafeCallException" visibility="public">
        </methodref>
        <methodref name="AfterConstruction" visibility="public">
        </methodref>
        <methodref name="BeforeDestruction" visibility="public">
        </methodref>
        <methodref name="Dispatch" visibility="public">
        </methodref>
        <methodref name="DefaultHandler" visibility="public">
        </methodref>
        <methodref name="NewInstance" visibility="public">
        </methodref>
        <methodref name="FreeInstance" visibility="public">
        </methodref>
        <methodref name="Destroy" visibility="public">
        </methodref>
      </ancestor>
    </ancestor>
    <members>
      <procedure name="InternalWriteTo" visibility="public" procflags="override">
        <parameters>
          <parameter name="W" type="TPdfWrite" paramflags="var" />
        </parameters>
      </procedure>
    </members>
  </class>
  <class name="TPdfNumber">
    <devnotes>
       a PDF object, storing a numerical (integer) value
    </devnotes>
    <ancestor name="TPdfObject" namespace="SynPdf">
      <methodref name="InternalWriteTo" visibility="public" />
      <methodref name="SetObjectNumber" visibility="protected" />
      <methodref name="Create" visibility="public">
        <devnotes>
           create the PDF object instance
        </devnotes>
      </methodref>
      <methodref name="WriteTo" visibility="public">
        <devnotes>
           Write object to specified stream
        </devnotes>
      </methodref>
      <methodref name="WriteValueTo" visibility="public">
        <devnotes>
           write indirect object to specified stream
        </devnotes>
      </methodref>
      <propertyref name="ObjectNumber" visibility="public">
        <devnotes>
           the associated PDF Object Number
        </devnotes>
      </propertyref>
      <propertyref name="GenerationNumber" visibility="public">
        <devnotes>
           the associated PDF Generation Number
        </devnotes>
      </propertyref>
      <propertyref name="ObjectType" visibility="public">
        <devnotes>
           the corresponding type of this PDF object
        </devnotes>
      </propertyref>
      <ancestor name="TObject" namespace="System">
        <methodref name="Create" visibility="public">
        </methodref>
        <methodref name="Free" visibility="public">
        </methodref>
        <methodref name="InitInstance" visibility="public">
        </methodref>
        <methodref name="CleanupInstance" visibility="public">
        </methodref>
        <methodref name="ClassType" visibility="public">
        </methodref>
        <methodref name="ClassName" visibility="public">
        </methodref>
        <methodref name="ClassNameIs" visibility="public">
        </methodref>
        <methodref name="ClassParent" visibility="public">
        </methodref>
        <methodref name="ClassInfo" visibility="public">
        </methodref>
        <methodref name="InstanceSize" visibility="public">
        </methodref>
        <methodref name="InheritsFrom" visibility="public">
        </methodref>
        <methodref name="MethodAddress" visibility="public">
        </methodref>
        <methodref name="MethodName" visibility="public">
        </methodref>
        <methodref name="FieldAddress" visibility="public">
        </methodref>
        <methodref name="GetInterface" visibility="public">
        </methodref>
        <methodref name="GetInterfaceEntry" visibility="public">
        </methodref>
        <methodref name="GetInterfaceTable" visibility="public">
        </methodref>
        <methodref name="SafeCallException" visibility="public">
        </methodref>
        <methodref name="AfterConstruction" visibility="public">
        </methodref>
        <methodref name="BeforeDestruction" visibility="public">
        </methodref>
        <methodref name="Dispatch" visibility="public">
        </methodref>
        <methodref name="DefaultHandler" visibility="public">
        </methodref>
        <methodref name="NewInstance" visibility="public">
        </methodref>
        <methodref name="FreeInstance" visibility="public">
        </methodref>
        <methodref name="Destroy" visibility="public">
        </methodref>
      </ancestor>
    </ancestor>
    <members>
      <field name="FValue" type="Integer" visibility="private" />
      <procedure name="InternalWriteTo" visibility="public" procflags="override">
        <parameters>
          <parameter name="W" type="TPdfWrite" paramflags="var" />
        </parameters>
      </procedure>
      <constructor name="Create" visibility="public">
        <parameters>
          <parameter name="AValue" type="Integer" />
        </parameters>
      </constructor>
      <property name="Value" visibility="public" read="FValue" write="FValue" type="Integer" />
    </members>
  </class>
  <class name="TPdfReal">
    <devnotes>
       a PDF object, storing a numerical (floating point) value
    </devnotes>
    <ancestor name="TPdfObject" namespace="SynPdf">
      <methodref name="InternalWriteTo" visibility="public" />
      <methodref name="SetObjectNumber" visibility="protected" />
      <methodref name="Create" visibility="public">
        <devnotes>
           create the PDF object instance
        </devnotes>
      </methodref>
      <methodref name="WriteTo" visibility="public">
        <devnotes>
           Write object to specified stream
        </devnotes>
      </methodref>
      <methodref name="WriteValueTo" visibility="public">
        <devnotes>
           write indirect object to specified stream
        </devnotes>
      </methodref>
      <propertyref name="ObjectNumber" visibility="public">
        <devnotes>
           the associated PDF Object Number
        </devnotes>
      </propertyref>
      <propertyref name="GenerationNumber" visibility="public">
        <devnotes>
           the associated PDF Generation Number
        </devnotes>
      </propertyref>
      <propertyref name="ObjectType" visibility="public">
        <devnotes>
           the corresponding type of this PDF object
        </devnotes>
      </propertyref>
      <ancestor name="TObject" namespace="System">
        <methodref name="Create" visibility="public">
        </methodref>
        <methodref name="Free" visibility="public">
        </methodref>
        <methodref name="InitInstance" visibility="public">
        </methodref>
        <methodref name="CleanupInstance" visibility="public">
        </methodref>
        <methodref name="ClassType" visibility="public">
        </methodref>
        <methodref name="ClassName" visibility="public">
        </methodref>
        <methodref name="ClassNameIs" visibility="public">
        </methodref>
        <methodref name="ClassParent" visibility="public">
        </methodref>
        <methodref name="ClassInfo" visibility="public">
        </methodref>
        <methodref name="InstanceSize" visibility="public">
        </methodref>
        <methodref name="InheritsFrom" visibility="public">
        </methodref>
        <methodref name="MethodAddress" visibility="public">
        </methodref>
        <methodref name="MethodName" visibility="public">
        </methodref>
        <methodref name="FieldAddress" visibility="public">
        </methodref>
        <methodref name="GetInterface" visibility="public">
        </methodref>
        <methodref name="GetInterfaceEntry" visibility="public">
        </methodref>
        <methodref name="GetInterfaceTable" visibility="public">
        </methodref>
        <methodref name="SafeCallException" visibility="public">
        </methodref>
        <methodref name="AfterConstruction" visibility="public">
        </methodref>
        <methodref name="BeforeDestruction" visibility="public">
        </methodref>
        <methodref name="Dispatch" visibility="public">
        </methodref>
        <methodref name="DefaultHandler" visibility="public">
        </methodref>
        <methodref name="NewInstance" visibility="public">
        </methodref>
        <methodref name="FreeInstance" visibility="public">
        </methodref>
        <methodref name="Destroy" visibility="public">
        </methodref>
      </ancestor>
    </ancestor>
    <members>
      <field name="FValue" type="Double" visibility="private" />
      <procedure name="InternalWriteTo" visibility="public" procflags="override">
        <parameters>
          <parameter name="W" type="TPdfWrite" paramflags="var" />
        </parameters>
      </procedure>
      <constructor name="Create" visibility="public">
        <parameters>
          <parameter name="AValue" type="Double" />
        </parameters>
      </constructor>
      <property name="Value" visibility="public" read="FValue" write="FValue" type="Double" />
    </members>
  </class>
  <class name="TPdfText">
    <devnotes>
       a PDF object, storing a textual value
    </devnotes>
    <ancestor name="TPdfObject" namespace="SynPdf">
      <methodref name="InternalWriteTo" visibility="public" />
      <methodref name="SetObjectNumber" visibility="protected" />
      <methodref name="Create" visibility="public">
        <devnotes>
           create the PDF object instance
        </devnotes>
      </methodref>
      <methodref name="WriteTo" visibility="public">
        <devnotes>
           Write object to specified stream
        </devnotes>
      </methodref>
      <methodref name="WriteValueTo" visibility="public">
        <devnotes>
           write indirect object to specified stream
        </devnotes>
      </methodref>
      <propertyref name="ObjectNumber" visibility="public">
        <devnotes>
           the associated PDF Object Number
        </devnotes>
      </propertyref>
      <propertyref name="GenerationNumber" visibility="public">
        <devnotes>
           the associated PDF Generation Number
        </devnotes>
      </propertyref>
      <propertyref name="ObjectType" visibility="public">
        <devnotes>
           the corresponding type of this PDF object
        </devnotes>
      </propertyref>
      <ancestor name="TObject" namespace="System">
        <methodref name="Create" visibility="public">
        </methodref>
        <methodref name="Free" visibility="public">
        </methodref>
        <methodref name="InitInstance" visibility="public">
        </methodref>
        <methodref name="CleanupInstance" visibility="public">
        </methodref>
        <methodref name="ClassType" visibility="public">
        </methodref>
        <methodref name="ClassName" visibility="public">
        </methodref>
        <methodref name="ClassNameIs" visibility="public">
        </methodref>
        <methodref name="ClassParent" visibility="public">
        </methodref>
        <methodref name="ClassInfo" visibility="public">
        </methodref>
        <methodref name="InstanceSize" visibility="public">
        </methodref>
        <methodref name="InheritsFrom" visibility="public">
        </methodref>
        <methodref name="MethodAddress" visibility="public">
        </methodref>
        <methodref name="MethodName" visibility="public">
        </methodref>
        <methodref name="FieldAddress" visibility="public">
        </methodref>
        <methodref name="GetInterface" visibility="public">
        </methodref>
        <methodref name="GetInterfaceEntry" visibility="public">
        </methodref>
        <methodref name="GetInterfaceTable" visibility="public">
        </methodref>
        <methodref name="SafeCallException" visibility="public">
        </methodref>
        <methodref name="AfterConstruction" visibility="public">
        </methodref>
        <methodref name="BeforeDestruction" visibility="public">
        </methodref>
        <methodref name="Dispatch" visibility="public">
        </methodref>
        <methodref name="DefaultHandler" visibility="public">
        </methodref>
        <methodref name="NewInstance" visibility="public">
        </methodref>
        <methodref name="FreeInstance" visibility="public">
        </methodref>
        <methodref name="Destroy" visibility="public">
        </methodref>
      </ancestor>
    </ancestor>
    <members>
      <field name="FValue" type="string" visibility="private" />
      <procedure name="InternalWriteTo" visibility="public" procflags="override">
        <parameters>
          <parameter name="W" type="TPdfWrite" paramflags="var" />
        </parameters>
      </procedure>
      <constructor name="Create" visibility="public">
        <parameters>
          <parameter name="AValue" type="string" paramflags="const" />
        </parameters>
      </constructor>
      <property name="Value" visibility="public" read="FValue" write="FValue" type="string" />
    </members>
  </class>
  <class name="TPdfTextUTF8">
    <devnotes>
       a PDF object, storing a textual value
    </devnotes>
    <ancestor name="TPdfObject" namespace="SynPdf">
      <methodref name="InternalWriteTo" visibility="public" />
      <methodref name="SetObjectNumber" visibility="protected" />
      <methodref name="Create" visibility="public">
        <devnotes>
           create the PDF object instance
        </devnotes>
      </methodref>
      <methodref name="WriteTo" visibility="public">
        <devnotes>
           Write object to specified stream
        </devnotes>
      </methodref>
      <methodref name="WriteValueTo" visibility="public">
        <devnotes>
           write indirect object to specified stream
        </devnotes>
      </methodref>
      <propertyref name="ObjectNumber" visibility="public">
        <devnotes>
           the associated PDF Object Number
        </devnotes>
      </propertyref>
      <propertyref name="GenerationNumber" visibility="public">
        <devnotes>
           the associated PDF Generation Number
        </devnotes>
      </propertyref>
      <propertyref name="ObjectType" visibility="public">
        <devnotes>
           the corresponding type of this PDF object
        </devnotes>
      </propertyref>
      <ancestor name="TObject" namespace="System">
        <methodref name="Create" visibility="public">
        </methodref>
        <methodref name="Free" visibility="public">
        </methodref>
        <methodref name="InitInstance" visibility="public">
        </methodref>
        <methodref name="CleanupInstance" visibility="public">
        </methodref>
        <methodref name="ClassType" visibility="public">
        </methodref>
        <methodref name="ClassName" visibility="public">
        </methodref>
        <methodref name="ClassNameIs" visibility="public">
        </methodref>
        <methodref name="ClassParent" visibility="public">
        </methodref>
        <methodref name="ClassInfo" visibility="public">
        </methodref>
        <methodref name="InstanceSize" visibility="public">
        </methodref>
        <methodref name="InheritsFrom" visibility="public">
        </methodref>
        <methodref name="MethodAddress" visibility="public">
        </methodref>
        <methodref name="MethodName" visibility="public">
        </methodref>
        <methodref name="FieldAddress" visibility="public">
        </methodref>
        <methodref name="GetInterface" visibility="public">
        </methodref>
        <methodref name="GetInterfaceEntry" visibility="public">
        </methodref>
        <methodref name="GetInterfaceTable" visibility="public">
        </methodref>
        <methodref name="SafeCallException" visibility="public">
        </methodref>
        <methodref name="AfterConstruction" visibility="public">
        </methodref>
        <methodref name="BeforeDestruction" visibility="public">
        </methodref>
        <methodref name="Dispatch" visibility="public">
        </methodref>
        <methodref name="DefaultHandler" visibility="public">
        </methodref>
        <methodref name="NewInstance" visibility="public">
        </methodref>
        <methodref name="FreeInstance" visibility="public">
        </methodref>
        <methodref name="Destroy" visibility="public">
        </methodref>
      </ancestor>
    </ancestor>
    <members>
      <field name="FValue" type="RawUTF8" visibility="private" />
      <procedure name="InternalWriteTo" visibility="public" procflags="override">
        <parameters>
          <parameter name="W" type="TPdfWrite" paramflags="var" />
        </parameters>
      </procedure>
      <constructor name="Create" visibility="public">
        <parameters>
          <parameter name="AValue" type="RawUTF8" paramflags="const" />
        </parameters>
      </constructor>
      <property name="Value" visibility="public" read="FValue" write="FValue" type="RawUTF8" />
    </members>
  </class>
  <class name="TPdfTextString">
    <devnotes>
       a PDF object, storing a textual value
    </devnotes>
    <ancestor name="TPdfTextUTF8" namespace="SynPdf">
      <methodref name="InternalWriteTo" visibility="public" />
      <methodref name="Create" visibility="public" />
      <propertyref name="Value" visibility="public" />
      <ancestor name="TPdfObject" namespace="SynPdf">
        <methodref name="InternalWriteTo" visibility="public" />
        <methodref name="SetObjectNumber" visibility="protected" />
        <methodref name="Create" visibility="public">
          <devnotes>
             create the PDF object instance
          </devnotes>
        </methodref>
        <methodref name="WriteTo" visibility="public">
          <devnotes>
             Write object to specified stream
          </devnotes>
        </methodref>
        <methodref name="WriteValueTo" visibility="public">
          <devnotes>
             write indirect object to specified stream
          </devnotes>
        </methodref>
        <propertyref name="ObjectNumber" visibility="public">
          <devnotes>
             the associated PDF Object Number
          </devnotes>
        </propertyref>
        <propertyref name="GenerationNumber" visibility="public">
          <devnotes>
             the associated PDF Generation Number
          </devnotes>
        </propertyref>
        <propertyref name="ObjectType" visibility="public">
          <devnotes>
             the corresponding type of this PDF object
          </devnotes>
        </propertyref>
        <ancestor name="TObject" namespace="System">
          <methodref name="Create" visibility="public">
          </methodref>
          <methodref name="Free" visibility="public">
          </methodref>
          <methodref name="InitInstance" visibility="public">
          </methodref>
          <methodref name="CleanupInstance" visibility="public">
          </methodref>
          <methodref name="ClassType" visibility="public">
          </methodref>
          <methodref name="ClassName" visibility="public">
          </methodref>
          <methodref name="ClassNameIs" visibility="public">
          </methodref>
          <methodref name="ClassParent" visibility="public">
          </methodref>
          <methodref name="ClassInfo" visibility="public">
          </methodref>
          <methodref name="InstanceSize" visibility="public">
          </methodref>
          <methodref name="InheritsFrom" visibility="public">
          </methodref>
          <methodref name="MethodAddress" visibility="public">
          </methodref>
          <methodref name="MethodName" visibility="public">
          </methodref>
          <methodref name="FieldAddress" visibility="public">
          </methodref>
          <methodref name="GetInterface" visibility="public">
          </methodref>
          <methodref name="GetInterfaceEntry" visibility="public">
          </methodref>
          <methodref name="GetInterfaceTable" visibility="public">
          </methodref>
          <methodref name="SafeCallException" visibility="public">
          </methodref>
          <methodref name="AfterConstruction" visibility="public">
          </methodref>
          <methodref name="BeforeDestruction" visibility="public">
          </methodref>
          <methodref name="Dispatch" visibility="public">
          </methodref>
          <methodref name="DefaultHandler" visibility="public">
          </methodref>
          <methodref name="NewInstance" visibility="public">
          </methodref>
          <methodref name="FreeInstance" visibility="public">
          </methodref>
          <methodref name="Destroy" visibility="public">
          </methodref>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <function name="GetValue" visibility="private">
        <parameters>
          <retval type="string" />
        </parameters>
      </function>
      <procedure name="SetValue" visibility="private">
        <parameters>
          <parameter name="Value" type="string" paramflags="const" />
        </parameters>
      </procedure>
      <constructor name="Create" visibility="public">
        <parameters>
          <parameter name="AValue" type="string" paramflags="const" />
        </parameters>
      </constructor>
      <property name="Value" visibility="public" read="GetValue" write="SetValue" type="string" />
    </members>
  </class>
  <class name="TPdfRawText">
    <devnotes>
       a PDF object, storing a raw PDF content
    </devnotes>
    <ancestor name="TPdfText" namespace="SynPdf">
      <methodref name="InternalWriteTo" visibility="public" />
      <methodref name="Create" visibility="public" />
      <propertyref name="Value" visibility="public" />
      <ancestor name="TPdfObject" namespace="SynPdf">
        <methodref name="InternalWriteTo" visibility="public" />
        <methodref name="SetObjectNumber" visibility="protected" />
        <methodref name="Create" visibility="public">
          <devnotes>
             create the PDF object instance
          </devnotes>
        </methodref>
        <methodref name="WriteTo" visibility="public">
          <devnotes>
             Write object to specified stream
          </devnotes>
        </methodref>
        <methodref name="WriteValueTo" visibility="public">
          <devnotes>
             write indirect object to specified stream
          </devnotes>
        </methodref>
        <propertyref name="ObjectNumber" visibility="public">
          <devnotes>
             the associated PDF Object Number
          </devnotes>
        </propertyref>
        <propertyref name="GenerationNumber" visibility="public">
          <devnotes>
             the associated PDF Generation Number
          </devnotes>
        </propertyref>
        <propertyref name="ObjectType" visibility="public">
          <devnotes>
             the corresponding type of this PDF object
          </devnotes>
        </propertyref>
        <ancestor name="TObject" namespace="System">
          <methodref name="Create" visibility="public">
          </methodref>
          <methodref name="Free" visibility="public">
          </methodref>
          <methodref name="InitInstance" visibility="public">
          </methodref>
          <methodref name="CleanupInstance" visibility="public">
          </methodref>
          <methodref name="ClassType" visibility="public">
          </methodref>
          <methodref name="ClassName" visibility="public">
          </methodref>
          <methodref name="ClassNameIs" visibility="public">
          </methodref>
          <methodref name="ClassParent" visibility="public">
          </methodref>
          <methodref name="ClassInfo" visibility="public">
          </methodref>
          <methodref name="InstanceSize" visibility="public">
          </methodref>
          <methodref name="InheritsFrom" visibility="public">
          </methodref>
          <methodref name="MethodAddress" visibility="public">
          </methodref>
          <methodref name="MethodName" visibility="public">
          </methodref>
          <methodref name="FieldAddress" visibility="public">
          </methodref>
          <methodref name="GetInterface" visibility="public">
          </methodref>
          <methodref name="GetInterfaceEntry" visibility="public">
          </methodref>
          <methodref name="GetInterfaceTable" visibility="public">
          </methodref>
          <methodref name="SafeCallException" visibility="public">
          </methodref>
          <methodref name="AfterConstruction" visibility="public">
          </methodref>
          <methodref name="BeforeDestruction" visibility="public">
          </methodref>
          <methodref name="Dispatch" visibility="public">
          </methodref>
          <methodref name="DefaultHandler" visibility="public">
          </methodref>
          <methodref name="NewInstance" visibility="public">
          </methodref>
          <methodref name="FreeInstance" visibility="public">
          </methodref>
          <methodref name="Destroy" visibility="public">
          </methodref>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <procedure name="InternalWriteTo" visibility="public" procflags="override">
        <parameters>
          <parameter name="W" type="TPdfWrite" paramflags="var" />
        </parameters>
      </procedure>
      <constructor name="CreateFmt" visibility="public">
        <devnotes>
           simple creator, replacing every %% in Fmt by the corresponding Args[]
        </devnotes>
        <parameters>
          <parameter name="Fmt" type="PAnsiChar" />
          <parameter name="Args" paramflags="const">
            <array name="Args">
              <element type="Integer" />
            </array>
          </parameter>
        </parameters>
      </constructor>
    </members>
  </class>
  <class name="TPdfName">
    <devnotes>
       a PDF object, storing a PDF name
    </devnotes>
    <ancestor name="TPdfText" namespace="SynPdf">
      <methodref name="InternalWriteTo" visibility="public" />
      <methodref name="Create" visibility="public" />
      <propertyref name="Value" visibility="public" />
      <ancestor name="TPdfObject" namespace="SynPdf">
        <methodref name="InternalWriteTo" visibility="public" />
        <methodref name="SetObjectNumber" visibility="protected" />
        <methodref name="Create" visibility="public">
          <devnotes>
             create the PDF object instance
          </devnotes>
        </methodref>
        <methodref name="WriteTo" visibility="public">
          <devnotes>
             Write object to specified stream
          </devnotes>
        </methodref>
        <methodref name="WriteValueTo" visibility="public">
          <devnotes>
             write indirect object to specified stream
          </devnotes>
        </methodref>
        <propertyref name="ObjectNumber" visibility="public">
          <devnotes>
             the associated PDF Object Number
          </devnotes>
        </propertyref>
        <propertyref name="GenerationNumber" visibility="public">
          <devnotes>
             the associated PDF Generation Number
          </devnotes>
        </propertyref>
        <propertyref name="ObjectType" visibility="public">
          <devnotes>
             the corresponding type of this PDF object
          </devnotes>
        </propertyref>
        <ancestor name="TObject" namespace="System">
          <methodref name="Create" visibility="public">
          </methodref>
          <methodref name="Free" visibility="public">
          </methodref>
          <methodref name="InitInstance" visibility="public">
          </methodref>
          <methodref name="CleanupInstance" visibility="public">
          </methodref>
          <methodref name="ClassType" visibility="public">
          </methodref>
          <methodref name="ClassName" visibility="public">
          </methodref>
          <methodref name="ClassNameIs" visibility="public">
          </methodref>
          <methodref name="ClassParent" visibility="public">
          </methodref>
          <methodref name="ClassInfo" visibility="public">
          </methodref>
          <methodref name="InstanceSize" visibility="public">
          </methodref>
          <methodref name="InheritsFrom" visibility="public">
          </methodref>
          <methodref name="MethodAddress" visibility="public">
          </methodref>
          <methodref name="MethodName" visibility="public">
          </methodref>
          <methodref name="FieldAddress" visibility="public">
          </methodref>
          <methodref name="GetInterface" visibility="public">
          </methodref>
          <methodref name="GetInterfaceEntry" visibility="public">
          </methodref>
          <methodref name="GetInterfaceTable" visibility="public">
          </methodref>
          <methodref name="SafeCallException" visibility="public">
          </methodref>
          <methodref name="AfterConstruction" visibility="public">
          </methodref>
          <methodref name="BeforeDestruction" visibility="public">
          </methodref>
          <methodref name="Dispatch" visibility="public">
          </methodref>
          <methodref name="DefaultHandler" visibility="public">
          </methodref>
          <methodref name="NewInstance" visibility="public">
          </methodref>
          <methodref name="FreeInstance" visibility="public">
          </methodref>
          <methodref name="Destroy" visibility="public">
          </methodref>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <procedure name="InternalWriteTo" visibility="public" procflags="override">
        <parameters>
          <parameter name="W" type="TPdfWrite" paramflags="var" />
        </parameters>
      </procedure>
    </members>
  </class>
  <class name="TPdfArray">
    <devnotes>
       used to store an array of PDF objects
    </devnotes>
    <ancestor name="TPdfObject" namespace="SynPdf">
      <methodref name="InternalWriteTo" visibility="public" />
      <methodref name="SetObjectNumber" visibility="protected" />
      <methodref name="Create" visibility="public">
        <devnotes>
           create the PDF object instance
        </devnotes>
      </methodref>
      <methodref name="WriteTo" visibility="public">
        <devnotes>
           Write object to specified stream
        </devnotes>
      </methodref>
      <methodref name="WriteValueTo" visibility="public">
        <devnotes>
           write indirect object to specified stream
        </devnotes>
      </methodref>
      <propertyref name="ObjectNumber" visibility="public">
        <devnotes>
           the associated PDF Object Number
        </devnotes>
      </propertyref>
      <propertyref name="GenerationNumber" visibility="public">
        <devnotes>
           the associated PDF Generation Number
        </devnotes>
      </propertyref>
      <propertyref name="ObjectType" visibility="public">
        <devnotes>
           the corresponding type of this PDF object
        </devnotes>
      </propertyref>
      <ancestor name="TObject" namespace="System">
        <methodref name="Create" visibility="public">
        </methodref>
        <methodref name="Free" visibility="public">
        </methodref>
        <methodref name="InitInstance" visibility="public">
        </methodref>
        <methodref name="CleanupInstance" visibility="public">
        </methodref>
        <methodref name="ClassType" visibility="public">
        </methodref>
        <methodref name="ClassName" visibility="public">
        </methodref>
        <methodref name="ClassNameIs" visibility="public">
        </methodref>
        <methodref name="ClassParent" visibility="public">
        </methodref>
        <methodref name="ClassInfo" visibility="public">
        </methodref>
        <methodref name="InstanceSize" visibility="public">
        </methodref>
        <methodref name="InheritsFrom" visibility="public">
        </methodref>
        <methodref name="MethodAddress" visibility="public">
        </methodref>
        <methodref name="MethodName" visibility="public">
        </methodref>
        <methodref name="FieldAddress" visibility="public">
        </methodref>
        <methodref name="GetInterface" visibility="public">
        </methodref>
        <methodref name="GetInterfaceEntry" visibility="public">
        </methodref>
        <methodref name="GetInterfaceTable" visibility="public">
        </methodref>
        <methodref name="SafeCallException" visibility="public">
        </methodref>
        <methodref name="AfterConstruction" visibility="public">
        </methodref>
        <methodref name="BeforeDestruction" visibility="public">
        </methodref>
        <methodref name="Dispatch" visibility="public">
        </methodref>
        <methodref name="DefaultHandler" visibility="public">
        </methodref>
        <methodref name="NewInstance" visibility="public">
        </methodref>
        <methodref name="FreeInstance" visibility="public">
        </methodref>
        <methodref name="Destroy" visibility="public">
        </methodref>
      </ancestor>
    </ancestor>
    <members>
      <field name="FArray" type="TList" visibility="private" />
      <field name="FObjectMgr" type="TPdfObjectMgr" visibility="private" />
      <function name="GetItems" visibility="private">
        <parameters>
          <parameter name="Index" type="Integer" />
          <retval type="TPdfObject">
            <devnotes>
               master class for most PDF objects declaration
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="GetItemCount" visibility="private">
        <parameters>
          <retval type="Integer" />
        </parameters>
      </function>
      <procedure name="InternalWriteTo" visibility="public" procflags="override">
        <parameters>
          <parameter name="W" type="TPdfWrite" paramflags="var" />
        </parameters>
      </procedure>
      <constructor name="Create" visibility="public">
        <devnotes>
           create an array of PDF objects
        </devnotes>
        <parameters>
          <parameter name="AObjectMgr" type="TPdfObjectMgr" />
        </parameters>
      </constructor>
      <constructor name="Create" visibility="public">
        <devnotes>
           create an array of PDF objects, with some specified TPdfNumber values
        </devnotes>
        <parameters>
          <parameter name="AObjectMgr" type="TPdfObjectMgr" />
          <parameter name="AArray" paramflags="const">
            <array name="AArray">
              <element type="Integer" />
            </array>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="Create" visibility="public">
        <devnotes>
           create an array of PDF objects, with some specified TPdfNumber values
        </devnotes>
        <parameters>
          <parameter name="AObjectMgr" type="TPdfObjectMgr" />
          <parameter name="AArray" type="PWordArray" />
          <parameter name="AArrayCount" type="Integer" />
        </parameters>
      </constructor>
      <constructor name="CreateNames" visibility="public">
        <devnotes>
           create an array of PDF objects, with some specified TPdfName values
        </devnotes>
        <parameters>
          <parameter name="AObjectMgr" type="TPdfObjectMgr" />
          <parameter name="AArray" paramflags="const">
            <array name="AArray">
              <element type="string" />
            </array>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="CreateReals" visibility="public">
        <devnotes>
           create an array of PDF objects, with some specified TPdfReal values
        </devnotes>
        <parameters>
          <parameter name="AObjectMgr" type="TPdfObjectMgr" />
          <parameter name="AArray" paramflags="const">
            <array name="AArray">
              <element type="Double" />
            </array>
          </parameter>
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public">
        <devnotes>
           release the instance memory, and all embedded objects instances
        </devnotes>
        <parameters>
        </parameters>
      </destructor>
      <function name="AddItem" visibility="public">
        <devnotes>
           Add a PDF object to the array
        </devnotes>
        <parameters>
          <parameter name="AItem" type="TPdfObject" />
          <retval type="Integer" />
        </parameters>
      </function>
      <function name="FindName" visibility="public">
        <devnotes>
           retrieve a TPDFName object stored in the array
        </devnotes>
        <parameters>
          <parameter name="AName" type="string" paramflags="const" />
          <retval type="TPdfName">
            <devnotes>
               a PDF object, storing a PDF name
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="RemoveName" visibility="public">
        <devnotes>
           remove a specified TPDFName object stored in the array
        </devnotes>
        <parameters>
          <parameter name="AName" type="string" paramflags="const" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <property name="Items" visibility="public" read="GetItems" type="TPdfObject">
        <devnotes>
           retrieve an object instance, stored in the array
        </devnotes>
      </property>
      <property name="ItemCount" visibility="public" read="GetItemCount" type="Integer">
        <devnotes>
           retrieve the array size
        </devnotes>
      </property>
      <property name="ObjectMgr" visibility="public" read="FObjectMgr" type="TPdfObjectMgr">
        <devnotes>
           the associated PDF Object Manager
        </devnotes>
      </property>
      <property name="List" visibility="public" read="FArray" type="TList">
        <devnotes>
           direct access to the internal TList instance
        </devnotes>
      </property>
    </members>
  </class>
  <class name="TPdfDictionaryElement">
    <devnotes>
       PDF dictionary element definition
    </devnotes>
    <ancestor name="TObject" namespace="System">
      <methodref name="Create" visibility="public">
      </methodref>
      <methodref name="Free" visibility="public">
      </methodref>
      <methodref name="InitInstance" visibility="public">
      </methodref>
      <methodref name="CleanupInstance" visibility="public">
      </methodref>
      <methodref name="ClassType" visibility="public">
      </methodref>
      <methodref name="ClassName" visibility="public">
      </methodref>
      <methodref name="ClassNameIs" visibility="public">
      </methodref>
      <methodref name="ClassParent" visibility="public">
      </methodref>
      <methodref name="ClassInfo" visibility="public">
      </methodref>
      <methodref name="InstanceSize" visibility="public">
      </methodref>
      <methodref name="InheritsFrom" visibility="public">
      </methodref>
      <methodref name="MethodAddress" visibility="public">
      </methodref>
      <methodref name="MethodName" visibility="public">
      </methodref>
      <methodref name="FieldAddress" visibility="public">
      </methodref>
      <methodref name="GetInterface" visibility="public">
      </methodref>
      <methodref name="GetInterfaceEntry" visibility="public">
      </methodref>
      <methodref name="GetInterfaceTable" visibility="public">
      </methodref>
      <methodref name="SafeCallException" visibility="public">
      </methodref>
      <methodref name="AfterConstruction" visibility="public">
      </methodref>
      <methodref name="BeforeDestruction" visibility="public">
      </methodref>
      <methodref name="Dispatch" visibility="public">
      </methodref>
      <methodref name="DefaultHandler" visibility="public">
      </methodref>
      <methodref name="NewInstance" visibility="public">
      </methodref>
      <methodref name="FreeInstance" visibility="public">
      </methodref>
      <methodref name="Destroy" visibility="public">
      </methodref>
    </ancestor>
    <members>
      <field name="FKey" type="TPdfName" visibility="private" />
      <field name="FValue" type="TPdfObject" visibility="private" />
      <field name="FIsInternal" type="Boolean" visibility="private" />
      <function name="GetKey" visibility="private">
        <parameters>
          <retval type="string" />
        </parameters>
      </function>
      <constructor name="Create" visibility="public">
        <devnotes>
           create the corresponding Key / Value pair
        </devnotes>
        <parameters>
          <parameter name="AKey" type="string" paramflags="const" />
          <parameter name="AValue" type="TPdfObject" />
          <parameter name="AInternal" type="Boolean">
            <value>
              False
            </value>
          </parameter>
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public">
        <devnotes>
           release the element instance, and both associated Key and Value
        </devnotes>
        <parameters>
        </parameters>
      </destructor>
      <property name="Key" visibility="public" read="GetKey" type="string">
        <devnotes>
           the associated Key Name
        </devnotes>
      </property>
      <property name="Value" visibility="public" read="FValue" type="TPdfObject">
        <devnotes>
           the associated Value stored in this element
        </devnotes>
      </property>
      <property name="IsInternal" visibility="public" read="FIsInternal" type="Boolean">
        <devnotes>
           if this element was created as internal, i.e. not to be saved to the PDF content
        </devnotes>
      </property>
    </members>
  </class>
  <class name="TPdfDictionary">
    <devnotes>
       a PDF Dictionay is used to manage Key / Value pairs
    </devnotes>
    <ancestor name="TPdfObject" namespace="SynPdf">
      <methodref name="InternalWriteTo" visibility="public" />
      <methodref name="SetObjectNumber" visibility="protected" />
      <methodref name="Create" visibility="public">
        <devnotes>
           create the PDF object instance
        </devnotes>
      </methodref>
      <methodref name="WriteTo" visibility="public">
        <devnotes>
           Write object to specified stream
        </devnotes>
      </methodref>
      <methodref name="WriteValueTo" visibility="public">
        <devnotes>
           write indirect object to specified stream
        </devnotes>
      </methodref>
      <propertyref name="ObjectNumber" visibility="public">
        <devnotes>
           the associated PDF Object Number
        </devnotes>
      </propertyref>
      <propertyref name="GenerationNumber" visibility="public">
        <devnotes>
           the associated PDF Generation Number
        </devnotes>
      </propertyref>
      <propertyref name="ObjectType" visibility="public">
        <devnotes>
           the corresponding type of this PDF object
        </devnotes>
      </propertyref>
      <ancestor name="TObject" namespace="System">
        <methodref name="Create" visibility="public">
        </methodref>
        <methodref name="Free" visibility="public">
        </methodref>
        <methodref name="InitInstance" visibility="public">
        </methodref>
        <methodref name="CleanupInstance" visibility="public">
        </methodref>
        <methodref name="ClassType" visibility="public">
        </methodref>
        <methodref name="ClassName" visibility="public">
        </methodref>
        <methodref name="ClassNameIs" visibility="public">
        </methodref>
        <methodref name="ClassParent" visibility="public">
        </methodref>
        <methodref name="ClassInfo" visibility="public">
        </methodref>
        <methodref name="InstanceSize" visibility="public">
        </methodref>
        <methodref name="InheritsFrom" visibility="public">
        </methodref>
        <methodref name="MethodAddress" visibility="public">
        </methodref>
        <methodref name="MethodName" visibility="public">
        </methodref>
        <methodref name="FieldAddress" visibility="public">
        </methodref>
        <methodref name="GetInterface" visibility="public">
        </methodref>
        <methodref name="GetInterfaceEntry" visibility="public">
        </methodref>
        <methodref name="GetInterfaceTable" visibility="public">
        </methodref>
        <methodref name="SafeCallException" visibility="public">
        </methodref>
        <methodref name="AfterConstruction" visibility="public">
        </methodref>
        <methodref name="BeforeDestruction" visibility="public">
        </methodref>
        <methodref name="Dispatch" visibility="public">
        </methodref>
        <methodref name="DefaultHandler" visibility="public">
        </methodref>
        <methodref name="NewInstance" visibility="public">
        </methodref>
        <methodref name="FreeInstance" visibility="public">
        </methodref>
        <methodref name="Destroy" visibility="public">
        </methodref>
      </ancestor>
    </ancestor>
    <members>
      <field name="FArray" type="TList" visibility="private" />
      <field name="FObjectMgr" type="TPdfObjectMgr" visibility="private" />
      <function name="GetItems" visibility="private">
        <parameters>
          <parameter name="Index" type="Integer" />
          <retval type="TPdfDictionaryElement">
            <devnotes>
               PDF dictionary element definition
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="GetItemCount" visibility="private">
        <parameters>
          <retval type="Integer" />
        </parameters>
      </function>
      <function name="getTypeOf" visibility="protected">
        <parameters>
          <retval type="string" />
        </parameters>
      </function>
      <procedure name="InternalWriteTo" visibility="public" procflags="override">
        <parameters>
          <parameter name="W" type="TPdfWrite" paramflags="var" />
        </parameters>
      </procedure>
      <constructor name="Create" visibility="public">
        <devnotes>
           create the PDF dictionary
        </devnotes>
        <parameters>
          <parameter name="AObjectMgr" type="TPdfObjectMgr" />
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public">
        <devnotes>
           release the dictionay instance, and all associated elements
        </devnotes>
        <parameters>
        </parameters>
      </destructor>
      <function name="ValueByName" visibility="public">
        <devnotes>
           fast find a value by its name
        </devnotes>
        <parameters>
          <parameter name="AKey" type="string" paramflags="const" />
          <retval type="TPdfObject">
            <devnotes>
               master class for most PDF objects declaration
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="PdfBooleanByName" visibility="public">
        <devnotes>
           fast find a boolean value by its name
        </devnotes>
        <parameters>
          <parameter name="AKey" type="string" paramflags="const" />
          <retval type="TPdfBoolean">
            <devnotes>
               a PDF object, storing a boolean value
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="PdfNumberByName" visibility="public">
        <devnotes>
           fast find a numerical (integer) value by its name
        </devnotes>
        <parameters>
          <parameter name="AKey" type="string" paramflags="const" />
          <retval type="TPdfNumber">
            <devnotes>
               a PDF object, storing a numerical (integer) value
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="PdfTextByName" visibility="public">
        <devnotes>
           fast find a textual value by its name
        </devnotes>
        <parameters>
          <parameter name="AKey" type="string" paramflags="const" />
          <retval type="TPdfText">
            <devnotes>
               a PDF object, storing a textual value
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="PdfTextValueByName" visibility="public">
        <devnotes>
           fast find a textual value by its name
        </devnotes>
        <parameters>
          <parameter name="AKey" type="string" paramflags="const" />
          <retval type="string" />
        </parameters>
      </function>
      <function name="PdfTextUTF8ValueByName" visibility="public">
        <devnotes>
           fast find a textual value by its name
        </devnotes>
        <parameters>
          <parameter name="AKey" type="string" paramflags="const" />
          <retval type="RawUTF8" />
        </parameters>
      </function>
      <function name="PdfTextStringValueByName" visibility="public">
        <devnotes>
           fast find a textual value by its name
        </devnotes>
        <parameters>
          <parameter name="AKey" type="string" paramflags="const" />
          <retval type="string" />
        </parameters>
      </function>
      <function name="PdfRealByName" visibility="public">
        <devnotes>
           fast find a numerical (floating-point) value by its name
        </devnotes>
        <parameters>
          <parameter name="AKey" type="string" paramflags="const" />
          <retval type="TPdfReal">
            <devnotes>
               a PDF object, storing a numerical (floating point) value
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="PdfNameByName" visibility="public">
        <devnotes>
           fast find a name value by its name
        </devnotes>
        <parameters>
          <parameter name="AKey" type="string" paramflags="const" />
          <retval type="TPdfName">
            <devnotes>
               a PDF object, storing a PDF name
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="PdfDictionaryByName" visibility="public">
        <devnotes>
           fast find a dictionary value by its name
        </devnotes>
        <parameters>
          <parameter name="AKey" type="string" paramflags="const" />
          <retval type="TPdfDictionary">
            <devnotes>
               a PDF Dictionay is used to manage Key / Value pairs
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="PdfArrayByName" visibility="public">
        <devnotes>
           fast find an array value by its name
        </devnotes>
        <parameters>
          <parameter name="AKey" type="string" paramflags="const" />
          <retval type="TPdfArray">
            <devnotes>
               used to store an array of PDF objects
            </devnotes>
          </retval>
        </parameters>
      </function>
      <procedure name="AddItem" visibility="public" procflags="overload">
        <devnotes>
           add a specified Key / Value pair to the dictionary
        </devnotes>
        <parameters>
          <parameter name="AKey" type="string" paramflags="const" />
          <parameter name="AValue" type="TPdfObject" />
          <parameter name="AInternal" type="Boolean">
            <value>
              False
            </value>
          </parameter>
        </parameters>
      </procedure>
      <procedure name="AddItem" visibility="public" procflags="overload">
        <devnotes>
           add a specified Key / Value pair (of type TPdfName) to the dictionary
        </devnotes>
        <parameters>
          <parameter name="AKey" type="string" paramflags="const" />
          <parameter name="AValue" type="string" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="AddItem" visibility="public" procflags="overload">
        <devnotes>
           add a specified Key / Value pair (of type TPdfNumber) to the dictionary
        </devnotes>
        <parameters>
          <parameter name="AKey" type="string" paramflags="const" />
          <parameter name="AValue" type="Integer" />
        </parameters>
      </procedure>
      <procedure name="AddItemText" visibility="public" procflags="overload">
        <devnotes>
           add a specified Key / Value pair (of type TPdfText) to the dictionary
        </devnotes>
        <parameters>
          <parameter name="AKey" type="string" paramflags="const" />
          <parameter name="AValue" type="string" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="AddItemTextUTF8" visibility="public" procflags="overload">
        <devnotes>
           add a specified Key / Value pair (of type TPdfTextUTF8) to the dictionary
        </devnotes>
        <parameters>
          <parameter name="AKey" type="string" paramflags="const" />
          <parameter name="AValue" type="RawUTF8" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="AddItemTextString" visibility="public" procflags="overload">
        <devnotes>
           add a specified Key / Value pair (of type TPdfTextUTF8) to the dictionary
        </devnotes>
        <parameters>
          <parameter name="AKey" type="string" paramflags="const" />
          <parameter name="AValue" type="string" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="RemoveItem" visibility="public">
        <devnotes>
           remove the element specified by its Key from the dictionary
        </devnotes>
        <parameters>
          <parameter name="AKey" type="string" paramflags="const" />
        </parameters>
      </procedure>
      <property name="Items" visibility="public" read="GetItems" type="TPdfDictionaryElement">
        <devnotes>
           retrieve any dictionary element
        </devnotes>
      </property>
      <property name="ItemCount" visibility="public" read="GetItemCount" type="Integer">
        <devnotes>
           retrieve the dictionary element count
        </devnotes>
      </property>
      <property name="ObjectMgr" visibility="public" read="FObjectMgr" type="TPdfObjectMgr">
        <devnotes>
           retrieve the associated Object Manager
        </devnotes>
      </property>
      <property name="TypeOf" visibility="public" read="getTypeOf" type="string">
        <devnotes>
           retrieve the type of the pdfdictionary object, i.e. the 'Type' property name
        </devnotes>
      </property>
      <property name="List" visibility="public" read="FArray" type="TList">
        <devnotes>
           direct access to the internal TList instance
        </devnotes>
      </property>
    </members>
  </class>
  <class name="TPdfStream">
    <devnotes>
       a temporary memory stream, to be stored into the PDF content
    </devnotes>
    <ancestor name="TPdfObject" namespace="SynPdf">
      <methodref name="InternalWriteTo" visibility="public" />
      <methodref name="SetObjectNumber" visibility="protected" />
      <methodref name="Create" visibility="public">
        <devnotes>
           create the PDF object instance
        </devnotes>
      </methodref>
      <methodref name="WriteTo" visibility="public">
        <devnotes>
           Write object to specified stream
        </devnotes>
      </methodref>
      <methodref name="WriteValueTo" visibility="public">
        <devnotes>
           write indirect object to specified stream
        </devnotes>
      </methodref>
      <propertyref name="ObjectNumber" visibility="public">
        <devnotes>
           the associated PDF Object Number
        </devnotes>
      </propertyref>
      <propertyref name="GenerationNumber" visibility="public">
        <devnotes>
           the associated PDF Generation Number
        </devnotes>
      </propertyref>
      <propertyref name="ObjectType" visibility="public">
        <devnotes>
           the corresponding type of this PDF object
        </devnotes>
      </propertyref>
      <ancestor name="TObject" namespace="System">
        <methodref name="Create" visibility="public">
        </methodref>
        <methodref name="Free" visibility="public">
        </methodref>
        <methodref name="InitInstance" visibility="public">
        </methodref>
        <methodref name="CleanupInstance" visibility="public">
        </methodref>
        <methodref name="ClassType" visibility="public">
        </methodref>
        <methodref name="ClassName" visibility="public">
        </methodref>
        <methodref name="ClassNameIs" visibility="public">
        </methodref>
        <methodref name="ClassParent" visibility="public">
        </methodref>
        <methodref name="ClassInfo" visibility="public">
        </methodref>
        <methodref name="InstanceSize" visibility="public">
        </methodref>
        <methodref name="InheritsFrom" visibility="public">
        </methodref>
        <methodref name="MethodAddress" visibility="public">
        </methodref>
        <methodref name="MethodName" visibility="public">
        </methodref>
        <methodref name="FieldAddress" visibility="public">
        </methodref>
        <methodref name="GetInterface" visibility="public">
        </methodref>
        <methodref name="GetInterfaceEntry" visibility="public">
        </methodref>
        <methodref name="GetInterfaceTable" visibility="public">
        </methodref>
        <methodref name="SafeCallException" visibility="public">
        </methodref>
        <methodref name="AfterConstruction" visibility="public">
        </methodref>
        <methodref name="BeforeDestruction" visibility="public">
        </methodref>
        <methodref name="Dispatch" visibility="public">
        </methodref>
        <methodref name="DefaultHandler" visibility="public">
        </methodref>
        <methodref name="NewInstance" visibility="public">
        </methodref>
        <methodref name="FreeInstance" visibility="public">
        </methodref>
        <methodref name="Destroy" visibility="public">
        </methodref>
      </ancestor>
    </ancestor>
    <members>
      <field name="FAttributes" type="TPdfDictionary" visibility="protected" />
      <field name="FFilter" type="TPdfArray" visibility="protected" />
      <field name="FWriter" type="TPdfWrite" visibility="protected" />
      <procedure name="InternalWriteTo" visibility="public" procflags="override">
        <parameters>
          <parameter name="W" type="TPdfWrite" paramflags="var" />
        </parameters>
      </procedure>
      <constructor name="Create" visibility="public">
        <devnotes>
           create the temporary memory stream
        </devnotes>
        <parameters>
          <parameter name="ADoc" type="TPdfDocument" />
          <parameter name="DontAddToFXref" type="Boolean">
            <value>
              False
            </value>
          </parameter>
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public">
        <devnotes>
           release the memory stream
        </devnotes>
        <parameters>
        </parameters>
      </destructor>
      <property name="Attributes" visibility="public" read="FAttributes" type="TPdfDictionary">
        <devnotes>
           retrieve the associated attributes, e.g. the stream Length
        </devnotes>
      </property>
      <property name="Writer" visibility="public" read="FWriter" type="TPdfWrite">
        <devnotes>
           retrieve the associated buffered writer
        </devnotes>
      </property>
      <property name="Filter" visibility="public" read="FFilter" type="TPdfArray">
        <devnotes>
           retrieve the associated filter
        </devnotes>
      </property>
    </members>
  </class>
  <class name="TPdfBinary">
    <devnotes>
       used to handle object which are not defined in this library
    </devnotes>
    <ancestor name="TPdfObject" namespace="SynPdf">
      <methodref name="InternalWriteTo" visibility="public" />
      <methodref name="SetObjectNumber" visibility="protected" />
      <methodref name="Create" visibility="public">
        <devnotes>
           create the PDF object instance
        </devnotes>
      </methodref>
      <methodref name="WriteTo" visibility="public">
        <devnotes>
           Write object to specified stream
        </devnotes>
      </methodref>
      <methodref name="WriteValueTo" visibility="public">
        <devnotes>
           write indirect object to specified stream
        </devnotes>
      </methodref>
      <propertyref name="ObjectNumber" visibility="public">
        <devnotes>
           the associated PDF Object Number
        </devnotes>
      </propertyref>
      <propertyref name="GenerationNumber" visibility="public">
        <devnotes>
           the associated PDF Generation Number
        </devnotes>
      </propertyref>
      <propertyref name="ObjectType" visibility="public">
        <devnotes>
           the corresponding type of this PDF object
        </devnotes>
      </propertyref>
      <ancestor name="TObject" namespace="System">
        <methodref name="Create" visibility="public">
        </methodref>
        <methodref name="Free" visibility="public">
        </methodref>
        <methodref name="InitInstance" visibility="public">
        </methodref>
        <methodref name="CleanupInstance" visibility="public">
        </methodref>
        <methodref name="ClassType" visibility="public">
        </methodref>
        <methodref name="ClassName" visibility="public">
        </methodref>
        <methodref name="ClassNameIs" visibility="public">
        </methodref>
        <methodref name="ClassParent" visibility="public">
        </methodref>
        <methodref name="ClassInfo" visibility="public">
        </methodref>
        <methodref name="InstanceSize" visibility="public">
        </methodref>
        <methodref name="InheritsFrom" visibility="public">
        </methodref>
        <methodref name="MethodAddress" visibility="public">
        </methodref>
        <methodref name="MethodName" visibility="public">
        </methodref>
        <methodref name="FieldAddress" visibility="public">
        </methodref>
        <methodref name="GetInterface" visibility="public">
        </methodref>
        <methodref name="GetInterfaceEntry" visibility="public">
        </methodref>
        <methodref name="GetInterfaceTable" visibility="public">
        </methodref>
        <methodref name="SafeCallException" visibility="public">
        </methodref>
        <methodref name="AfterConstruction" visibility="public">
        </methodref>
        <methodref name="BeforeDestruction" visibility="public">
        </methodref>
        <methodref name="Dispatch" visibility="public">
        </methodref>
        <methodref name="DefaultHandler" visibility="public">
        </methodref>
        <methodref name="NewInstance" visibility="public">
        </methodref>
        <methodref name="FreeInstance" visibility="public">
        </methodref>
        <methodref name="Destroy" visibility="public">
        </methodref>
      </ancestor>
    </ancestor>
    <members>
      <field name="FStream" type="TMemoryStream" visibility="private" />
      <procedure name="InternalWriteTo" visibility="public" procflags="override">
        <parameters>
          <parameter name="W" type="TPdfWrite" paramflags="var" />
        </parameters>
      </procedure>
      <constructor name="Create" visibility="public">
        <devnotes>
           create the instance, i.e. its associated stream
        </devnotes>
        <parameters>
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public">
        <devnotes>
           release the instance
        </devnotes>
        <parameters>
        </parameters>
      </destructor>
      <property name="Stream" visibility="public" read="FStream" type="TMemoryStream">
        <devnotes>
           the associated memory stream, used to store the corresponding data
        </devnotes>
      </property>
    </members>
  </class>
  <class name="TPdfTrailer">
    <devnotes>
       the Trailer of the PDF File
    </devnotes>
    <ancestor name="TObject" namespace="System">
      <methodref name="Create" visibility="public">
      </methodref>
      <methodref name="Free" visibility="public">
      </methodref>
      <methodref name="InitInstance" visibility="public">
      </methodref>
      <methodref name="CleanupInstance" visibility="public">
      </methodref>
      <methodref name="ClassType" visibility="public">
      </methodref>
      <methodref name="ClassName" visibility="public">
      </methodref>
      <methodref name="ClassNameIs" visibility="public">
      </methodref>
      <methodref name="ClassParent" visibility="public">
      </methodref>
      <methodref name="ClassInfo" visibility="public">
      </methodref>
      <methodref name="InstanceSize" visibility="public">
      </methodref>
      <methodref name="InheritsFrom" visibility="public">
      </methodref>
      <methodref name="MethodAddress" visibility="public">
      </methodref>
      <methodref name="MethodName" visibility="public">
      </methodref>
      <methodref name="FieldAddress" visibility="public">
      </methodref>
      <methodref name="GetInterface" visibility="public">
      </methodref>
      <methodref name="GetInterfaceEntry" visibility="public">
      </methodref>
      <methodref name="GetInterfaceTable" visibility="public">
      </methodref>
      <methodref name="SafeCallException" visibility="public">
      </methodref>
      <methodref name="AfterConstruction" visibility="public">
      </methodref>
      <methodref name="BeforeDestruction" visibility="public">
      </methodref>
      <methodref name="Dispatch" visibility="public">
      </methodref>
      <methodref name="DefaultHandler" visibility="public">
      </methodref>
      <methodref name="NewInstance" visibility="public">
      </methodref>
      <methodref name="FreeInstance" visibility="public">
      </methodref>
      <methodref name="Destroy" visibility="public">
      </methodref>
    </ancestor>
    <members>
      <field name="FAttributes" type="TPdfDictionary" visibility="private" />
      <field name="FXrefAddress" type="Integer" visibility="private" />
      <procedure name="WriteTo" visibility="protected">
        <parameters>
          <parameter name="W" type="TPdfWrite" paramflags="var" />
        </parameters>
      </procedure>
      <constructor name="Create" visibility="public">
        <parameters>
          <parameter name="AObjectMgr" type="TPdfObjectMgr" />
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public">
        <parameters>
        </parameters>
      </destructor>
      <property name="XrefAddress" visibility="public" read="FXrefAddress" write="FXrefAddress" type="Integer" />
      <property name="Attributes" visibility="public" read="FAttributes" type="TPdfDictionary" />
    </members>
  </class>
  <class name="TPdfXrefEntry">
    <devnotes>
       store one entry in the XRef list of the PDF file
    </devnotes>
    <ancestor name="TObject" namespace="System">
      <methodref name="Create" visibility="public">
      </methodref>
      <methodref name="Free" visibility="public">
      </methodref>
      <methodref name="InitInstance" visibility="public">
      </methodref>
      <methodref name="CleanupInstance" visibility="public">
      </methodref>
      <methodref name="ClassType" visibility="public">
      </methodref>
      <methodref name="ClassName" visibility="public">
      </methodref>
      <methodref name="ClassNameIs" visibility="public">
      </methodref>
      <methodref name="ClassParent" visibility="public">
      </methodref>
      <methodref name="ClassInfo" visibility="public">
      </methodref>
      <methodref name="InstanceSize" visibility="public">
      </methodref>
      <methodref name="InheritsFrom" visibility="public">
      </methodref>
      <methodref name="MethodAddress" visibility="public">
      </methodref>
      <methodref name="MethodName" visibility="public">
      </methodref>
      <methodref name="FieldAddress" visibility="public">
      </methodref>
      <methodref name="GetInterface" visibility="public">
      </methodref>
      <methodref name="GetInterfaceEntry" visibility="public">
      </methodref>
      <methodref name="GetInterfaceTable" visibility="public">
      </methodref>
      <methodref name="SafeCallException" visibility="public">
      </methodref>
      <methodref name="AfterConstruction" visibility="public">
      </methodref>
      <methodref name="BeforeDestruction" visibility="public">
      </methodref>
      <methodref name="Dispatch" visibility="public">
      </methodref>
      <methodref name="DefaultHandler" visibility="public">
      </methodref>
      <methodref name="NewInstance" visibility="public">
      </methodref>
      <methodref name="FreeInstance" visibility="public">
      </methodref>
      <methodref name="Destroy" visibility="public">
      </methodref>
    </ancestor>
    <members>
      <field name="FEntryType" type="string" visibility="private" />
      <field name="FByteOffset" type="Integer" visibility="private" />
      <field name="FGenerationNumber" type="Integer" visibility="private" />
      <field name="FValue" type="TPdfObject" visibility="private" />
      <constructor name="Create" visibility="public">
        <devnotes>
           create the entry, with the specified value
        </devnotes>
        <parameters>
          <parameter name="AValue" type="TPdfObject" />
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public">
        <devnotes>
           release the memory, and the associated value, if any
        </devnotes>
        <parameters>
        </parameters>
      </destructor>
      <procedure name="SaveToPdfWrite" visibility="public">
        <devnotes>
           write the XRef list entry
        </devnotes>
        <parameters>
          <parameter name="W" type="TPdfWrite" paramflags="var" />
        </parameters>
      </procedure>
      <property name="EntryType" visibility="public" read="FEntryType" write="FEntryType" type="string">
        <devnotes>
           return either 'f' (PDF_FREE_ENTRY), either 'n' (PDF_IN_USE_ENTRY)
        </devnotes>
      </property>
      <property name="ByteOffset" visibility="public" read="FByteOffset" type="Integer">
        <devnotes>
           the position (in bytes) in the PDF file content stream
        </devnotes>
      </property>
      <property name="GenerationNumber" visibility="public" read="FGenerationNumber" write="FGenerationNumber" type="Integer">
        <devnotes>
           the associated Generation Number
        </devnotes>
      </property>
      <property name="Value" visibility="public" read="FValue" type="TPdfObject">
        <devnotes>
           the associated PDF object 
        </devnotes>
      </property>
    </members>
  </class>
  <class name="TPdfXref">
    <devnotes>
       store the XRef list of the PDF file
    </devnotes>
    <ancestor name="TPdfObjectMgr" namespace="SynPdf">
      <methodref name="AddObject" visibility="public" />
      <methodref name="GetObject" visibility="public" />
      <ancestor name="TObject" namespace="System">
        <methodref name="Create" visibility="public">
        </methodref>
        <methodref name="Free" visibility="public">
        </methodref>
        <methodref name="InitInstance" visibility="public">
        </methodref>
        <methodref name="CleanupInstance" visibility="public">
        </methodref>
        <methodref name="ClassType" visibility="public">
        </methodref>
        <methodref name="ClassName" visibility="public">
        </methodref>
        <methodref name="ClassNameIs" visibility="public">
        </methodref>
        <methodref name="ClassParent" visibility="public">
        </methodref>
        <methodref name="ClassInfo" visibility="public">
        </methodref>
        <methodref name="InstanceSize" visibility="public">
        </methodref>
        <methodref name="InheritsFrom" visibility="public">
        </methodref>
        <methodref name="MethodAddress" visibility="public">
        </methodref>
        <methodref name="MethodName" visibility="public">
        </methodref>
        <methodref name="FieldAddress" visibility="public">
        </methodref>
        <methodref name="GetInterface" visibility="public">
        </methodref>
        <methodref name="GetInterfaceEntry" visibility="public">
        </methodref>
        <methodref name="GetInterfaceTable" visibility="public">
        </methodref>
        <methodref name="SafeCallException" visibility="public">
        </methodref>
        <methodref name="AfterConstruction" visibility="public">
        </methodref>
        <methodref name="BeforeDestruction" visibility="public">
        </methodref>
        <methodref name="Dispatch" visibility="public">
        </methodref>
        <methodref name="DefaultHandler" visibility="public">
        </methodref>
        <methodref name="NewInstance" visibility="public">
        </methodref>
        <methodref name="FreeInstance" visibility="public">
        </methodref>
        <methodref name="Destroy" visibility="public">
        </methodref>
      </ancestor>
    </ancestor>
    <members>
      <field name="FXrefEntries" type="TList" visibility="private" />
      <function name="GetItem" visibility="private">
        <parameters>
          <parameter name="ObjectID" type="Integer" />
          <retval type="TPdfXrefEntry">
            <devnotes>
               store one entry in the XRef list of the PDF file
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="GetItemCount" visibility="private">
        <parameters>
          <retval type="Integer" />
        </parameters>
      </function>
      <procedure name="WriteTo" visibility="protected">
        <parameters>
          <parameter name="W" type="TPdfWrite" paramflags="var" />
        </parameters>
      </procedure>
      <constructor name="Create" visibility="public">
        <devnotes>
           initialize the XRef object list
        </devnotes>
        <parameters>
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public">
        <devnotes>
           release instance memory and all associated XRef objects
        </devnotes>
        <parameters>
        </parameters>
      </destructor>
      <procedure name="AddObject" visibility="public" procflags="override">
        <devnotes>
           register object to the xref table, and set corresponding object ID
        </devnotes>
        <parameters>
          <parameter name="AObject" type="TPdfObject" />
        </parameters>
      </procedure>
      <function name="GetObject" visibility="public" procflags="override">
        <devnotes>
           retrieve an object from its object ID
        </devnotes>
        <parameters>
          <parameter name="ObjectID" type="Integer" />
          <retval type="TPdfObject">
            <devnotes>
               master class for most PDF objects declaration
            </devnotes>
          </retval>
        </parameters>
      </function>
      <property name="Items" visibility="public" read="GetItem" type="TPdfXrefEntry">
        <devnotes>
           retrieve a XRef object instance, from its object ID
        </devnotes>
      </property>
      <property name="ItemCount" visibility="public" read="GetItemCount" type="Integer">
        <devnotes>
           retrieve the XRef object count
        </devnotes>
      </property>
    </members>
  </class>
  <class name="TPdfXObject">
    <devnotes>
       any object stored to the PDF file
    </devnotes>
    <ancestor name="TPdfStream" namespace="SynPdf">
      <methodref name="InternalWriteTo" visibility="public" />
      <methodref name="Create" visibility="public">
        <devnotes>
           create the temporary memory stream
        </devnotes>
      </methodref>
      <methodref name="Destroy" visibility="public">
        <devnotes>
           release the memory stream
        </devnotes>
      </methodref>
      <propertyref name="Attributes" visibility="public">
        <devnotes>
           retrieve the associated attributes, e.g. the stream Length
        </devnotes>
      </propertyref>
      <propertyref name="Writer" visibility="public">
        <devnotes>
           retrieve the associated buffered writer
        </devnotes>
      </propertyref>
      <propertyref name="Filter" visibility="public">
        <devnotes>
           retrieve the associated filter
        </devnotes>
      </propertyref>
      <ancestor name="TPdfObject" namespace="SynPdf">
        <methodref name="InternalWriteTo" visibility="public" />
        <methodref name="SetObjectNumber" visibility="protected" />
        <methodref name="Create" visibility="public">
          <devnotes>
             create the PDF object instance
          </devnotes>
        </methodref>
        <methodref name="WriteTo" visibility="public">
          <devnotes>
             Write object to specified stream
          </devnotes>
        </methodref>
        <methodref name="WriteValueTo" visibility="public">
          <devnotes>
             write indirect object to specified stream
          </devnotes>
        </methodref>
        <propertyref name="ObjectNumber" visibility="public">
          <devnotes>
             the associated PDF Object Number
          </devnotes>
        </propertyref>
        <propertyref name="GenerationNumber" visibility="public">
          <devnotes>
             the associated PDF Generation Number
          </devnotes>
        </propertyref>
        <propertyref name="ObjectType" visibility="public">
          <devnotes>
             the corresponding type of this PDF object
          </devnotes>
        </propertyref>
        <ancestor name="TObject" namespace="System">
          <methodref name="Create" visibility="public">
          </methodref>
          <methodref name="Free" visibility="public">
          </methodref>
          <methodref name="InitInstance" visibility="public">
          </methodref>
          <methodref name="CleanupInstance" visibility="public">
          </methodref>
          <methodref name="ClassType" visibility="public">
          </methodref>
          <methodref name="ClassName" visibility="public">
          </methodref>
          <methodref name="ClassNameIs" visibility="public">
          </methodref>
          <methodref name="ClassParent" visibility="public">
          </methodref>
          <methodref name="ClassInfo" visibility="public">
          </methodref>
          <methodref name="InstanceSize" visibility="public">
          </methodref>
          <methodref name="InheritsFrom" visibility="public">
          </methodref>
          <methodref name="MethodAddress" visibility="public">
          </methodref>
          <methodref name="MethodName" visibility="public">
          </methodref>
          <methodref name="FieldAddress" visibility="public">
          </methodref>
          <methodref name="GetInterface" visibility="public">
          </methodref>
          <methodref name="GetInterfaceEntry" visibility="public">
          </methodref>
          <methodref name="GetInterfaceTable" visibility="public">
          </methodref>
          <methodref name="SafeCallException" visibility="public">
          </methodref>
          <methodref name="AfterConstruction" visibility="public">
          </methodref>
          <methodref name="BeforeDestruction" visibility="public">
          </methodref>
          <methodref name="Dispatch" visibility="public">
          </methodref>
          <methodref name="DefaultHandler" visibility="public">
          </methodref>
          <methodref name="NewInstance" visibility="public">
          </methodref>
          <methodref name="FreeInstance" visibility="public">
          </methodref>
          <methodref name="Destroy" visibility="public">
          </methodref>
        </ancestor>
      </ancestor>
    </ancestor>
  </class>
  <class name="TPdfOutlines">
    <devnotes>
       generic PDF Outlines entries, stored as a PDF dictionary
    </devnotes>
    <ancestor name="TPdfDictionary" namespace="SynPdf">
      <methodref name="GetItems" visibility="private" />
      <methodref name="GetItemCount" visibility="private" />
      <methodref name="getTypeOf" visibility="protected" />
      <methodref name="InternalWriteTo" visibility="public" />
      <methodref name="Create" visibility="public">
        <devnotes>
           create the PDF dictionary
        </devnotes>
      </methodref>
      <methodref name="Destroy" visibility="public">
        <devnotes>
           release the dictionay instance, and all associated elements
        </devnotes>
      </methodref>
      <methodref name="ValueByName" visibility="public">
        <devnotes>
           fast find a value by its name
        </devnotes>
      </methodref>
      <methodref name="PdfBooleanByName" visibility="public">
        <devnotes>
           fast find a boolean value by its name
        </devnotes>
      </methodref>
      <methodref name="PdfNumberByName" visibility="public">
        <devnotes>
           fast find a numerical (integer) value by its name
        </devnotes>
      </methodref>
      <methodref name="PdfTextByName" visibility="public">
        <devnotes>
           fast find a textual value by its name
        </devnotes>
      </methodref>
      <methodref name="PdfTextValueByName" visibility="public">
        <devnotes>
           fast find a textual value by its name
        </devnotes>
      </methodref>
      <methodref name="PdfTextUTF8ValueByName" visibility="public">
        <devnotes>
           fast find a textual value by its name
        </devnotes>
      </methodref>
      <methodref name="PdfTextStringValueByName" visibility="public">
        <devnotes>
           fast find a textual value by its name
        </devnotes>
      </methodref>
      <methodref name="PdfRealByName" visibility="public">
        <devnotes>
           fast find a numerical (floating-point) value by its name
        </devnotes>
      </methodref>
      <methodref name="PdfNameByName" visibility="public">
        <devnotes>
           fast find a name value by its name
        </devnotes>
      </methodref>
      <methodref name="PdfDictionaryByName" visibility="public">
        <devnotes>
           fast find a dictionary value by its name
        </devnotes>
      </methodref>
      <methodref name="PdfArrayByName" visibility="public">
        <devnotes>
           fast find an array value by its name
        </devnotes>
      </methodref>
      <methodref name="AddItem" visibility="public">
        <devnotes>
           add a specified Key / Value pair to the dictionary
        </devnotes>
      </methodref>
      <methodref name="AddItem" visibility="public">
        <devnotes>
           add a specified Key / Value pair (of type TPdfName) to the dictionary
        </devnotes>
      </methodref>
      <methodref name="AddItem" visibility="public">
        <devnotes>
           add a specified Key / Value pair (of type TPdfNumber) to the dictionary
        </devnotes>
      </methodref>
      <methodref name="AddItemText" visibility="public">
        <devnotes>
           add a specified Key / Value pair (of type TPdfText) to the dictionary
        </devnotes>
      </methodref>
      <methodref name="AddItemTextUTF8" visibility="public">
        <devnotes>
           add a specified Key / Value pair (of type TPdfTextUTF8) to the dictionary
        </devnotes>
      </methodref>
      <methodref name="AddItemTextString" visibility="public">
        <devnotes>
           add a specified Key / Value pair (of type TPdfTextUTF8) to the dictionary
        </devnotes>
      </methodref>
      <methodref name="RemoveItem" visibility="public">
        <devnotes>
           remove the element specified by its Key from the dictionary
        </devnotes>
      </methodref>
      <propertyref name="Items" visibility="public">
        <devnotes>
           retrieve any dictionary element
        </devnotes>
      </propertyref>
      <propertyref name="ItemCount" visibility="public">
        <devnotes>
           retrieve the dictionary element count
        </devnotes>
      </propertyref>
      <propertyref name="ObjectMgr" visibility="public">
        <devnotes>
           retrieve the associated Object Manager
        </devnotes>
      </propertyref>
      <propertyref name="TypeOf" visibility="public">
        <devnotes>
           retrieve the type of the pdfdictionary object, i.e. the 'Type' property name
        </devnotes>
      </propertyref>
      <propertyref name="List" visibility="public">
        <devnotes>
           direct access to the internal TList instance
        </devnotes>
      </propertyref>
      <ancestor name="TPdfObject" namespace="SynPdf">
        <methodref name="InternalWriteTo" visibility="public" />
        <methodref name="SetObjectNumber" visibility="protected" />
        <methodref name="Create" visibility="public">
          <devnotes>
             create the PDF object instance
          </devnotes>
        </methodref>
        <methodref name="WriteTo" visibility="public">
          <devnotes>
             Write object to specified stream
          </devnotes>
        </methodref>
        <methodref name="WriteValueTo" visibility="public">
          <devnotes>
             write indirect object to specified stream
          </devnotes>
        </methodref>
        <propertyref name="ObjectNumber" visibility="public">
          <devnotes>
             the associated PDF Object Number
          </devnotes>
        </propertyref>
        <propertyref name="GenerationNumber" visibility="public">
          <devnotes>
             the associated PDF Generation Number
          </devnotes>
        </propertyref>
        <propertyref name="ObjectType" visibility="public">
          <devnotes>
             the corresponding type of this PDF object
          </devnotes>
        </propertyref>
        <ancestor name="TObject" namespace="System">
          <methodref name="Create" visibility="public">
          </methodref>
          <methodref name="Free" visibility="public">
          </methodref>
          <methodref name="InitInstance" visibility="public">
          </methodref>
          <methodref name="CleanupInstance" visibility="public">
          </methodref>
          <methodref name="ClassType" visibility="public">
          </methodref>
          <methodref name="ClassName" visibility="public">
          </methodref>
          <methodref name="ClassNameIs" visibility="public">
          </methodref>
          <methodref name="ClassParent" visibility="public">
          </methodref>
          <methodref name="ClassInfo" visibility="public">
          </methodref>
          <methodref name="InstanceSize" visibility="public">
          </methodref>
          <methodref name="InheritsFrom" visibility="public">
          </methodref>
          <methodref name="MethodAddress" visibility="public">
          </methodref>
          <methodref name="MethodName" visibility="public">
          </methodref>
          <methodref name="FieldAddress" visibility="public">
          </methodref>
          <methodref name="GetInterface" visibility="public">
          </methodref>
          <methodref name="GetInterfaceEntry" visibility="public">
          </methodref>
          <methodref name="GetInterfaceTable" visibility="public">
          </methodref>
          <methodref name="SafeCallException" visibility="public">
          </methodref>
          <methodref name="AfterConstruction" visibility="public">
          </methodref>
          <methodref name="BeforeDestruction" visibility="public">
          </methodref>
          <methodref name="Dispatch" visibility="public">
          </methodref>
          <methodref name="DefaultHandler" visibility="public">
          </methodref>
          <methodref name="NewInstance" visibility="public">
          </methodref>
          <methodref name="FreeInstance" visibility="public">
          </methodref>
          <methodref name="Destroy" visibility="public">
          </methodref>
        </ancestor>
      </ancestor>
    </ancestor>
  </class>
  <classref name="TPdfPageClass" ref="TPdfPage" />
  <array name="TPdfImageHash" low="0" high="3">
    <devnotes>
       array used to store a TPdfImage hash
    </devnotes>
    <element type="Cardinal">
      <devnotes>
         array used to store a TPdfImage hash
      </devnotes>
    </element>
  </array>
  <class name="TPdfDocument">
    <devnotes>
       the main class of the PDF engine, processing the whole PDF document
    </devnotes>
    <ancestor name="TObject" namespace="System">
      <methodref name="Create" visibility="public">
      </methodref>
      <methodref name="Free" visibility="public">
      </methodref>
      <methodref name="InitInstance" visibility="public">
      </methodref>
      <methodref name="CleanupInstance" visibility="public">
      </methodref>
      <methodref name="ClassType" visibility="public">
      </methodref>
      <methodref name="ClassName" visibility="public">
      </methodref>
      <methodref name="ClassNameIs" visibility="public">
      </methodref>
      <methodref name="ClassParent" visibility="public">
      </methodref>
      <methodref name="ClassInfo" visibility="public">
      </methodref>
      <methodref name="InstanceSize" visibility="public">
      </methodref>
      <methodref name="InheritsFrom" visibility="public">
      </methodref>
      <methodref name="MethodAddress" visibility="public">
      </methodref>
      <methodref name="MethodName" visibility="public">
      </methodref>
      <methodref name="FieldAddress" visibility="public">
      </methodref>
      <methodref name="GetInterface" visibility="public">
      </methodref>
      <methodref name="GetInterfaceEntry" visibility="public">
      </methodref>
      <methodref name="GetInterfaceTable" visibility="public">
      </methodref>
      <methodref name="SafeCallException" visibility="public">
      </methodref>
      <methodref name="AfterConstruction" visibility="public">
      </methodref>
      <methodref name="BeforeDestruction" visibility="public">
      </methodref>
      <methodref name="Dispatch" visibility="public">
      </methodref>
      <methodref name="DefaultHandler" visibility="public">
      </methodref>
      <methodref name="NewInstance" visibility="public">
      </methodref>
      <methodref name="FreeInstance" visibility="public">
      </methodref>
      <methodref name="Destroy" visibility="public">
      </methodref>
    </ancestor>
    <members>
      <field name="FRoot" type="TPdfCatalog" visibility="private" />
      <field name="FCurrentPages" type="TPdfDictionary" visibility="private" />
      <field name="FOutputIntents" type="TPdfArray" visibility="private" />
      <field name="FMetaData" type="TPdfStream" visibility="private" />
      <field name="FCanvas" type="TPdfCanvas" visibility="private" />
      <field name="FHeader" type="TPdfRawText" visibility="private" />
      <field name="FTrailer" type="TPdfTrailer" visibility="private" />
      <field name="FXref" type="TPdfXref" visibility="private" />
      <field name="FInfo" type="TPdfInfo" visibility="private" />
      <field name="FFontList" type="TList" visibility="private" />
      <field name="FObjectList" type="TList" visibility="private" />
      <field name="FOutlineRoot" type="TPdfOutlineRoot" visibility="private" />
      <field name="FXObjectList" type="TPdfArray" visibility="private" />
      <field name="FDefaultPageWidth" type="Cardinal" visibility="private" />
      <field name="FDefaultPageHeight" type="Cardinal" visibility="private" />
      <field name="FDefaultPaperSize" type="TPDFPaperSize" visibility="private" />
      <field name="FCompressionMethod" type="TPdfCompressionMethod" visibility="private" />
      <field name="FUseOutlines" type="Boolean" visibility="private" />
      <field name="FCharSet" type="Integer" visibility="private" />
      <field name="FCodePage" type="Cardinal" visibility="private" />
      <field name="FTrueTypeFonts" type="TRawUTF8DynArray" visibility="private" />
      <field name="FTrueTypeFontLastName" type="RawUTF8" visibility="private" />
      <field name="FTrueTypeFontLastIndex" type="Integer" visibility="private" />
      <field name="FDC" type="HDC" visibility="private" />
      <field name="FScreenLogPixels" type="Integer" visibility="private" />
      <field name="FPrinterPxPerInch" type="TPoint" visibility="private" />
      <field name="FStandardFontsReplace" type="Boolean" visibility="private" />
      <field name="fEmbeddedTTF" type="Boolean" visibility="private" />
      <field name="fEmbeddedWholeTTF" type="Boolean" visibility="private" />
      <field name="fEmbeddedTTFIgnore" type="TRawUTF8List" visibility="private" />
      <field name="fRawPages" type="TList" visibility="private" />
      <field name="fUseUniscribe" type="Boolean" visibility="private" />
      <field name="fSelectedDCFontOld" type="HDC" visibility="private" />
      <field name="fForceJPEGCompression" type="Integer" visibility="private" />
      <field name="fForceNoBitmapReuse" type="Boolean" visibility="private" />
      <field name="fUseFontFallBack" type="Boolean" visibility="private" />
      <field name="fFontFallBackIndex" type="Integer" visibility="private" />
      <field name="fBookMarks" type="TRawUTF8List" visibility="private">
        <devnotes>
           a list of Bookmark text keys, associated to a TPdfDest object
        </devnotes>
      </field>
      <field name="fMissingBookmarks" type="TRawUTF8List" visibility="private" />
      <field name="fLastOutline" type="TPdfOutlineEntry" visibility="private">
        <devnotes>
           internal temporary variable - used by CreateOutline
        </devnotes>
      </field>
      <field name="fPDFA1" type="Boolean" visibility="private" />
      <field name="fSaveToStreamWriter" type="TPdfWrite" visibility="private" />
      <function name="GetInfo" visibility="private">
        <parameters>
          <retval type="TPdfInfo">
            <devnotes>
               a dictionary wrapper class for the PDF document information fields
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="GetOutlineRoot" visibility="private">
        <parameters>
          <retval type="TPdfOutlineRoot">
            <devnotes>
               Root entry for all Outlines of the PDF document
            </devnotes>
          </retval>
        </parameters>
      </function>
      <procedure name="SetStandardFontsReplace" visibility="private">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const" />
        </parameters>
      </procedure>
      <function name="GetEmbeddedTTFIgnore" visibility="private">
        <parameters>
          <retval type="TRawUTF8List" />
        </parameters>
      </function>
      <procedure name="SetDefaultPaperSize" visibility="private">
        <parameters>
          <parameter name="Value" type="TPDFPaperSize" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="SetDefaultPageHeight" visibility="private">
        <parameters>
          <parameter name="Value" type="Cardinal" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="SetDefaultPageWidth" visibility="private">
        <parameters>
          <parameter name="Value" type="Cardinal" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="SetPDFA1" visibility="private">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const" />
        </parameters>
      </procedure>
      <function name="GetDefaultPageLandscape" visibility="private">
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <procedure name="SetDefaultPageLandscape" visibility="private">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="SetFontFallBackName" visibility="private">
        <parameters>
          <parameter name="Value" type="string" paramflags="const" />
        </parameters>
      </procedure>
      <function name="GetFontFallBackName" visibility="private">
        <parameters>
          <retval type="string" />
        </parameters>
      </function>
      <field name="fTPdfPageClass" type="TPdfPageClass" visibility="protected">
        <devnotes>
           can be useful in descendant objects in other units
        </devnotes>
      </field>
      <procedure name="RaiseInvalidOperation" visibility="protected">
      </procedure>
      <procedure name="CreateInfo" visibility="protected">
      </procedure>
      <function name="TTFFontPostcriptName" visibility="protected">
        <devnotes>
           get the PostScript Name of a TrueType Font
        </devnotes>
        <parameters>
          <parameter name="aFontIndex" type="Integer" />
          <parameter name="AStyle" type="TFontStyles" />
          <parameter name="ALogFont" type="tagLOGFONTW" paramflags="const" />
          <retval type="string" />
        </parameters>
      </function>
      <function name="CreateEmbeddedFont" visibility="protected">
        <devnotes>
           if ANSI_CHARSET is used, create a standard embedded font
        </devnotes>
        <parameters>
          <parameter name="FontName" type="RawUTF8" paramflags="const" />
          <retval type="TPdfFont">
            <devnotes>
               a generic PDF font object
            </devnotes>
          </retval>
        </parameters>
      </function>
      <procedure name="RegisterFont" visibility="protected">
        <devnotes>
           register the font in the font list
        </devnotes>
        <parameters>
          <parameter name="aFont" type="TPdfFont" />
        </parameters>
      </procedure>
      <function name="GetRegisteredNotTrueTypeFont" visibility="protected">
        <devnotes>
           get the PDF font, from its internal PDF name (e.g. 'Helvetica-Bold')
        </devnotes>
        <parameters>
          <parameter name="APDFFontName" type="string" paramflags="const" />
          <retval type="TPdfFont">
            <devnotes>
               a generic PDF font object
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="GetRegisteredTrueTypeFont" visibility="protected" procflags="overload">
        <devnotes>
           get the supplied TrueType Font from the internal font list
        </devnotes>
        <parameters>
          <parameter name="AFontIndex" type="Integer" />
          <parameter name="AStyle" type="TFontStyles" />
          <parameter name="ACharSet" type="Byte" />
          <retval type="TPdfFont">
            <devnotes>
               a generic PDF font object
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="GetRegisteredTrueTypeFont" visibility="protected" procflags="overload">
        <devnotes>
           get the supplied TrueType Font from the internal font list
        </devnotes>
        <parameters>
          <parameter name="AFontLog" type="tagLOGFONTW" paramflags="const" />
          <retval type="TPdfFont">
            <devnotes>
               a generic PDF font object
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="GetTrueTypeFontIndex" visibility="protected">
        <devnotes>
           find an index of in FTrueTypeFonts[]
        </devnotes>
        <parameters>
          <parameter name="AName" type="RawUTF8" paramflags="const" />
          <retval type="Integer" />
        </parameters>
      </function>
      <function name="GetDCWithFont" visibility="protected">
        <parameters>
          <parameter name="TTF" type="TPdfFontTrueType" />
          <retval type="HDC" />
        </parameters>
      </function>
      <procedure name="FreeDoc" visibility="protected">
        <devnotes>
           release the current document content
        </devnotes>
      </procedure>
      <constructor name="Create" visibility="public">
        <devnotes>
           create the PDF document instance, with a Canvas and a default A4 paper size
        </devnotes>
        <parameters>
          <parameter name="AUseOutlines" type="Boolean">
            <value>
              False
            </value>
          </parameter>
          <parameter name="ACodePage" type="Integer">
            <value>
              $0
            </value>
          </parameter>
          <parameter name="APDFA1" type="Boolean">
            <value>
              False
            </value>
          </parameter>
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public">
        <devnotes>
           release the PDF document instance
        </devnotes>
        <parameters>
        </parameters>
      </destructor>
      <procedure name="NewDoc" visibility="public">
        <devnotes>
           create a new document
        </devnotes>
      </procedure>
      <function name="AddPage" visibility="public" procflags="virtual">
        <devnotes>
           add a Page to the current PDF document
        </devnotes>
        <parameters>
          <retval type="TPdfPage">
            <devnotes>
               a PDF page          
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="CreatePages" visibility="public">
        <devnotes>
           create a Pages object
        </devnotes>
        <parameters>
          <parameter name="Parent" type="TPdfDictionary" />
          <retval type="TPdfDictionary">
            <devnotes>
               a PDF Dictionay is used to manage Key / Value pairs
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="RegisterXObject" visibility="public">
        <devnotes>
           register an object (typicaly a TPdfImage) to the PDF document
        </devnotes>
        <parameters>
          <parameter name="AObject" type="TPdfXObject" />
          <parameter name="AName" type="string" paramflags="const" />
          <retval type="Integer" />
        </parameters>
      </function>
      <function name="AddXObject" visibility="public">
        <devnotes>
           add then register an object (typicaly a TPdfImage) to the PDF document
        </devnotes>
        <parameters>
          <parameter name="AName" type="string" paramflags="const" />
          <parameter name="AXObject" type="TPdfXObject" />
          <retval type="Integer" />
        </parameters>
      </function>
      <procedure name="SaveToStream" visibility="public" procflags="virtual">
        <devnotes>
           save the PDF file content into a specified Stream
        </devnotes>
        <parameters>
          <parameter name="AStream" type="TStream" />
          <parameter name="ForceModDate" type="TDateTime">
            <value>
              0
            </value>
          </parameter>
        </parameters>
      </procedure>
      <procedure name="SaveToStreamDirectBegin" visibility="public">
        <devnotes>
           prepare to save the PDF file content into a specified Stream
        </devnotes>
        <parameters>
          <parameter name="AStream" type="TStream" />
          <parameter name="ForceModDate" type="TDateTime">
            <value>
              0
            </value>
          </parameter>
        </parameters>
      </procedure>
      <procedure name="SaveToStreamDirectPageFlush" visibility="public">
        <devnotes>
           save the current page content to the PDF file
        </devnotes>
      </procedure>
      <procedure name="SaveToStreamDirectEnd" visibility="public">
        <devnotes>
           prepare to save the PDF file content into a specified Stream
        </devnotes>
      </procedure>
      <function name="SaveToFile" visibility="public">
        <devnotes>
           save the PDF file content into a specified file
        </devnotes>
        <parameters>
          <parameter name="aFileName" type="TFileName" paramflags="const" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="GetXObject" visibility="public">
        <devnotes>
           retrieve a XObject from its name
        </devnotes>
        <parameters>
          <parameter name="AName" type="string" paramflags="const" />
          <retval type="TPdfXObject">
            <devnotes>
               any object stored to the PDF file
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="GetXObjectIndex" visibility="public">
        <devnotes>
           retrieve a XObject index from its name
        </devnotes>
        <parameters>
          <parameter name="AName" type="string" paramflags="const" />
          <retval type="Integer" />
        </parameters>
      </function>
      <function name="GetXObjectImageName" visibility="public">
        <devnotes>
           retrieve a XObject TPdfImage index from its picture attributes
        </devnotes>
        <parameters>
          <parameter name="Hash" type="TPdfImageHash" paramflags="const" />
          <parameter name="Width" type="Integer" />
          <parameter name="Height" type="Integer" />
          <retval type="string" />
        </parameters>
      </function>
      <function name="CreateAnnotation" visibility="public" procflags="overload">
        <devnotes>
           wrapper to create an annotation
        </devnotes>
        <parameters>
          <parameter name="AType" type="TPdfAnnotationSubType" />
          <parameter name="ARect" type="TPdfRect" paramflags="const" />
          <retval type="TPdfDictionary">
            <devnotes>
               a PDF Dictionay is used to manage Key / Value pairs
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="CreateLink" visibility="public">
        <devnotes>
           wrapper to create a Link annotation, specified by a bookmark
        </devnotes>
        <parameters>
          <parameter name="ARect" type="TPdfRect" paramflags="const" />
          <parameter name="aBookmarkName" type="RawUTF8" paramflags="const" />
          <retval type="TPdfDictionary">
            <devnotes>
               a PDF Dictionay is used to manage Key / Value pairs
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="CreateOutline" visibility="public">
        <devnotes>
           create an Outline entry at a specified position of the current page
        </devnotes>
        <parameters>
          <parameter name="Title" type="string" paramflags="const" />
          <parameter name="Level" type="Integer" />
          <parameter name="TopPosition" type="Single" />
          <retval type="TPdfOutlineEntry">
            <devnotes>
               an Outline entry in the PDF document
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="CreateDestination" visibility="public">
        <devnotes>
           create a Destination
        </devnotes>
        <parameters>
          <retval type="TPdfDestination" />
        </parameters>
      </function>
      <procedure name="CreateBookMark" visibility="public">
        <devnotes>
           create an internal bookmark entry at a specified position of the current page
        </devnotes>
        <parameters>
          <parameter name="TopPosition" type="Single" />
          <parameter name="aBookmarkName" type="RawUTF8" paramflags="const" />
        </parameters>
      </procedure>
      <function name="CreateOrGetImage" visibility="public">
        <devnotes>
           create an image from a supplied bitmap
        </devnotes>
        <parameters>
          <parameter name="B" type="TBitmap" />
          <parameter name="DrawAt" type="PPdfBox">
            <value>
              nil
            </value>
          </parameter>
          <parameter name="ClipRc" type="PPdfBox">
            <value>
              nil
            </value>
          </parameter>
          <retval type="string" />
        </parameters>
      </function>
      <property name="Canvas" visibility="public" read="FCanvas" type="TPdfCanvas">
        <devnotes>
           retrieve the current PDF Canvas, associated to the current page
        </devnotes>
      </property>
      <property name="Info" visibility="public" read="GetInfo" type="TPdfInfo">
        <devnotes>
           retrieve the PDF information, associated to the PDF document
        </devnotes>
      </property>
      <property name="Root" visibility="public" read="FRoot" type="TPdfCatalog" />
      <property name="OutlineRoot" visibility="public" read="GetOutlineRoot" type="TPdfOutlineRoot">
        <devnotes>
           retrieve the PDF Outline, associated to the PDF document
        </devnotes>
      </property>
      <property name="DefaultPageWidth" visibility="public" read="FDefaultPageWidth" write="SetDefaultPageWidth" type="Cardinal">
        <devnotes>
           the default page width, used for new every page creation (i.e. AddPage method call)
        </devnotes>
      </property>
      <property name="DefaultPageHeight" visibility="public" read="FDefaultPageHeight" write="SetDefaultPageHeight" type="Cardinal">
        <devnotes>
           the default page height, used for new every page creation (i.e. AddPage method call)
        </devnotes>
      </property>
      <property name="DefaultPageLandscape" visibility="public" read="GetDefaultPageLandscape" write="SetDefaultPageLandscape" type="Boolean">
        <devnotes>
           the default page orientation
        </devnotes>
      </property>
      <property name="DefaultPaperSize" visibility="public" read="FDefaultPaperSize" write="SetDefaultPaperSize" type="TPDFPaperSize">
        <devnotes>
           the default page size, used for every new page creation (i.e. AddPage method call)
        </devnotes>
      </property>
      <property name="CompressionMethod" visibility="public" read="FCompressionMethod" write="FCompressionMethod" type="TPdfCompressionMethod">
        <devnotes>
           the compression method used for page content storage
        </devnotes>
      </property>
      <property name="EmbeddedTTF" visibility="public" read="fEmbeddedTTF" write="fEmbeddedTTF" type="Boolean">
        <devnotes>
           if set to TRUE, the used True Type fonts will be embedded to the PDF content
        </devnotes>
      </property>
      <property name="EmbeddedTTFIgnore" visibility="public" read="GetEmbeddedTTFIgnore" type="TRawUTF8List">
        <devnotes>
           you can add some font names to this list, if you want these fonts
        </devnotes>
      </property>
      <property name="EmbeddedWholeTTF" visibility="public" read="fEmbeddedWholeTTF" write="fEmbeddedWholeTTF" type="Boolean">
        <devnotes>
           if set to TRUE, the embedded True Type fonts will be totaly Embeddeded
        </devnotes>
      </property>
      <property name="UseOutlines" visibility="public" read="FUseOutlines" write="FUseOutlines" type="Boolean">
        <devnotes>
           used to define if the PDF document will use outlines
        </devnotes>
      </property>
      <property name="CodePage" visibility="public" read="FCodePage" type="Cardinal">
        <devnotes>
           the current Code Page encoding used for this PDF Document
        </devnotes>
      </property>
      <property name="CharSet" visibility="public" read="FCharSet" type="Integer">
        <devnotes>
           the current CharSet used for this PDF Document
        </devnotes>
      </property>
      <property name="StandardFontsReplace" visibility="public" read="FStandardFontsReplace" write="SetStandardFontsReplace" type="Boolean">
        <devnotes>
           set if the PDF engine must use standard fonts substitution
        </devnotes>
      </property>
      <property name="UseUniscribe" visibility="public" read="fUseUniscribe" write="fUseUniscribe" type="Boolean">
        <devnotes>
           set if the PDF engine must use the Windows Uniscribe API to
        </devnotes>
      </property>
      <property name="UseFontFallBack" visibility="public" read="fUseFontFallBack" write="fUseFontFallBack" type="Boolean">
        <devnotes>
           used to define if the PDF document will handle &quot;font fallback&quot; for
        </devnotes>
      </property>
      <property name="FontFallBackName" visibility="public" read="GetFontFallBackName" write="SetFontFallBackName" type="string">
        <devnotes>
           set the font name to be used for missing characters
        </devnotes>
      </property>
      <property name="ForceJPEGCompression" visibility="public" read="fForceJPEGCompression" write="fForceJPEGCompression" type="Integer">
        <devnotes>
           this property can force saving all canvas bitmaps images as JPEG
        </devnotes>
      </property>
      <property name="ForceNoBitmapReuse" visibility="public" read="fForceNoBitmapReuse" write="fForceNoBitmapReuse" type="Boolean">
        <devnotes>
           this property can force all canvas bitmaps to be stored directly
        </devnotes>
      </property>
      <property name="RawPages" visibility="public" read="fRawPages" type="TList">
        <devnotes>
           direct read-only access to all corresponding TPdfPage
        </devnotes>
      </property>
      <property name="ScreenLogPixels" visibility="public" read="FScreenLogPixels" write="FScreenLogPixels" type="Integer">
        <devnotes>
           the resolution used for pixel to PDF coordinates conversion
        </devnotes>
      </property>
      <property name="PDFA1" visibility="public" read="fPDFA1" write="SetPDFA1" type="Boolean">
        <devnotes>
           is TRUE if the file was created in order to be PDF/A-1 compliant
        </devnotes>
      </property>
    </members>
  </class>
  <class name="TPdfPage">
    <devnotes>
       a PDF page          
    </devnotes>
    <ancestor name="TPdfDictionary" namespace="SynPdf">
      <methodref name="GetItems" visibility="private" />
      <methodref name="GetItemCount" visibility="private" />
      <methodref name="getTypeOf" visibility="protected" />
      <methodref name="InternalWriteTo" visibility="public" />
      <methodref name="Create" visibility="public">
        <devnotes>
           create the PDF dictionary
        </devnotes>
      </methodref>
      <methodref name="Destroy" visibility="public">
        <devnotes>
           release the dictionay instance, and all associated elements
        </devnotes>
      </methodref>
      <methodref name="ValueByName" visibility="public">
        <devnotes>
           fast find a value by its name
        </devnotes>
      </methodref>
      <methodref name="PdfBooleanByName" visibility="public">
        <devnotes>
           fast find a boolean value by its name
        </devnotes>
      </methodref>
      <methodref name="PdfNumberByName" visibility="public">
        <devnotes>
           fast find a numerical (integer) value by its name
        </devnotes>
      </methodref>
      <methodref name="PdfTextByName" visibility="public">
        <devnotes>
           fast find a textual value by its name
        </devnotes>
      </methodref>
      <methodref name="PdfTextValueByName" visibility="public">
        <devnotes>
           fast find a textual value by its name
        </devnotes>
      </methodref>
      <methodref name="PdfTextUTF8ValueByName" visibility="public">
        <devnotes>
           fast find a textual value by its name
        </devnotes>
      </methodref>
      <methodref name="PdfTextStringValueByName" visibility="public">
        <devnotes>
           fast find a textual value by its name
        </devnotes>
      </methodref>
      <methodref name="PdfRealByName" visibility="public">
        <devnotes>
           fast find a numerical (floating-point) value by its name
        </devnotes>
      </methodref>
      <methodref name="PdfNameByName" visibility="public">
        <devnotes>
           fast find a name value by its name
        </devnotes>
      </methodref>
      <methodref name="PdfDictionaryByName" visibility="public">
        <devnotes>
           fast find a dictionary value by its name
        </devnotes>
      </methodref>
      <methodref name="PdfArrayByName" visibility="public">
        <devnotes>
           fast find an array value by its name
        </devnotes>
      </methodref>
      <methodref name="AddItem" visibility="public">
        <devnotes>
           add a specified Key / Value pair to the dictionary
        </devnotes>
      </methodref>
      <methodref name="AddItem" visibility="public">
        <devnotes>
           add a specified Key / Value pair (of type TPdfName) to the dictionary
        </devnotes>
      </methodref>
      <methodref name="AddItem" visibility="public">
        <devnotes>
           add a specified Key / Value pair (of type TPdfNumber) to the dictionary
        </devnotes>
      </methodref>
      <methodref name="AddItemText" visibility="public">
        <devnotes>
           add a specified Key / Value pair (of type TPdfText) to the dictionary
        </devnotes>
      </methodref>
      <methodref name="AddItemTextUTF8" visibility="public">
        <devnotes>
           add a specified Key / Value pair (of type TPdfTextUTF8) to the dictionary
        </devnotes>
      </methodref>
      <methodref name="AddItemTextString" visibility="public">
        <devnotes>
           add a specified Key / Value pair (of type TPdfTextUTF8) to the dictionary
        </devnotes>
      </methodref>
      <methodref name="RemoveItem" visibility="public">
        <devnotes>
           remove the element specified by its Key from the dictionary
        </devnotes>
      </methodref>
      <propertyref name="Items" visibility="public">
        <devnotes>
           retrieve any dictionary element
        </devnotes>
      </propertyref>
      <propertyref name="ItemCount" visibility="public">
        <devnotes>
           retrieve the dictionary element count
        </devnotes>
      </propertyref>
      <propertyref name="ObjectMgr" visibility="public">
        <devnotes>
           retrieve the associated Object Manager
        </devnotes>
      </propertyref>
      <propertyref name="TypeOf" visibility="public">
        <devnotes>
           retrieve the type of the pdfdictionary object, i.e. the 'Type' property name
        </devnotes>
      </propertyref>
      <propertyref name="List" visibility="public">
        <devnotes>
           direct access to the internal TList instance
        </devnotes>
      </propertyref>
      <ancestor name="TPdfObject" namespace="SynPdf">
        <methodref name="InternalWriteTo" visibility="public" />
        <methodref name="SetObjectNumber" visibility="protected" />
        <methodref name="Create" visibility="public">
          <devnotes>
             create the PDF object instance
          </devnotes>
        </methodref>
        <methodref name="WriteTo" visibility="public">
          <devnotes>
             Write object to specified stream
          </devnotes>
        </methodref>
        <methodref name="WriteValueTo" visibility="public">
          <devnotes>
             write indirect object to specified stream
          </devnotes>
        </methodref>
        <propertyref name="ObjectNumber" visibility="public">
          <devnotes>
             the associated PDF Object Number
          </devnotes>
        </propertyref>
        <propertyref name="GenerationNumber" visibility="public">
          <devnotes>
             the associated PDF Generation Number
          </devnotes>
        </propertyref>
        <propertyref name="ObjectType" visibility="public">
          <devnotes>
             the corresponding type of this PDF object
          </devnotes>
        </propertyref>
        <ancestor name="TObject" namespace="System">
          <methodref name="Create" visibility="public">
          </methodref>
          <methodref name="Free" visibility="public">
          </methodref>
          <methodref name="InitInstance" visibility="public">
          </methodref>
          <methodref name="CleanupInstance" visibility="public">
          </methodref>
          <methodref name="ClassType" visibility="public">
          </methodref>
          <methodref name="ClassName" visibility="public">
          </methodref>
          <methodref name="ClassNameIs" visibility="public">
          </methodref>
          <methodref name="ClassParent" visibility="public">
          </methodref>
          <methodref name="ClassInfo" visibility="public">
          </methodref>
          <methodref name="InstanceSize" visibility="public">
          </methodref>
          <methodref name="InheritsFrom" visibility="public">
          </methodref>
          <methodref name="MethodAddress" visibility="public">
          </methodref>
          <methodref name="MethodName" visibility="public">
          </methodref>
          <methodref name="FieldAddress" visibility="public">
          </methodref>
          <methodref name="GetInterface" visibility="public">
          </methodref>
          <methodref name="GetInterfaceEntry" visibility="public">
          </methodref>
          <methodref name="GetInterfaceTable" visibility="public">
          </methodref>
          <methodref name="SafeCallException" visibility="public">
          </methodref>
          <methodref name="AfterConstruction" visibility="public">
          </methodref>
          <methodref name="BeforeDestruction" visibility="public">
          </methodref>
          <methodref name="Dispatch" visibility="public">
          </methodref>
          <methodref name="DefaultHandler" visibility="public">
          </methodref>
          <methodref name="NewInstance" visibility="public">
          </methodref>
          <methodref name="FreeInstance" visibility="public">
          </methodref>
          <methodref name="Destroy" visibility="public">
          </methodref>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <function name="GetPageLandscape" visibility="private">
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <procedure name="SetPageLandscape" visibility="private">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const" />
        </parameters>
      </procedure>
      <field name="fDoc" type="TPdfDocument" visibility="protected" />
      <field name="FMediaBox" type="TPdfArray" visibility="protected" />
      <field name="FWordSpace" type="Single" visibility="protected" />
      <field name="FCharSpace" type="Single" visibility="protected" />
      <field name="FFontSize" type="Single" visibility="protected" />
      <field name="FFont" type="TPdfFont" visibility="protected" />
      <field name="FLeading" type="Single" visibility="protected" />
      <field name="FHorizontalScaling" type="Single" visibility="protected" />
      <procedure name="SetWordSpace" visibility="protected">
        <parameters>
          <parameter name="Value" type="Single" />
        </parameters>
      </procedure>
      <procedure name="SetCharSpace" visibility="protected">
        <parameters>
          <parameter name="Value" type="Single" />
        </parameters>
      </procedure>
      <procedure name="SetFontSize" visibility="protected">
        <parameters>
          <parameter name="Value" type="Single" />
        </parameters>
      </procedure>
      <procedure name="SetHorizontalScaling" visibility="protected">
        <parameters>
          <parameter name="Value" type="Single" />
        </parameters>
      </procedure>
      <procedure name="SetLeading" visibility="protected">
        <parameters>
          <parameter name="Value" type="Single" />
        </parameters>
      </procedure>
      <procedure name="SetPageWidth" visibility="public" procflags="virtual">
        <parameters>
          <parameter name="AValue" type="Integer" />
        </parameters>
      </procedure>
      <procedure name="SetPageHeight" visibility="public" procflags="virtual">
        <parameters>
          <parameter name="AValue" type="Integer" />
        </parameters>
      </procedure>
      <function name="GetPageWidth" visibility="protected">
        <parameters>
          <retval type="Integer" />
        </parameters>
      </function>
      <function name="GetPageHeight" visibility="protected">
        <parameters>
          <retval type="Integer" />
        </parameters>
      </function>
      <function name="GetResources" visibility="protected">
        <parameters>
          <parameter name="AName" type="string" paramflags="const" />
          <retval type="TPdfDictionary">
            <devnotes>
               a PDF Dictionay is used to manage Key / Value pairs
            </devnotes>
          </retval>
        </parameters>
      </function>
      <constructor name="Create" visibility="public">
        <devnotes>
           create the page with its internal VCL Canvas
        </devnotes>
        <parameters>
          <parameter name="ADoc" type="TPdfDocument" />
        </parameters>
      </constructor>
      <function name="TextWidth" visibility="public">
        <devnotes>
           calculate width of specified text according to current attributes
        </devnotes>
        <parameters>
          <parameter name="Text" type="string" paramflags="const" />
          <retval type="Single" />
        </parameters>
      </function>
      <function name="MeasureText" visibility="public">
        <devnotes>
           calculate the number of chars which can be displayed in the specified
        </devnotes>
        <parameters>
          <parameter name="Text" type="string" paramflags="const" />
          <parameter name="Width" type="Single" />
          <retval type="Integer" />
        </parameters>
      </function>
      <property name="WordSpace" visibility="public" read="FWordSpace" write="SetWordSpace" type="Single">
        <devnotes>
           retrieve or set the word Space attribute
        </devnotes>
      </property>
      <property name="CharSpace" visibility="public" read="FCharSpace" write="SetCharSpace" type="Single">
        <devnotes>
           retrieve or set the Char Space attribute
        </devnotes>
      </property>
      <property name="HorizontalScaling" visibility="public" read="FHorizontalScaling" write="SetHorizontalScaling" type="Single">
        <devnotes>
           retrieve or set the Horizontal Scaling attribute
        </devnotes>
      </property>
      <property name="Leading" visibility="public" read="FLeading" write="SetLeading" type="Single">
        <devnotes>
           retrieve or set the text Leading attribute
        </devnotes>
      </property>
      <property name="FontSize" visibility="public" read="FFontSize" write="SetFontSize" type="Single">
        <devnotes>
           retrieve or set the font Size attribute
        </devnotes>
      </property>
      <property name="Font" visibility="public" read="FFont" write="FFont" type="TPdfFont">
        <devnotes>
           retrieve the current used font
        </devnotes>
      </property>
      <property name="PageWidth" visibility="public" read="GetPageWidth" write="SetPageWidth" type="Integer">
        <devnotes>
           retrieve or set the current page width
        </devnotes>
      </property>
      <property name="PageHeight" visibility="public" read="GetPageHeight" write="SetPageHeight" type="Integer">
        <devnotes>
           retrieve or set the current page height
        </devnotes>
      </property>
      <property name="PageLandscape" visibility="public" read="GetPageLandscape" write="SetPageLandscape" type="Boolean">
        <devnotes>
           retrieve or set the paper orientation
        </devnotes>
      </property>
    </members>
  </class>
  <class name="TPdfCanvas">
    <devnotes>
       access to the PDF Canvas, used to draw on the page
    </devnotes>
    <ancestor name="TObject" namespace="System">
      <methodref name="Create" visibility="public">
      </methodref>
      <methodref name="Free" visibility="public">
      </methodref>
      <methodref name="InitInstance" visibility="public">
      </methodref>
      <methodref name="CleanupInstance" visibility="public">
      </methodref>
      <methodref name="ClassType" visibility="public">
      </methodref>
      <methodref name="ClassName" visibility="public">
      </methodref>
      <methodref name="ClassNameIs" visibility="public">
      </methodref>
      <methodref name="ClassParent" visibility="public">
      </methodref>
      <methodref name="ClassInfo" visibility="public">
      </methodref>
      <methodref name="InstanceSize" visibility="public">
      </methodref>
      <methodref name="InheritsFrom" visibility="public">
      </methodref>
      <methodref name="MethodAddress" visibility="public">
      </methodref>
      <methodref name="MethodName" visibility="public">
      </methodref>
      <methodref name="FieldAddress" visibility="public">
      </methodref>
      <methodref name="GetInterface" visibility="public">
      </methodref>
      <methodref name="GetInterfaceEntry" visibility="public">
      </methodref>
      <methodref name="GetInterfaceTable" visibility="public">
      </methodref>
      <methodref name="SafeCallException" visibility="public">
      </methodref>
      <methodref name="AfterConstruction" visibility="public">
      </methodref>
      <methodref name="BeforeDestruction" visibility="public">
      </methodref>
      <methodref name="Dispatch" visibility="public">
      </methodref>
      <methodref name="DefaultHandler" visibility="public">
      </methodref>
      <methodref name="NewInstance" visibility="public">
      </methodref>
      <methodref name="FreeInstance" visibility="public">
      </methodref>
      <methodref name="Destroy" visibility="public">
      </methodref>
    </ancestor>
    <members>
      <field name="FContents" type="TPdfStream" visibility="protected" />
      <field name="FPage" type="TPdfPage" visibility="protected" />
      <field name="FPageFontList" type="TPdfDictionary" visibility="protected" />
      <field name="FDoc" type="TPdfDocument" visibility="protected" />
      <field name="FHeight" type="Single" visibility="protected" />
      <field name="FFactor" type="Single" visibility="protected" />
      <field name="FFactorX" type="Single" visibility="protected" />
      <field name="FFactorY" type="Single" visibility="protected" />
      <field name="FOffsetX" type="Single" visibility="protected" />
      <field name="FOffsetY" type="Single" visibility="protected" />
      <field name="FOffsetXDef" type="Single" visibility="protected" />
      <field name="FOffsetYDef" type="Single" visibility="protected" />
      <field name="FWorldFactorX" type="Single" visibility="protected" />
      <field name="FWorldFactorY" type="Single" visibility="protected" />
      <field name="FWorldOffsetX" type="Single" visibility="protected" />
      <field name="FWorldOffsetY" type="Single" visibility="protected" />
      <field name="FDevScale" type="Single" visibility="protected" />
      <field name="FWinSize" type="tagSIZE" visibility="protected" />
      <field name="FViewSize" type="tagSIZE" visibility="protected" />
      <field name="FWinOrg" type="TPoint" visibility="protected" />
      <field name="FViewOrg" type="TPoint" visibility="protected" />
      <field name="FMappingMode" type="Integer" visibility="protected" />
      <field name="FEmfBounds" type="TRect" visibility="protected" />
      <field name="FPrinterPxPerInch" type="TPoint" visibility="protected" />
      <field name="FNewPath" type="Boolean" visibility="protected" />
      <field name="fRightToLeftText" type="Boolean" visibility="protected">
        <devnotes>
           if Uniscribe-related methods must handle the text from right to left
        </devnotes>
      </field>
      <field name="fUseSetTextJustification" type="Boolean" visibility="protected">
        <devnotes>
           parameters taken from RenderMetaFile() call
        </devnotes>
      </field>
      <field name="fKerningHScaleBottom" type="Single" visibility="protected" />
      <field name="fKerningHScaleTop" type="Single" visibility="protected" />
      <field name="FPreviousRasterFontName" type="RawUTF8" visibility="protected" />
      <field name="FPreviousRasterFontIndex" type="Integer" visibility="protected" />
      <function name="I2X" visibility="protected" procflags="overload">
        <parameters>
          <parameter name="X" type="Integer" />
          <retval type="Single" />
        </parameters>
      </function>
      <function name="I2X" visibility="protected" procflags="overload">
        <parameters>
          <parameter name="X" type="Single" />
          <retval type="Single" />
        </parameters>
      </function>
      <function name="I2Y" visibility="protected" procflags="overload">
        <parameters>
          <parameter name="Y" type="Integer" />
          <retval type="Single" />
        </parameters>
      </function>
      <function name="I2Y" visibility="protected" procflags="overload">
        <parameters>
          <parameter name="Y" type="Single" />
          <retval type="Single" />
        </parameters>
      </function>
      <procedure name="LineToI" visibility="protected" procflags="overload">
        <parameters>
          <parameter name="x" type="Integer" />
          <parameter name="y" type="Integer" />
        </parameters>
      </procedure>
      <procedure name="LineToI" visibility="protected" procflags="overload">
        <parameters>
          <parameter name="x" type="Single" />
          <parameter name="y" type="Single" />
        </parameters>
      </procedure>
      <procedure name="MoveToI" visibility="protected" procflags="overload">
        <parameters>
          <parameter name="x" type="Integer" />
          <parameter name="y" type="Integer" />
        </parameters>
      </procedure>
      <procedure name="MoveToI" visibility="protected" procflags="overload">
        <parameters>
          <parameter name="x" type="Single" />
          <parameter name="y" type="Single" />
        </parameters>
      </procedure>
      <procedure name="CurveToCI" visibility="protected">
        <parameters>
          <parameter name="x1" type="Integer" />
          <parameter name="y1" type="Integer" />
          <parameter name="x2" type="Integer" />
          <parameter name="y2" type="Integer" />
          <parameter name="x3" type="Integer" />
          <parameter name="y3" type="Integer" />
        </parameters>
      </procedure>
      <procedure name="RoundRectI" visibility="protected">
        <parameters>
          <parameter name="x1" type="Integer" />
          <parameter name="y1" type="Integer" />
          <parameter name="x2" type="Integer" />
          <parameter name="y2" type="Integer" />
          <parameter name="cx" type="Integer" />
          <parameter name="cy" type="Integer" />
        </parameters>
      </procedure>
      <function name="BoxI" visibility="protected">
        <parameters>
          <parameter name="Box" type="TRect" />
          <retval type="TPdfBox">
            <devnotes>
               a PDF coordinates box
            </devnotes>
          </retval>
        </parameters>
      </function>
      <procedure name="PointI" visibility="protected">
        <parameters>
          <parameter name="x" type="Single" />
          <parameter name="y" type="Single" />
        </parameters>
      </procedure>
      <function name="RectI" visibility="protected">
        <parameters>
          <parameter name="Rect" type="TRect" />
          <retval type="TPdfRect">
            <devnotes>
               a PDF coordinates rectangle
            </devnotes>
          </retval>
        </parameters>
      </function>
      <procedure name="DrawXObjectPrepare" visibility="protected">
        <parameters>
          <parameter name="AXObjectName" type="string" paramflags="const" />
        </parameters>
      </procedure>
      <function name="ViewOffsetX" visibility="protected">
        <parameters>
          <parameter name="X" type="Single" />
          <retval type="Single" />
        </parameters>
      </function>
      <function name="ViewOffsetY" visibility="protected">
        <parameters>
          <parameter name="Y" type="Single" />
          <retval type="Single" />
        </parameters>
      </function>
      <function name="GetWorldFactorX" visibility="protected">
        <parameters>
          <retval type="Single" />
        </parameters>
      </function>
      <function name="GetWorldFactorY" visibility="protected">
        <parameters>
          <retval type="Single" />
        </parameters>
      </function>
      <property name="WorldFactorX" visibility="protected" read="GetWorldFactorX" write="FWorldFactorX" type="Single" />
      <property name="WorldFactorY" visibility="protected" read="GetWorldFactorY" write="FWorldFactorY" type="Single" />
      <function name="GetDoc" visibility="protected">
        <parameters>
          <retval type="TPdfDocument">
            <devnotes>
               the main class of the PDF engine, processing the whole PDF document
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="GetPage" visibility="protected">
        <parameters>
          <retval type="TPdfPage">
            <devnotes>
               a PDF page          
            </devnotes>
          </retval>
        </parameters>
      </function>
      <constructor name="Create" visibility="public">
        <devnotes>
           create the PDF canvas instance
        </devnotes>
        <parameters>
          <parameter name="APdfDoc" type="TPdfDocument" />
        </parameters>
      </constructor>
      <procedure name="GSave" visibility="public">
        <devnotes>
           pushes a copy of the entire graphics state onto the stack
        </devnotes>
      </procedure>
      <procedure name="GRestore" visibility="public">
        <devnotes>
           restores the entire graphics state to its former value by popping
        </devnotes>
      </procedure>
      <procedure name="ConcatToCTM" visibility="public">
        <devnotes>
           Modify the CTM by concatenating the specified matrix
        </devnotes>
        <parameters>
          <parameter name="a" type="Single" />
          <parameter name="b" type="Single" />
          <parameter name="c" type="Single" />
          <parameter name="d" type="Single" />
          <parameter name="e" type="Single" />
          <parameter name="f" type="Single" />
          <parameter name="Decimals" type="Cardinal">
            <value>
              $6
            </value>
          </parameter>
        </parameters>
      </procedure>
      <procedure name="SetFlat" visibility="public">
        <parameters>
          <parameter name="flatness" type="Byte" />
        </parameters>
      </procedure>
      <procedure name="SetLineCap" visibility="public">
        <parameters>
          <parameter name="linecap" type="TLineCapStyle" />
        </parameters>
      </procedure>
      <procedure name="SetDash" visibility="public">
        <parameters>
          <parameter name="aarray" paramflags="const">
            <array name="aarray">
              <element type="Integer" />
            </array>
          </parameter>
          <parameter name="phase" type="Integer">
            <value>
              $0
            </value>
          </parameter>
        </parameters>
      </procedure>
      <procedure name="SetLineJoin" visibility="public">
        <parameters>
          <parameter name="linejoin" type="TLineJoinStyle" />
        </parameters>
      </procedure>
      <procedure name="SetLineWidth" visibility="public">
        <parameters>
          <parameter name="linewidth" type="Single" />
        </parameters>
      </procedure>
      <procedure name="SetMiterLimit" visibility="public">
        <parameters>
          <parameter name="miterlimit" type="Single" />
        </parameters>
      </procedure>
      <procedure name="MoveTo" visibility="public">
        <parameters>
          <parameter name="x" type="Single" />
          <parameter name="y" type="Single" />
        </parameters>
      </procedure>
      <procedure name="LineTo" visibility="public">
        <parameters>
          <parameter name="x" type="Single" />
          <parameter name="y" type="Single" />
        </parameters>
      </procedure>
      <procedure name="CurveToC" visibility="public">
        <parameters>
          <parameter name="x1" type="Single" />
          <parameter name="y1" type="Single" />
          <parameter name="x2" type="Single" />
          <parameter name="y2" type="Single" />
          <parameter name="x3" type="Single" />
          <parameter name="y3" type="Single" />
        </parameters>
      </procedure>
      <procedure name="CurveToV" visibility="public">
        <parameters>
          <parameter name="x2" type="Single" />
          <parameter name="y2" type="Single" />
          <parameter name="x3" type="Single" />
          <parameter name="y3" type="Single" />
        </parameters>
      </procedure>
      <procedure name="CurveToY" visibility="public">
        <parameters>
          <parameter name="x1" type="Single" />
          <parameter name="y1" type="Single" />
          <parameter name="x3" type="Single" />
          <parameter name="y3" type="Single" />
        </parameters>
      </procedure>
      <procedure name="Rectangle" visibility="public">
        <parameters>
          <parameter name="x" type="Single" />
          <parameter name="y" type="Single" />
          <parameter name="width" type="Single" />
          <parameter name="height" type="Single" />
        </parameters>
      </procedure>
      <procedure name="Closepath" visibility="public">
      </procedure>
      <procedure name="NewPath" visibility="public">
      </procedure>
      <procedure name="Stroke" visibility="public">
        <devnotes>
           Stroke the path
        </devnotes>
      </procedure>
      <procedure name="ClosePathStroke" visibility="public">
        <devnotes>
           Close and stroke the path
        </devnotes>
      </procedure>
      <procedure name="Fill" visibility="public">
        <devnotes>
           Fill the path, using the nonzero winding number rule to determine
        </devnotes>
      </procedure>
      <procedure name="EoFill" visibility="public">
        <devnotes>
           Fill the path, using the even-odd rule to determine the region to fill
        </devnotes>
      </procedure>
      <procedure name="FillStroke" visibility="public">
      </procedure>
      <procedure name="ClosepathFillStroke" visibility="public">
      </procedure>
      <procedure name="EofillStroke" visibility="public">
      </procedure>
      <procedure name="ClosepathEofillStroke" visibility="public">
      </procedure>
      <procedure name="Clip" visibility="public">
      </procedure>
      <procedure name="EoClip" visibility="public">
      </procedure>
      <procedure name="SetCharSpace" visibility="public">
        <parameters>
          <parameter name="charSpace" type="Single" />
        </parameters>
      </procedure>
      <procedure name="SetWordSpace" visibility="public">
        <parameters>
          <parameter name="wordSpace" type="Single" />
        </parameters>
      </procedure>
      <procedure name="SetHorizontalScaling" visibility="public">
        <parameters>
          <parameter name="hScaling" type="Single" />
        </parameters>
      </procedure>
      <procedure name="SetLeading" visibility="public">
        <parameters>
          <parameter name="leading" type="Single" />
        </parameters>
      </procedure>
      <procedure name="SetFontAndSize" visibility="public">
        <parameters>
          <parameter name="fontshortcut" type="string" paramflags="const" />
          <parameter name="size" type="Single" />
        </parameters>
      </procedure>
      <procedure name="SetTextRenderingMode" visibility="public">
        <parameters>
          <parameter name="mode" type="TTextRenderingMode" />
        </parameters>
      </procedure>
      <procedure name="SetTextRise" visibility="public">
        <parameters>
          <parameter name="rise" type="Word" />
        </parameters>
      </procedure>
      <procedure name="BeginText" visibility="public">
        <devnotes>
           Begin a text object
        </devnotes>
      </procedure>
      <procedure name="EndText" visibility="public">
        <devnotes>
           End a text object, discarding the text matrix
        </devnotes>
      </procedure>
      <procedure name="MoveTextPoint" visibility="public">
        <parameters>
          <parameter name="tx" type="Single" />
          <parameter name="ty" type="Single" />
        </parameters>
      </procedure>
      <procedure name="SetTextMatrix" visibility="public">
        <devnotes>
           set the Text Matrix to a,b,c,d and the text line Matrix x,y
        </devnotes>
        <parameters>
          <parameter name="a" type="Single" />
          <parameter name="b" type="Single" />
          <parameter name="c" type="Single" />
          <parameter name="d" type="Single" />
          <parameter name="x" type="Single" />
          <parameter name="y" type="Single" />
        </parameters>
      </procedure>
      <procedure name="MoveToNextLine" visibility="public">
        <devnotes>
           Move to the start of the next line
        </devnotes>
      </procedure>
      <procedure name="ShowText" visibility="public" procflags="overload">
        <devnotes>
           Show a text string
           Show a text string
           Show a text string
        </devnotes>
        <parameters>
          <parameter name="text" type="string" paramflags="const" />
          <parameter name="NextLine" type="Boolean">
            <value>
              False
            </value>
          </parameter>
        </parameters>
      </procedure>
      <procedure name="ShowText" visibility="public" procflags="overload">
        <devnotes>
           Show an Unicode Text string
        </devnotes>
        <parameters>
          <parameter name="PW" type="PWideChar" />
          <parameter name="NextLine" type="Boolean">
            <value>
              False
            </value>
          </parameter>
        </parameters>
      </procedure>
      <procedure name="ShowGlyph" visibility="public">
        <devnotes>
           Show an Unicode Text string, encoded as Glyphs or the current font
        </devnotes>
        <parameters>
          <parameter name="PW" type="PWORD" />
          <parameter name="Count" type="Integer" />
        </parameters>
      </procedure>
      <procedure name="ExecuteXObject" visibility="public">
        <devnotes>
           Paint the specified XObject
        </devnotes>
        <parameters>
          <parameter name="xObject" type="string" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="SetRGBFillColor" visibility="public">
        <devnotes>
           Set the color space to a Device-dependent RGB value
        </devnotes>
        <parameters>
          <parameter name="Value" type="TPdfColor" />
        </parameters>
      </procedure>
      <procedure name="SetRGBStrokeColor" visibility="public">
        <devnotes>
           Set the color space to a Device-dependent RGB value
        </devnotes>
        <parameters>
          <parameter name="Value" type="TPdfColor" />
        </parameters>
      </procedure>
      <procedure name="SetCMYKFillColor" visibility="public">
        <devnotes>
           Set the color space to a CMYK percent value
        </devnotes>
        <parameters>
          <parameter name="C" type="Integer" />
          <parameter name="M" type="Integer" />
          <parameter name="Y" type="Integer" />
          <parameter name="K" type="Integer" />
        </parameters>
      </procedure>
      <procedure name="SetCMYKStrokeColor" visibility="public">
        <devnotes>
           Set the color space to a CMYK value
        </devnotes>
        <parameters>
          <parameter name="C" type="Integer" />
          <parameter name="M" type="Integer" />
          <parameter name="Y" type="Integer" />
          <parameter name="K" type="Integer" />
        </parameters>
      </procedure>
      <procedure name="SetPage" visibility="public" procflags="virtual">
        <devnotes>
           assign the canvas to the specified page
        </devnotes>
        <parameters>
          <parameter name="APage" type="TPdfPage" />
        </parameters>
      </procedure>
      <procedure name="SetPDFFont" visibility="public">
        <devnotes>
           set the current font for the PDF Canvas
        </devnotes>
        <parameters>
          <parameter name="AFont" type="TPdfFont" />
          <parameter name="ASize" type="Single" />
        </parameters>
      </procedure>
      <function name="SetFont" visibility="public" procflags="overload">
        <devnotes>
           set the current font for the PDF Canvas
        </devnotes>
        <parameters>
          <parameter name="AName" type="RawUTF8" paramflags="const" />
          <parameter name="ASize" type="Single" />
          <parameter name="AStyle" type="TFontStyles" />
          <parameter name="ACharSet" type="Integer">
            <value>
              $FFFFFFFF
            </value>
          </parameter>
          <parameter name="AForceTTF" type="Integer">
            <value>
              $FFFFFFFF
            </value>
          </parameter>
          <parameter name="AIsFixedWidth" type="Boolean">
            <value>
              False
            </value>
          </parameter>
          <retval type="TPdfFont">
            <devnotes>
               a generic PDF font object
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="SetFont" visibility="public" procflags="overload">
        <devnotes>
           set the current font for the PDF Canvas
        </devnotes>
        <parameters>
          <parameter name="ADC" type="HDC" />
          <parameter name="ALogFont" type="tagLOGFONTW" paramflags="const" />
          <parameter name="ASize" type="Single" />
          <retval type="TPdfFont">
            <devnotes>
               a generic PDF font object
            </devnotes>
          </retval>
        </parameters>
      </function>
      <procedure name="TextOut" visibility="public">
        <devnotes>
           show some text at a specified page position
        </devnotes>
        <parameters>
          <parameter name="X" type="Single" />
          <parameter name="Y" type="Single" />
          <parameter name="Text" type="string" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="TextOutW" visibility="public">
        <devnotes>
           show some unicode text at a specified page position
        </devnotes>
        <parameters>
          <parameter name="X" type="Single" />
          <parameter name="Y" type="Single" />
          <parameter name="PW" type="PWideChar" />
        </parameters>
      </procedure>
      <procedure name="TextRect" visibility="public">
        <devnotes>
           show the text in the specified rectangle and alignment
        </devnotes>
        <parameters>
          <parameter name="ARect" type="TPdfRect" />
          <parameter name="Text" type="string" paramflags="const" />
          <parameter name="Alignment" type="TPdfAlignment" />
          <parameter name="Clipping" type="Boolean" />
        </parameters>
      </procedure>
      <procedure name="MultilineTextRect" visibility="public">
        <devnotes>
           show the text in the specified rectangle and alignment
        </devnotes>
        <parameters>
          <parameter name="ARect" type="TPdfRect" />
          <parameter name="Text" type="string" paramflags="const" />
          <parameter name="WordWrap" type="Boolean" />
        </parameters>
      </procedure>
      <procedure name="DrawXObject" visibility="public">
        <devnotes>
           draw the specified object (typicaly an image) with stretching
        </devnotes>
        <parameters>
          <parameter name="X" type="Single" />
          <parameter name="Y" type="Single" />
          <parameter name="AWidth" type="Single" />
          <parameter name="AHeight" type="Single" />
          <parameter name="AXObjectName" type="string" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="DrawXObjectEx" visibility="public">
        <devnotes>
           draw the specified object (typicaly an image) with stretching and clipping
        </devnotes>
        <parameters>
          <parameter name="X" type="Single" />
          <parameter name="Y" type="Single" />
          <parameter name="AWidth" type="Single" />
          <parameter name="AHeight" type="Single" />
          <parameter name="ClipX" type="Single" />
          <parameter name="ClipY" type="Single" />
          <parameter name="ClipWidth" type="Single" />
          <parameter name="ClipHeight" type="Single" />
          <parameter name="AXObjectName" type="string" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="Ellipse" visibility="public">
        <devnotes>
           draw an ellipse
        </devnotes>
        <parameters>
          <parameter name="x" type="Single" />
          <parameter name="y" type="Single" />
          <parameter name="width" type="Single" />
          <parameter name="height" type="Single" />
        </parameters>
      </procedure>
      <procedure name="RoundRect" visibility="public">
        <devnotes>
           draw a rounded rectangle
        </devnotes>
        <parameters>
          <parameter name="x1" type="Single" />
          <parameter name="y1" type="Single" />
          <parameter name="x2" type="Single" />
          <parameter name="y2" type="Single" />
          <parameter name="cx" type="Single" />
          <parameter name="cy" type="Single" />
        </parameters>
      </procedure>
      <function name="TextWidth" visibility="public">
        <devnotes>
           calculate width of specified text according to current Canvas attributes
        </devnotes>
        <parameters>
          <parameter name="Text" type="string" paramflags="const" />
          <retval type="Single" />
        </parameters>
      </function>
      <function name="UnicodeTextWidth" visibility="public">
        <devnotes>
           calculate width of specified text according to current Canvas attributes
        </devnotes>
        <parameters>
          <parameter name="PW" type="PWideChar" />
          <retval type="Single" />
        </parameters>
      </function>
      <function name="MeasureText" visibility="public">
        <devnotes>
           calculate the number of chars which can be displayed in the specified
        </devnotes>
        <parameters>
          <parameter name="Text" type="string" paramflags="const" />
          <parameter name="AWidth" type="Single" />
          <retval type="Integer" />
        </parameters>
      </function>
      <function name="GetNextWord" visibility="public">
        <devnotes>
           get the index of the next word in the supplied text
        </devnotes>
        <parameters>
          <parameter name="S" type="string" paramflags="const" />
          <parameter name="Index" type="Integer" paramflags="var" />
          <retval type="string" />
        </parameters>
      </function>
      <procedure name="RenderMetaFile" visibility="public">
        <devnotes>
           draw a metafile content into the PDF page
        </devnotes>
        <parameters>
          <parameter name="MF" type="TMetafile" />
          <parameter name="Scale" type="Single">
            <value>
              1
            </value>
          </parameter>
          <parameter name="XOff" type="Single">
            <value>
              0
            </value>
          </parameter>
          <parameter name="YOff" type="Single">
            <value>
              0
            </value>
          </parameter>
          <parameter name="UseSetTextJustification" type="Boolean">
            <value>
              True
            </value>
          </parameter>
          <parameter name="KerningHScaleBottom" type="Single">
            <value>
              99
            </value>
          </parameter>
          <parameter name="KerningHScaleTop" type="Single">
            <value>
              101
            </value>
          </parameter>
        </parameters>
      </procedure>
      <property name="Contents" visibility="public" read="FContents" type="TPdfStream">
        <devnotes>
           retrieve the current Canvas content stream, i.e. where the PDF
        </devnotes>
      </property>
      <property name="Page" visibility="public" read="GetPage" type="TPdfPage">
        <devnotes>
           retrieve the current Canvas Page
        </devnotes>
      </property>
      <property name="Doc" visibility="public" read="GetDoc" type="TPdfDocument">
        <devnotes>
           retrieve the associated PDF document instance which created this Canvas
        </devnotes>
      </property>
      <property name="RightToLeftText" visibility="public" read="fRightToLeftText" write="fRightToLeftText" type="Boolean">
        <devnotes>
           if Uniscribe-related methods must handle the text from right to left
        </devnotes>
      </property>
    </members>
  </class>
  <class name="TPdfDictionaryWrapper">
    <devnotes>
       common ancestor to all dictionary wrapper classes
    </devnotes>
    <ancestor name="TPersistent" namespace="Classes">
      <methodref name="AssignError" visibility="private">
      </methodref>
      <methodref name="AssignTo" visibility="public">
      </methodref>
      <methodref name="DefineProperties" visibility="public">
      </methodref>
      <methodref name="GetOwner" visibility="protected">
      </methodref>
      <methodref name="Destroy" visibility="public">
      </methodref>
      <methodref name="Assign" visibility="public">
      </methodref>
      <methodref name="GetNamePath" visibility="public">
      </methodref>
      <ancestor name="TObject" namespace="System">
        <methodref name="Create" visibility="public">
        </methodref>
        <methodref name="Free" visibility="public">
        </methodref>
        <methodref name="InitInstance" visibility="public">
        </methodref>
        <methodref name="CleanupInstance" visibility="public">
        </methodref>
        <methodref name="ClassType" visibility="public">
        </methodref>
        <methodref name="ClassName" visibility="public">
        </methodref>
        <methodref name="ClassNameIs" visibility="public">
        </methodref>
        <methodref name="ClassParent" visibility="public">
        </methodref>
        <methodref name="ClassInfo" visibility="public">
        </methodref>
        <methodref name="InstanceSize" visibility="public">
        </methodref>
        <methodref name="InheritsFrom" visibility="public">
        </methodref>
        <methodref name="MethodAddress" visibility="public">
        </methodref>
        <methodref name="MethodName" visibility="public">
        </methodref>
        <methodref name="FieldAddress" visibility="public">
        </methodref>
        <methodref name="GetInterface" visibility="public">
        </methodref>
        <methodref name="GetInterfaceEntry" visibility="public">
        </methodref>
        <methodref name="GetInterfaceTable" visibility="public">
        </methodref>
        <methodref name="SafeCallException" visibility="public">
        </methodref>
        <methodref name="AfterConstruction" visibility="public">
        </methodref>
        <methodref name="BeforeDestruction" visibility="public">
        </methodref>
        <methodref name="Dispatch" visibility="public">
        </methodref>
        <methodref name="DefaultHandler" visibility="public">
        </methodref>
        <methodref name="NewInstance" visibility="public">
        </methodref>
        <methodref name="FreeInstance" visibility="public">
        </methodref>
        <methodref name="Destroy" visibility="public">
        </methodref>
      </ancestor>
    </ancestor>
    <members>
      <field name="FData" type="TPdfDictionary" visibility="private" />
      <function name="GetHasData" visibility="private">
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <procedure name="SetData" visibility="protected">
        <parameters>
          <parameter name="AData" type="TPdfDictionary" />
        </parameters>
      </procedure>
      <property name="Data" visibility="public" read="FData" write="SetData" type="TPdfDictionary">
        <devnotes>
           the associated dictionary, containing all data
        </devnotes>
      </property>
      <property name="HasData" visibility="public" read="GetHasData" type="Boolean">
        <devnotes>
           return TRUE if has any data stored within
        </devnotes>
      </property>
    </members>
  </class>
  <const name="pgcOutline" type="TPdfGDIComment">
    <value>
      pgcOutline
    </value>
  </const>
  <const name="pgcBookmark" type="TPdfGDIComment">
    <value>
      pgcBookmark
    </value>
  </const>
  <const name="pgcLink" type="TPdfGDIComment">
    <value>
      pgcLink
    </value>
  </const>
  <enum name="TPdfGDIComment">
    <devnotes>
       defines the data stored inside a EMR_GDICOMMENT message
    </devnotes>
    <element name="pgcOutline" />
    <element name="pgcBookmark" />
    <element name="pgcLink" />
  </enum>
  <class name="TPdfInfo">
    <devnotes>
       a dictionary wrapper class for the PDF document information fields
    </devnotes>
    <ancestor name="TPdfDictionaryWrapper" namespace="SynPdf">
      <methodref name="GetHasData" visibility="private" />
      <methodref name="SetData" visibility="protected" />
      <propertyref name="Data" visibility="public">
        <devnotes>
           the associated dictionary, containing all data
        </devnotes>
      </propertyref>
      <propertyref name="HasData" visibility="public">
        <devnotes>
           return TRUE if has any data stored within
        </devnotes>
      </propertyref>
      <ancestor name="TPersistent" namespace="Classes">
        <methodref name="AssignError" visibility="private">
        </methodref>
        <methodref name="AssignTo" visibility="public">
        </methodref>
        <methodref name="DefineProperties" visibility="public">
        </methodref>
        <methodref name="GetOwner" visibility="protected">
        </methodref>
        <methodref name="Destroy" visibility="public">
        </methodref>
        <methodref name="Assign" visibility="public">
        </methodref>
        <methodref name="GetNamePath" visibility="public">
        </methodref>
        <ancestor name="TObject" namespace="System">
          <methodref name="Create" visibility="public">
          </methodref>
          <methodref name="Free" visibility="public">
          </methodref>
          <methodref name="InitInstance" visibility="public">
          </methodref>
          <methodref name="CleanupInstance" visibility="public">
          </methodref>
          <methodref name="ClassType" visibility="public">
          </methodref>
          <methodref name="ClassName" visibility="public">
          </methodref>
          <methodref name="ClassNameIs" visibility="public">
          </methodref>
          <methodref name="ClassParent" visibility="public">
          </methodref>
          <methodref name="ClassInfo" visibility="public">
          </methodref>
          <methodref name="InstanceSize" visibility="public">
          </methodref>
          <methodref name="InheritsFrom" visibility="public">
          </methodref>
          <methodref name="MethodAddress" visibility="public">
          </methodref>
          <methodref name="MethodName" visibility="public">
          </methodref>
          <methodref name="FieldAddress" visibility="public">
          </methodref>
          <methodref name="GetInterface" visibility="public">
          </methodref>
          <methodref name="GetInterfaceEntry" visibility="public">
          </methodref>
          <methodref name="GetInterfaceTable" visibility="public">
          </methodref>
          <methodref name="SafeCallException" visibility="public">
          </methodref>
          <methodref name="AfterConstruction" visibility="public">
          </methodref>
          <methodref name="BeforeDestruction" visibility="public">
          </methodref>
          <methodref name="Dispatch" visibility="public">
          </methodref>
          <methodref name="DefaultHandler" visibility="public">
          </methodref>
          <methodref name="NewInstance" visibility="public">
          </methodref>
          <methodref name="FreeInstance" visibility="public">
          </methodref>
          <methodref name="Destroy" visibility="public">
          </methodref>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <function name="GetAuthor" visibility="private">
        <parameters>
          <retval type="string" />
        </parameters>
      </function>
      <procedure name="SetAuthor" visibility="private">
        <parameters>
          <parameter name="Value" type="string" paramflags="const" />
        </parameters>
      </procedure>
      <function name="GetCreationDate" visibility="private">
        <parameters>
          <retval type="TDateTime" />
        </parameters>
      </function>
      <procedure name="SetCreationDate" visibility="private">
        <parameters>
          <parameter name="Value" type="TDateTime" />
        </parameters>
      </procedure>
      <function name="GetCreator" visibility="private">
        <parameters>
          <retval type="string" />
        </parameters>
      </function>
      <procedure name="SetCreator" visibility="private">
        <parameters>
          <parameter name="Value" type="string" paramflags="const" />
        </parameters>
      </procedure>
      <function name="GetKeywords" visibility="private">
        <parameters>
          <retval type="string" />
        </parameters>
      </function>
      <procedure name="SetKeywords" visibility="private">
        <parameters>
          <parameter name="Value" type="string" paramflags="const" />
        </parameters>
      </procedure>
      <function name="GetSubject" visibility="private">
        <parameters>
          <retval type="string" />
        </parameters>
      </function>
      <procedure name="SetSubject" visibility="private">
        <parameters>
          <parameter name="Value" type="string" paramflags="const" />
        </parameters>
      </procedure>
      <function name="GetTitle" visibility="private">
        <parameters>
          <retval type="string" />
        </parameters>
      </function>
      <procedure name="SetTitle" visibility="private">
        <parameters>
          <parameter name="Value" type="string" paramflags="const" />
        </parameters>
      </procedure>
      <function name="GetModDate" visibility="private">
        <parameters>
          <retval type="TDateTime" />
        </parameters>
      </function>
      <procedure name="SetModDate" visibility="private">
        <parameters>
          <parameter name="Value" type="TDateTime" />
        </parameters>
      </procedure>
      <property name="Author" visibility="public" read="GetAuthor" write="SetAuthor" type="string">
        <devnotes>
           the PDF document Author
        </devnotes>
      </property>
      <property name="CreationDate" visibility="public" read="GetCreationDate" write="SetCreationDate" type="TDateTime">
        <devnotes>
           the PDF document Creation Date
        </devnotes>
      </property>
      <property name="Creator" visibility="public" read="GetCreator" write="SetCreator" type="string">
        <devnotes>
           the Software or Library name which created this PDF document
        </devnotes>
      </property>
      <property name="Keywords" visibility="public" read="GetKeywords" write="SetKeywords" type="string">
        <devnotes>
           the PDF document associated key words
        </devnotes>
      </property>
      <property name="ModDate" visibility="public" read="GetModDate" write="SetModDate" type="TDateTime">
        <devnotes>
           the PDF document modification date
        </devnotes>
      </property>
      <property name="Subject" visibility="public" read="GetSubject" write="SetSubject" type="string">
        <devnotes>
           the PDF document subject
        </devnotes>
      </property>
      <property name="Title" visibility="public" read="GetTitle" write="SetTitle" type="string">
        <devnotes>
           the PDF document title
        </devnotes>
      </property>
    </members>
  </class>
  <class name="TPdfCatalog">
    <ancestor name="TPdfDictionaryWrapper" namespace="SynPdf">
      <methodref name="GetHasData" visibility="private" />
      <methodref name="SetData" visibility="protected" />
      <propertyref name="Data" visibility="public">
        <devnotes>
           the associated dictionary, containing all data
        </devnotes>
      </propertyref>
      <propertyref name="HasData" visibility="public">
        <devnotes>
           return TRUE if has any data stored within
        </devnotes>
      </propertyref>
      <ancestor name="TPersistent" namespace="Classes">
        <methodref name="AssignError" visibility="private">
        </methodref>
        <methodref name="AssignTo" visibility="public">
        </methodref>
        <methodref name="DefineProperties" visibility="public">
        </methodref>
        <methodref name="GetOwner" visibility="protected">
        </methodref>
        <methodref name="Destroy" visibility="public">
        </methodref>
        <methodref name="Assign" visibility="public">
        </methodref>
        <methodref name="GetNamePath" visibility="public">
        </methodref>
        <ancestor name="TObject" namespace="System">
          <methodref name="Create" visibility="public">
          </methodref>
          <methodref name="Free" visibility="public">
          </methodref>
          <methodref name="InitInstance" visibility="public">
          </methodref>
          <methodref name="CleanupInstance" visibility="public">
          </methodref>
          <methodref name="ClassType" visibility="public">
          </methodref>
          <methodref name="ClassName" visibility="public">
          </methodref>
          <methodref name="ClassNameIs" visibility="public">
          </methodref>
          <methodref name="ClassParent" visibility="public">
          </methodref>
          <methodref name="ClassInfo" visibility="public">
          </methodref>
          <methodref name="InstanceSize" visibility="public">
          </methodref>
          <methodref name="InheritsFrom" visibility="public">
          </methodref>
          <methodref name="MethodAddress" visibility="public">
          </methodref>
          <methodref name="MethodName" visibility="public">
          </methodref>
          <methodref name="FieldAddress" visibility="public">
          </methodref>
          <methodref name="GetInterface" visibility="public">
          </methodref>
          <methodref name="GetInterfaceEntry" visibility="public">
          </methodref>
          <methodref name="GetInterfaceTable" visibility="public">
          </methodref>
          <methodref name="SafeCallException" visibility="public">
          </methodref>
          <methodref name="AfterConstruction" visibility="public">
          </methodref>
          <methodref name="BeforeDestruction" visibility="public">
          </methodref>
          <methodref name="Dispatch" visibility="public">
          </methodref>
          <methodref name="DefaultHandler" visibility="public">
          </methodref>
          <methodref name="NewInstance" visibility="public">
          </methodref>
          <methodref name="FreeInstance" visibility="public">
          </methodref>
          <methodref name="Destroy" visibility="public">
          </methodref>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <field name="FOpenAction" type="TPdfDestination" visibility="private" />
      <procedure name="SetPageLayout" visibility="private">
        <parameters>
          <parameter name="Value" type="TPdfPageLayout" />
        </parameters>
      </procedure>
      <procedure name="SetPageMode" visibility="private">
        <parameters>
          <parameter name="Value" type="TPdfPageMode" />
        </parameters>
      </procedure>
      <procedure name="SetNonFullScreenPageMode" visibility="private">
        <parameters>
          <parameter name="Value" type="TPdfPageMode" />
        </parameters>
      </procedure>
      <procedure name="SetViewerPreference" visibility="private">
        <parameters>
          <parameter name="Value" type="TPdfViewerPreferences" />
        </parameters>
      </procedure>
      <procedure name="SetPages" visibility="private">
        <parameters>
          <parameter name="APages" type="TPdfDictionary" />
        </parameters>
      </procedure>
      <function name="GetPageLayout" visibility="private">
        <parameters>
          <retval type="TPdfPageLayout">
            <devnotes>
               The page layout to be used when the document is opened
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="GetPageMode" visibility="private">
        <parameters>
          <retval type="TPdfPageMode">
            <devnotes>
               Page mode determines how the document should appear when opened
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="GetNonFullScreenPageMode" visibility="private">
        <parameters>
          <retval type="TPdfPageMode">
            <devnotes>
               Page mode determines how the document should appear when opened
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="GetViewerPreference" visibility="private">
        <parameters>
          <retval type="TPdfViewerPreferences">
            <devnotes>
               set of Viewer preferences
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="GetPages" visibility="private">
        <parameters>
          <retval type="TPdfDictionary">
            <devnotes>
               a PDF Dictionay is used to manage Key / Value pairs
            </devnotes>
          </retval>
        </parameters>
      </function>
      <procedure name="SaveOpenAction" visibility="protected">
      </procedure>
      <property name="OpenAction" visibility="public" read="FOpenAction" write="FOpenAction" type="TPdfDestination">
        <devnotes>
           a Destination to be displayed when the document is opened
        </devnotes>
      </property>
      <property name="PageLayout" visibility="public" read="GetPageLayout" write="SetPageLayout" type="TPdfPageLayout">
        <devnotes>
           The page layout to be used when the document is opened
        </devnotes>
      </property>
      <property name="NonFullScreenPageMode" visibility="public" read="GetNonFullScreenPageMode" write="SetNonFullScreenPageMode" type="TPdfPageMode">
        <devnotes>
           Page mode determines how the document should appear when opened
        </devnotes>
      </property>
      <property name="PageMode" visibility="public" read="GetPageMode" write="SetPageMode" type="TPdfPageMode">
        <devnotes>
           Page mode determines how the document should appear when opened
        </devnotes>
      </property>
      <property name="ViewerPreference" visibility="public" read="GetViewerPreference" write="SetViewerPreference" type="TPdfViewerPreferences" />
      <property name="Pages" visibility="public" read="GetPages" write="SetPages" type="TPdfDictionary">
        <devnotes>
           The page tree node that is the root of the document’s page tree
        </devnotes>
      </property>
    </members>
  </class>
  <class name="TPdfFont">
    <devnotes>
       a generic PDF font object
    </devnotes>
    <ancestor name="TPdfDictionaryWrapper" namespace="SynPdf">
      <methodref name="GetHasData" visibility="private" />
      <methodref name="SetData" visibility="protected" />
      <propertyref name="Data" visibility="public">
        <devnotes>
           the associated dictionary, containing all data
        </devnotes>
      </propertyref>
      <propertyref name="HasData" visibility="public">
        <devnotes>
           return TRUE if has any data stored within
        </devnotes>
      </propertyref>
      <ancestor name="TPersistent" namespace="Classes">
        <methodref name="AssignError" visibility="private">
        </methodref>
        <methodref name="AssignTo" visibility="public">
        </methodref>
        <methodref name="DefineProperties" visibility="public">
        </methodref>
        <methodref name="GetOwner" visibility="protected">
        </methodref>
        <methodref name="Destroy" visibility="public">
        </methodref>
        <methodref name="Assign" visibility="public">
        </methodref>
        <methodref name="GetNamePath" visibility="public">
        </methodref>
        <ancestor name="TObject" namespace="System">
          <methodref name="Create" visibility="public">
          </methodref>
          <methodref name="Free" visibility="public">
          </methodref>
          <methodref name="InitInstance" visibility="public">
          </methodref>
          <methodref name="CleanupInstance" visibility="public">
          </methodref>
          <methodref name="ClassType" visibility="public">
          </methodref>
          <methodref name="ClassName" visibility="public">
          </methodref>
          <methodref name="ClassNameIs" visibility="public">
          </methodref>
          <methodref name="ClassParent" visibility="public">
          </methodref>
          <methodref name="ClassInfo" visibility="public">
          </methodref>
          <methodref name="InstanceSize" visibility="public">
          </methodref>
          <methodref name="InheritsFrom" visibility="public">
          </methodref>
          <methodref name="MethodAddress" visibility="public">
          </methodref>
          <methodref name="MethodName" visibility="public">
          </methodref>
          <methodref name="FieldAddress" visibility="public">
          </methodref>
          <methodref name="GetInterface" visibility="public">
          </methodref>
          <methodref name="GetInterfaceEntry" visibility="public">
          </methodref>
          <methodref name="GetInterfaceTable" visibility="public">
          </methodref>
          <methodref name="SafeCallException" visibility="public">
          </methodref>
          <methodref name="AfterConstruction" visibility="public">
          </methodref>
          <methodref name="BeforeDestruction" visibility="public">
          </methodref>
          <methodref name="Dispatch" visibility="public">
          </methodref>
          <methodref name="DefaultHandler" visibility="public">
          </methodref>
          <methodref name="NewInstance" visibility="public">
          </methodref>
          <methodref name="FreeInstance" visibility="public">
          </methodref>
          <methodref name="Destroy" visibility="public">
          </methodref>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <field name="fName" type="string" visibility="protected" />
      <field name="fShortCut" type="string" visibility="protected" />
      <field name="fFirstChar" type="Integer" visibility="protected" />
      <field name="fLastChar" type="Integer" visibility="protected" />
      <field name="fDefaultWidth" type="Word" visibility="protected" />
      <field name="fAscent" type="Integer" visibility="protected" />
      <field name="fDescent" type="Integer" visibility="protected" />
      <field name="fUnicode" type="Boolean" visibility="protected" />
      <field name="fTrueTypeFontsIndex" type="Integer" visibility="protected">
        <devnotes>
           index in TrueTypeFontsIndex[] + 1, 0 if not a TPdfFontTrueType
        </devnotes>
      </field>
      <field name="fWinAnsiUsed" visibility="protected">
        <devnotes>
           contains a bit for every WinAnsi encoded char
        </devnotes>
        <set name="fWinAnsiUsed" type="Char" />
      </field>
      <constructor name="Create" visibility="public">
        <devnotes>
           create the PDF font object instance
        </devnotes>
        <parameters>
          <parameter name="AXref" type="TPdfXref" />
          <parameter name="AName" type="string" paramflags="const" />
        </parameters>
      </constructor>
      <procedure name="AddUsedWinAnsiChar" visibility="public">
        <devnotes>
           mark some WinAnsi char as used
        </devnotes>
        <parameters>
          <parameter name="aChar" type="Char" />
        </parameters>
      </procedure>
      <function name="GetAnsiCharWidth" visibility="public" procflags="virtual">
        <devnotes>
           retrieve the width of a specified character
        </devnotes>
        <parameters>
          <parameter name="AText" type="string" paramflags="const" />
          <parameter name="APos" type="Integer" />
          <retval type="Integer" />
        </parameters>
      </function>
      <property name="Name" visibility="public" read="fName" type="string">
        <devnotes>
           the internal PDF font name (e.g. 'Helvetica-Bold')
        </devnotes>
      </property>
      <property name="ShortCut" visibility="public" read="fShortCut" type="string">
        <devnotes>
           the internal PDF shortcut (e.g. 'F3')
        </devnotes>
      </property>
      <property name="Unicode" visibility="public" read="fUnicode" type="Boolean">
        <devnotes>
           is set to TRUE if the font is dedicated to Unicode Chars
        </devnotes>
      </property>
    </members>
  </class>
  <pointer name="PPdfWinAnsiWidth" type="TPdfWinAnsiWidth" indircnt="1" />
  <array name="TPdfWinAnsiWidth">
    <element type="Word" />
  </array>
  <class name="TPdfFontWinAnsi">
    <devnotes>
       a generic PDF font object, handling at least WinAnsi encoding
    </devnotes>
    <ancestor name="TPdfFont" namespace="SynPdf">
      <methodref name="Create" visibility="public">
        <devnotes>
           create the PDF font object instance
        </devnotes>
      </methodref>
      <methodref name="AddUsedWinAnsiChar" visibility="public">
        <devnotes>
           mark some WinAnsi char as used
        </devnotes>
      </methodref>
      <methodref name="GetAnsiCharWidth" visibility="public">
        <devnotes>
           retrieve the width of a specified character
        </devnotes>
      </methodref>
      <propertyref name="Name" visibility="public">
        <devnotes>
           the internal PDF font name (e.g. 'Helvetica-Bold')
        </devnotes>
      </propertyref>
      <propertyref name="ShortCut" visibility="public">
        <devnotes>
           the internal PDF shortcut (e.g. 'F3')
        </devnotes>
      </propertyref>
      <propertyref name="Unicode" visibility="public">
        <devnotes>
           is set to TRUE if the font is dedicated to Unicode Chars
        </devnotes>
      </propertyref>
      <ancestor name="TPdfDictionaryWrapper" namespace="SynPdf">
        <methodref name="GetHasData" visibility="private" />
        <methodref name="SetData" visibility="protected" />
        <propertyref name="Data" visibility="public">
          <devnotes>
             the associated dictionary, containing all data
          </devnotes>
        </propertyref>
        <propertyref name="HasData" visibility="public">
          <devnotes>
             return TRUE if has any data stored within
          </devnotes>
        </propertyref>
        <ancestor name="TPersistent" namespace="Classes">
          <methodref name="AssignError" visibility="private">
          </methodref>
          <methodref name="AssignTo" visibility="public">
          </methodref>
          <methodref name="DefineProperties" visibility="public">
          </methodref>
          <methodref name="GetOwner" visibility="protected">
          </methodref>
          <methodref name="Destroy" visibility="public">
          </methodref>
          <methodref name="Assign" visibility="public">
          </methodref>
          <methodref name="GetNamePath" visibility="public">
          </methodref>
          <ancestor name="TObject" namespace="System">
            <methodref name="Create" visibility="public">
            </methodref>
            <methodref name="Free" visibility="public">
            </methodref>
            <methodref name="InitInstance" visibility="public">
            </methodref>
            <methodref name="CleanupInstance" visibility="public">
            </methodref>
            <methodref name="ClassType" visibility="public">
            </methodref>
            <methodref name="ClassName" visibility="public">
            </methodref>
            <methodref name="ClassNameIs" visibility="public">
            </methodref>
            <methodref name="ClassParent" visibility="public">
            </methodref>
            <methodref name="ClassInfo" visibility="public">
            </methodref>
            <methodref name="InstanceSize" visibility="public">
            </methodref>
            <methodref name="InheritsFrom" visibility="public">
            </methodref>
            <methodref name="MethodAddress" visibility="public">
            </methodref>
            <methodref name="MethodName" visibility="public">
            </methodref>
            <methodref name="FieldAddress" visibility="public">
            </methodref>
            <methodref name="GetInterface" visibility="public">
            </methodref>
            <methodref name="GetInterfaceEntry" visibility="public">
            </methodref>
            <methodref name="GetInterfaceTable" visibility="public">
            </methodref>
            <methodref name="SafeCallException" visibility="public">
            </methodref>
            <methodref name="AfterConstruction" visibility="public">
            </methodref>
            <methodref name="BeforeDestruction" visibility="public">
            </methodref>
            <methodref name="Dispatch" visibility="public">
            </methodref>
            <methodref name="DefaultHandler" visibility="public">
            </methodref>
            <methodref name="NewInstance" visibility="public">
            </methodref>
            <methodref name="FreeInstance" visibility="public">
            </methodref>
            <methodref name="Destroy" visibility="public">
            </methodref>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <field name="fWinAnsiWidth" type="PPdfWinAnsiWidth" visibility="protected">
        <devnotes>
           contain the Width array of the corresponding WinAnsi encoded char
        </devnotes>
      </field>
      <function name="GetAnsiCharWidth" visibility="public" procflags="override">
        <devnotes>
           retrieve the width of a specified character
        </devnotes>
        <parameters>
          <parameter name="AText" type="string" paramflags="const" />
          <parameter name="APos" type="Integer" />
          <retval type="Integer" />
        </parameters>
      </function>
      <destructor name="Destroy" visibility="public">
        <devnotes>
           release the used memory
        </devnotes>
        <parameters>
        </parameters>
      </destructor>
    </members>
  </class>
  <class name="TPdfFontType1">
    <devnotes>
       an embedded WinAnsi-Encoded standard Type 1 font
    </devnotes>
    <ancestor name="TPdfFontWinAnsi" namespace="SynPdf">
      <methodref name="GetAnsiCharWidth" visibility="public">
        <devnotes>
           retrieve the width of a specified character
        </devnotes>
      </methodref>
      <methodref name="Destroy" visibility="public">
        <devnotes>
           release the used memory
        </devnotes>
      </methodref>
      <ancestor name="TPdfFont" namespace="SynPdf">
        <methodref name="Create" visibility="public">
          <devnotes>
             create the PDF font object instance
          </devnotes>
        </methodref>
        <methodref name="AddUsedWinAnsiChar" visibility="public">
          <devnotes>
             mark some WinAnsi char as used
          </devnotes>
        </methodref>
        <methodref name="GetAnsiCharWidth" visibility="public">
          <devnotes>
             retrieve the width of a specified character
          </devnotes>
        </methodref>
        <propertyref name="Name" visibility="public">
          <devnotes>
             the internal PDF font name (e.g. 'Helvetica-Bold')
          </devnotes>
        </propertyref>
        <propertyref name="ShortCut" visibility="public">
          <devnotes>
             the internal PDF shortcut (e.g. 'F3')
          </devnotes>
        </propertyref>
        <propertyref name="Unicode" visibility="public">
          <devnotes>
             is set to TRUE if the font is dedicated to Unicode Chars
          </devnotes>
        </propertyref>
        <ancestor name="TPdfDictionaryWrapper" namespace="SynPdf">
          <methodref name="GetHasData" visibility="private" />
          <methodref name="SetData" visibility="protected" />
          <propertyref name="Data" visibility="public">
            <devnotes>
               the associated dictionary, containing all data
            </devnotes>
          </propertyref>
          <propertyref name="HasData" visibility="public">
            <devnotes>
               return TRUE if has any data stored within
            </devnotes>
          </propertyref>
          <ancestor name="TPersistent" namespace="Classes">
            <methodref name="AssignError" visibility="private">
            </methodref>
            <methodref name="AssignTo" visibility="public">
            </methodref>
            <methodref name="DefineProperties" visibility="public">
            </methodref>
            <methodref name="GetOwner" visibility="protected">
            </methodref>
            <methodref name="Destroy" visibility="public">
            </methodref>
            <methodref name="Assign" visibility="public">
            </methodref>
            <methodref name="GetNamePath" visibility="public">
            </methodref>
            <ancestor name="TObject" namespace="System">
              <methodref name="Create" visibility="public">
              </methodref>
              <methodref name="Free" visibility="public">
              </methodref>
              <methodref name="InitInstance" visibility="public">
              </methodref>
              <methodref name="CleanupInstance" visibility="public">
              </methodref>
              <methodref name="ClassType" visibility="public">
              </methodref>
              <methodref name="ClassName" visibility="public">
              </methodref>
              <methodref name="ClassNameIs" visibility="public">
              </methodref>
              <methodref name="ClassParent" visibility="public">
              </methodref>
              <methodref name="ClassInfo" visibility="public">
              </methodref>
              <methodref name="InstanceSize" visibility="public">
              </methodref>
              <methodref name="InheritsFrom" visibility="public">
              </methodref>
              <methodref name="MethodAddress" visibility="public">
              </methodref>
              <methodref name="MethodName" visibility="public">
              </methodref>
              <methodref name="FieldAddress" visibility="public">
              </methodref>
              <methodref name="GetInterface" visibility="public">
              </methodref>
              <methodref name="GetInterfaceEntry" visibility="public">
              </methodref>
              <methodref name="GetInterfaceTable" visibility="public">
              </methodref>
              <methodref name="SafeCallException" visibility="public">
              </methodref>
              <methodref name="AfterConstruction" visibility="public">
              </methodref>
              <methodref name="BeforeDestruction" visibility="public">
              </methodref>
              <methodref name="Dispatch" visibility="public">
              </methodref>
              <methodref name="DefaultHandler" visibility="public">
              </methodref>
              <methodref name="NewInstance" visibility="public">
              </methodref>
              <methodref name="FreeInstance" visibility="public">
              </methodref>
              <methodref name="Destroy" visibility="public">
              </methodref>
            </ancestor>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <constructor name="Create" visibility="public">
        <devnotes>
           create a standard font instance, with a given name and char widths
        </devnotes>
        <parameters>
          <parameter name="AXref" type="TPdfXref" />
          <parameter name="AName" type="string" paramflags="const" />
          <parameter name="WidthArray" type="PSmallIntArray" />
        </parameters>
      </constructor>
    </members>
  </class>
  <class name="TPdfFontCIDFontType2">
    <devnotes>
       an embedded Composite CIDFontType2
    </devnotes>
    <ancestor name="TPdfFont" namespace="SynPdf">
      <methodref name="Create" visibility="public">
        <devnotes>
           create the PDF font object instance
        </devnotes>
      </methodref>
      <methodref name="AddUsedWinAnsiChar" visibility="public">
        <devnotes>
           mark some WinAnsi char as used
        </devnotes>
      </methodref>
      <methodref name="GetAnsiCharWidth" visibility="public">
        <devnotes>
           retrieve the width of a specified character
        </devnotes>
      </methodref>
      <propertyref name="Name" visibility="public">
        <devnotes>
           the internal PDF font name (e.g. 'Helvetica-Bold')
        </devnotes>
      </propertyref>
      <propertyref name="ShortCut" visibility="public">
        <devnotes>
           the internal PDF shortcut (e.g. 'F3')
        </devnotes>
      </propertyref>
      <propertyref name="Unicode" visibility="public">
        <devnotes>
           is set to TRUE if the font is dedicated to Unicode Chars
        </devnotes>
      </propertyref>
      <ancestor name="TPdfDictionaryWrapper" namespace="SynPdf">
        <methodref name="GetHasData" visibility="private" />
        <methodref name="SetData" visibility="protected" />
        <propertyref name="Data" visibility="public">
          <devnotes>
             the associated dictionary, containing all data
          </devnotes>
        </propertyref>
        <propertyref name="HasData" visibility="public">
          <devnotes>
             return TRUE if has any data stored within
          </devnotes>
        </propertyref>
        <ancestor name="TPersistent" namespace="Classes">
          <methodref name="AssignError" visibility="private">
          </methodref>
          <methodref name="AssignTo" visibility="public">
          </methodref>
          <methodref name="DefineProperties" visibility="public">
          </methodref>
          <methodref name="GetOwner" visibility="protected">
          </methodref>
          <methodref name="Destroy" visibility="public">
          </methodref>
          <methodref name="Assign" visibility="public">
          </methodref>
          <methodref name="GetNamePath" visibility="public">
          </methodref>
          <ancestor name="TObject" namespace="System">
            <methodref name="Create" visibility="public">
            </methodref>
            <methodref name="Free" visibility="public">
            </methodref>
            <methodref name="InitInstance" visibility="public">
            </methodref>
            <methodref name="CleanupInstance" visibility="public">
            </methodref>
            <methodref name="ClassType" visibility="public">
            </methodref>
            <methodref name="ClassName" visibility="public">
            </methodref>
            <methodref name="ClassNameIs" visibility="public">
            </methodref>
            <methodref name="ClassParent" visibility="public">
            </methodref>
            <methodref name="ClassInfo" visibility="public">
            </methodref>
            <methodref name="InstanceSize" visibility="public">
            </methodref>
            <methodref name="InheritsFrom" visibility="public">
            </methodref>
            <methodref name="MethodAddress" visibility="public">
            </methodref>
            <methodref name="MethodName" visibility="public">
            </methodref>
            <methodref name="FieldAddress" visibility="public">
            </methodref>
            <methodref name="GetInterface" visibility="public">
            </methodref>
            <methodref name="GetInterfaceEntry" visibility="public">
            </methodref>
            <methodref name="GetInterfaceTable" visibility="public">
            </methodref>
            <methodref name="SafeCallException" visibility="public">
            </methodref>
            <methodref name="AfterConstruction" visibility="public">
            </methodref>
            <methodref name="BeforeDestruction" visibility="public">
            </methodref>
            <methodref name="Dispatch" visibility="public">
            </methodref>
            <methodref name="DefaultHandler" visibility="public">
            </methodref>
            <methodref name="NewInstance" visibility="public">
            </methodref>
            <methodref name="FreeInstance" visibility="public">
            </methodref>
            <methodref name="Destroy" visibility="public">
            </methodref>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
  </class>
  <class name="TPdfTTF">
    <devnotes>
       handle Unicode glyph description for a True Type Font
    </devnotes>
    <ancestor name="TObject" namespace="System">
      <methodref name="Create" visibility="public">
      </methodref>
      <methodref name="Free" visibility="public">
      </methodref>
      <methodref name="InitInstance" visibility="public">
      </methodref>
      <methodref name="CleanupInstance" visibility="public">
      </methodref>
      <methodref name="ClassType" visibility="public">
      </methodref>
      <methodref name="ClassName" visibility="public">
      </methodref>
      <methodref name="ClassNameIs" visibility="public">
      </methodref>
      <methodref name="ClassParent" visibility="public">
      </methodref>
      <methodref name="ClassInfo" visibility="public">
      </methodref>
      <methodref name="InstanceSize" visibility="public">
      </methodref>
      <methodref name="InheritsFrom" visibility="public">
      </methodref>
      <methodref name="MethodAddress" visibility="public">
      </methodref>
      <methodref name="MethodName" visibility="public">
      </methodref>
      <methodref name="FieldAddress" visibility="public">
      </methodref>
      <methodref name="GetInterface" visibility="public">
      </methodref>
      <methodref name="GetInterfaceEntry" visibility="public">
      </methodref>
      <methodref name="GetInterfaceTable" visibility="public">
      </methodref>
      <methodref name="SafeCallException" visibility="public">
      </methodref>
      <methodref name="AfterConstruction" visibility="public">
      </methodref>
      <methodref name="BeforeDestruction" visibility="public">
      </methodref>
      <methodref name="Dispatch" visibility="public">
      </methodref>
      <methodref name="DefaultHandler" visibility="public">
      </methodref>
      <methodref name="NewInstance" visibility="public">
      </methodref>
      <methodref name="FreeInstance" visibility="public">
      </methodref>
      <methodref name="Destroy" visibility="public">
      </methodref>
    </ancestor>
    <members>
      <field name="fcmap" type="TWordDynArray" visibility="protected" />
      <field name="fhead" type="TWordDynArray" visibility="protected" />
      <field name="fhhea" type="TWordDynArray" visibility="protected" />
      <field name="fhmtx" type="TWordDynArray" visibility="protected" />
      <field name="head" visibility="public">
        <devnotes>
           Font header
        </devnotes>
        <pointer name="head" type="TCmapHEAD" indircnt="1" />
      </field>
      <field name="hhea" visibility="public">
        <devnotes>
           Horizontal header
        </devnotes>
        <pointer name="hhea" type="TCmapHHEA" indircnt="1" />
      </field>
      <field name="fmt4" visibility="public">
        <devnotes>
           Character to glyph mapping (cmap) table, in format 4
        </devnotes>
        <pointer name="fmt4" type="TCmapFmt4" indircnt="1" />
      </field>
      <field name="startCode" type="PWordArray" visibility="public">
        <devnotes>
           Start character code for each cmap format 4 segment
        </devnotes>
      </field>
      <field name="endCode" type="PWordArray" visibility="public">
        <devnotes>
           End characterCode for each cmap format 4 segment
        </devnotes>
      </field>
      <field name="idDelta" type="PSmallIntArray" visibility="public">
        <devnotes>
           Delta for all character codes in each cmap format 4 segment
        </devnotes>
      </field>
      <field name="idRangeOffset" type="PWordArray" visibility="public">
        <devnotes>
           Offsets into glyphIndexArray or 0
        </devnotes>
      </field>
      <field name="glyphIndexArray" type="PWordArray" visibility="public">
        <devnotes>
           Glyph index array (arbitrary length)
        </devnotes>
      </field>
      <constructor name="Create" visibility="public">
        <devnotes>
           create Unicode glyph description for a supplied True Type Font
        </devnotes>
        <parameters>
          <parameter name="aUnicodeTTF" type="TPdfFontTrueType" />
        </parameters>
      </constructor>
    </members>
  </class>
  <array name="TUsedWide">
    <element type=":93" />
  </array>
  <class name="TPdfFontTrueType">
    <devnotes>
       handle TrueType Font
    </devnotes>
    <ancestor name="TPdfFontWinAnsi" namespace="SynPdf">
      <methodref name="GetAnsiCharWidth" visibility="public">
        <devnotes>
           retrieve the width of a specified character
        </devnotes>
      </methodref>
      <methodref name="Destroy" visibility="public">
        <devnotes>
           release the used memory
        </devnotes>
      </methodref>
      <ancestor name="TPdfFont" namespace="SynPdf">
        <methodref name="Create" visibility="public">
          <devnotes>
             create the PDF font object instance
          </devnotes>
        </methodref>
        <methodref name="AddUsedWinAnsiChar" visibility="public">
          <devnotes>
             mark some WinAnsi char as used
          </devnotes>
        </methodref>
        <methodref name="GetAnsiCharWidth" visibility="public">
          <devnotes>
             retrieve the width of a specified character
          </devnotes>
        </methodref>
        <propertyref name="Name" visibility="public">
          <devnotes>
             the internal PDF font name (e.g. 'Helvetica-Bold')
          </devnotes>
        </propertyref>
        <propertyref name="ShortCut" visibility="public">
          <devnotes>
             the internal PDF shortcut (e.g. 'F3')
          </devnotes>
        </propertyref>
        <propertyref name="Unicode" visibility="public">
          <devnotes>
             is set to TRUE if the font is dedicated to Unicode Chars
          </devnotes>
        </propertyref>
        <ancestor name="TPdfDictionaryWrapper" namespace="SynPdf">
          <methodref name="GetHasData" visibility="private" />
          <methodref name="SetData" visibility="protected" />
          <propertyref name="Data" visibility="public">
            <devnotes>
               the associated dictionary, containing all data
            </devnotes>
          </propertyref>
          <propertyref name="HasData" visibility="public">
            <devnotes>
               return TRUE if has any data stored within
            </devnotes>
          </propertyref>
          <ancestor name="TPersistent" namespace="Classes">
            <methodref name="AssignError" visibility="private">
            </methodref>
            <methodref name="AssignTo" visibility="public">
            </methodref>
            <methodref name="DefineProperties" visibility="public">
            </methodref>
            <methodref name="GetOwner" visibility="protected">
            </methodref>
            <methodref name="Destroy" visibility="public">
            </methodref>
            <methodref name="Assign" visibility="public">
            </methodref>
            <methodref name="GetNamePath" visibility="public">
            </methodref>
            <ancestor name="TObject" namespace="System">
              <methodref name="Create" visibility="public">
              </methodref>
              <methodref name="Free" visibility="public">
              </methodref>
              <methodref name="InitInstance" visibility="public">
              </methodref>
              <methodref name="CleanupInstance" visibility="public">
              </methodref>
              <methodref name="ClassType" visibility="public">
              </methodref>
              <methodref name="ClassName" visibility="public">
              </methodref>
              <methodref name="ClassNameIs" visibility="public">
              </methodref>
              <methodref name="ClassParent" visibility="public">
              </methodref>
              <methodref name="ClassInfo" visibility="public">
              </methodref>
              <methodref name="InstanceSize" visibility="public">
              </methodref>
              <methodref name="InheritsFrom" visibility="public">
              </methodref>
              <methodref name="MethodAddress" visibility="public">
              </methodref>
              <methodref name="MethodName" visibility="public">
              </methodref>
              <methodref name="FieldAddress" visibility="public">
              </methodref>
              <methodref name="GetInterface" visibility="public">
              </methodref>
              <methodref name="GetInterfaceEntry" visibility="public">
              </methodref>
              <methodref name="GetInterfaceTable" visibility="public">
              </methodref>
              <methodref name="SafeCallException" visibility="public">
              </methodref>
              <methodref name="AfterConstruction" visibility="public">
              </methodref>
              <methodref name="BeforeDestruction" visibility="public">
              </methodref>
              <methodref name="Dispatch" visibility="public">
              </methodref>
              <methodref name="DefaultHandler" visibility="public">
              </methodref>
              <methodref name="NewInstance" visibility="public">
              </methodref>
              <methodref name="FreeInstance" visibility="public">
              </methodref>
              <methodref name="Destroy" visibility="public">
              </methodref>
            </ancestor>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <function name="GetWideCharUsed" visibility="private">
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <field name="fStyle" type="TFontStyles" visibility="protected" />
      <field name="fDoc" type="TPdfDocument" visibility="protected" />
      <field name="fUsedWideChar" type="TSortedWordArray" visibility="protected" />
      <field name="fUsedWide" type="TUsedWide" visibility="protected" />
      <field name="fHGDI" type="HGDIOBJ" visibility="protected" />
      <field name="fFixedWidth" type="Boolean" visibility="protected" />
      <field name="fFontDescriptor" type="TPdfDictionary" visibility="protected" />
      <field name="fFontFile2" type="TPdfStream" visibility="protected" />
      <field name="fUnicodeFont" type="TPdfFontTrueType" visibility="protected" />
      <field name="fWinAnsiFont" type="TPdfFontTrueType" visibility="protected" />
      <field name="fLogFont" type="tagLOGFONTW" visibility="protected" />
      <field name="fM" type="tagTEXTMETRICA" visibility="protected" />
      <field name="fOTM" type="_OUTLINETEXTMETRICA" visibility="protected" />
      <procedure name="CreateAssociatedUnicodeFont" visibility="protected">
      </procedure>
      <procedure name="PrepareForSaving" visibility="protected">
      </procedure>
      <function name="GetAndMarkGlyphAsUsed" visibility="protected">
        <parameters>
          <parameter name="aGlyph" type="Word" />
          <retval type="Word" />
        </parameters>
      </function>
      <constructor name="Create" visibility="public">
        <devnotes>
           create the TrueType font object instance
        </devnotes>
        <parameters>
          <parameter name="ADoc" type="TPdfDocument" />
          <parameter name="AFontIndex" type="Integer" />
          <parameter name="AStyle" type="TFontStyles" />
          <parameter name="ALogFont" type="tagLOGFONTW" paramflags="const" />
          <parameter name="AWinAnsiFont" type="TPdfFontTrueType" />
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public">
        <devnotes>
           release the associated memory and handles
        </devnotes>
        <parameters>
        </parameters>
      </destructor>
      <function name="FindOrAddUsedWideChar" visibility="public">
        <devnotes>
           mark some unicode char as used
        </devnotes>
        <parameters>
          <parameter name="aWideChar" type="WideChar" />
          <retval type="Integer" />
        </parameters>
      </function>
      <function name="GetWideCharWidth" visibility="public">
        <devnotes>
           retrieve the width of an unicode character
        </devnotes>
        <parameters>
          <parameter name="aWideChar" type="WideChar" />
          <retval type="Integer" />
        </parameters>
      </function>
      <property name="WideCharUsed" visibility="public" read="GetWideCharUsed" type="Boolean">
        <devnotes>
           is set to TRUE if the PDF used any true type encoding
        </devnotes>
      </property>
      <property name="Style" visibility="public" read="fStyle" type="TFontStyles">
        <devnotes>
           the associated Font Styles
        </devnotes>
      </property>
      <property name="FixedWidth" visibility="public" read="fFixedWidth" type="Boolean">
        <devnotes>
           is set to TRUE if the font has a fixed width
        </devnotes>
      </property>
      <property name="UnicodeFont" visibility="public" read="fUnicodeFont" type="TPdfFontTrueType">
        <devnotes>
           points to the corresponding Unicode font
        </devnotes>
      </property>
      <property name="WinAnsiFont" visibility="public" read="fWinAnsiFont" type="TPdfFontTrueType">
        <devnotes>
           points to the corresponding WinAnsi font
        </devnotes>
      </property>
    </members>
  </class>
  <class name="TPdfDestination">
    <ancestor name="TObject" namespace="System">
      <methodref name="Create" visibility="public">
      </methodref>
      <methodref name="Free" visibility="public">
      </methodref>
      <methodref name="InitInstance" visibility="public">
      </methodref>
      <methodref name="CleanupInstance" visibility="public">
      </methodref>
      <methodref name="ClassType" visibility="public">
      </methodref>
      <methodref name="ClassName" visibility="public">
      </methodref>
      <methodref name="ClassNameIs" visibility="public">
      </methodref>
      <methodref name="ClassParent" visibility="public">
      </methodref>
      <methodref name="ClassInfo" visibility="public">
      </methodref>
      <methodref name="InstanceSize" visibility="public">
      </methodref>
      <methodref name="InheritsFrom" visibility="public">
      </methodref>
      <methodref name="MethodAddress" visibility="public">
      </methodref>
      <methodref name="MethodName" visibility="public">
      </methodref>
      <methodref name="FieldAddress" visibility="public">
      </methodref>
      <methodref name="GetInterface" visibility="public">
      </methodref>
      <methodref name="GetInterfaceEntry" visibility="public">
      </methodref>
      <methodref name="GetInterfaceTable" visibility="public">
      </methodref>
      <methodref name="SafeCallException" visibility="public">
      </methodref>
      <methodref name="AfterConstruction" visibility="public">
      </methodref>
      <methodref name="BeforeDestruction" visibility="public">
      </methodref>
      <methodref name="Dispatch" visibility="public">
      </methodref>
      <methodref name="DefaultHandler" visibility="public">
      </methodref>
      <methodref name="NewInstance" visibility="public">
      </methodref>
      <methodref name="FreeInstance" visibility="public">
      </methodref>
      <methodref name="Destroy" visibility="public">
      </methodref>
    </ancestor>
    <members>
      <field name="FDoc" type="TPdfDocument" visibility="private" />
      <field name="FPage" type="TPdfPage" visibility="private" />
      <field name="FType" type="TPdfDestinationType" visibility="private" />
      <field name="FValues" visibility="private">
        <array name="FValues" low="0" high="3">
          <element type="Integer" />
        </array>
      </field>
      <field name="FZoom" type="Single" visibility="private" />
      <field name="FReference" type="TObject" visibility="private" />
      <procedure name="SetElement" visibility="private">
        <parameters>
          <parameter name="Index" type="Integer" />
          <parameter name="Value" type="Integer" />
        </parameters>
      </procedure>
      <procedure name="SetZoom" visibility="private">
        <parameters>
          <parameter name="Value" type="Single" />
        </parameters>
      </procedure>
      <function name="GetElement" visibility="private">
        <parameters>
          <parameter name="Index" type="Integer" />
          <retval type="Integer" />
        </parameters>
      </function>
      <function name="GetPageWidth" visibility="private">
        <parameters>
          <retval type="Integer" />
        </parameters>
      </function>
      <function name="GetPageHeight" visibility="private">
        <parameters>
          <retval type="Integer" />
        </parameters>
      </function>
      <constructor name="Create" visibility="public">
        <devnotes>
           create the PDF destination object
        </devnotes>
        <parameters>
          <parameter name="APdfDoc" type="TPdfDocument" />
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public">
        <devnotes>
           release the object
        </devnotes>
        <parameters>
        </parameters>
      </destructor>
      <function name="GetValue" visibility="public">
        <devnotes>
           retrieve the array containing the location of the display window
        </devnotes>
        <parameters>
          <retval type="TPdfArray">
            <devnotes>
               used to store an array of PDF objects
            </devnotes>
          </retval>
        </parameters>
      </function>
      <property name="DestinationType" visibility="public" read="FType" write="FType" type="TPdfDestinationType">
        <devnotes>
           Destination Type determines default user space coordinate system of
        </devnotes>
      </property>
      <property name="Doc" visibility="public" read="FDoc" type="TPdfDocument">
        <devnotes>
           the associated PDF document which created this Destination object
        </devnotes>
      </property>
      <property name="Page" visibility="public" read="FPage" type="TPdfPage">
        <devnotes>
           the associated Page
        </devnotes>
      </property>
      <property name="Left" visibility="public" read="GetElement" write="SetElement" type="Integer" index="0">
        <devnotes>
           retrieve the left coordinate of the location of the display window
        </devnotes>
      </property>
      <property name="Top" visibility="public" read="GetElement" write="SetElement" type="Integer" index="1">
        <devnotes>
           retrieve the top coordinate of the location of the display window
        </devnotes>
      </property>
      <property name="Right" visibility="public" read="GetElement" write="SetElement" type="Integer" index="2">
        <devnotes>
           retrieve the righ tcoordinate of the location of the display window
        </devnotes>
      </property>
      <property name="Bottom" visibility="public" read="GetElement" write="SetElement" type="Integer" index="3">
        <devnotes>
           retrieve the bottom coordinate of the location of the display window
        </devnotes>
      </property>
      <property name="PageHeight" visibility="public" read="GetPageHeight" type="Integer">
        <devnotes>
           the page height of the current page
        </devnotes>
      </property>
      <property name="PageWidth" visibility="public" read="GetPageWidth" type="Integer">
        <devnotes>
           the page width of the current page
        </devnotes>
      </property>
      <property name="Zoom" visibility="public" read="FZoom" write="SetZoom" type="Single">
        <devnotes>
           the associated Zoom factor
        </devnotes>
      </property>
      <property name="Reference" visibility="public" read="FReference" write="FReference" type="TObject">
        <devnotes>
           an object associated to this destination, to be used for conveniance
        </devnotes>
      </property>
    </members>
  </class>
  <class name="TPdfOutlineEntry">
    <devnotes>
       an Outline entry in the PDF document
    </devnotes>
    <ancestor name="TPdfDictionaryWrapper" namespace="SynPdf">
      <methodref name="GetHasData" visibility="private" />
      <methodref name="SetData" visibility="protected" />
      <propertyref name="Data" visibility="public">
        <devnotes>
           the associated dictionary, containing all data
        </devnotes>
      </propertyref>
      <propertyref name="HasData" visibility="public">
        <devnotes>
           return TRUE if has any data stored within
        </devnotes>
      </propertyref>
      <ancestor name="TPersistent" namespace="Classes">
        <methodref name="AssignError" visibility="private">
        </methodref>
        <methodref name="AssignTo" visibility="public">
        </methodref>
        <methodref name="DefineProperties" visibility="public">
        </methodref>
        <methodref name="GetOwner" visibility="protected">
        </methodref>
        <methodref name="Destroy" visibility="public">
        </methodref>
        <methodref name="Assign" visibility="public">
        </methodref>
        <methodref name="GetNamePath" visibility="public">
        </methodref>
        <ancestor name="TObject" namespace="System">
          <methodref name="Create" visibility="public">
          </methodref>
          <methodref name="Free" visibility="public">
          </methodref>
          <methodref name="InitInstance" visibility="public">
          </methodref>
          <methodref name="CleanupInstance" visibility="public">
          </methodref>
          <methodref name="ClassType" visibility="public">
          </methodref>
          <methodref name="ClassName" visibility="public">
          </methodref>
          <methodref name="ClassNameIs" visibility="public">
          </methodref>
          <methodref name="ClassParent" visibility="public">
          </methodref>
          <methodref name="ClassInfo" visibility="public">
          </methodref>
          <methodref name="InstanceSize" visibility="public">
          </methodref>
          <methodref name="InheritsFrom" visibility="public">
          </methodref>
          <methodref name="MethodAddress" visibility="public">
          </methodref>
          <methodref name="MethodName" visibility="public">
          </methodref>
          <methodref name="FieldAddress" visibility="public">
          </methodref>
          <methodref name="GetInterface" visibility="public">
          </methodref>
          <methodref name="GetInterfaceEntry" visibility="public">
          </methodref>
          <methodref name="GetInterfaceTable" visibility="public">
          </methodref>
          <methodref name="SafeCallException" visibility="public">
          </methodref>
          <methodref name="AfterConstruction" visibility="public">
          </methodref>
          <methodref name="BeforeDestruction" visibility="public">
          </methodref>
          <methodref name="Dispatch" visibility="public">
          </methodref>
          <methodref name="DefaultHandler" visibility="public">
          </methodref>
          <methodref name="NewInstance" visibility="public">
          </methodref>
          <methodref name="FreeInstance" visibility="public">
          </methodref>
          <methodref name="Destroy" visibility="public">
          </methodref>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <field name="FParent" type="TPdfOutlineEntry" visibility="private" />
      <field name="FNext" type="TPdfOutlineEntry" visibility="private" />
      <field name="FPrev" type="TPdfOutlineEntry" visibility="private" />
      <field name="FFirst" type="TPdfOutlineEntry" visibility="private" />
      <field name="FLast" type="TPdfOutlineEntry" visibility="private" />
      <field name="FDest" type="TPdfDestination" visibility="private" />
      <field name="FDoc" type="TPdfDocument" visibility="private" />
      <field name="FTitle" type="string" visibility="private" />
      <field name="FOpened" type="Boolean" visibility="private" />
      <field name="FCount" type="Integer" visibility="private" />
      <field name="FReference" type="TObject" visibility="private" />
      <field name="FLevel" type="Integer" visibility="private" />
      <procedure name="Save" visibility="public" procflags="virtual">
      </procedure>
      <constructor name="Create" visibility="public">
        <devnotes>
           create the Outline entry instance
        </devnotes>
        <parameters>
          <parameter name="AParent" type="TPdfOutlineEntry" />
          <parameter name="TopPosition" type="Integer">
            <value>
              $FFFFFFFF
            </value>
          </parameter>
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public">
        <devnotes>
           release the associated memory and reference object
        </devnotes>
        <parameters>
        </parameters>
      </destructor>
      <function name="AddChild" visibility="public">
        <devnotes>
           create a new entry in the outline tree
        </devnotes>
        <parameters>
          <parameter name="TopPosition" type="Integer">
            <value>
              $FFFFFFFF
            </value>
          </parameter>
          <retval type="TPdfOutlineEntry">
            <devnotes>
               an Outline entry in the PDF document
            </devnotes>
          </retval>
        </parameters>
      </function>
      <property name="Doc" visibility="public" read="FDoc" type="TPdfDocument">
        <devnotes>
           the associated PDF document which created this Destination object
        </devnotes>
      </property>
      <property name="Parent" visibility="public" read="FParent" type="TPdfOutlineEntry">
        <devnotes>
           the parent outline entry of this entry
        </devnotes>
      </property>
      <property name="Next" visibility="public" read="FNext" type="TPdfOutlineEntry">
        <devnotes>
           the next outline entry of this entry
        </devnotes>
      </property>
      <property name="Prev" visibility="public" read="FPrev" type="TPdfOutlineEntry">
        <devnotes>
           the previous outline entry of this entry
        </devnotes>
      </property>
      <property name="First" visibility="public" read="FFirst" type="TPdfOutlineEntry">
        <devnotes>
           the first outline entry of this entry list
        </devnotes>
      </property>
      <property name="Last" visibility="public" read="FLast" type="TPdfOutlineEntry">
        <devnotes>
           the last outline entry of this entry list
        </devnotes>
      </property>
      <property name="Dest" visibility="public" read="FDest" write="FDest" type="TPdfDestination">
        <devnotes>
           the associated destination
        </devnotes>
      </property>
      <property name="Title" visibility="public" read="FTitle" write="FTitle" type="string">
        <devnotes>
           the associated title
        </devnotes>
      </property>
      <property name="Opened" visibility="public" read="FOpened" write="FOpened" type="Boolean">
        <devnotes>
           if the outline must be opened
        </devnotes>
      </property>
      <property name="Reference" visibility="public" read="FReference" write="FReference" type="TObject">
        <devnotes>
           an object associated to this destination, to be used for conveniance
        </devnotes>
      </property>
      <property name="Level" visibility="public" read="FLevel" write="FLevel" type="Integer">
        <devnotes>
           an internal property (not exported to PDF content)
        </devnotes>
      </property>
    </members>
  </class>
  <class name="TPdfOutlineRoot">
    <devnotes>
       Root entry for all Outlines of the PDF document
    </devnotes>
    <ancestor name="TPdfOutlineEntry" namespace="SynPdf">
      <methodref name="Save" visibility="public" />
      <methodref name="Create" visibility="public">
        <devnotes>
           create the Outline entry instance
        </devnotes>
      </methodref>
      <methodref name="Destroy" visibility="public">
        <devnotes>
           release the associated memory and reference object
        </devnotes>
      </methodref>
      <methodref name="AddChild" visibility="public">
        <devnotes>
           create a new entry in the outline tree
        </devnotes>
      </methodref>
      <propertyref name="Doc" visibility="public">
        <devnotes>
           the associated PDF document which created this Destination object
        </devnotes>
      </propertyref>
      <propertyref name="Parent" visibility="public">
        <devnotes>
           the parent outline entry of this entry
        </devnotes>
      </propertyref>
      <propertyref name="Next" visibility="public">
        <devnotes>
           the next outline entry of this entry
        </devnotes>
      </propertyref>
      <propertyref name="Prev" visibility="public">
        <devnotes>
           the previous outline entry of this entry
        </devnotes>
      </propertyref>
      <propertyref name="First" visibility="public">
        <devnotes>
           the first outline entry of this entry list
        </devnotes>
      </propertyref>
      <propertyref name="Last" visibility="public">
        <devnotes>
           the last outline entry of this entry list
        </devnotes>
      </propertyref>
      <propertyref name="Dest" visibility="public">
        <devnotes>
           the associated destination
        </devnotes>
      </propertyref>
      <propertyref name="Title" visibility="public">
        <devnotes>
           the associated title
        </devnotes>
      </propertyref>
      <propertyref name="Opened" visibility="public">
        <devnotes>
           if the outline must be opened
        </devnotes>
      </propertyref>
      <propertyref name="Reference" visibility="public">
        <devnotes>
           an object associated to this destination, to be used for conveniance
        </devnotes>
      </propertyref>
      <propertyref name="Level" visibility="public">
        <devnotes>
           an internal property (not exported to PDF content)
        </devnotes>
      </propertyref>
      <ancestor name="TPdfDictionaryWrapper" namespace="SynPdf">
        <methodref name="GetHasData" visibility="private" />
        <methodref name="SetData" visibility="protected" />
        <propertyref name="Data" visibility="public">
          <devnotes>
             the associated dictionary, containing all data
          </devnotes>
        </propertyref>
        <propertyref name="HasData" visibility="public">
          <devnotes>
             return TRUE if has any data stored within
          </devnotes>
        </propertyref>
        <ancestor name="TPersistent" namespace="Classes">
          <methodref name="AssignError" visibility="private">
          </methodref>
          <methodref name="AssignTo" visibility="public">
          </methodref>
          <methodref name="DefineProperties" visibility="public">
          </methodref>
          <methodref name="GetOwner" visibility="protected">
          </methodref>
          <methodref name="Destroy" visibility="public">
          </methodref>
          <methodref name="Assign" visibility="public">
          </methodref>
          <methodref name="GetNamePath" visibility="public">
          </methodref>
          <ancestor name="TObject" namespace="System">
            <methodref name="Create" visibility="public">
            </methodref>
            <methodref name="Free" visibility="public">
            </methodref>
            <methodref name="InitInstance" visibility="public">
            </methodref>
            <methodref name="CleanupInstance" visibility="public">
            </methodref>
            <methodref name="ClassType" visibility="public">
            </methodref>
            <methodref name="ClassName" visibility="public">
            </methodref>
            <methodref name="ClassNameIs" visibility="public">
            </methodref>
            <methodref name="ClassParent" visibility="public">
            </methodref>
            <methodref name="ClassInfo" visibility="public">
            </methodref>
            <methodref name="InstanceSize" visibility="public">
            </methodref>
            <methodref name="InheritsFrom" visibility="public">
            </methodref>
            <methodref name="MethodAddress" visibility="public">
            </methodref>
            <methodref name="MethodName" visibility="public">
            </methodref>
            <methodref name="FieldAddress" visibility="public">
            </methodref>
            <methodref name="GetInterface" visibility="public">
            </methodref>
            <methodref name="GetInterfaceEntry" visibility="public">
            </methodref>
            <methodref name="GetInterfaceTable" visibility="public">
            </methodref>
            <methodref name="SafeCallException" visibility="public">
            </methodref>
            <methodref name="AfterConstruction" visibility="public">
            </methodref>
            <methodref name="BeforeDestruction" visibility="public">
            </methodref>
            <methodref name="Dispatch" visibility="public">
            </methodref>
            <methodref name="DefaultHandler" visibility="public">
            </methodref>
            <methodref name="NewInstance" visibility="public">
            </methodref>
            <methodref name="FreeInstance" visibility="public">
            </methodref>
            <methodref name="Destroy" visibility="public">
            </methodref>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <constructor name="Create" visibility="public">
        <devnotes>
           create the Root entry for all Outlines of the PDF document
        </devnotes>
        <parameters>
          <parameter name="ADoc" type="TPdfDocument" />
        </parameters>
      </constructor>
      <procedure name="Save" visibility="public" procflags="override">
        <devnotes>
           update internal parameters (like outline entries count) before saving
        </devnotes>
      </procedure>
    </members>
  </class>
  <class name="TPdfPageGDI">
    <devnotes>
       a PDF page, with its corresponding Meta File and Canvas
    </devnotes>
    <ancestor name="TPdfPage" namespace="SynPdf">
      <methodref name="GetPageLandscape" visibility="private" />
      <methodref name="SetPageLandscape" visibility="private" />
      <methodref name="SetWordSpace" visibility="protected" />
      <methodref name="SetCharSpace" visibility="protected" />
      <methodref name="SetFontSize" visibility="protected" />
      <methodref name="SetHorizontalScaling" visibility="protected" />
      <methodref name="SetLeading" visibility="protected" />
      <methodref name="SetPageWidth" visibility="public" />
      <methodref name="SetPageHeight" visibility="public" />
      <methodref name="GetPageWidth" visibility="protected" />
      <methodref name="GetPageHeight" visibility="protected" />
      <methodref name="GetResources" visibility="protected" />
      <methodref name="Create" visibility="public">
        <devnotes>
           create the page with its internal VCL Canvas
        </devnotes>
      </methodref>
      <methodref name="TextWidth" visibility="public">
        <devnotes>
           calculate width of specified text according to current attributes
        </devnotes>
      </methodref>
      <methodref name="MeasureText" visibility="public">
        <devnotes>
           calculate the number of chars which can be displayed in the specified
        </devnotes>
      </methodref>
      <propertyref name="WordSpace" visibility="public">
        <devnotes>
           retrieve or set the word Space attribute
        </devnotes>
      </propertyref>
      <propertyref name="CharSpace" visibility="public">
        <devnotes>
           retrieve or set the Char Space attribute
        </devnotes>
      </propertyref>
      <propertyref name="HorizontalScaling" visibility="public">
        <devnotes>
           retrieve or set the Horizontal Scaling attribute
        </devnotes>
      </propertyref>
      <propertyref name="Leading" visibility="public">
        <devnotes>
           retrieve or set the text Leading attribute
        </devnotes>
      </propertyref>
      <propertyref name="FontSize" visibility="public">
        <devnotes>
           retrieve or set the font Size attribute
        </devnotes>
      </propertyref>
      <propertyref name="Font" visibility="public">
        <devnotes>
           retrieve the current used font
        </devnotes>
      </propertyref>
      <propertyref name="PageWidth" visibility="public">
        <devnotes>
           retrieve or set the current page width
        </devnotes>
      </propertyref>
      <propertyref name="PageHeight" visibility="public">
        <devnotes>
           retrieve or set the current page height
        </devnotes>
      </propertyref>
      <propertyref name="PageLandscape" visibility="public">
        <devnotes>
           retrieve or set the paper orientation
        </devnotes>
      </propertyref>
      <ancestor name="TPdfDictionary" namespace="SynPdf">
        <methodref name="GetItems" visibility="private" />
        <methodref name="GetItemCount" visibility="private" />
        <methodref name="getTypeOf" visibility="protected" />
        <methodref name="InternalWriteTo" visibility="public" />
        <methodref name="Create" visibility="public">
          <devnotes>
             create the PDF dictionary
          </devnotes>
        </methodref>
        <methodref name="Destroy" visibility="public">
          <devnotes>
             release the dictionay instance, and all associated elements
          </devnotes>
        </methodref>
        <methodref name="ValueByName" visibility="public">
          <devnotes>
             fast find a value by its name
          </devnotes>
        </methodref>
        <methodref name="PdfBooleanByName" visibility="public">
          <devnotes>
             fast find a boolean value by its name
          </devnotes>
        </methodref>
        <methodref name="PdfNumberByName" visibility="public">
          <devnotes>
             fast find a numerical (integer) value by its name
          </devnotes>
        </methodref>
        <methodref name="PdfTextByName" visibility="public">
          <devnotes>
             fast find a textual value by its name
          </devnotes>
        </methodref>
        <methodref name="PdfTextValueByName" visibility="public">
          <devnotes>
             fast find a textual value by its name
          </devnotes>
        </methodref>
        <methodref name="PdfTextUTF8ValueByName" visibility="public">
          <devnotes>
             fast find a textual value by its name
          </devnotes>
        </methodref>
        <methodref name="PdfTextStringValueByName" visibility="public">
          <devnotes>
             fast find a textual value by its name
          </devnotes>
        </methodref>
        <methodref name="PdfRealByName" visibility="public">
          <devnotes>
             fast find a numerical (floating-point) value by its name
          </devnotes>
        </methodref>
        <methodref name="PdfNameByName" visibility="public">
          <devnotes>
             fast find a name value by its name
          </devnotes>
        </methodref>
        <methodref name="PdfDictionaryByName" visibility="public">
          <devnotes>
             fast find a dictionary value by its name
          </devnotes>
        </methodref>
        <methodref name="PdfArrayByName" visibility="public">
          <devnotes>
             fast find an array value by its name
          </devnotes>
        </methodref>
        <methodref name="AddItem" visibility="public">
          <devnotes>
             add a specified Key / Value pair to the dictionary
          </devnotes>
        </methodref>
        <methodref name="AddItem" visibility="public">
          <devnotes>
             add a specified Key / Value pair (of type TPdfName) to the dictionary
          </devnotes>
        </methodref>
        <methodref name="AddItem" visibility="public">
          <devnotes>
             add a specified Key / Value pair (of type TPdfNumber) to the dictionary
          </devnotes>
        </methodref>
        <methodref name="AddItemText" visibility="public">
          <devnotes>
             add a specified Key / Value pair (of type TPdfText) to the dictionary
          </devnotes>
        </methodref>
        <methodref name="AddItemTextUTF8" visibility="public">
          <devnotes>
             add a specified Key / Value pair (of type TPdfTextUTF8) to the dictionary
          </devnotes>
        </methodref>
        <methodref name="AddItemTextString" visibility="public">
          <devnotes>
             add a specified Key / Value pair (of type TPdfTextUTF8) to the dictionary
          </devnotes>
        </methodref>
        <methodref name="RemoveItem" visibility="public">
          <devnotes>
             remove the element specified by its Key from the dictionary
          </devnotes>
        </methodref>
        <propertyref name="Items" visibility="public">
          <devnotes>
             retrieve any dictionary element
          </devnotes>
        </propertyref>
        <propertyref name="ItemCount" visibility="public">
          <devnotes>
             retrieve the dictionary element count
          </devnotes>
        </propertyref>
        <propertyref name="ObjectMgr" visibility="public">
          <devnotes>
             retrieve the associated Object Manager
          </devnotes>
        </propertyref>
        <propertyref name="TypeOf" visibility="public">
          <devnotes>
             retrieve the type of the pdfdictionary object, i.e. the 'Type' property name
          </devnotes>
        </propertyref>
        <propertyref name="List" visibility="public">
          <devnotes>
             direct access to the internal TList instance
          </devnotes>
        </propertyref>
        <ancestor name="TPdfObject" namespace="SynPdf">
          <methodref name="InternalWriteTo" visibility="public" />
          <methodref name="SetObjectNumber" visibility="protected" />
          <methodref name="Create" visibility="public">
            <devnotes>
               create the PDF object instance
            </devnotes>
          </methodref>
          <methodref name="WriteTo" visibility="public">
            <devnotes>
               Write object to specified stream
            </devnotes>
          </methodref>
          <methodref name="WriteValueTo" visibility="public">
            <devnotes>
               write indirect object to specified stream
            </devnotes>
          </methodref>
          <propertyref name="ObjectNumber" visibility="public">
            <devnotes>
               the associated PDF Object Number
            </devnotes>
          </propertyref>
          <propertyref name="GenerationNumber" visibility="public">
            <devnotes>
               the associated PDF Generation Number
            </devnotes>
          </propertyref>
          <propertyref name="ObjectType" visibility="public">
            <devnotes>
               the corresponding type of this PDF object
            </devnotes>
          </propertyref>
          <ancestor name="TObject" namespace="System">
            <methodref name="Create" visibility="public">
            </methodref>
            <methodref name="Free" visibility="public">
            </methodref>
            <methodref name="InitInstance" visibility="public">
            </methodref>
            <methodref name="CleanupInstance" visibility="public">
            </methodref>
            <methodref name="ClassType" visibility="public">
            </methodref>
            <methodref name="ClassName" visibility="public">
            </methodref>
            <methodref name="ClassNameIs" visibility="public">
            </methodref>
            <methodref name="ClassParent" visibility="public">
            </methodref>
            <methodref name="ClassInfo" visibility="public">
            </methodref>
            <methodref name="InstanceSize" visibility="public">
            </methodref>
            <methodref name="InheritsFrom" visibility="public">
            </methodref>
            <methodref name="MethodAddress" visibility="public">
            </methodref>
            <methodref name="MethodName" visibility="public">
            </methodref>
            <methodref name="FieldAddress" visibility="public">
            </methodref>
            <methodref name="GetInterface" visibility="public">
            </methodref>
            <methodref name="GetInterfaceEntry" visibility="public">
            </methodref>
            <methodref name="GetInterfaceTable" visibility="public">
            </methodref>
            <methodref name="SafeCallException" visibility="public">
            </methodref>
            <methodref name="AfterConstruction" visibility="public">
            </methodref>
            <methodref name="BeforeDestruction" visibility="public">
            </methodref>
            <methodref name="Dispatch" visibility="public">
            </methodref>
            <methodref name="DefaultHandler" visibility="public">
            </methodref>
            <methodref name="NewInstance" visibility="public">
            </methodref>
            <methodref name="FreeInstance" visibility="public">
            </methodref>
            <methodref name="Destroy" visibility="public">
            </methodref>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <field name="fVCLMetaFileCompressed" type="string" visibility="private" />
      <field name="fVCLCanvasSize" type="tagSIZE" visibility="private" />
      <field name="fVCLCurrentCanvas" type="TCanvas" visibility="private" />
      <field name="fVCLCurrentMetaFile" type="TMetafile" visibility="private" />
      <procedure name="CreateVCLCanvas" visibility="private">
      </procedure>
      <procedure name="SetVCLCurrentMetaFile" visibility="private">
      </procedure>
      <procedure name="FlushVCLCanvas" visibility="private">
      </procedure>
      <destructor name="Destroy" visibility="public">
        <devnotes>
           release associated memory
        </devnotes>
        <parameters>
        </parameters>
      </destructor>
    </members>
  </class>
  <class name="TPdfDocumentGDI">
    <devnotes>
       class handling PDF document creation using GDI commands
    </devnotes>
    <ancestor name="TPdfDocument" namespace="SynPdf">
      <methodref name="GetInfo" visibility="private" />
      <methodref name="GetOutlineRoot" visibility="private" />
      <methodref name="SetStandardFontsReplace" visibility="private" />
      <methodref name="GetEmbeddedTTFIgnore" visibility="private" />
      <methodref name="SetDefaultPaperSize" visibility="private" />
      <methodref name="SetDefaultPageHeight" visibility="private" />
      <methodref name="SetDefaultPageWidth" visibility="private" />
      <methodref name="SetPDFA1" visibility="private" />
      <methodref name="GetDefaultPageLandscape" visibility="private" />
      <methodref name="SetDefaultPageLandscape" visibility="private" />
      <methodref name="SetFontFallBackName" visibility="private" />
      <methodref name="GetFontFallBackName" visibility="private" />
      <methodref name="RaiseInvalidOperation" visibility="protected" />
      <methodref name="CreateInfo" visibility="protected" />
      <methodref name="TTFFontPostcriptName" visibility="protected">
        <devnotes>
           get the PostScript Name of a TrueType Font
        </devnotes>
      </methodref>
      <methodref name="CreateEmbeddedFont" visibility="protected">
        <devnotes>
           if ANSI_CHARSET is used, create a standard embedded font
        </devnotes>
      </methodref>
      <methodref name="RegisterFont" visibility="protected">
        <devnotes>
           register the font in the font list
        </devnotes>
      </methodref>
      <methodref name="GetRegisteredNotTrueTypeFont" visibility="protected">
        <devnotes>
           get the PDF font, from its internal PDF name (e.g. 'Helvetica-Bold')
        </devnotes>
      </methodref>
      <methodref name="GetRegisteredTrueTypeFont" visibility="protected">
        <devnotes>
           get the supplied TrueType Font from the internal font list
        </devnotes>
      </methodref>
      <methodref name="GetRegisteredTrueTypeFont" visibility="protected">
        <devnotes>
           get the supplied TrueType Font from the internal font list
        </devnotes>
      </methodref>
      <methodref name="GetTrueTypeFontIndex" visibility="protected">
        <devnotes>
           find an index of in FTrueTypeFonts[]
        </devnotes>
      </methodref>
      <methodref name="GetDCWithFont" visibility="protected" />
      <methodref name="FreeDoc" visibility="protected">
        <devnotes>
           release the current document content
        </devnotes>
      </methodref>
      <methodref name="Create" visibility="public">
        <devnotes>
           create the PDF document instance, with a Canvas and a default A4 paper size
        </devnotes>
      </methodref>
      <methodref name="Destroy" visibility="public">
        <devnotes>
           release the PDF document instance
        </devnotes>
      </methodref>
      <methodref name="NewDoc" visibility="public">
        <devnotes>
           create a new document
        </devnotes>
      </methodref>
      <methodref name="AddPage" visibility="public">
        <devnotes>
           add a Page to the current PDF document
        </devnotes>
      </methodref>
      <methodref name="CreatePages" visibility="public">
        <devnotes>
           create a Pages object
        </devnotes>
      </methodref>
      <methodref name="RegisterXObject" visibility="public">
        <devnotes>
           register an object (typicaly a TPdfImage) to the PDF document
        </devnotes>
      </methodref>
      <methodref name="AddXObject" visibility="public">
        <devnotes>
           add then register an object (typicaly a TPdfImage) to the PDF document
        </devnotes>
      </methodref>
      <methodref name="SaveToStream" visibility="public">
        <devnotes>
           save the PDF file content into a specified Stream
        </devnotes>
      </methodref>
      <methodref name="SaveToStreamDirectBegin" visibility="public">
        <devnotes>
           prepare to save the PDF file content into a specified Stream
        </devnotes>
      </methodref>
      <methodref name="SaveToStreamDirectPageFlush" visibility="public">
        <devnotes>
           save the current page content to the PDF file
        </devnotes>
      </methodref>
      <methodref name="SaveToStreamDirectEnd" visibility="public">
        <devnotes>
           prepare to save the PDF file content into a specified Stream
        </devnotes>
      </methodref>
      <methodref name="SaveToFile" visibility="public">
        <devnotes>
           save the PDF file content into a specified file
        </devnotes>
      </methodref>
      <methodref name="GetXObject" visibility="public">
        <devnotes>
           retrieve a XObject from its name
        </devnotes>
      </methodref>
      <methodref name="GetXObjectIndex" visibility="public">
        <devnotes>
           retrieve a XObject index from its name
        </devnotes>
      </methodref>
      <methodref name="GetXObjectImageName" visibility="public">
        <devnotes>
           retrieve a XObject TPdfImage index from its picture attributes
        </devnotes>
      </methodref>
      <methodref name="CreateAnnotation" visibility="public">
        <devnotes>
           wrapper to create an annotation
        </devnotes>
      </methodref>
      <methodref name="CreateLink" visibility="public">
        <devnotes>
           wrapper to create a Link annotation, specified by a bookmark
        </devnotes>
      </methodref>
      <methodref name="CreateOutline" visibility="public">
        <devnotes>
           create an Outline entry at a specified position of the current page
        </devnotes>
      </methodref>
      <methodref name="CreateDestination" visibility="public">
        <devnotes>
           create a Destination
        </devnotes>
      </methodref>
      <methodref name="CreateBookMark" visibility="public">
        <devnotes>
           create an internal bookmark entry at a specified position of the current page
        </devnotes>
      </methodref>
      <methodref name="CreateOrGetImage" visibility="public">
        <devnotes>
           create an image from a supplied bitmap
        </devnotes>
      </methodref>
      <propertyref name="Canvas" visibility="public">
        <devnotes>
           retrieve the current PDF Canvas, associated to the current page
        </devnotes>
      </propertyref>
      <propertyref name="Info" visibility="public">
        <devnotes>
           retrieve the PDF information, associated to the PDF document
        </devnotes>
      </propertyref>
      <propertyref name="Root" visibility="public" />
      <propertyref name="OutlineRoot" visibility="public">
        <devnotes>
           retrieve the PDF Outline, associated to the PDF document
        </devnotes>
      </propertyref>
      <propertyref name="DefaultPageWidth" visibility="public">
        <devnotes>
           the default page width, used for new every page creation (i.e. AddPage method call)
        </devnotes>
      </propertyref>
      <propertyref name="DefaultPageHeight" visibility="public">
        <devnotes>
           the default page height, used for new every page creation (i.e. AddPage method call)
        </devnotes>
      </propertyref>
      <propertyref name="DefaultPageLandscape" visibility="public">
        <devnotes>
           the default page orientation
        </devnotes>
      </propertyref>
      <propertyref name="DefaultPaperSize" visibility="public">
        <devnotes>
           the default page size, used for every new page creation (i.e. AddPage method call)
        </devnotes>
      </propertyref>
      <propertyref name="CompressionMethod" visibility="public">
        <devnotes>
           the compression method used for page content storage
        </devnotes>
      </propertyref>
      <propertyref name="EmbeddedTTF" visibility="public">
        <devnotes>
           if set to TRUE, the used True Type fonts will be embedded to the PDF content
        </devnotes>
      </propertyref>
      <propertyref name="EmbeddedTTFIgnore" visibility="public">
        <devnotes>
           you can add some font names to this list, if you want these fonts
        </devnotes>
      </propertyref>
      <propertyref name="EmbeddedWholeTTF" visibility="public">
        <devnotes>
           if set to TRUE, the embedded True Type fonts will be totaly Embeddeded
        </devnotes>
      </propertyref>
      <propertyref name="UseOutlines" visibility="public">
        <devnotes>
           used to define if the PDF document will use outlines
        </devnotes>
      </propertyref>
      <propertyref name="CodePage" visibility="public">
        <devnotes>
           the current Code Page encoding used for this PDF Document
        </devnotes>
      </propertyref>
      <propertyref name="CharSet" visibility="public">
        <devnotes>
           the current CharSet used for this PDF Document
        </devnotes>
      </propertyref>
      <propertyref name="StandardFontsReplace" visibility="public">
        <devnotes>
           set if the PDF engine must use standard fonts substitution
        </devnotes>
      </propertyref>
      <propertyref name="UseUniscribe" visibility="public">
        <devnotes>
           set if the PDF engine must use the Windows Uniscribe API to
        </devnotes>
      </propertyref>
      <propertyref name="UseFontFallBack" visibility="public">
        <devnotes>
           used to define if the PDF document will handle &quot;font fallback&quot; for
        </devnotes>
      </propertyref>
      <propertyref name="FontFallBackName" visibility="public">
        <devnotes>
           set the font name to be used for missing characters
        </devnotes>
      </propertyref>
      <propertyref name="ForceJPEGCompression" visibility="public">
        <devnotes>
           this property can force saving all canvas bitmaps images as JPEG
        </devnotes>
      </propertyref>
      <propertyref name="ForceNoBitmapReuse" visibility="public">
        <devnotes>
           this property can force all canvas bitmaps to be stored directly
        </devnotes>
      </propertyref>
      <propertyref name="RawPages" visibility="public">
        <devnotes>
           direct read-only access to all corresponding TPdfPage
        </devnotes>
      </propertyref>
      <propertyref name="ScreenLogPixels" visibility="public">
        <devnotes>
           the resolution used for pixel to PDF coordinates conversion
        </devnotes>
      </propertyref>
      <propertyref name="PDFA1" visibility="public">
        <devnotes>
           is TRUE if the file was created in order to be PDF/A-1 compliant
        </devnotes>
      </propertyref>
      <ancestor name="TObject" namespace="System">
        <methodref name="Create" visibility="public">
        </methodref>
        <methodref name="Free" visibility="public">
        </methodref>
        <methodref name="InitInstance" visibility="public">
        </methodref>
        <methodref name="CleanupInstance" visibility="public">
        </methodref>
        <methodref name="ClassType" visibility="public">
        </methodref>
        <methodref name="ClassName" visibility="public">
        </methodref>
        <methodref name="ClassNameIs" visibility="public">
        </methodref>
        <methodref name="ClassParent" visibility="public">
        </methodref>
        <methodref name="ClassInfo" visibility="public">
        </methodref>
        <methodref name="InstanceSize" visibility="public">
        </methodref>
        <methodref name="InheritsFrom" visibility="public">
        </methodref>
        <methodref name="MethodAddress" visibility="public">
        </methodref>
        <methodref name="MethodName" visibility="public">
        </methodref>
        <methodref name="FieldAddress" visibility="public">
        </methodref>
        <methodref name="GetInterface" visibility="public">
        </methodref>
        <methodref name="GetInterfaceEntry" visibility="public">
        </methodref>
        <methodref name="GetInterfaceTable" visibility="public">
        </methodref>
        <methodref name="SafeCallException" visibility="public">
        </methodref>
        <methodref name="AfterConstruction" visibility="public">
        </methodref>
        <methodref name="BeforeDestruction" visibility="public">
        </methodref>
        <methodref name="Dispatch" visibility="public">
        </methodref>
        <methodref name="DefaultHandler" visibility="public">
        </methodref>
        <methodref name="NewInstance" visibility="public">
        </methodref>
        <methodref name="FreeInstance" visibility="public">
        </methodref>
        <methodref name="Destroy" visibility="public">
        </methodref>
      </ancestor>
    </ancestor>
    <members>
      <field name="fUseSetTextJustification" type="Boolean" visibility="private" />
      <field name="fKerningHScaleTop" type="Single" visibility="private" />
      <field name="fKerningHScaleBottom" type="Single" visibility="private" />
      <function name="GetVCLCanvas" visibility="private">
        <parameters>
          <retval type="TCanvas" />
        </parameters>
      </function>
      <function name="GetVCLCanvasSize" visibility="private">
        <parameters>
          <retval type="tagSIZE" />
        </parameters>
      </function>
      <constructor name="Create" visibility="public">
        <devnotes>
           create the PDF document instance, with a VCL Canvas property
        </devnotes>
        <parameters>
          <parameter name="AUseOutlines" type="Boolean">
            <value>
              False
            </value>
          </parameter>
          <parameter name="ACodePage" type="Integer">
            <value>
              $0
            </value>
          </parameter>
          <parameter name="APDFA1" type="Boolean">
            <value>
              False
            </value>
          </parameter>
        </parameters>
      </constructor>
      <function name="AddPage" visibility="public" procflags="override">
        <devnotes>
           add a Page to the current PDF document
        </devnotes>
        <parameters>
          <retval type="TPdfPage">
            <devnotes>
               a PDF page          
            </devnotes>
          </retval>
        </parameters>
      </function>
      <procedure name="SaveToStream" visibility="public" procflags="override">
        <devnotes>
           save the PDF file content into a specified Stream
        </devnotes>
        <parameters>
          <parameter name="AStream" type="TStream" />
          <parameter name="ForceModDate" type="TDateTime">
            <value>
              0
            </value>
          </parameter>
        </parameters>
      </procedure>
      <property name="VCLCanvas" visibility="public" read="GetVCLCanvas" type="TCanvas">
        <devnotes>
           the VCL Canvas of the current page
        </devnotes>
      </property>
      <property name="VCLCanvasSize" visibility="public" read="GetVCLCanvasSize" type="tagSIZE">
        <devnotes>
           the VCL Canvas size of the current page
        </devnotes>
      </property>
      <property name="UseSetTextJustification" visibility="public" read="fUseSetTextJustification" write="fUseSetTextJustification" type="Boolean">
        <devnotes>
           UseSetTextJustification is to be set to true to ensure better rendering
        </devnotes>
      </property>
      <property name="KerningHScaleBottom" visibility="public" read="fKerningHScaleBottom" write="fKerningHScaleBottom" type="Single">
        <devnotes>
           the %% limit below which Font Kerning is transformed into PDF Horizontal
        </devnotes>
      </property>
      <property name="KerningHScaleTop" visibility="public" read="fKerningHScaleTop" write="fKerningHScaleTop" type="Single">
        <devnotes>
           the %% limit over which Font Kerning is transformed into PDF Horizontal
        </devnotes>
      </property>
    </members>
  </class>
  <class name="TPdfImage">
    <devnotes>
       generic image object
    </devnotes>
    <ancestor name="TPdfXObject" namespace="SynPdf">
      <ancestor name="TPdfStream" namespace="SynPdf">
        <methodref name="InternalWriteTo" visibility="public" />
        <methodref name="Create" visibility="public">
          <devnotes>
             create the temporary memory stream
          </devnotes>
        </methodref>
        <methodref name="Destroy" visibility="public">
          <devnotes>
             release the memory stream
          </devnotes>
        </methodref>
        <propertyref name="Attributes" visibility="public">
          <devnotes>
             retrieve the associated attributes, e.g. the stream Length
          </devnotes>
        </propertyref>
        <propertyref name="Writer" visibility="public">
          <devnotes>
             retrieve the associated buffered writer
          </devnotes>
        </propertyref>
        <propertyref name="Filter" visibility="public">
          <devnotes>
             retrieve the associated filter
          </devnotes>
        </propertyref>
        <ancestor name="TPdfObject" namespace="SynPdf">
          <methodref name="InternalWriteTo" visibility="public" />
          <methodref name="SetObjectNumber" visibility="protected" />
          <methodref name="Create" visibility="public">
            <devnotes>
               create the PDF object instance
            </devnotes>
          </methodref>
          <methodref name="WriteTo" visibility="public">
            <devnotes>
               Write object to specified stream
            </devnotes>
          </methodref>
          <methodref name="WriteValueTo" visibility="public">
            <devnotes>
               write indirect object to specified stream
            </devnotes>
          </methodref>
          <propertyref name="ObjectNumber" visibility="public">
            <devnotes>
               the associated PDF Object Number
            </devnotes>
          </propertyref>
          <propertyref name="GenerationNumber" visibility="public">
            <devnotes>
               the associated PDF Generation Number
            </devnotes>
          </propertyref>
          <propertyref name="ObjectType" visibility="public">
            <devnotes>
               the corresponding type of this PDF object
            </devnotes>
          </propertyref>
          <ancestor name="TObject" namespace="System">
            <methodref name="Create" visibility="public">
            </methodref>
            <methodref name="Free" visibility="public">
            </methodref>
            <methodref name="InitInstance" visibility="public">
            </methodref>
            <methodref name="CleanupInstance" visibility="public">
            </methodref>
            <methodref name="ClassType" visibility="public">
            </methodref>
            <methodref name="ClassName" visibility="public">
            </methodref>
            <methodref name="ClassNameIs" visibility="public">
            </methodref>
            <methodref name="ClassParent" visibility="public">
            </methodref>
            <methodref name="ClassInfo" visibility="public">
            </methodref>
            <methodref name="InstanceSize" visibility="public">
            </methodref>
            <methodref name="InheritsFrom" visibility="public">
            </methodref>
            <methodref name="MethodAddress" visibility="public">
            </methodref>
            <methodref name="MethodName" visibility="public">
            </methodref>
            <methodref name="FieldAddress" visibility="public">
            </methodref>
            <methodref name="GetInterface" visibility="public">
            </methodref>
            <methodref name="GetInterfaceEntry" visibility="public">
            </methodref>
            <methodref name="GetInterfaceTable" visibility="public">
            </methodref>
            <methodref name="SafeCallException" visibility="public">
            </methodref>
            <methodref name="AfterConstruction" visibility="public">
            </methodref>
            <methodref name="BeforeDestruction" visibility="public">
            </methodref>
            <methodref name="Dispatch" visibility="public">
            </methodref>
            <methodref name="DefaultHandler" visibility="public">
            </methodref>
            <methodref name="NewInstance" visibility="public">
            </methodref>
            <methodref name="FreeInstance" visibility="public">
            </methodref>
            <methodref name="Destroy" visibility="public">
            </methodref>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <field name="fPixelHeight" type="Integer" visibility="private" />
      <field name="fPixelWidth" type="Integer" visibility="private" />
      <field name="fHash" type="TPdfImageHash" visibility="private" />
      <constructor name="Create" visibility="public">
        <devnotes>
           create the image from a supplied VCL TGraphic instance
        </devnotes>
        <parameters>
          <parameter name="aDoc" type="TPdfDocument" />
          <parameter name="aImage" type="TGraphic" />
          <parameter name="DontAddToFXref" type="Boolean" />
        </parameters>
      </constructor>
      <constructor name="CreateJpegDirect" visibility="public">
        <devnotes>
           create an image from a supplied JPEG file name
        </devnotes>
        <parameters>
          <parameter name="aDoc" type="TPdfDocument" />
          <parameter name="aJpegFileName" type="TFileName" paramflags="const" />
          <parameter name="DontAddToFXref" type="Boolean">
            <value>
              True
            </value>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="CreateJpegDirect" visibility="public">
        <devnotes>
           create an image from a supplied JPEG content
        </devnotes>
        <parameters>
          <parameter name="aDoc" type="TPdfDocument" />
          <parameter name="aJpegFile" type="TMemoryStream" />
          <parameter name="DontAddToFXref" type="Boolean">
            <value>
              True
            </value>
          </parameter>
        </parameters>
      </constructor>
      <property name="PixelWidth" visibility="public" read="fPixelWidth" type="Integer">
        <devnotes>
           width of the image, in pixels units
        </devnotes>
      </property>
      <property name="PixelHeight" visibility="public" read="fPixelHeight" type="Integer">
        <devnotes>
           height of the image, in pixels units
        </devnotes>
      </property>
    </members>
  </class>
  <class name="TPdfForm">
    <devnotes>
       handle any form XObject
    </devnotes>
    <ancestor name="TPdfXObject" namespace="SynPdf">
      <ancestor name="TPdfStream" namespace="SynPdf">
        <methodref name="InternalWriteTo" visibility="public" />
        <methodref name="Create" visibility="public">
          <devnotes>
             create the temporary memory stream
          </devnotes>
        </methodref>
        <methodref name="Destroy" visibility="public">
          <devnotes>
             release the memory stream
          </devnotes>
        </methodref>
        <propertyref name="Attributes" visibility="public">
          <devnotes>
             retrieve the associated attributes, e.g. the stream Length
          </devnotes>
        </propertyref>
        <propertyref name="Writer" visibility="public">
          <devnotes>
             retrieve the associated buffered writer
          </devnotes>
        </propertyref>
        <propertyref name="Filter" visibility="public">
          <devnotes>
             retrieve the associated filter
          </devnotes>
        </propertyref>
        <ancestor name="TPdfObject" namespace="SynPdf">
          <methodref name="InternalWriteTo" visibility="public" />
          <methodref name="SetObjectNumber" visibility="protected" />
          <methodref name="Create" visibility="public">
            <devnotes>
               create the PDF object instance
            </devnotes>
          </methodref>
          <methodref name="WriteTo" visibility="public">
            <devnotes>
               Write object to specified stream
            </devnotes>
          </methodref>
          <methodref name="WriteValueTo" visibility="public">
            <devnotes>
               write indirect object to specified stream
            </devnotes>
          </methodref>
          <propertyref name="ObjectNumber" visibility="public">
            <devnotes>
               the associated PDF Object Number
            </devnotes>
          </propertyref>
          <propertyref name="GenerationNumber" visibility="public">
            <devnotes>
               the associated PDF Generation Number
            </devnotes>
          </propertyref>
          <propertyref name="ObjectType" visibility="public">
            <devnotes>
               the corresponding type of this PDF object
            </devnotes>
          </propertyref>
          <ancestor name="TObject" namespace="System">
            <methodref name="Create" visibility="public">
            </methodref>
            <methodref name="Free" visibility="public">
            </methodref>
            <methodref name="InitInstance" visibility="public">
            </methodref>
            <methodref name="CleanupInstance" visibility="public">
            </methodref>
            <methodref name="ClassType" visibility="public">
            </methodref>
            <methodref name="ClassName" visibility="public">
            </methodref>
            <methodref name="ClassNameIs" visibility="public">
            </methodref>
            <methodref name="ClassParent" visibility="public">
            </methodref>
            <methodref name="ClassInfo" visibility="public">
            </methodref>
            <methodref name="InstanceSize" visibility="public">
            </methodref>
            <methodref name="InheritsFrom" visibility="public">
            </methodref>
            <methodref name="MethodAddress" visibility="public">
            </methodref>
            <methodref name="MethodName" visibility="public">
            </methodref>
            <methodref name="FieldAddress" visibility="public">
            </methodref>
            <methodref name="GetInterface" visibility="public">
            </methodref>
            <methodref name="GetInterfaceEntry" visibility="public">
            </methodref>
            <methodref name="GetInterfaceTable" visibility="public">
            </methodref>
            <methodref name="SafeCallException" visibility="public">
            </methodref>
            <methodref name="AfterConstruction" visibility="public">
            </methodref>
            <methodref name="BeforeDestruction" visibility="public">
            </methodref>
            <methodref name="Dispatch" visibility="public">
            </methodref>
            <methodref name="DefaultHandler" visibility="public">
            </methodref>
            <methodref name="NewInstance" visibility="public">
            </methodref>
            <methodref name="FreeInstance" visibility="public">
            </methodref>
            <methodref name="Destroy" visibility="public">
            </methodref>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <field name="FFontList" type="TPdfDictionary" visibility="private" />
      <constructor name="Create" visibility="public">
        <devnotes>
           create a form XObject from a supplied TMetaFile
        </devnotes>
        <parameters>
          <parameter name="aDoc" type="TPdfDocumentGDI" />
          <parameter name="aMetaFile" type="TMetafile" />
        </parameters>
      </constructor>
    </members>
  </class>
  <const name="Usp10" type="string">
    <value>
      usp10.dll
    </value>
  </const>
  <const name="USP_E_SCRIPT_NOT_IN_FONT" type="Integer">
    <devnotes>
       error returned by Uniscribe when the current selected font
    </devnotes>
    <value>
      $80040200
    </value>
  </const>
  <const name="r0" type="TScriptState_enum">
    <value>
      r0
    </value>
  </const>
  <const name="r1" type="TScriptState_enum">
    <value>
      r1
    </value>
  </const>
  <const name="r2" type="TScriptState_enum">
    <value>
      r2
    </value>
  </const>
  <const name="r3" type="TScriptState_enum">
    <value>
      r3
    </value>
  </const>
  <const name="r4" type="TScriptState_enum">
    <value>
      r4
    </value>
  </const>
  <const name="fOverrideDirection" type="TScriptState_enum">
    <value>
      fOverrideDirection
    </value>
  </const>
  <const name="fInhibitSymSwap" type="TScriptState_enum">
    <value>
      fInhibitSymSwap
    </value>
  </const>
  <const name="fCharShape" type="TScriptState_enum">
    <value>
      fCharShape
    </value>
  </const>
  <const name="fDigitSubstitute" type="TScriptState_enum">
    <value>
      fDigitSubstitute
    </value>
  </const>
  <const name="fInhibitLigate" type="TScriptState_enum">
    <value>
      fInhibitLigate
    </value>
  </const>
  <const name="fDisplayZWG" type="TScriptState_enum">
    <value>
      fDisplayZWG
    </value>
  </const>
  <const name="fArabicNumContext" type="TScriptState_enum">
    <value>
      fArabicNumContext
    </value>
  </const>
  <const name="fGcpClusters" type="TScriptState_enum">
    <value>
      fGcpClusters
    </value>
  </const>
  <enum name="TScriptState_enum">
    <element name="r0" />
    <element name="r1" />
    <element name="r2" />
    <element name="r3" />
    <element name="r4" />
    <element name="fOverrideDirection" />
    <element name="fInhibitSymSwap" />
    <element name="fCharShape" />
    <element name="fDigitSubstitute" />
    <element name="fInhibitLigate" />
    <element name="fDisplayZWG" />
    <element name="fArabicNumContext" />
    <element name="fGcpClusters" />
  </enum>
  <set name="TScriptState_set" type="TScriptState_enum">
    <element name="r0" />
    <element name="r1" />
    <element name="r2" />
    <element name="r3" />
    <element name="r4" />
    <element name="fOverrideDirection" />
    <element name="fInhibitSymSwap" />
    <element name="fCharShape" />
    <element name="fDigitSubstitute" />
    <element name="fInhibitLigate" />
    <element name="fDisplayZWG" />
    <element name="fArabicNumContext" />
    <element name="fGcpClusters" />
  </set>
  <pointer name="PScriptState" type="TScriptState" indircnt="1" />
  <struct name="TScriptState" packed="true">
  </struct>
  <const name="s0" type="TScriptAnalysis_enum">
    <value>
      s0
    </value>
  </const>
  <const name="s1" type="TScriptAnalysis_enum">
    <value>
      s1
    </value>
  </const>
  <const name="s2" type="TScriptAnalysis_enum">
    <value>
      s2
    </value>
  </const>
  <const name="s3" type="TScriptAnalysis_enum">
    <value>
      s3
    </value>
  </const>
  <const name="s4" type="TScriptAnalysis_enum">
    <value>
      s4
    </value>
  </const>
  <const name="s5" type="TScriptAnalysis_enum">
    <value>
      s5
    </value>
  </const>
  <const name="s6" type="TScriptAnalysis_enum">
    <value>
      s6
    </value>
  </const>
  <const name="s7" type="TScriptAnalysis_enum">
    <value>
      s7
    </value>
  </const>
  <const name="s8" type="TScriptAnalysis_enum">
    <value>
      s8
    </value>
  </const>
  <const name="s9" type="TScriptAnalysis_enum">
    <value>
      s9
    </value>
  </const>
  <const name="fRTL" type="TScriptAnalysis_enum">
    <value>
      fRTL
    </value>
  </const>
  <const name="fLayoutRTL" type="TScriptAnalysis_enum">
    <value>
      fLayoutRTL
    </value>
  </const>
  <const name="fLinkBefore" type="TScriptAnalysis_enum">
    <value>
      fLinkBefore
    </value>
  </const>
  <const name="fLinkAfter" type="TScriptAnalysis_enum">
    <value>
      fLinkAfter
    </value>
  </const>
  <const name="fLogicalOrder" type="TScriptAnalysis_enum">
    <value>
      fLogicalOrder
    </value>
  </const>
  <const name="fNoGlyphIndex" type="TScriptAnalysis_enum">
    <value>
      fNoGlyphIndex
    </value>
  </const>
  <enum name="TScriptAnalysis_enum">
    <element name="s0" />
    <element name="s1" />
    <element name="s2" />
    <element name="s3" />
    <element name="s4" />
    <element name="s5" />
    <element name="s6" />
    <element name="s7" />
    <element name="s8" />
    <element name="s9" />
    <element name="fRTL" />
    <element name="fLayoutRTL" />
    <element name="fLinkBefore" />
    <element name="fLinkAfter" />
    <element name="fLogicalOrder" />
    <element name="fNoGlyphIndex" />
  </enum>
  <set name="TScriptAnalysis_set" type="TScriptAnalysis_enum">
    <element name="s0" />
    <element name="s1" />
    <element name="s2" />
    <element name="s3" />
    <element name="s4" />
    <element name="s5" />
    <element name="s6" />
    <element name="s7" />
    <element name="s8" />
    <element name="s9" />
    <element name="fRTL" />
    <element name="fLayoutRTL" />
    <element name="fLinkBefore" />
    <element name="fLinkAfter" />
    <element name="fLogicalOrder" />
    <element name="fNoGlyphIndex" />
  </set>
  <pointer name="PScriptAnalysis" type="TScriptAnalysis" indircnt="1" />
  <struct name="TScriptAnalysis" packed="true">
  </struct>
  <pointer name="PScriptItem" type="TScriptItem" indircnt="1" />
  <struct name="TScriptItem" packed="true">
    <devnotes>
       a Uniscribe script item, after analysis of a unicode text
    </devnotes>
    <field name="iCharPos" type="Integer" visibility="public">
      <devnotes>
         Logical offset to first character in this item
      </devnotes>
    </field>
    <field name="a" type="TScriptAnalysis" visibility="public">
      <devnotes>
         corresponding Uniscribe script analysis 
      </devnotes>
    </field>
  </struct>
  <const name="fNumeric" type="TScriptProperties_enum">
    <value>
      fNumeric
    </value>
  </const>
  <const name="fComplex" type="TScriptProperties_enum">
    <value>
      fComplex
    </value>
  </const>
  <const name="fNeedsWordBreaking" type="TScriptProperties_enum">
    <value>
      fNeedsWordBreaking
    </value>
  </const>
  <const name="fNeedsCaretInfo" type="TScriptProperties_enum">
    <value>
      fNeedsCaretInfo
    </value>
  </const>
  <const name="bCharSet0" type="TScriptProperties_enum">
    <value>
      bCharSet0
    </value>
  </const>
  <const name="bCharSet1" type="TScriptProperties_enum">
    <value>
      bCharSet1
    </value>
  </const>
  <const name="bCharSet2" type="TScriptProperties_enum">
    <value>
      bCharSet2
    </value>
  </const>
  <const name="bCharSet3" type="TScriptProperties_enum">
    <value>
      bCharSet3
    </value>
  </const>
  <const name="bCharSet4" type="TScriptProperties_enum">
    <value>
      bCharSet4
    </value>
  </const>
  <const name="bCharSet5" type="TScriptProperties_enum">
    <value>
      bCharSet5
    </value>
  </const>
  <const name="bCharSet6" type="TScriptProperties_enum">
    <value>
      bCharSet6
    </value>
  </const>
  <const name="bCharSet7" type="TScriptProperties_enum">
    <value>
      bCharSet7
    </value>
  </const>
  <const name="fControl" type="TScriptProperties_enum">
    <value>
      fControl
    </value>
  </const>
  <const name="fPrivateUseArea" type="TScriptProperties_enum">
    <value>
      fPrivateUseArea
    </value>
  </const>
  <const name="fNeedsCharacterJustify" type="TScriptProperties_enum">
    <value>
      fNeedsCharacterJustify
    </value>
  </const>
  <const name="fInvalidGlyph" type="TScriptProperties_enum">
    <value>
      fInvalidGlyph
    </value>
  </const>
  <const name="fInvalidLogAttr" type="TScriptProperties_enum">
    <value>
      fInvalidLogAttr
    </value>
  </const>
  <const name="fCDM" type="TScriptProperties_enum">
    <value>
      fCDM
    </value>
  </const>
  <const name="fAmbiguousCharSet" type="TScriptProperties_enum">
    <value>
      fAmbiguousCharSet
    </value>
  </const>
  <const name="fClusterSizeVaries" type="TScriptProperties_enum">
    <value>
      fClusterSizeVaries
    </value>
  </const>
  <const name="fRejectInvalid" type="TScriptProperties_enum">
    <value>
      fRejectInvalid
    </value>
  </const>
  <enum name="TScriptProperties_enum">
    <element name="fNumeric" />
    <element name="fComplex" />
    <element name="fNeedsWordBreaking" />
    <element name="fNeedsCaretInfo" />
    <element name="bCharSet0" />
    <element name="bCharSet1" />
    <element name="bCharSet2" />
    <element name="bCharSet3" />
    <element name="bCharSet4" />
    <element name="bCharSet5" />
    <element name="bCharSet6" />
    <element name="bCharSet7" />
    <element name="fControl" />
    <element name="fPrivateUseArea" />
    <element name="fNeedsCharacterJustify" />
    <element name="fInvalidGlyph" />
    <element name="fInvalidLogAttr" />
    <element name="fCDM" />
    <element name="fAmbiguousCharSet" />
    <element name="fClusterSizeVaries" />
    <element name="fRejectInvalid" />
  </enum>
  <set name="TScriptProperties_set" type="TScriptProperties_enum">
    <devnotes>
       set of possible Uniscribe processing properties of a given language
    </devnotes>
    <element name="fNumeric" />
    <element name="fComplex" />
    <element name="fNeedsWordBreaking" />
    <element name="fNeedsCaretInfo" />
    <element name="bCharSet0" />
    <element name="bCharSet1" />
    <element name="bCharSet2" />
    <element name="bCharSet3" />
    <element name="bCharSet4" />
    <element name="bCharSet5" />
    <element name="bCharSet6" />
    <element name="bCharSet7" />
    <element name="fControl" />
    <element name="fPrivateUseArea" />
    <element name="fNeedsCharacterJustify" />
    <element name="fInvalidGlyph" />
    <element name="fInvalidLogAttr" />
    <element name="fCDM" />
    <element name="fAmbiguousCharSet" />
    <element name="fClusterSizeVaries" />
    <element name="fRejectInvalid" />
  </set>
  <pointer name="PScriptProperties" type="TScriptProperties" indircnt="1" />
  <struct name="TScriptProperties" packed="true">
    <devnotes>
       Contains information about Uniscribe special processing for each script
    </devnotes>
    <field name="langid" type="Word" visibility="public">
      <devnotes>
         Primary and sublanguage associated with script
      </devnotes>
    </field>
    <field name="fFlags" type="TScriptProperties_set" visibility="public">
      <devnotes>
         set of possible Uniscribe processing properties for a given language                   
      </devnotes>
    </field>
  </struct>
  <pointer name="PScriptPropertiesArray" type="TPScriptPropertiesArray" indircnt="1" />
  <array name="TPScriptPropertiesArray" low="0" high="255">
    <devnotes>
       an array of Uniscribe processing information
    </devnotes>
    <element type="PScriptProperties">
      <devnotes>
         an array of Uniscribe processing information
      </devnotes>
    </element>
  </array>
  <const name="a0" type="TScriptVisAttr_enum">
    <value>
      a0
    </value>
  </const>
  <const name="a1" type="TScriptVisAttr_enum">
    <value>
      a1
    </value>
  </const>
  <const name="a2" type="TScriptVisAttr_enum">
    <value>
      a2
    </value>
  </const>
  <const name="a3" type="TScriptVisAttr_enum">
    <value>
      a3
    </value>
  </const>
  <const name="fClusterStart" type="TScriptVisAttr_enum">
    <value>
      fClusterStart
    </value>
  </const>
  <const name="fDiacritic" type="TScriptVisAttr_enum">
    <value>
      fDiacritic
    </value>
  </const>
  <const name="fZeroWidth" type="TScriptVisAttr_enum">
    <value>
      fZeroWidth
    </value>
  </const>
  <const name="fReserved" type="TScriptVisAttr_enum">
    <value>
      fReserved
    </value>
  </const>
  <enum name="TScriptVisAttr_enum">
    <element name="a0" />
    <element name="a1" />
    <element name="a2" />
    <element name="a3" />
    <element name="fClusterStart" />
    <element name="fDiacritic" />
    <element name="fZeroWidth" />
    <element name="fReserved" />
  </enum>
  <set name="TScriptVisAttr_set" type="TScriptVisAttr_enum">
    <devnotes>
       set of Uniscribe visual (glyph) attributes
    </devnotes>
    <element name="a0" />
    <element name="a1" />
    <element name="a2" />
    <element name="a3" />
    <element name="fClusterStart" />
    <element name="fDiacritic" />
    <element name="fZeroWidth" />
    <element name="fReserved" />
  </set>
  <pointer name="PScriptVisAttr" type="TScriptVisAttr" indircnt="1" />
  <struct name="TScriptVisAttr" packed="true">
  </struct>
  <function name="ScriptItemize" visibility="public" callconv="stdcall">
    <parameters>
      <parameter name="pwcInChars" type="PWideChar" paramflags="const" />
      <parameter name="cInChars" type="Integer" />
      <parameter name="cMaxItems" type="Integer" />
      <parameter name="psControl" type="Pointer" paramflags="const" />
      <parameter name="psState" type="Pointer" paramflags="const" />
      <parameter name="pItems" type="PScriptItem" />
      <parameter name="pcItems" type="Integer" paramflags="var" />
      <retval type="HRESULT" />
    </parameters>
  </function>
  <function name="ScriptGetProperties" visibility="public" callconv="stdcall">
    <parameters>
      <parameter name="ppSp" type="PScriptPropertiesArray" paramflags="out" />
      <parameter name="piNumScripts" type="Integer" paramflags="out" />
      <retval type="HRESULT" />
    </parameters>
  </function>
  <function name="ScriptLayout" visibility="public" callconv="stdcall">
    <parameters>
      <parameter name="cRuns" type="Integer" />
      <parameter name="pbLevel" type="PByte" paramflags="const" />
      <parameter name="piVisualToLogical" type="PInteger" />
      <parameter name="piLogicalToVisual" type="PInteger" />
      <retval type="HRESULT" />
    </parameters>
  </function>
  <function name="ScriptShape" visibility="public" callconv="stdcall">
    <parameters>
      <parameter name="hdc" type="HDC" />
      <parameter name="psc" type="Pointer" paramflags="var" />
      <parameter name="pwcChars" type="PWideChar" paramflags="const" />
      <parameter name="cChars" type="Integer" />
      <parameter name="cMaxGlyphs" type="Integer" />
      <parameter name="psa" type="PScriptAnalysis" />
      <parameter name="pwOutGlyphs" type="PWORD" />
      <parameter name="pwLogClust" type="PWORD" />
      <parameter name="psva" type="PScriptVisAttr" />
      <parameter name="pcGlyphs" type="Integer" paramflags="var" />
      <retval type="HRESULT" />
    </parameters>
  </function>
  <function name="CurrentPrinterPaperSize" visibility="public">
    <devnotes>
       retrieve the paper size used by the current selected printer
    </devnotes>
    <parameters>
      <retval type="TPDFPaperSize">
        <devnotes>
           available known paper size (psA4 is the default on TPdfDocument creation)
        </devnotes>
      </retval>
    </parameters>
  </function>
  <function name="CurrentPrinterRes" visibility="public">
    <devnotes>
       retrieve the current printer resolution
    </devnotes>
    <parameters>
      <retval type="TPoint" />
    </parameters>
  </function>
  <procedure name="GDICommentBookmark" visibility="public">
    <devnotes>
       append a EMR_GDICOMMENT message for handling PDF bookmarks
    </devnotes>
    <parameters>
      <parameter name="MetaHandle" type="HDC" />
      <parameter name="aBookmarkName" type="RawUTF8" paramflags="const" />
    </parameters>
  </procedure>
  <procedure name="GDICommentOutline" visibility="public">
    <devnotes>
       append a EMR_GDICOMMENT message for handling PDF outline
    </devnotes>
    <parameters>
      <parameter name="MetaHandle" type="HDC" />
      <parameter name="aTitle" type="RawUTF8" paramflags="const" />
      <parameter name="aLevel" type="Integer" />
    </parameters>
  </procedure>
  <procedure name="GDICommentLink" visibility="public">
    <devnotes>
       append a EMR_GDICOMMENT message for creating a Link into a specified bookmark
    </devnotes>
    <parameters>
      <parameter name="MetaHandle" type="HDC" />
      <parameter name="aBookmarkName" type="RawUTF8" paramflags="const" />
      <parameter name="aRect" type="TRect" paramflags="const" />
    </parameters>
  </procedure>
  <function name="_DateTimeToPdfDate" visibility="public">
    <devnotes>
       convert a date, into PDF string format, i.e. as 'D:20100414113241'
    </devnotes>
    <parameters>
      <parameter name="ADate" type="TDateTime" />
      <retval type="string" />
    </parameters>
  </function>
  <function name="_PdfDateToDateTime" visibility="public">
    <devnotes>
       decode PDF date, encoded as 'D:20100414113241'
    </devnotes>
    <parameters>
      <parameter name="AText" type="string" paramflags="const" />
      <retval type="TDateTime" />
    </parameters>
  </function>
  <function name="_HasMultiByteString" visibility="public">
    <devnotes>
       this function returns TRUE if the supplied text contain any MBCS character
    </devnotes>
    <parameters>
      <parameter name="Value" type="PAnsiChar" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="RawUTF8ToPDFString" visibility="public">
    <devnotes>
       convert a specified UTF-8 content into a PDFString value
    </devnotes>
    <parameters>
      <parameter name="Value" type="RawUTF8" paramflags="const" />
      <retval type="string" />
    </parameters>
  </function>
  <function name="PdfRect" visibility="public" procflags="overload">
    <devnotes>
       wrapper to create a temporary PDF coordinates rectangle
       wrapper to create a temporary PDF coordinates rectangle
    </devnotes>
    <parameters>
      <parameter name="Left" type="Single" />
      <parameter name="Top" type="Single" />
      <parameter name="Right" type="Single" />
      <parameter name="Bottom" type="Single" />
      <retval type="TPdfRect">
        <devnotes>
           a PDF coordinates rectangle
        </devnotes>
      </retval>
    </parameters>
  </function>
  <function name="PdfRect" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Box" type="TPdfBox" paramflags="const" />
      <retval type="TPdfRect">
        <devnotes>
           a PDF coordinates rectangle
        </devnotes>
      </retval>
    </parameters>
  </function>
  <function name="PdfBox" visibility="public">
    <devnotes>
       wrapper to create a temporary PDF box
    </devnotes>
    <parameters>
      <parameter name="Left" type="Single" />
      <parameter name="Top" type="Single" />
      <parameter name="Width" type="Single" />
      <parameter name="Height" type="Single" />
      <retval type="TPdfBox">
        <devnotes>
           a PDF coordinates box
        </devnotes>
      </retval>
    </parameters>
  </function>
  <function name="_GetCharCount" visibility="public">
    <devnotes>
       return the number of glyphs in the supplied text
    </devnotes>
    <parameters>
      <parameter name="Text" type="PAnsiChar" />
      <retval type="Integer" />
    </parameters>
  </function>
  <procedure name="L2R" visibility="public">
    <devnotes>
       reverse char orders for every hebrew and arabic words
       reverse char orders for every hebrew and arabic words
    </devnotes>
    <parameters>
      <parameter name="W" type="PWideChar" />
      <parameter name="L" type="Integer" />
    </parameters>
  </procedure>
  <function name="PdfCoord" visibility="public">
    <devnotes>
       convert some milli meters dimension to internal PDF twips value
    </devnotes>
    <parameters>
      <parameter name="MM" type="Single" />
      <retval type="Integer" />
    </parameters>
  </function>
</namespace>
