<?xml version="1.0" encoding="utf-8"?>
<namespace name="SynGdiPlus">
  <devnotes>
     GDI+ library API access
  </devnotes>
  <const name="smDefault" type="TSmoothingMode">
    <value>
      smDefault
    </value>
  </const>
  <const name="smHighSpeed" type="TSmoothingMode">
    <value>
      smHighSpeed
    </value>
  </const>
  <const name="smHighQuality" type="TSmoothingMode">
    <value>
      smHighQuality
    </value>
  </const>
  <const name="smNone" type="TSmoothingMode">
    <value>
      smNone
    </value>
  </const>
  <const name="smAntiAlias" type="TSmoothingMode">
    <value>
      smAntiAlias
    </value>
  </const>
  <enum name="TSmoothingMode">
    <devnotes>
       GDI+ line drawing smoothing types
    </devnotes>
    <element name="smDefault" />
    <element name="smHighSpeed" />
    <element name="smHighQuality" />
    <element name="smNone" />
    <element name="smAntiAlias" />
  </enum>
  <const name="trhDefault" type="TTextRenderingHint">
    <value>
      trhDefault
    </value>
  </const>
  <const name="trhSingleBitPerPixelGridFit" type="TTextRenderingHint">
    <value>
      trhSingleBitPerPixelGridFit
    </value>
  </const>
  <const name="trhSingleBitPerPixel" type="TTextRenderingHint">
    <value>
      trhSingleBitPerPixel
    </value>
  </const>
  <const name="trhAntiAliasGridFit" type="TTextRenderingHint">
    <value>
      trhAntiAliasGridFit
    </value>
  </const>
  <const name="trhAntiAlias" type="TTextRenderingHint">
    <value>
      trhAntiAlias
    </value>
  </const>
  <const name="trhClearTypeGridFit" type="TTextRenderingHint">
    <value>
      trhClearTypeGridFit
    </value>
  </const>
  <enum name="TTextRenderingHint">
    <devnotes>
       GDI+ text rendering smoothing types
    </devnotes>
    <element name="trhDefault" />
    <element name="trhSingleBitPerPixelGridFit" />
    <element name="trhSingleBitPerPixel" />
    <element name="trhAntiAliasGridFit" />
    <element name="trhAntiAlias" />
    <element name="trhClearTypeGridFit" />
  </enum>
  <const name="uWorld" type="TUnit">
    <value>
      uWorld
    </value>
  </const>
  <const name="uDisplay" type="TUnit">
    <value>
      uDisplay
    </value>
  </const>
  <const name="uPixel" type="TUnit">
    <value>
      uPixel
    </value>
  </const>
  <const name="uPoint" type="TUnit">
    <value>
      uPoint
    </value>
  </const>
  <const name="uInch" type="TUnit">
    <value>
      uInch
    </value>
  </const>
  <const name="uDocument" type="TUnit">
    <value>
      uDocument
    </value>
  </const>
  <const name="uMillimeter" type="TUnit">
    <value>
      uMillimeter
    </value>
  </const>
  <const name="uGdi" type="TUnit">
    <value>
      uGdi
    </value>
  </const>
  <enum name="TUnit">
    <devnotes>
       GDI+ available coordinates units
    </devnotes>
    <element name="uWorld" />
    <element name="uDisplay" />
    <element name="uPixel" />
    <element name="uPoint" />
    <element name="uInch" />
    <element name="uDocument" />
    <element name="uMillimeter" />
    <element name="uGdi" />
  </enum>
  <const name="etEmf0" type="TEmfType">
    <value>
      etEmf0
    </value>
  </const>
  <const name="etEmf1" type="TEmfType">
    <value>
      etEmf1
    </value>
  </const>
  <const name="etEmf2" type="TEmfType">
    <value>
      etEmf2
    </value>
  </const>
  <const name="etEmfOnly" type="TEmfType">
    <value>
      etEmfOnly
    </value>
  </const>
  <const name="etEmfPlusOnly" type="TEmfType">
    <value>
      etEmfPlusOnly
    </value>
  </const>
  <const name="etEmfPlusDual" type="TEmfType">
    <value>
      etEmfPlusDual
    </value>
  </const>
  <enum name="TEmfType">
    <devnotes>
       GDI+ types of conversion from EMF to EMF+
    </devnotes>
    <element name="etEmf0" />
    <element name="etEmf1" />
    <element name="etEmf2" />
    <element name="etEmfOnly" />
    <element name="etEmfPlusOnly" />
    <element name="etEmfPlusDual" />
  </enum>
  <const name="fmAlternate" type="TFillMode">
    <value>
      fmAlternate
    </value>
  </const>
  <const name="fmWinding" type="TFillMode">
    <value>
      fmWinding
    </value>
  </const>
  <enum name="TFillMode">
    <devnotes>
       GDI+ available filling modes
    </devnotes>
    <element name="fmAlternate" />
    <element name="fmWinding" />
  </enum>
  <const name="lmRead" type="TLockModeOption">
    <value>
      lmRead
    </value>
  </const>
  <const name="lmWrite" type="TLockModeOption">
    <value>
      lmWrite
    </value>
  </const>
  <const name="lmUserInputBuf" type="TLockModeOption">
    <value>
      lmUserInputBuf
    </value>
  </const>
  <enum name="TLockModeOption">
    <devnotes>
       GDI+ lock mode for GdipFull.BitmapLockBits
    </devnotes>
    <element name="lmRead" />
    <element name="lmWrite" />
    <element name="lmUserInputBuf" />
  </enum>
  <set name="TLockModeOptions" type="TLockModeOption">
    <devnotes>
       GDI+ lock mode settings for GdipFull.BitmapLockBits
    </devnotes>
    <element name="lmRead" />
    <element name="lmWrite" />
    <element name="lmUserInputBuf" />
  </set>
  <const name="stOk" type="TGdipStatus">
    <value>
      stOk
    </value>
  </const>
  <const name="stGenericError" type="TGdipStatus">
    <value>
      stGenericError
    </value>
  </const>
  <const name="stInvalidParameter" type="TGdipStatus">
    <value>
      stInvalidParameter
    </value>
  </const>
  <const name="stOutOfMemory" type="TGdipStatus">
    <value>
      stOutOfMemory
    </value>
  </const>
  <const name="stObjectBusy" type="TGdipStatus">
    <value>
      stObjectBusy
    </value>
  </const>
  <const name="stInsufficientBuffer" type="TGdipStatus">
    <value>
      stInsufficientBuffer
    </value>
  </const>
  <const name="stNotImplemented" type="TGdipStatus">
    <value>
      stNotImplemented
    </value>
  </const>
  <const name="stWin32Error" type="TGdipStatus">
    <value>
      stWin32Error
    </value>
  </const>
  <const name="stWrongState" type="TGdipStatus">
    <value>
      stWrongState
    </value>
  </const>
  <const name="stAborted" type="TGdipStatus">
    <value>
      stAborted
    </value>
  </const>
  <const name="stFileNotFound" type="TGdipStatus">
    <value>
      stFileNotFound
    </value>
  </const>
  <const name="stValueOverflow" type="TGdipStatus">
    <value>
      stValueOverflow
    </value>
  </const>
  <const name="stAccessDenied" type="TGdipStatus">
    <value>
      stAccessDenied
    </value>
  </const>
  <const name="stUnknownImageFormat" type="TGdipStatus">
    <value>
      stUnknownImageFormat
    </value>
  </const>
  <const name="stFontFamilyNotFound" type="TGdipStatus">
    <value>
      stFontFamilyNotFound
    </value>
  </const>
  <const name="stFontStyleNotFound" type="TGdipStatus">
    <value>
      stFontStyleNotFound
    </value>
  </const>
  <const name="stNotTrueTypeFont" type="TGdipStatus">
    <value>
      stNotTrueTypeFont
    </value>
  </const>
  <const name="stUnsupportedGdiplusVersion" type="TGdipStatus">
    <value>
      stUnsupportedGdiplusVersion
    </value>
  </const>
  <const name="stGdiplusNotInitialized" type="TGdipStatus">
    <value>
      stGdiplusNotInitialized
    </value>
  </const>
  <const name="stPropertyNotFound" type="TGdipStatus">
    <value>
      stPropertyNotFound
    </value>
  </const>
  <const name="stPropertyNotSupported" type="TGdipStatus">
    <value>
      stPropertyNotSupported
    </value>
  </const>
  <enum name="TGdipStatus">
    <devnotes>
       GDI+ error codes
    </devnotes>
    <element name="stOk" />
    <element name="stGenericError" />
    <element name="stInvalidParameter" />
    <element name="stOutOfMemory" />
    <element name="stObjectBusy" />
    <element name="stInsufficientBuffer" />
    <element name="stNotImplemented" />
    <element name="stWin32Error" />
    <element name="stWrongState" />
    <element name="stAborted" />
    <element name="stFileNotFound" />
    <element name="stValueOverflow" />
    <element name="stAccessDenied" />
    <element name="stUnknownImageFormat" />
    <element name="stFontFamilyNotFound" />
    <element name="stFontStyleNotFound" />
    <element name="stNotTrueTypeFont" />
    <element name="stUnsupportedGdiplusVersion" />
    <element name="stGdiplusNotInitialized" />
    <element name="stPropertyNotFound" />
    <element name="stPropertyNotSupported" />
  </enum>
  <pointer name="PGdipRect" type="TGdipRect" indircnt="1" />
  <struct name="TGdipRect" packed="true">
    <devnotes>
       GDI+ integer coordinates rectangles
    </devnotes>
    <field name="X" type="Integer" visibility="public" />
    <field name="Y" type="Integer" visibility="public" />
    <field name="Width" type="Integer" visibility="public" />
    <field name="Height" type="Integer" visibility="public" />
  </struct>
  <pointer name="PGdipRectF" type="TGdipRectF" indircnt="1" />
  <struct name="TGdipRectF" packed="true">
    <devnotes>
       GDI+ floating point coordinates rectangles
    </devnotes>
    <field name="X" type="Single" visibility="public" />
    <field name="Y" type="Single" visibility="public" />
    <field name="Width" type="Single" visibility="public" />
    <field name="Height" type="Single" visibility="public" />
  </struct>
  <pointer name="PGdipPointF" type="TGdipPointF" indircnt="1" />
  <struct name="TGdipPointF" packed="true">
    <devnotes>
       GDI+ floating point coordinates for a point
    </devnotes>
    <field name="X" type="Single" visibility="public" />
    <field name="Y" type="Single" visibility="public" />
  </struct>
  <pointer name="PGdipPointFArray" type="TGdipPointFArray" indircnt="1" />
  <array name="TGdipPointFArray" low="0" high="1000">
    <devnotes>
       GDI+ floating point coordinates for an array of points
    </devnotes>
    <element type="TGdipPointF">
      <devnotes>
         GDI+ floating point coordinates for an array of points
      </devnotes>
    </element>
  </array>
  <struct name="TGdipBitmapData" packed="true">
    <devnotes>
       data as retrieved by GdipFull.BitmapLockBits
    </devnotes>
    <field name="Width" type="Cardinal" visibility="public" />
    <field name="Height" type="Cardinal" visibility="public" />
    <field name="Stride" type="Integer" visibility="public" />
    <field name="PixelFormat" type="Integer" visibility="public" />
    <field name="Scan0" type="Pointer" visibility="public" />
    <field name="Reserved" type="Cardinal" visibility="public" />
  </struct>
  <pointer name="PGdipBitmapData" type="TGdipBitmapData" indircnt="1" />
  <class name="TSynLibrary">
    <devnotes>
       an object wrapper to load dynamically a library
    </devnotes>
    <ancestor name="TObject" namespace="System">
      <methodref name="Create" visibility="public">
      </methodref>
      <methodref name="Free" visibility="public">
      </methodref>
      <methodref name="InitInstance" visibility="public">
      </methodref>
      <methodref name="CleanupInstance" visibility="public">
      </methodref>
      <methodref name="ClassType" visibility="public">
      </methodref>
      <methodref name="ClassName" visibility="public">
      </methodref>
      <methodref name="ClassNameIs" visibility="public">
      </methodref>
      <methodref name="ClassParent" visibility="public">
      </methodref>
      <methodref name="ClassInfo" visibility="public">
      </methodref>
      <methodref name="InstanceSize" visibility="public">
      </methodref>
      <methodref name="InheritsFrom" visibility="public">
      </methodref>
      <methodref name="MethodAddress" visibility="public">
      </methodref>
      <methodref name="MethodName" visibility="public">
      </methodref>
      <methodref name="FieldAddress" visibility="public">
      </methodref>
      <methodref name="GetInterface" visibility="public">
      </methodref>
      <methodref name="GetInterfaceEntry" visibility="public">
      </methodref>
      <methodref name="GetInterfaceTable" visibility="public">
      </methodref>
      <methodref name="SafeCallException" visibility="public">
      </methodref>
      <methodref name="AfterConstruction" visibility="public">
      </methodref>
      <methodref name="BeforeDestruction" visibility="public">
      </methodref>
      <methodref name="Dispatch" visibility="public">
      </methodref>
      <methodref name="DefaultHandler" visibility="public">
      </methodref>
      <methodref name="NewInstance" visibility="public">
      </methodref>
      <methodref name="FreeInstance" visibility="public">
      </methodref>
      <methodref name="Destroy" visibility="public">
      </methodref>
    </ancestor>
    <members>
      <field name="fHandle" type="Cardinal" visibility="protected" />
      <function name="Load" visibility="protected" procflags="class">
        <devnotes>
           helper to load all needed procedure entries from a dynamic library
        </devnotes>
        <parameters>
          <parameter name="aDllFileName" type="TFileName" paramflags="const" />
          <parameter name="Addr" type="PPointer" />
          <parameter name="Names" type="PPChar" />
          <retval type="Cardinal" />
        </parameters>
      </function>
      <procedure name="UnLoad" visibility="protected">
        <devnotes>
           unload the library
        </devnotes>
      </procedure>
      <function name="Exists" visibility="public">
        <devnotes>
           return TRUE if the library and all procedures were found
        </devnotes>
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
    </members>
  </class>
  <class name="TGDIPlus">
    <devnotes>
       handle picture related GDI+ library calls
    </devnotes>
    <ancestor name="TSynLibrary" namespace="SynGdiPlus">
      <methodref name="Load" visibility="protected">
        <devnotes>
           helper to load all needed procedure entries from a dynamic library
        </devnotes>
      </methodref>
      <methodref name="UnLoad" visibility="protected">
        <devnotes>
           unload the library
        </devnotes>
      </methodref>
      <methodref name="Exists" visibility="public">
        <devnotes>
           return TRUE if the library and all procedures were found
        </devnotes>
      </methodref>
      <ancestor name="TObject" namespace="System">
        <methodref name="Create" visibility="public">
        </methodref>
        <methodref name="Free" visibility="public">
        </methodref>
        <methodref name="InitInstance" visibility="public">
        </methodref>
        <methodref name="CleanupInstance" visibility="public">
        </methodref>
        <methodref name="ClassType" visibility="public">
        </methodref>
        <methodref name="ClassName" visibility="public">
        </methodref>
        <methodref name="ClassNameIs" visibility="public">
        </methodref>
        <methodref name="ClassParent" visibility="public">
        </methodref>
        <methodref name="ClassInfo" visibility="public">
        </methodref>
        <methodref name="InstanceSize" visibility="public">
        </methodref>
        <methodref name="InheritsFrom" visibility="public">
        </methodref>
        <methodref name="MethodAddress" visibility="public">
        </methodref>
        <methodref name="MethodName" visibility="public">
        </methodref>
        <methodref name="FieldAddress" visibility="public">
        </methodref>
        <methodref name="GetInterface" visibility="public">
        </methodref>
        <methodref name="GetInterfaceEntry" visibility="public">
        </methodref>
        <methodref name="GetInterfaceTable" visibility="public">
        </methodref>
        <methodref name="SafeCallException" visibility="public">
        </methodref>
        <methodref name="AfterConstruction" visibility="public">
        </methodref>
        <methodref name="BeforeDestruction" visibility="public">
        </methodref>
        <methodref name="Dispatch" visibility="public">
        </methodref>
        <methodref name="DefaultHandler" visibility="public">
        </methodref>
        <methodref name="NewInstance" visibility="public">
        </methodref>
        <methodref name="FreeInstance" visibility="public">
        </methodref>
        <methodref name="Destroy" visibility="public">
        </methodref>
      </ancestor>
    </ancestor>
    <members>
      <field name="Startup" visibility="protected">
      </field>
      <field name="Shutdown" visibility="protected">
      </field>
      <field name="DeleteGraphics" visibility="protected">
      </field>
      <field name="CreateFromHDC" visibility="protected">
      </field>
      <field name="LoadImageFromStream" visibility="protected">
      </field>
      <field name="LoadImageFromFile" visibility="protected">
      </field>
      <field name="DrawImageRect" visibility="protected">
      </field>
      <field name="DrawImageRectRect" visibility="protected">
      </field>
      <field name="DisposeImage" visibility="protected">
      </field>
      <field name="GetImageRawFormat" visibility="protected">
      </field>
      <field name="GetImageWidth" visibility="protected">
      </field>
      <field name="GetImageHeight" visibility="protected">
      </field>
      <field name="SaveImageToStream" visibility="protected">
      </field>
      <field name="CreateBitmapFromHBITMAP" visibility="protected">
      </field>
      <field name="CreateBitmapFromGdiDib" visibility="protected">
      </field>
      <field name="BitmapSetResolution" visibility="protected">
      </field>
      <field name="fToken" type="Cardinal" visibility="protected" />
      <field name="fStartupHook" type=":3" visibility="protected" />
      <field name="fStartupHookToken" type="Cardinal" visibility="protected" />
      <constructor name="Create" visibility="public">
        <devnotes>
           load the GDI+ library and all needed procedures
        </devnotes>
        <parameters>
          <parameter name="aDllFileName" type="TFileName" paramflags="const" />
        </parameters>
      </constructor>
      <procedure name="RegisterPictures" visibility="public">
      </procedure>
      <procedure name="DrawAntiAliased" visibility="public" procflags="overload virtual">
        <devnotes>
           draw the corresponding EMF metafile into a given device context
        </devnotes>
        <parameters>
          <parameter name="Source" type="TMetafile" />
          <parameter name="Dest" type="HDC" />
          <parameter name="R" type="TRect" />
          <parameter name="aSmoothing" type="TSmoothingMode">
            <value>
              smAntiAlias
            </value>
          </parameter>
          <parameter name="aTextRendering" type="TTextRenderingHint">
            <value>
              trhClearTypeGridFit
            </value>
          </parameter>
        </parameters>
      </procedure>
      <function name="DrawAntiAliased" visibility="public" procflags="overload">
        <devnotes>
           draw the corresponding EMF metafile into a bitmap created by the method
        </devnotes>
        <parameters>
          <parameter name="Source" type="TMetafile" />
          <parameter name="ScaleX" type="Integer">
            <value>
              $64
            </value>
          </parameter>
          <parameter name="ScaleY" type="Integer">
            <value>
              $64
            </value>
          </parameter>
          <parameter name="aSmoothing" type="TSmoothingMode">
            <value>
              smAntiAlias
            </value>
          </parameter>
          <parameter name="aTextRendering" type="TTextRenderingHint">
            <value>
              trhClearTypeGridFit
            </value>
          </parameter>
          <retval type="TBitmap" />
        </parameters>
      </function>
      <destructor name="Destroy" visibility="public">
        <devnotes>
           unload the GDI+ library
        </devnotes>
        <parameters>
        </parameters>
      </destructor>
    </members>
  </class>
  <const name="gptGIF" type="TGDIPPictureType">
    <value>
      gptGIF
    </value>
  </const>
  <const name="gptPNG" type="TGDIPPictureType">
    <value>
      gptPNG
    </value>
  </const>
  <const name="gptJPG" type="TGDIPPictureType">
    <value>
      gptJPG
    </value>
  </const>
  <const name="gptBMP" type="TGDIPPictureType">
    <value>
      gptBMP
    </value>
  </const>
  <const name="gptTIF" type="TGDIPPictureType">
    <value>
      gptTIF
    </value>
  </const>
  <enum name="TGDIPPictureType">
    <devnotes>
       allowed types for image saving
    </devnotes>
    <element name="gptGIF" />
    <element name="gptPNG" />
    <element name="gptJPG" />
    <element name="gptBMP" />
    <element name="gptTIF" />
  </enum>
  <const name="evColorTypeCMYK" type="TGDIPPEncoderValue">
    <value>
      evColorTypeCMYK
    </value>
  </const>
  <const name="evColorTypeYCCK" type="TGDIPPEncoderValue">
    <value>
      evColorTypeYCCK
    </value>
  </const>
  <const name="evCompressionLZW" type="TGDIPPEncoderValue">
    <value>
      evCompressionLZW
    </value>
  </const>
  <const name="evCompressionCCITT3" type="TGDIPPEncoderValue">
    <value>
      evCompressionCCITT3
    </value>
  </const>
  <const name="evCompressionCCITT4" type="TGDIPPEncoderValue">
    <value>
      evCompressionCCITT4
    </value>
  </const>
  <const name="evCompressionRle" type="TGDIPPEncoderValue">
    <value>
      evCompressionRle
    </value>
  </const>
  <const name="evCompressionNone" type="TGDIPPEncoderValue">
    <value>
      evCompressionNone
    </value>
  </const>
  <const name="evScanMethodInterlaced" type="TGDIPPEncoderValue">
    <value>
      evScanMethodInterlaced
    </value>
  </const>
  <const name="evScanMethodNonInterlaced" type="TGDIPPEncoderValue">
    <value>
      evScanMethodNonInterlaced
    </value>
  </const>
  <const name="evVersionGif87" type="TGDIPPEncoderValue">
    <value>
      evVersionGif87
    </value>
  </const>
  <const name="evVersionGif89" type="TGDIPPEncoderValue">
    <value>
      evVersionGif89
    </value>
  </const>
  <const name="evRenderProgressive" type="TGDIPPEncoderValue">
    <value>
      evRenderProgressive
    </value>
  </const>
  <const name="evRenderNonProgressive" type="TGDIPPEncoderValue">
    <value>
      evRenderNonProgressive
    </value>
  </const>
  <const name="evTransformRotate90" type="TGDIPPEncoderValue">
    <value>
      evTransformRotate90
    </value>
  </const>
  <const name="evTransformRotate180" type="TGDIPPEncoderValue">
    <value>
      evTransformRotate180
    </value>
  </const>
  <const name="evTransformRotate270" type="TGDIPPEncoderValue">
    <value>
      evTransformRotate270
    </value>
  </const>
  <const name="evTransformFlipHorizontal" type="TGDIPPEncoderValue">
    <value>
      evTransformFlipHorizontal
    </value>
  </const>
  <const name="evTransformFlipVertical" type="TGDIPPEncoderValue">
    <value>
      evTransformFlipVertical
    </value>
  </const>
  <const name="evMultiFrame" type="TGDIPPEncoderValue">
    <value>
      evMultiFrame
    </value>
  </const>
  <const name="evLastFrame" type="TGDIPPEncoderValue">
    <value>
      evLastFrame
    </value>
  </const>
  <const name="evFlush" type="TGDIPPEncoderValue">
    <value>
      evFlush
    </value>
  </const>
  <const name="evFrameDimensionTime" type="TGDIPPEncoderValue">
    <value>
      evFrameDimensionTime
    </value>
  </const>
  <const name="evFrameDimensionResolution" type="TGDIPPEncoderValue">
    <value>
      evFrameDimensionResolution
    </value>
  </const>
  <const name="evFrameDimensionPage" type="TGDIPPEncoderValue">
    <value>
      evFrameDimensionPage
    </value>
  </const>
  <enum name="TGDIPPEncoderValue">
    <devnotes>
       the optional TIFF compression levels
    </devnotes>
    <element name="evColorTypeCMYK" />
    <element name="evColorTypeYCCK" />
    <element name="evCompressionLZW" />
    <element name="evCompressionCCITT3" />
    <element name="evCompressionCCITT4" />
    <element name="evCompressionRle" />
    <element name="evCompressionNone" />
    <element name="evScanMethodInterlaced" />
    <element name="evScanMethodNonInterlaced" />
    <element name="evVersionGif87" />
    <element name="evVersionGif89" />
    <element name="evRenderProgressive" />
    <element name="evRenderNonProgressive" />
    <element name="evTransformRotate90" />
    <element name="evTransformRotate180" />
    <element name="evTransformRotate270" />
    <element name="evTransformFlipHorizontal" />
    <element name="evTransformFlipVertical" />
    <element name="evMultiFrame" />
    <element name="evLastFrame" />
    <element name="evFlush" />
    <element name="evFrameDimensionTime" />
    <element name="evFrameDimensionResolution" />
    <element name="evFrameDimensionPage" />
  </enum>
  <class name="TSynPicture">
    <devnotes>
       GIF, PNG, TIFF and JPG pictures support using GDI+ library
    </devnotes>
    <ancestor name="TGraphic" namespace="Graphics">
      <methodref name="SetModified" visibility="private">
      </methodref>
      <methodref name="Changed" visibility="public">
      </methodref>
      <methodref name="DefineProperties" visibility="public">
      </methodref>
      <methodref name="Draw" visibility="public">
      </methodref>
      <methodref name="Equals" visibility="public">
      </methodref>
      <methodref name="GetEmpty" visibility="public">
      </methodref>
      <methodref name="GetHeight" visibility="public">
      </methodref>
      <methodref name="GetPalette" visibility="public">
      </methodref>
      <methodref name="GetTransparent" visibility="public">
      </methodref>
      <methodref name="GetWidth" visibility="public">
      </methodref>
      <methodref name="Progress" visibility="protected">
      </methodref>
      <methodref name="ReadData" visibility="public">
      </methodref>
      <methodref name="SetHeight" visibility="public">
      </methodref>
      <methodref name="SetPalette" visibility="public">
      </methodref>
      <methodref name="SetTransparent" visibility="public">
      </methodref>
      <methodref name="SetWidth" visibility="public">
      </methodref>
      <methodref name="WriteData" visibility="public">
      </methodref>
      <methodref name="Create" visibility="public">
      </methodref>
      <methodref name="LoadFromFile" visibility="public">
      </methodref>
      <methodref name="SaveToFile" visibility="public">
      </methodref>
      <methodref name="LoadFromStream" visibility="public">
      </methodref>
      <methodref name="SaveToStream" visibility="public">
      </methodref>
      <methodref name="LoadFromClipboardFormat" visibility="public">
      </methodref>
      <methodref name="SaveToClipboardFormat" visibility="public">
      </methodref>
      <methodref name="SetSize" visibility="public">
      </methodref>
      <propertyref name="Empty" visibility="public">
      </propertyref>
      <propertyref name="Height" visibility="public">
      </propertyref>
      <propertyref name="Modified" visibility="public">
      </propertyref>
      <propertyref name="Palette" visibility="public">
      </propertyref>
      <propertyref name="PaletteModified" visibility="public">
      </propertyref>
      <propertyref name="Transparent" visibility="public">
      </propertyref>
      <propertyref name="Width" visibility="public">
      </propertyref>
      <eventref name="OnChange" visibility="public">
      </eventref>
      <eventref name="OnProgress" visibility="public">
      </eventref>
      <ancestor name="TInterfacedPersistent" namespace="Classes">
        <methodref name="_AddRef" visibility="protected">
        </methodref>
        <methodref name="_Release" visibility="protected">
        </methodref>
        <methodref name="QueryInterface" visibility="public">
        </methodref>
        <methodref name="AfterConstruction" visibility="public">
        </methodref>
        <ancestor name="TPersistent" namespace="Classes">
          <methodref name="AssignError" visibility="private">
          </methodref>
          <methodref name="AssignTo" visibility="public">
          </methodref>
          <methodref name="DefineProperties" visibility="public">
          </methodref>
          <methodref name="GetOwner" visibility="protected">
          </methodref>
          <methodref name="Destroy" visibility="public">
          </methodref>
          <methodref name="Assign" visibility="public">
          </methodref>
          <methodref name="GetNamePath" visibility="public">
          </methodref>
          <ancestor name="TObject" namespace="System">
            <methodref name="Create" visibility="public">
            </methodref>
            <methodref name="Free" visibility="public">
            </methodref>
            <methodref name="InitInstance" visibility="public">
            </methodref>
            <methodref name="CleanupInstance" visibility="public">
            </methodref>
            <methodref name="ClassType" visibility="public">
            </methodref>
            <methodref name="ClassName" visibility="public">
            </methodref>
            <methodref name="ClassNameIs" visibility="public">
            </methodref>
            <methodref name="ClassParent" visibility="public">
            </methodref>
            <methodref name="ClassInfo" visibility="public">
            </methodref>
            <methodref name="InstanceSize" visibility="public">
            </methodref>
            <methodref name="InheritsFrom" visibility="public">
            </methodref>
            <methodref name="MethodAddress" visibility="public">
            </methodref>
            <methodref name="MethodName" visibility="public">
            </methodref>
            <methodref name="FieldAddress" visibility="public">
            </methodref>
            <methodref name="GetInterface" visibility="public">
            </methodref>
            <methodref name="GetInterfaceEntry" visibility="public">
            </methodref>
            <methodref name="GetInterfaceTable" visibility="public">
            </methodref>
            <methodref name="SafeCallException" visibility="public">
            </methodref>
            <methodref name="AfterConstruction" visibility="public">
            </methodref>
            <methodref name="BeforeDestruction" visibility="public">
            </methodref>
            <methodref name="Dispatch" visibility="public">
            </methodref>
            <methodref name="DefaultHandler" visibility="public">
            </methodref>
            <methodref name="NewInstance" visibility="public">
            </methodref>
            <methodref name="FreeInstance" visibility="public">
            </methodref>
            <methodref name="Destroy" visibility="public">
            </methodref>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <field name="fHasContent" type="Boolean" visibility="protected" />
      <field name="fHeight" type="Cardinal" visibility="protected" />
      <field name="fWidth" type="Cardinal" visibility="protected" />
      <field name="fImage" type="Cardinal" visibility="protected" />
      <field name="fStream" type="IStream" visibility="protected" />
      <field name="fGlobal" type="Cardinal" visibility="protected" />
      <field name="fGlobalLen" type="Integer" visibility="protected" />
      <field name="fAssignedFromBitmap" type="Boolean" visibility="protected" />
      <function name="GetEmpty" visibility="public" procflags="override">
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="GetHeight" visibility="public" procflags="override">
        <parameters>
          <retval type="Integer" />
        </parameters>
      </function>
      <function name="GetWidth" visibility="public" procflags="override">
        <parameters>
          <retval type="Integer" />
        </parameters>
      </function>
      <procedure name="SetHeight" visibility="public" procflags="override">
        <parameters>
          <parameter name="Value" type="Integer" />
        </parameters>
      </procedure>
      <procedure name="SetWidth" visibility="public" procflags="override">
        <parameters>
          <parameter name="Value" type="Integer" />
        </parameters>
      </procedure>
      <procedure name="Clear" visibility="protected">
      </procedure>
      <procedure name="fImageSet" visibility="protected">
      </procedure>
      <procedure name="BitmapSetResolution" visibility="protected">
        <parameters>
          <parameter name="DPI" type="Single" />
        </parameters>
      </procedure>
      <constructor name="Create" visibility="public">
        <parameters>
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public">
        <parameters>
        </parameters>
      </destructor>
      <procedure name="Assign" visibility="public" procflags="override">
        <parameters>
          <parameter name="Source" type="TPersistent" />
        </parameters>
      </procedure>
      <procedure name="Draw" visibility="public" procflags="override">
        <parameters>
          <parameter name="ACanvas" type="TCanvas" />
          <parameter name="Rect" type="TRect" paramflags="const" />
        </parameters>
      </procedure>
      <function name="LoadFromIStream" visibility="public">
        <devnotes>
           since method use dpi -&gt; can drop content if drawing with different dpi
        </devnotes>
        <parameters>
          <parameter name="Stream" type="IStream" />
          <retval type="TGdipStatus">
            <devnotes>
               GDI+ error codes
            </devnotes>
          </retval>
        </parameters>
      </function>
      <procedure name="LoadFromStream" visibility="public" procflags="override">
        <parameters>
          <parameter name="Stream" type="TStream" />
        </parameters>
      </procedure>
      <procedure name="LoadFromFile" visibility="public" procflags="override">
        <parameters>
          <parameter name="FileName" type="string" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="SaveToStream" visibility="public" procflags="override">
        <parameters>
          <parameter name="Stream" type="TStream" />
        </parameters>
      </procedure>
      <procedure name="SaveInternalToStream" visibility="public">
        <parameters>
          <parameter name="Stream" type="TStream" />
        </parameters>
      </procedure>
      <procedure name="LoadFromResourceName" visibility="public">
        <parameters>
          <parameter name="Instance" type="Cardinal" />
          <parameter name="ResName" type="string" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="LoadFromClipboardFormat" visibility="public" procflags="override">
        <parameters>
          <parameter name="AFormat" type="Word" />
          <parameter name="AData" type="Cardinal" />
          <parameter name="APalette" type="HPALETTE" />
        </parameters>
      </procedure>
      <procedure name="SaveToClipboardFormat" visibility="public" procflags="override">
        <parameters>
          <parameter name="AFormat" type="Word" paramflags="var" />
          <parameter name="AData" type="Cardinal" paramflags="var" />
          <parameter name="APalette" type="HPALETTE" paramflags="var" />
        </parameters>
      </procedure>
      <function name="SaveAs" visibility="public">
        <devnotes>
           save the picture into any GIF/PNG/JPG/TIFF format
        </devnotes>
        <parameters>
          <parameter name="Stream" type="TStream" />
          <parameter name="Format" type="TGDIPPictureType" />
          <parameter name="CompressionQuality" type="Integer">
            <value>
              $50
            </value>
          </parameter>
          <parameter name="IfBitmapSetResolution" type="Single">
            <value>
              0
            </value>
          </parameter>
          <retval type="TGdipStatus">
            <devnotes>
               GDI+ error codes
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="ToBitmap" visibility="public">
        <devnotes>
           create a bitmap from the corresponding picture
        </devnotes>
        <parameters>
          <retval type="TBitmap" />
        </parameters>
      </function>
      <function name="GetImageFormat" visibility="public">
        <devnotes>
           guess the picture type from its internal format
        </devnotes>
        <parameters>
          <retval type="TGDIPPictureType">
            <devnotes>
               allowed types for image saving
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="IsPicture" visibility="public" procflags="class">
        <devnotes>
           return TRUE if the supplied filename is a picture handled by
        </devnotes>
        <parameters>
          <parameter name="FileName" type="TFileName" paramflags="const" />
          <retval type="TGraphicClass" />
        </parameters>
      </function>
      <function name="RectNotBiggerThan" visibility="public">
        <devnotes>
           calculate a TRect which fit the specified maximum pixel number
        </devnotes>
        <parameters>
          <parameter name="MaxPixelsForBiggestSide" type="Integer" />
          <retval type="TRect" />
        </parameters>
      </function>
      <property name="NativeImage" visibility="public" read="fImage" type="Cardinal">
        <devnotes>
           return the GDI+ native image handle
        </devnotes>
      </property>
    </members>
  </class>
  <class name="TPngImage">
    <devnotes>
       sub class to handle .PNG file extension
    </devnotes>
    <ancestor name="TSynPicture" namespace="SynGdiPlus">
      <methodref name="GetEmpty" visibility="public" />
      <methodref name="GetHeight" visibility="public" />
      <methodref name="GetWidth" visibility="public" />
      <methodref name="SetHeight" visibility="public" />
      <methodref name="SetWidth" visibility="public" />
      <methodref name="Clear" visibility="protected" />
      <methodref name="fImageSet" visibility="protected" />
      <methodref name="BitmapSetResolution" visibility="protected" />
      <methodref name="Create" visibility="public" />
      <methodref name="Destroy" visibility="public" />
      <methodref name="Assign" visibility="public" />
      <methodref name="Draw" visibility="public" />
      <methodref name="LoadFromIStream" visibility="public">
        <devnotes>
           since method use dpi -&gt; can drop content if drawing with different dpi
        </devnotes>
      </methodref>
      <methodref name="LoadFromStream" visibility="public" />
      <methodref name="LoadFromFile" visibility="public" />
      <methodref name="SaveToStream" visibility="public" />
      <methodref name="SaveInternalToStream" visibility="public" />
      <methodref name="LoadFromResourceName" visibility="public" />
      <methodref name="LoadFromClipboardFormat" visibility="public" />
      <methodref name="SaveToClipboardFormat" visibility="public" />
      <methodref name="SaveAs" visibility="public">
        <devnotes>
           save the picture into any GIF/PNG/JPG/TIFF format
        </devnotes>
      </methodref>
      <methodref name="ToBitmap" visibility="public">
        <devnotes>
           create a bitmap from the corresponding picture
        </devnotes>
      </methodref>
      <methodref name="GetImageFormat" visibility="public">
        <devnotes>
           guess the picture type from its internal format
        </devnotes>
      </methodref>
      <methodref name="IsPicture" visibility="public">
        <devnotes>
           return TRUE if the supplied filename is a picture handled by
        </devnotes>
      </methodref>
      <methodref name="RectNotBiggerThan" visibility="public">
        <devnotes>
           calculate a TRect which fit the specified maximum pixel number
        </devnotes>
      </methodref>
      <propertyref name="NativeImage" visibility="public">
        <devnotes>
           return the GDI+ native image handle
        </devnotes>
      </propertyref>
      <ancestor name="TGraphic" namespace="Graphics">
        <methodref name="SetModified" visibility="private">
        </methodref>
        <methodref name="Changed" visibility="public">
        </methodref>
        <methodref name="DefineProperties" visibility="public">
        </methodref>
        <methodref name="Draw" visibility="public">
        </methodref>
        <methodref name="Equals" visibility="public">
        </methodref>
        <methodref name="GetEmpty" visibility="public">
        </methodref>
        <methodref name="GetHeight" visibility="public">
        </methodref>
        <methodref name="GetPalette" visibility="public">
        </methodref>
        <methodref name="GetTransparent" visibility="public">
        </methodref>
        <methodref name="GetWidth" visibility="public">
        </methodref>
        <methodref name="Progress" visibility="protected">
        </methodref>
        <methodref name="ReadData" visibility="public">
        </methodref>
        <methodref name="SetHeight" visibility="public">
        </methodref>
        <methodref name="SetPalette" visibility="public">
        </methodref>
        <methodref name="SetTransparent" visibility="public">
        </methodref>
        <methodref name="SetWidth" visibility="public">
        </methodref>
        <methodref name="WriteData" visibility="public">
        </methodref>
        <methodref name="Create" visibility="public">
        </methodref>
        <methodref name="LoadFromFile" visibility="public">
        </methodref>
        <methodref name="SaveToFile" visibility="public">
        </methodref>
        <methodref name="LoadFromStream" visibility="public">
        </methodref>
        <methodref name="SaveToStream" visibility="public">
        </methodref>
        <methodref name="LoadFromClipboardFormat" visibility="public">
        </methodref>
        <methodref name="SaveToClipboardFormat" visibility="public">
        </methodref>
        <methodref name="SetSize" visibility="public">
        </methodref>
        <propertyref name="Empty" visibility="public">
        </propertyref>
        <propertyref name="Height" visibility="public">
        </propertyref>
        <propertyref name="Modified" visibility="public">
        </propertyref>
        <propertyref name="Palette" visibility="public">
        </propertyref>
        <propertyref name="PaletteModified" visibility="public">
        </propertyref>
        <propertyref name="Transparent" visibility="public">
        </propertyref>
        <propertyref name="Width" visibility="public">
        </propertyref>
        <eventref name="OnChange" visibility="public">
        </eventref>
        <eventref name="OnProgress" visibility="public">
        </eventref>
        <ancestor name="TInterfacedPersistent" namespace="Classes">
          <methodref name="_AddRef" visibility="protected">
          </methodref>
          <methodref name="_Release" visibility="protected">
          </methodref>
          <methodref name="QueryInterface" visibility="public">
          </methodref>
          <methodref name="AfterConstruction" visibility="public">
          </methodref>
          <ancestor name="TPersistent" namespace="Classes">
            <methodref name="AssignError" visibility="private">
            </methodref>
            <methodref name="AssignTo" visibility="public">
            </methodref>
            <methodref name="DefineProperties" visibility="public">
            </methodref>
            <methodref name="GetOwner" visibility="protected">
            </methodref>
            <methodref name="Destroy" visibility="public">
            </methodref>
            <methodref name="Assign" visibility="public">
            </methodref>
            <methodref name="GetNamePath" visibility="public">
            </methodref>
            <ancestor name="TObject" namespace="System">
              <methodref name="Create" visibility="public">
              </methodref>
              <methodref name="Free" visibility="public">
              </methodref>
              <methodref name="InitInstance" visibility="public">
              </methodref>
              <methodref name="CleanupInstance" visibility="public">
              </methodref>
              <methodref name="ClassType" visibility="public">
              </methodref>
              <methodref name="ClassName" visibility="public">
              </methodref>
              <methodref name="ClassNameIs" visibility="public">
              </methodref>
              <methodref name="ClassParent" visibility="public">
              </methodref>
              <methodref name="ClassInfo" visibility="public">
              </methodref>
              <methodref name="InstanceSize" visibility="public">
              </methodref>
              <methodref name="InheritsFrom" visibility="public">
              </methodref>
              <methodref name="MethodAddress" visibility="public">
              </methodref>
              <methodref name="MethodName" visibility="public">
              </methodref>
              <methodref name="FieldAddress" visibility="public">
              </methodref>
              <methodref name="GetInterface" visibility="public">
              </methodref>
              <methodref name="GetInterfaceEntry" visibility="public">
              </methodref>
              <methodref name="GetInterfaceTable" visibility="public">
              </methodref>
              <methodref name="SafeCallException" visibility="public">
              </methodref>
              <methodref name="AfterConstruction" visibility="public">
              </methodref>
              <methodref name="BeforeDestruction" visibility="public">
              </methodref>
              <methodref name="Dispatch" visibility="public">
              </methodref>
              <methodref name="DefaultHandler" visibility="public">
              </methodref>
              <methodref name="NewInstance" visibility="public">
              </methodref>
              <methodref name="FreeInstance" visibility="public">
              </methodref>
              <methodref name="Destroy" visibility="public">
              </methodref>
            </ancestor>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
  </class>
  <class name="TJpegImage">
    <devnotes>
       sub class to handle .JPG file extension
    </devnotes>
    <ancestor name="TSynPicture" namespace="SynGdiPlus">
      <methodref name="GetEmpty" visibility="public" />
      <methodref name="GetHeight" visibility="public" />
      <methodref name="GetWidth" visibility="public" />
      <methodref name="SetHeight" visibility="public" />
      <methodref name="SetWidth" visibility="public" />
      <methodref name="Clear" visibility="protected" />
      <methodref name="fImageSet" visibility="protected" />
      <methodref name="BitmapSetResolution" visibility="protected" />
      <methodref name="Create" visibility="public" />
      <methodref name="Destroy" visibility="public" />
      <methodref name="Assign" visibility="public" />
      <methodref name="Draw" visibility="public" />
      <methodref name="LoadFromIStream" visibility="public">
        <devnotes>
           since method use dpi -&gt; can drop content if drawing with different dpi
        </devnotes>
      </methodref>
      <methodref name="LoadFromStream" visibility="public" />
      <methodref name="LoadFromFile" visibility="public" />
      <methodref name="SaveToStream" visibility="public" />
      <methodref name="SaveInternalToStream" visibility="public" />
      <methodref name="LoadFromResourceName" visibility="public" />
      <methodref name="LoadFromClipboardFormat" visibility="public" />
      <methodref name="SaveToClipboardFormat" visibility="public" />
      <methodref name="SaveAs" visibility="public">
        <devnotes>
           save the picture into any GIF/PNG/JPG/TIFF format
        </devnotes>
      </methodref>
      <methodref name="ToBitmap" visibility="public">
        <devnotes>
           create a bitmap from the corresponding picture
        </devnotes>
      </methodref>
      <methodref name="GetImageFormat" visibility="public">
        <devnotes>
           guess the picture type from its internal format
        </devnotes>
      </methodref>
      <methodref name="IsPicture" visibility="public">
        <devnotes>
           return TRUE if the supplied filename is a picture handled by
        </devnotes>
      </methodref>
      <methodref name="RectNotBiggerThan" visibility="public">
        <devnotes>
           calculate a TRect which fit the specified maximum pixel number
        </devnotes>
      </methodref>
      <propertyref name="NativeImage" visibility="public">
        <devnotes>
           return the GDI+ native image handle
        </devnotes>
      </propertyref>
      <ancestor name="TGraphic" namespace="Graphics">
        <methodref name="SetModified" visibility="private">
        </methodref>
        <methodref name="Changed" visibility="public">
        </methodref>
        <methodref name="DefineProperties" visibility="public">
        </methodref>
        <methodref name="Draw" visibility="public">
        </methodref>
        <methodref name="Equals" visibility="public">
        </methodref>
        <methodref name="GetEmpty" visibility="public">
        </methodref>
        <methodref name="GetHeight" visibility="public">
        </methodref>
        <methodref name="GetPalette" visibility="public">
        </methodref>
        <methodref name="GetTransparent" visibility="public">
        </methodref>
        <methodref name="GetWidth" visibility="public">
        </methodref>
        <methodref name="Progress" visibility="protected">
        </methodref>
        <methodref name="ReadData" visibility="public">
        </methodref>
        <methodref name="SetHeight" visibility="public">
        </methodref>
        <methodref name="SetPalette" visibility="public">
        </methodref>
        <methodref name="SetTransparent" visibility="public">
        </methodref>
        <methodref name="SetWidth" visibility="public">
        </methodref>
        <methodref name="WriteData" visibility="public">
        </methodref>
        <methodref name="Create" visibility="public">
        </methodref>
        <methodref name="LoadFromFile" visibility="public">
        </methodref>
        <methodref name="SaveToFile" visibility="public">
        </methodref>
        <methodref name="LoadFromStream" visibility="public">
        </methodref>
        <methodref name="SaveToStream" visibility="public">
        </methodref>
        <methodref name="LoadFromClipboardFormat" visibility="public">
        </methodref>
        <methodref name="SaveToClipboardFormat" visibility="public">
        </methodref>
        <methodref name="SetSize" visibility="public">
        </methodref>
        <propertyref name="Empty" visibility="public">
        </propertyref>
        <propertyref name="Height" visibility="public">
        </propertyref>
        <propertyref name="Modified" visibility="public">
        </propertyref>
        <propertyref name="Palette" visibility="public">
        </propertyref>
        <propertyref name="PaletteModified" visibility="public">
        </propertyref>
        <propertyref name="Transparent" visibility="public">
        </propertyref>
        <propertyref name="Width" visibility="public">
        </propertyref>
        <eventref name="OnChange" visibility="public">
        </eventref>
        <eventref name="OnProgress" visibility="public">
        </eventref>
        <ancestor name="TInterfacedPersistent" namespace="Classes">
          <methodref name="_AddRef" visibility="protected">
          </methodref>
          <methodref name="_Release" visibility="protected">
          </methodref>
          <methodref name="QueryInterface" visibility="public">
          </methodref>
          <methodref name="AfterConstruction" visibility="public">
          </methodref>
          <ancestor name="TPersistent" namespace="Classes">
            <methodref name="AssignError" visibility="private">
            </methodref>
            <methodref name="AssignTo" visibility="public">
            </methodref>
            <methodref name="DefineProperties" visibility="public">
            </methodref>
            <methodref name="GetOwner" visibility="protected">
            </methodref>
            <methodref name="Destroy" visibility="public">
            </methodref>
            <methodref name="Assign" visibility="public">
            </methodref>
            <methodref name="GetNamePath" visibility="public">
            </methodref>
            <ancestor name="TObject" namespace="System">
              <methodref name="Create" visibility="public">
              </methodref>
              <methodref name="Free" visibility="public">
              </methodref>
              <methodref name="InitInstance" visibility="public">
              </methodref>
              <methodref name="CleanupInstance" visibility="public">
              </methodref>
              <methodref name="ClassType" visibility="public">
              </methodref>
              <methodref name="ClassName" visibility="public">
              </methodref>
              <methodref name="ClassNameIs" visibility="public">
              </methodref>
              <methodref name="ClassParent" visibility="public">
              </methodref>
              <methodref name="ClassInfo" visibility="public">
              </methodref>
              <methodref name="InstanceSize" visibility="public">
              </methodref>
              <methodref name="InheritsFrom" visibility="public">
              </methodref>
              <methodref name="MethodAddress" visibility="public">
              </methodref>
              <methodref name="MethodName" visibility="public">
              </methodref>
              <methodref name="FieldAddress" visibility="public">
              </methodref>
              <methodref name="GetInterface" visibility="public">
              </methodref>
              <methodref name="GetInterfaceEntry" visibility="public">
              </methodref>
              <methodref name="GetInterfaceTable" visibility="public">
              </methodref>
              <methodref name="SafeCallException" visibility="public">
              </methodref>
              <methodref name="AfterConstruction" visibility="public">
              </methodref>
              <methodref name="BeforeDestruction" visibility="public">
              </methodref>
              <methodref name="Dispatch" visibility="public">
              </methodref>
              <methodref name="DefaultHandler" visibility="public">
              </methodref>
              <methodref name="NewInstance" visibility="public">
              </methodref>
              <methodref name="FreeInstance" visibility="public">
              </methodref>
              <methodref name="Destroy" visibility="public">
              </methodref>
            </ancestor>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <field name="fCompressionQuality" type="Integer" visibility="protected" />
      <constructor name="Create" visibility="public">
        <parameters>
        </parameters>
      </constructor>
      <procedure name="SaveToStream" visibility="public" procflags="override">
        <devnotes>
           implements the saving feature
        </devnotes>
        <parameters>
          <parameter name="Stream" type="TStream" />
        </parameters>
      </procedure>
      <property name="CompressionQuality" visibility="public" read="fCompressionQuality" write="fCompressionQuality" type="Integer">
        <devnotes>
           the associated encoding quality (from 0 to 100)
        </devnotes>
      </property>
    </members>
  </class>
  <class name="TGifImage">
    <devnotes>
       sub class to handle .GIF file extension
    </devnotes>
    <ancestor name="TSynPicture" namespace="SynGdiPlus">
      <methodref name="GetEmpty" visibility="public" />
      <methodref name="GetHeight" visibility="public" />
      <methodref name="GetWidth" visibility="public" />
      <methodref name="SetHeight" visibility="public" />
      <methodref name="SetWidth" visibility="public" />
      <methodref name="Clear" visibility="protected" />
      <methodref name="fImageSet" visibility="protected" />
      <methodref name="BitmapSetResolution" visibility="protected" />
      <methodref name="Create" visibility="public" />
      <methodref name="Destroy" visibility="public" />
      <methodref name="Assign" visibility="public" />
      <methodref name="Draw" visibility="public" />
      <methodref name="LoadFromIStream" visibility="public">
        <devnotes>
           since method use dpi -&gt; can drop content if drawing with different dpi
        </devnotes>
      </methodref>
      <methodref name="LoadFromStream" visibility="public" />
      <methodref name="LoadFromFile" visibility="public" />
      <methodref name="SaveToStream" visibility="public" />
      <methodref name="SaveInternalToStream" visibility="public" />
      <methodref name="LoadFromResourceName" visibility="public" />
      <methodref name="LoadFromClipboardFormat" visibility="public" />
      <methodref name="SaveToClipboardFormat" visibility="public" />
      <methodref name="SaveAs" visibility="public">
        <devnotes>
           save the picture into any GIF/PNG/JPG/TIFF format
        </devnotes>
      </methodref>
      <methodref name="ToBitmap" visibility="public">
        <devnotes>
           create a bitmap from the corresponding picture
        </devnotes>
      </methodref>
      <methodref name="GetImageFormat" visibility="public">
        <devnotes>
           guess the picture type from its internal format
        </devnotes>
      </methodref>
      <methodref name="IsPicture" visibility="public">
        <devnotes>
           return TRUE if the supplied filename is a picture handled by
        </devnotes>
      </methodref>
      <methodref name="RectNotBiggerThan" visibility="public">
        <devnotes>
           calculate a TRect which fit the specified maximum pixel number
        </devnotes>
      </methodref>
      <propertyref name="NativeImage" visibility="public">
        <devnotes>
           return the GDI+ native image handle
        </devnotes>
      </propertyref>
      <ancestor name="TGraphic" namespace="Graphics">
        <methodref name="SetModified" visibility="private">
        </methodref>
        <methodref name="Changed" visibility="public">
        </methodref>
        <methodref name="DefineProperties" visibility="public">
        </methodref>
        <methodref name="Draw" visibility="public">
        </methodref>
        <methodref name="Equals" visibility="public">
        </methodref>
        <methodref name="GetEmpty" visibility="public">
        </methodref>
        <methodref name="GetHeight" visibility="public">
        </methodref>
        <methodref name="GetPalette" visibility="public">
        </methodref>
        <methodref name="GetTransparent" visibility="public">
        </methodref>
        <methodref name="GetWidth" visibility="public">
        </methodref>
        <methodref name="Progress" visibility="protected">
        </methodref>
        <methodref name="ReadData" visibility="public">
        </methodref>
        <methodref name="SetHeight" visibility="public">
        </methodref>
        <methodref name="SetPalette" visibility="public">
        </methodref>
        <methodref name="SetTransparent" visibility="public">
        </methodref>
        <methodref name="SetWidth" visibility="public">
        </methodref>
        <methodref name="WriteData" visibility="public">
        </methodref>
        <methodref name="Create" visibility="public">
        </methodref>
        <methodref name="LoadFromFile" visibility="public">
        </methodref>
        <methodref name="SaveToFile" visibility="public">
        </methodref>
        <methodref name="LoadFromStream" visibility="public">
        </methodref>
        <methodref name="SaveToStream" visibility="public">
        </methodref>
        <methodref name="LoadFromClipboardFormat" visibility="public">
        </methodref>
        <methodref name="SaveToClipboardFormat" visibility="public">
        </methodref>
        <methodref name="SetSize" visibility="public">
        </methodref>
        <propertyref name="Empty" visibility="public">
        </propertyref>
        <propertyref name="Height" visibility="public">
        </propertyref>
        <propertyref name="Modified" visibility="public">
        </propertyref>
        <propertyref name="Palette" visibility="public">
        </propertyref>
        <propertyref name="PaletteModified" visibility="public">
        </propertyref>
        <propertyref name="Transparent" visibility="public">
        </propertyref>
        <propertyref name="Width" visibility="public">
        </propertyref>
        <eventref name="OnChange" visibility="public">
        </eventref>
        <eventref name="OnProgress" visibility="public">
        </eventref>
        <ancestor name="TInterfacedPersistent" namespace="Classes">
          <methodref name="_AddRef" visibility="protected">
          </methodref>
          <methodref name="_Release" visibility="protected">
          </methodref>
          <methodref name="QueryInterface" visibility="public">
          </methodref>
          <methodref name="AfterConstruction" visibility="public">
          </methodref>
          <ancestor name="TPersistent" namespace="Classes">
            <methodref name="AssignError" visibility="private">
            </methodref>
            <methodref name="AssignTo" visibility="public">
            </methodref>
            <methodref name="DefineProperties" visibility="public">
            </methodref>
            <methodref name="GetOwner" visibility="protected">
            </methodref>
            <methodref name="Destroy" visibility="public">
            </methodref>
            <methodref name="Assign" visibility="public">
            </methodref>
            <methodref name="GetNamePath" visibility="public">
            </methodref>
            <ancestor name="TObject" namespace="System">
              <methodref name="Create" visibility="public">
              </methodref>
              <methodref name="Free" visibility="public">
              </methodref>
              <methodref name="InitInstance" visibility="public">
              </methodref>
              <methodref name="CleanupInstance" visibility="public">
              </methodref>
              <methodref name="ClassType" visibility="public">
              </methodref>
              <methodref name="ClassName" visibility="public">
              </methodref>
              <methodref name="ClassNameIs" visibility="public">
              </methodref>
              <methodref name="ClassParent" visibility="public">
              </methodref>
              <methodref name="ClassInfo" visibility="public">
              </methodref>
              <methodref name="InstanceSize" visibility="public">
              </methodref>
              <methodref name="InheritsFrom" visibility="public">
              </methodref>
              <methodref name="MethodAddress" visibility="public">
              </methodref>
              <methodref name="MethodName" visibility="public">
              </methodref>
              <methodref name="FieldAddress" visibility="public">
              </methodref>
              <methodref name="GetInterface" visibility="public">
              </methodref>
              <methodref name="GetInterfaceEntry" visibility="public">
              </methodref>
              <methodref name="GetInterfaceTable" visibility="public">
              </methodref>
              <methodref name="SafeCallException" visibility="public">
              </methodref>
              <methodref name="AfterConstruction" visibility="public">
              </methodref>
              <methodref name="BeforeDestruction" visibility="public">
              </methodref>
              <methodref name="Dispatch" visibility="public">
              </methodref>
              <methodref name="DefaultHandler" visibility="public">
              </methodref>
              <methodref name="NewInstance" visibility="public">
              </methodref>
              <methodref name="FreeInstance" visibility="public">
              </methodref>
              <methodref name="Destroy" visibility="public">
              </methodref>
            </ancestor>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
  </class>
  <class name="TTiffImage">
    <devnotes>
       sub class to handle .TIF file extension
    </devnotes>
    <ancestor name="TSynPicture" namespace="SynGdiPlus">
      <methodref name="GetEmpty" visibility="public" />
      <methodref name="GetHeight" visibility="public" />
      <methodref name="GetWidth" visibility="public" />
      <methodref name="SetHeight" visibility="public" />
      <methodref name="SetWidth" visibility="public" />
      <methodref name="Clear" visibility="protected" />
      <methodref name="fImageSet" visibility="protected" />
      <methodref name="BitmapSetResolution" visibility="protected" />
      <methodref name="Create" visibility="public" />
      <methodref name="Destroy" visibility="public" />
      <methodref name="Assign" visibility="public" />
      <methodref name="Draw" visibility="public" />
      <methodref name="LoadFromIStream" visibility="public">
        <devnotes>
           since method use dpi -&gt; can drop content if drawing with different dpi
        </devnotes>
      </methodref>
      <methodref name="LoadFromStream" visibility="public" />
      <methodref name="LoadFromFile" visibility="public" />
      <methodref name="SaveToStream" visibility="public" />
      <methodref name="SaveInternalToStream" visibility="public" />
      <methodref name="LoadFromResourceName" visibility="public" />
      <methodref name="LoadFromClipboardFormat" visibility="public" />
      <methodref name="SaveToClipboardFormat" visibility="public" />
      <methodref name="SaveAs" visibility="public">
        <devnotes>
           save the picture into any GIF/PNG/JPG/TIFF format
        </devnotes>
      </methodref>
      <methodref name="ToBitmap" visibility="public">
        <devnotes>
           create a bitmap from the corresponding picture
        </devnotes>
      </methodref>
      <methodref name="GetImageFormat" visibility="public">
        <devnotes>
           guess the picture type from its internal format
        </devnotes>
      </methodref>
      <methodref name="IsPicture" visibility="public">
        <devnotes>
           return TRUE if the supplied filename is a picture handled by
        </devnotes>
      </methodref>
      <methodref name="RectNotBiggerThan" visibility="public">
        <devnotes>
           calculate a TRect which fit the specified maximum pixel number
        </devnotes>
      </methodref>
      <propertyref name="NativeImage" visibility="public">
        <devnotes>
           return the GDI+ native image handle
        </devnotes>
      </propertyref>
      <ancestor name="TGraphic" namespace="Graphics">
        <methodref name="SetModified" visibility="private">
        </methodref>
        <methodref name="Changed" visibility="public">
        </methodref>
        <methodref name="DefineProperties" visibility="public">
        </methodref>
        <methodref name="Draw" visibility="public">
        </methodref>
        <methodref name="Equals" visibility="public">
        </methodref>
        <methodref name="GetEmpty" visibility="public">
        </methodref>
        <methodref name="GetHeight" visibility="public">
        </methodref>
        <methodref name="GetPalette" visibility="public">
        </methodref>
        <methodref name="GetTransparent" visibility="public">
        </methodref>
        <methodref name="GetWidth" visibility="public">
        </methodref>
        <methodref name="Progress" visibility="protected">
        </methodref>
        <methodref name="ReadData" visibility="public">
        </methodref>
        <methodref name="SetHeight" visibility="public">
        </methodref>
        <methodref name="SetPalette" visibility="public">
        </methodref>
        <methodref name="SetTransparent" visibility="public">
        </methodref>
        <methodref name="SetWidth" visibility="public">
        </methodref>
        <methodref name="WriteData" visibility="public">
        </methodref>
        <methodref name="Create" visibility="public">
        </methodref>
        <methodref name="LoadFromFile" visibility="public">
        </methodref>
        <methodref name="SaveToFile" visibility="public">
        </methodref>
        <methodref name="LoadFromStream" visibility="public">
        </methodref>
        <methodref name="SaveToStream" visibility="public">
        </methodref>
        <methodref name="LoadFromClipboardFormat" visibility="public">
        </methodref>
        <methodref name="SaveToClipboardFormat" visibility="public">
        </methodref>
        <methodref name="SetSize" visibility="public">
        </methodref>
        <propertyref name="Empty" visibility="public">
        </propertyref>
        <propertyref name="Height" visibility="public">
        </propertyref>
        <propertyref name="Modified" visibility="public">
        </propertyref>
        <propertyref name="Palette" visibility="public">
        </propertyref>
        <propertyref name="PaletteModified" visibility="public">
        </propertyref>
        <propertyref name="Transparent" visibility="public">
        </propertyref>
        <propertyref name="Width" visibility="public">
        </propertyref>
        <eventref name="OnChange" visibility="public">
        </eventref>
        <eventref name="OnProgress" visibility="public">
        </eventref>
        <ancestor name="TInterfacedPersistent" namespace="Classes">
          <methodref name="_AddRef" visibility="protected">
          </methodref>
          <methodref name="_Release" visibility="protected">
          </methodref>
          <methodref name="QueryInterface" visibility="public">
          </methodref>
          <methodref name="AfterConstruction" visibility="public">
          </methodref>
          <ancestor name="TPersistent" namespace="Classes">
            <methodref name="AssignError" visibility="private">
            </methodref>
            <methodref name="AssignTo" visibility="public">
            </methodref>
            <methodref name="DefineProperties" visibility="public">
            </methodref>
            <methodref name="GetOwner" visibility="protected">
            </methodref>
            <methodref name="Destroy" visibility="public">
            </methodref>
            <methodref name="Assign" visibility="public">
            </methodref>
            <methodref name="GetNamePath" visibility="public">
            </methodref>
            <ancestor name="TObject" namespace="System">
              <methodref name="Create" visibility="public">
              </methodref>
              <methodref name="Free" visibility="public">
              </methodref>
              <methodref name="InitInstance" visibility="public">
              </methodref>
              <methodref name="CleanupInstance" visibility="public">
              </methodref>
              <methodref name="ClassType" visibility="public">
              </methodref>
              <methodref name="ClassName" visibility="public">
              </methodref>
              <methodref name="ClassNameIs" visibility="public">
              </methodref>
              <methodref name="ClassParent" visibility="public">
              </methodref>
              <methodref name="ClassInfo" visibility="public">
              </methodref>
              <methodref name="InstanceSize" visibility="public">
              </methodref>
              <methodref name="InheritsFrom" visibility="public">
              </methodref>
              <methodref name="MethodAddress" visibility="public">
              </methodref>
              <methodref name="MethodName" visibility="public">
              </methodref>
              <methodref name="FieldAddress" visibility="public">
              </methodref>
              <methodref name="GetInterface" visibility="public">
              </methodref>
              <methodref name="GetInterfaceEntry" visibility="public">
              </methodref>
              <methodref name="GetInterfaceTable" visibility="public">
              </methodref>
              <methodref name="SafeCallException" visibility="public">
              </methodref>
              <methodref name="AfterConstruction" visibility="public">
              </methodref>
              <methodref name="BeforeDestruction" visibility="public">
              </methodref>
              <methodref name="Dispatch" visibility="public">
              </methodref>
              <methodref name="DefaultHandler" visibility="public">
              </methodref>
              <methodref name="NewInstance" visibility="public">
              </methodref>
              <methodref name="FreeInstance" visibility="public">
              </methodref>
              <methodref name="Destroy" visibility="public">
              </methodref>
            </ancestor>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
  </class>
  <class name="TGDIPlusFull">
    <devnotes>
       handle most GDI+ library calls
    </devnotes>
    <ancestor name="TGDIPlus" namespace="SynGdiPlus">
      <methodref name="Create" visibility="public">
        <devnotes>
           load the GDI+ library and all needed procedures
        </devnotes>
      </methodref>
      <methodref name="RegisterPictures" visibility="public" />
      <methodref name="DrawAntiAliased" visibility="public">
        <devnotes>
           draw the corresponding EMF metafile into a given device context
        </devnotes>
      </methodref>
      <methodref name="DrawAntiAliased" visibility="public">
        <devnotes>
           draw the corresponding EMF metafile into a bitmap created by the method
        </devnotes>
      </methodref>
      <methodref name="Destroy" visibility="public">
        <devnotes>
           unload the GDI+ library
        </devnotes>
      </methodref>
      <ancestor name="TSynLibrary" namespace="SynGdiPlus">
        <methodref name="Load" visibility="protected">
          <devnotes>
             helper to load all needed procedure entries from a dynamic library
          </devnotes>
        </methodref>
        <methodref name="UnLoad" visibility="protected">
          <devnotes>
             unload the library
          </devnotes>
        </methodref>
        <methodref name="Exists" visibility="public">
          <devnotes>
             return TRUE if the library and all procedures were found
          </devnotes>
        </methodref>
        <ancestor name="TObject" namespace="System">
          <methodref name="Create" visibility="public">
          </methodref>
          <methodref name="Free" visibility="public">
          </methodref>
          <methodref name="InitInstance" visibility="public">
          </methodref>
          <methodref name="CleanupInstance" visibility="public">
          </methodref>
          <methodref name="ClassType" visibility="public">
          </methodref>
          <methodref name="ClassName" visibility="public">
          </methodref>
          <methodref name="ClassNameIs" visibility="public">
          </methodref>
          <methodref name="ClassParent" visibility="public">
          </methodref>
          <methodref name="ClassInfo" visibility="public">
          </methodref>
          <methodref name="InstanceSize" visibility="public">
          </methodref>
          <methodref name="InheritsFrom" visibility="public">
          </methodref>
          <methodref name="MethodAddress" visibility="public">
          </methodref>
          <methodref name="MethodName" visibility="public">
          </methodref>
          <methodref name="FieldAddress" visibility="public">
          </methodref>
          <methodref name="GetInterface" visibility="public">
          </methodref>
          <methodref name="GetInterfaceEntry" visibility="public">
          </methodref>
          <methodref name="GetInterfaceTable" visibility="public">
          </methodref>
          <methodref name="SafeCallException" visibility="public">
          </methodref>
          <methodref name="AfterConstruction" visibility="public">
          </methodref>
          <methodref name="BeforeDestruction" visibility="public">
          </methodref>
          <methodref name="Dispatch" visibility="public">
          </methodref>
          <methodref name="DefaultHandler" visibility="public">
          </methodref>
          <methodref name="NewInstance" visibility="public">
          </methodref>
          <methodref name="FreeInstance" visibility="public">
          </methodref>
          <methodref name="Destroy" visibility="public">
          </methodref>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <field name="DrawLine" visibility="protected">
      </field>
      <field name="CreatePen" visibility="protected">
      </field>
      <field name="DeletePen" visibility="protected">
      </field>
      <field name="Flush" visibility="protected">
      </field>
      <field name="SetSmoothingMode" visibility="protected">
      </field>
      <field name="SetTextRenderingHint" visibility="protected">
      </field>
      <field name="SetPenBrushFill" visibility="protected">
      </field>
      <field name="SetPenColor" visibility="protected">
      </field>
      <field name="SetPenWidth" visibility="protected">
      </field>
      <field name="DeleteBrush" visibility="protected">
      </field>
      <field name="CreateSolidFill" visibility="protected">
      </field>
      <field name="FillRectangle" visibility="protected">
      </field>
      <field name="FillEllipse" visibility="protected">
      </field>
      <field name="DrawEllipse" visibility="protected">
      </field>
      <field name="DrawCurve" visibility="protected">
      </field>
      <field name="GraphicsClear" visibility="protected">
      </field>
      <field name="SetPageUnit" visibility="protected">
      </field>
      <field name="DrawRectangle" visibility="protected">
      </field>
      <field name="SetPenDashStyle" visibility="protected">
      </field>
      <field name="DrawPolygon" visibility="protected">
      </field>
      <field name="FillPolygon" visibility="protected">
      </field>
      <field name="SetWorldTransform" visibility="protected">
      </field>
      <field name="GetWorldTransform" visibility="protected">
      </field>
      <field name="CreateMatrix" visibility="protected">
      </field>
      <field name="CreateMatrix2" visibility="protected">
      </field>
      <field name="DeleteMatrix" visibility="protected">
      </field>
      <field name="SetMatrixElements" visibility="protected">
      </field>
      <field name="MultiplyMatrix" visibility="protected">
      </field>
      <field name="ScaleMatrix" visibility="protected">
      </field>
      <field name="TranslateMatrix" visibility="protected">
      </field>
      <field name="DrawLines" visibility="protected">
      </field>
      <field name="RecordMetafile" visibility="protected">
      </field>
      <field name="RecordMetafileStream" visibility="protected">
      </field>
      <field name="PlayRecord" visibility="protected">
      </field>
      <field name="EnumerateMetaFile" visibility="protected">
      </field>
      <field name="ResetWorldTransform" visibility="protected">
      </field>
      <field name="RotateTransform" visibility="protected">
      </field>
      <field name="TranslateTransform" visibility="protected">
      </field>
      <field name="CreateFromImage" visibility="protected">
      </field>
      <field name="CreateFontFrom" visibility="protected">
      </field>
      <field name="DeleteFont" visibility="protected">
      </field>
      <field name="CreateFontFromLogfont" visibility="protected">
      </field>
      <field name="DrawString" visibility="protected">
      </field>
      <field name="MeasureString" visibility="protected">
      </field>
      <field name="DrawDriverString" visibility="protected">
      </field>
      <field name="CreatePath" visibility="protected">
      </field>
      <field name="DeletePath" visibility="protected">
      </field>
      <field name="DrawPath" visibility="protected">
      </field>
      <field name="FillPath" visibility="protected">
      </field>
      <field name="AddPathLine" visibility="protected">
      </field>
      <field name="AddPathLines" visibility="protected">
      </field>
      <field name="AddPathArc" visibility="protected">
      </field>
      <field name="AddPathCurve" visibility="protected">
      </field>
      <field name="AddPathClosedCurve" visibility="protected">
      </field>
      <field name="AddPathEllipse" visibility="protected">
      </field>
      <field name="AddPathPolygon" visibility="protected">
      </field>
      <field name="AddPathRectangle" visibility="protected">
      </field>
      <field name="ClosePath" visibility="protected">
      </field>
      <field name="DrawArc" visibility="protected">
      </field>
      <field name="DrawBezier" visibility="protected">
      </field>
      <field name="DrawPie" visibility="protected">
      </field>
      <field name="CreateBitmapFromScan0" visibility="protected">
      </field>
      <field name="BitmapLockBits" visibility="protected">
      </field>
      <field name="BitmapUnlockBits" visibility="protected">
      </field>
      <field name="fConvertToEmfPlus" visibility="protected">
        <devnotes>
           this function is available only with GDI+ version 1.1
        </devnotes>
      </field>
      <field name="fConvertToEmfPlusTested" type="Boolean" visibility="protected" />
      <field name="fForceInternalConvertToEmfPlus" type="Boolean" visibility="protected" />
      <field name="fUseDrawString" type="Boolean" visibility="protected" />
      <function name="getNativeConvertToEmfPlus" visibility="protected">
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <constructor name="Create" visibility="public">
        <devnotes>
           load the GDI+ library and all needed procedures
        </devnotes>
        <parameters>
          <parameter name="aDllFileName" type="TFileName">
            <value>
              
            </value>
          </parameter>
        </parameters>
      </constructor>
      <procedure name="DrawAntiAliased" visibility="public" procflags="overload override">
        <devnotes>
           draw the corresponding EMF metafile into a given device context
        </devnotes>
        <parameters>
          <parameter name="Source" type="TMetafile" />
          <parameter name="Dest" type="HDC" />
          <parameter name="R" type="TRect" />
          <parameter name="aSmoothing" type="TSmoothingMode">
            <value>
              smAntiAlias
            </value>
          </parameter>
          <parameter name="aTextRendering" type="TTextRenderingHint">
            <value>
              trhClearTypeGridFit
            </value>
          </parameter>
        </parameters>
      </procedure>
      <function name="ConvertToEmfPlus" visibility="public">
        <devnotes>
           convert a supplied EMF metafile into a EMF+ (i.e. GDI+ metafile)
        </devnotes>
        <parameters>
          <parameter name="Source" type="TMetafile" />
          <parameter name="Dest" type="HDC" />
          <parameter name="aSmoothing" type="TSmoothingMode">
            <value>
              smAntiAlias
            </value>
          </parameter>
          <parameter name="aTextRendering" type="TTextRenderingHint">
            <value>
              trhClearTypeGridFit
            </value>
          </parameter>
          <retval type="Cardinal" />
        </parameters>
      </function>
      <function name="MetaFileToStream" visibility="public">
        <devnotes>
           internal method used for GDI32 metafile loading
        </devnotes>
        <parameters>
          <parameter name="Source" type="TMetafile" />
          <parameter name="hGlobal" type="Cardinal" paramflags="out" />
          <retval type="IStream" />
        </parameters>
      </function>
      <property name="NativeConvertToEmfPlus" visibility="public" read="getNativeConvertToEmfPlus" type="Boolean">
        <devnotes>
           return true if DrawAntiAliased() method will use native GDI+ conversion,
        </devnotes>
      </property>
      <property name="ForceInternalConvertToEmfPlus" visibility="public" read="fForceInternalConvertToEmfPlus" write="fForceInternalConvertToEmfPlus" type="Boolean">
        <devnotes>
           can be set to true if to force DrawAntiAliased() method NOT to use
        </devnotes>
      </property>
      <property name="ForceUseDrawString" visibility="public" read="fUseDrawString" write="fUseDrawString" type="Boolean">
        <devnotes>
           if TRUE, text will be rendered using DrawString and not DrawDriverString
        </devnotes>
      </property>
    </members>
  </class>
  <const name="GDIPPictureExt" visibility="public">
    <devnotes>
       the corresponding file extension for every saving format type
    </devnotes>
  </const>
  <variable name="Gdip" type="TGDIPlus" visibility="public">
    <devnotes>
       GDI+ library instance
    </devnotes>
  </variable>
  <function name="PictureName" visibility="public">
    <devnotes>
       retrieve a ready to be displayed name of the supplied Graphic Class
    </devnotes>
    <parameters>
      <parameter name="Pic" type="TGraphicClass" />
      <retval type="string" />
    </parameters>
  </function>
  <procedure name="SaveAs" visibility="public" procflags="overload">
    <devnotes>
       helper to save a specified graphic into GIF/PNG/JPG/TIFF format
       helper to save a specified graphic into GIF/PNG/JPG/TIFF format
    </devnotes>
    <parameters>
      <parameter name="Graphic" type="TPersistent" />
      <parameter name="Stream" type="TStream" />
      <parameter name="Format" type="TGDIPPictureType" />
      <parameter name="CompressionQuality" type="Integer">
        <value>
          $50
        </value>
      </parameter>
      <parameter name="MaxPixelsForBiggestSide" type="Cardinal">
        <value>
          $0
        </value>
      </parameter>
      <parameter name="BitmapSetResolution" type="Single">
        <value>
          0
        </value>
      </parameter>
    </parameters>
  </procedure>
  <procedure name="SaveAs" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Graphic" type="TPersistent" />
      <parameter name="FileName" type="TFileName" paramflags="const" />
      <parameter name="Format" type="TGDIPPictureType" />
      <parameter name="CompressionQuality" type="Integer">
        <value>
          $50
        </value>
      </parameter>
      <parameter name="MaxPixelsForBiggestSide" type="Cardinal">
        <value>
          $0
        </value>
      </parameter>
      <parameter name="BitmapSetResolution" type="Single">
        <value>
          0
        </value>
      </parameter>
    </parameters>
  </procedure>
  <procedure name="SaveAsRawByteString" visibility="public" procflags="overload">
    <devnotes>
       helper to save a specified graphic into GIF/PNG/JPG/TIFF format
    </devnotes>
    <parameters>
      <parameter name="Graphic" type="TPersistent" />
      <parameter name="Data" type="string" paramflags="out" />
      <parameter name="Format" type="TGDIPPictureType" />
      <parameter name="CompressionQuality" type="Integer">
        <value>
          $50
        </value>
      </parameter>
      <parameter name="MaxPixelsForBiggestSide" type="Cardinal">
        <value>
          $0
        </value>
      </parameter>
      <parameter name="BitmapSetResolution" type="Single">
        <value>
          0
        </value>
      </parameter>
    </parameters>
  </procedure>
  <function name="LoadFromRawByteString" visibility="public">
    <devnotes>
       helper to load a specified graphic from GIF/PNG/JPG/TIFF format content
    </devnotes>
    <parameters>
      <parameter name="Picture" type="string" paramflags="const" />
      <retval type="TBitmap" />
    </parameters>
  </function>
  <function name="LoadFrom" visibility="public" procflags="overload">
    <devnotes>
       helper function to create a bitmap from any EMF content
       helper function to create a bitmap from any GIF/PNG/JPG/TIFF/EMF/WMF file
    </devnotes>
    <parameters>
      <parameter name="FileName" type="TFileName" paramflags="const" />
      <retval type="TBitmap" />
    </parameters>
  </function>
  <function name="LoadFrom" visibility="public" procflags="overload">
    <parameters>
      <parameter name="MetaFile" type="TMetafile" paramflags="const" />
      <retval type="TBitmap" />
    </parameters>
  </function>
  <procedure name="DrawEmfGdip" visibility="public">
    <devnotes>
       draw the specified GDI TMetaFile (emf) using the GDI-plus antialiaised engine
    </devnotes>
    <parameters>
      <parameter name="aHDC" type="HDC" />
      <parameter name="Source" type="TMetafile" />
      <parameter name="R" type="TRect" paramflags="var" />
      <parameter name="ForceInternalAntiAliased" type="Boolean" />
      <parameter name="ForceInternalAntiAliasedFontFallBack" type="Boolean">
        <value>
          False
        </value>
      </parameter>
    </parameters>
  </procedure>
  <procedure name="GdipTest" visibility="public">
    <devnotes>
       test function
    </devnotes>
    <parameters>
      <parameter name="JpegFile" type="TFileName" paramflags="const" />
    </parameters>
  </procedure>
</namespace>
