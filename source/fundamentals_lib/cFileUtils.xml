<?xml version="1.0" encoding="utf-8"?>
<namespace name="cFileUtils">
  <const name="PathSeparator" type="Char">
    <value>
      $5C
    </value>
  </const>
  <const name="chBackSlash" type="Char">
    <value>
      $5C
    </value>
  </const>
  <const name="chForwardSlash" type="Char">
    <value>
      $2F
    </value>
  </const>
  <const name="csSlash" type="Set">
    <value>
      ['/','\']
    </value>
  </const>
  <const name="feNone" type="TFileError">
    <value>
      feNone
    </value>
  </const>
  <const name="feInvalidParameter" type="TFileError">
    <value>
      feInvalidParameter
    </value>
  </const>
  <const name="feFileError" type="TFileError">
    <value>
      feFileError
    </value>
  </const>
  <const name="feFileOpenError" type="TFileError">
    <value>
      feFileOpenError
    </value>
  </const>
  <const name="feFileCreateError" type="TFileError">
    <value>
      feFileCreateError
    </value>
  </const>
  <const name="feFileSharingError" type="TFileError">
    <value>
      feFileSharingError
    </value>
  </const>
  <const name="feFileSeekError" type="TFileError">
    <value>
      feFileSeekError
    </value>
  </const>
  <const name="feFileReadError" type="TFileError">
    <value>
      feFileReadError
    </value>
  </const>
  <const name="feFileWriteError" type="TFileError">
    <value>
      feFileWriteError
    </value>
  </const>
  <const name="feFileSizeError" type="TFileError">
    <value>
      feFileSizeError
    </value>
  </const>
  <const name="feFileExists" type="TFileError">
    <value>
      feFileExists
    </value>
  </const>
  <const name="feFileDoesNotExist" type="TFileError">
    <value>
      feFileDoesNotExist
    </value>
  </const>
  <const name="feFileMoveError" type="TFileError">
    <value>
      feFileMoveError
    </value>
  </const>
  <const name="feFileDeleteError" type="TFileError">
    <value>
      feFileDeleteError
    </value>
  </const>
  <const name="feOutOfSpace" type="TFileError">
    <value>
      feOutOfSpace
    </value>
  </const>
  <const name="feOutOfResources" type="TFileError">
    <value>
      feOutOfResources
    </value>
  </const>
  <const name="feInvalidFilePath" type="TFileError">
    <value>
      feInvalidFilePath
    </value>
  </const>
  <const name="feInvalidFileName" type="TFileError">
    <value>
      feInvalidFileName
    </value>
  </const>
  <const name="feAccessDenied" type="TFileError">
    <value>
      feAccessDenied
    </value>
  </const>
  <const name="feDeviceFailure" type="TFileError">
    <value>
      feDeviceFailure
    </value>
  </const>
  <enum name="TFileError">
    <element name="feNone" />
    <element name="feInvalidParameter" />
    <element name="feFileError" />
    <element name="feFileOpenError" />
    <element name="feFileCreateError" />
    <element name="feFileSharingError" />
    <element name="feFileSeekError" />
    <element name="feFileReadError" />
    <element name="feFileWriteError" />
    <element name="feFileSizeError" />
    <element name="feFileExists" />
    <element name="feFileDoesNotExist" />
    <element name="feFileMoveError" />
    <element name="feFileDeleteError" />
    <element name="feOutOfSpace" />
    <element name="feOutOfResources" />
    <element name="feInvalidFilePath" />
    <element name="feInvalidFileName" />
    <element name="feAccessDenied" />
    <element name="feDeviceFailure" />
    <element name="TFileError" />
    <element />
    <element name="EFileError" />
    <element name="TFileHandle" />
    <element name="faRead" />
    <element name="faWrite" />
    <element name="faReadWrite" />
    <element name="TFileAccess" />
    <element name="fsDenyNone" />
    <element name="fsDenyRead" />
    <element name="fsDenyWrite" />
    <element name="fsDenyReadWrite" />
    <element name="fsExclusive" />
    <element name="TFileSharing" />
    <element name="foDeleteOnClose" />
    <element name="foNoBuffering" />
    <element name="foWriteThrough" />
    <element name="foRandomAccessHint" />
  </enum>
  <class name="EFileError">
    <ancestor name="Exception" namespace="SysUtils">
      <methodref name="Create" visibility="public">
      </methodref>
      <methodref name="CreateFmt" visibility="public">
      </methodref>
      <methodref name="CreateRes" visibility="public">
      </methodref>
      <methodref name="CreateRes" visibility="public">
      </methodref>
      <methodref name="CreateResFmt" visibility="public">
      </methodref>
      <methodref name="CreateResFmt" visibility="public">
      </methodref>
      <methodref name="CreateHelp" visibility="public">
      </methodref>
      <methodref name="CreateFmtHelp" visibility="public">
      </methodref>
      <methodref name="CreateResHelp" visibility="public">
      </methodref>
      <methodref name="CreateResHelp" visibility="public">
      </methodref>
      <methodref name="CreateResFmtHelp" visibility="public">
      </methodref>
      <methodref name="CreateResFmtHelp" visibility="public">
      </methodref>
      <propertyref name="HelpContext" visibility="public">
      </propertyref>
      <propertyref name="Message" visibility="public">
      </propertyref>
      <ancestor name="TObject" namespace="System">
        <methodref name="Create" visibility="public">
        </methodref>
        <methodref name="Free" visibility="public">
        </methodref>
        <methodref name="InitInstance" visibility="public">
        </methodref>
        <methodref name="CleanupInstance" visibility="public">
        </methodref>
        <methodref name="ClassType" visibility="public">
        </methodref>
        <methodref name="ClassName" visibility="public">
        </methodref>
        <methodref name="ClassNameIs" visibility="public">
        </methodref>
        <methodref name="ClassParent" visibility="public">
        </methodref>
        <methodref name="ClassInfo" visibility="public">
        </methodref>
        <methodref name="InstanceSize" visibility="public">
        </methodref>
        <methodref name="InheritsFrom" visibility="public">
        </methodref>
        <methodref name="MethodAddress" visibility="public">
        </methodref>
        <methodref name="MethodName" visibility="public">
        </methodref>
        <methodref name="FieldAddress" visibility="public">
        </methodref>
        <methodref name="GetInterface" visibility="public">
        </methodref>
        <methodref name="GetInterfaceEntry" visibility="public">
        </methodref>
        <methodref name="GetInterfaceTable" visibility="public">
        </methodref>
        <methodref name="SafeCallException" visibility="public">
        </methodref>
        <methodref name="AfterConstruction" visibility="public">
        </methodref>
        <methodref name="BeforeDestruction" visibility="public">
        </methodref>
        <methodref name="Dispatch" visibility="public">
        </methodref>
        <methodref name="DefaultHandler" visibility="public">
        </methodref>
        <methodref name="NewInstance" visibility="public">
        </methodref>
        <methodref name="FreeInstance" visibility="public">
        </methodref>
        <methodref name="Destroy" visibility="public">
        </methodref>
      </ancestor>
    </ancestor>
    <members>
      <field name="FFileError" type="TFileError" visibility="private" />
      <constructor name="Create" visibility="public">
        <parameters>
          <parameter name="FileError" type="TFileError" paramflags="const" />
          <parameter name="Msg" type="string" paramflags="const" />
        </parameters>
      </constructor>
      <constructor name="CreateFmt" visibility="public">
        <parameters>
          <parameter name="FileError" type="TFileError" paramflags="const" />
          <parameter name="Msg" type="string" paramflags="const" />
          <parameter name="Args" paramflags="const">
            <array name="Args">
              <element type="TVarRec" />
            </array>
          </parameter>
        </parameters>
      </constructor>
      <property name="FileError" visibility="public" read="FFileError" type="TFileError" />
    </members>
  </class>
  <const name="faRead" type="TFileAccess">
    <value>
      faRead
    </value>
  </const>
  <const name="faWrite" type="TFileAccess">
    <value>
      faWrite
    </value>
  </const>
  <const name="faReadWrite" type="TFileAccess">
    <value>
      faReadWrite
    </value>
  </const>
  <enum name="TFileAccess">
    <element name="faRead" />
    <element name="faWrite" />
    <element name="faReadWrite" />
  </enum>
  <const name="fsDenyNone" type="TFileSharing">
    <value>
      fsDenyNone
    </value>
  </const>
  <const name="fsDenyRead" type="TFileSharing">
    <value>
      fsDenyRead
    </value>
  </const>
  <const name="fsDenyWrite" type="TFileSharing">
    <value>
      fsDenyWrite
    </value>
  </const>
  <const name="fsDenyReadWrite" type="TFileSharing">
    <value>
      fsDenyReadWrite
    </value>
  </const>
  <const name="fsExclusive" type="TFileSharing">
    <value>
      fsExclusive
    </value>
  </const>
  <enum name="TFileSharing">
    <element name="fsDenyNone" />
    <element name="fsDenyRead" />
    <element name="fsDenyWrite" />
    <element name="fsDenyReadWrite" />
    <element name="fsExclusive" />
  </enum>
  <const name="foDeleteOnClose">
    <value>
      foDeleteOnClose
    </value>
  </const>
  <const name="foNoBuffering">
    <value>
      foNoBuffering
    </value>
  </const>
  <const name="foWriteThrough">
    <value>
      foWriteThrough
    </value>
  </const>
  <const name="foRandomAccessHint">
    <value>
      foRandomAccessHint
    </value>
  </const>
  <const name="foSequentialScanHint">
    <value>
      foSequentialScanHint
    </value>
  </const>
  <const name="foSeekToEndOfFile">
    <value>
      foSeekToEndOfFile
    </value>
  </const>
  <set name="TFileOpenFlags">
    <element name="foDeleteOnClose" />
    <element name="foNoBuffering" />
    <element name="foWriteThrough" />
    <element name="foRandomAccessHint" />
    <element name="foSequentialScanHint" />
    <element name="foSeekToEndOfFile" />
  </set>
  <const name="fcCreateNew" type="TFileCreationMode">
    <value>
      fcCreateNew
    </value>
  </const>
  <const name="fcCreateAlways" type="TFileCreationMode">
    <value>
      fcCreateAlways
    </value>
  </const>
  <const name="fcOpenExisting" type="TFileCreationMode">
    <value>
      fcOpenExisting
    </value>
  </const>
  <const name="fcOpenAlways" type="TFileCreationMode">
    <value>
      fcOpenAlways
    </value>
  </const>
  <const name="fcTruncateExisting" type="TFileCreationMode">
    <value>
      fcTruncateExisting
    </value>
  </const>
  <enum name="TFileCreationMode">
    <element name="fcCreateNew" />
    <element name="fcCreateAlways" />
    <element name="fcOpenExisting" />
    <element name="fcOpenAlways" />
    <element name="fcTruncateExisting" />
  </enum>
  <const name="fpOffsetFromStart" type="TFileSeekPosition">
    <value>
      fpOffsetFromStart
    </value>
  </const>
  <const name="fpOffsetFromCurrent" type="TFileSeekPosition">
    <value>
      fpOffsetFromCurrent
    </value>
  </const>
  <const name="fpOffsetFromEnd" type="TFileSeekPosition">
    <value>
      fpOffsetFromEnd
    </value>
  </const>
  <enum name="TFileSeekPosition">
    <element name="fpOffsetFromStart" />
    <element name="fpOffsetFromCurrent" />
    <element name="fpOffsetFromEnd" />
  </enum>
  <pointer name="PFileOpenWait" type="TFileOpenWait" indircnt="1" />
  <struct name="TFileOpenWait" packed="true">
    <field name="Wait" type="Boolean" visibility="public" />
    <field name="UserData" type="Cardinal" visibility="public" />
    <field name="Timeout" type="Integer" visibility="public" />
    <field name="RetryInterval" type="Integer" visibility="public" />
    <field name="RetryRandomise" type="Boolean" visibility="public" />
    <field name="Callback" type="TFileOpenWaitProcedure" visibility="public" />
    <field name="Aborted" type="Boolean" visibility="public" />
    <field name="Signal" type="Cardinal" visibility="public" />
  </struct>
  <const name="DriveRemovable" type="TLogicalDriveType">
    <value>
      DriveRemovable
    </value>
  </const>
  <const name="DriveFixed" type="TLogicalDriveType">
    <value>
      DriveFixed
    </value>
  </const>
  <const name="DriveRemote" type="TLogicalDriveType">
    <value>
      DriveRemote
    </value>
  </const>
  <const name="DriveCDRom" type="TLogicalDriveType">
    <value>
      DriveCDRom
    </value>
  </const>
  <const name="DriveRamDisk" type="TLogicalDriveType">
    <value>
      DriveRamDisk
    </value>
  </const>
  <const name="DriveTypeUnknown" type="TLogicalDriveType">
    <value>
      DriveTypeUnknown
    </value>
  </const>
  <enum name="TLogicalDriveType">
    <element name="DriveRemovable" />
    <element name="DriveFixed" />
    <element name="DriveRemote" />
    <element name="DriveCDRom" />
    <element name="DriveRamDisk" />
    <element name="DriveTypeUnknown" />
  </enum>
  <array name="StrReplaceMatchArray" low="0" high="4095">
    <element type="Integer" />
  </array>
  <type name="AsciiChar" type="Char" />
  <function name="PathHasDriveLetterA" visibility="public">
    <parameters>
      <parameter name="Path" type="string" paramflags="const" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="PathHasDriveLetter" visibility="public">
    <parameters>
      <parameter name="Path" type="string" paramflags="const" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="PathIsDriveLetterA" visibility="public">
    <parameters>
      <parameter name="Path" type="string" paramflags="const" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="PathIsDriveLetter" visibility="public">
    <parameters>
      <parameter name="Path" type="string" paramflags="const" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="PathIsDriveRootA" visibility="public">
    <parameters>
      <parameter name="Path" type="string" paramflags="const" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="PathIsDriveRoot" visibility="public">
    <parameters>
      <parameter name="Path" type="string" paramflags="const" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="PathIsRootA" visibility="public">
    <parameters>
      <parameter name="Path" type="string" paramflags="const" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="PathIsRoot" visibility="public">
    <parameters>
      <parameter name="Path" type="string" paramflags="const" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="PathIsUNCPathA" visibility="public">
    <parameters>
      <parameter name="Path" type="string" paramflags="const" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="PathIsUNCPath" visibility="public">
    <parameters>
      <parameter name="Path" type="string" paramflags="const" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="PathIsAbsoluteA" visibility="public">
    <parameters>
      <parameter name="Path" type="string" paramflags="const" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="PathIsAbsolute" visibility="public">
    <parameters>
      <parameter name="Path" type="string" paramflags="const" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="PathIsDirectoryA" visibility="public">
    <parameters>
      <parameter name="Path" type="string" paramflags="const" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="PathIsDirectory" visibility="public">
    <parameters>
      <parameter name="Path" type="string" paramflags="const" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="PathInclSuffixA" visibility="public">
    <parameters>
      <parameter name="Path" type="string" paramflags="const" />
      <parameter name="PathSep" type="Char" paramflags="const">
        <value>
          $5C
        </value>
      </parameter>
      <retval type="string" />
    </parameters>
  </function>
  <function name="PathInclSuffix" visibility="public">
    <parameters>
      <parameter name="Path" type="string" paramflags="const" />
      <parameter name="PathSep" type="Char" paramflags="const">
        <value>
          $5C
        </value>
      </parameter>
      <retval type="string" />
    </parameters>
  </function>
  <procedure name="PathEnsureSuffixA" visibility="public">
    <parameters>
      <parameter name="Path" type="string" paramflags="var" />
      <parameter name="PathSep" type="Char" paramflags="const">
        <value>
          $5C
        </value>
      </parameter>
    </parameters>
  </procedure>
  <procedure name="PathEnsureSuffix" visibility="public">
    <parameters>
      <parameter name="Path" type="string" paramflags="var" />
      <parameter name="PathSep" type="Char" paramflags="const">
        <value>
          $5C
        </value>
      </parameter>
    </parameters>
  </procedure>
  <procedure name="PathEnsureNoSuffixA" visibility="public">
    <parameters>
      <parameter name="Path" type="string" paramflags="var" />
      <parameter name="PathSep" type="Char" paramflags="const">
        <value>
          $5C
        </value>
      </parameter>
    </parameters>
  </procedure>
  <procedure name="PathEnsureNoSuffix" visibility="public">
    <parameters>
      <parameter name="Path" type="string" paramflags="var" />
      <parameter name="PathSep" type="Char" paramflags="const">
        <value>
          $5C
        </value>
      </parameter>
    </parameters>
  </procedure>
  <function name="PathExclSuffixA" visibility="public">
    <parameters>
      <parameter name="Path" type="string" paramflags="const" />
      <parameter name="PathSep" type="Char" paramflags="const">
        <value>
          $5C
        </value>
      </parameter>
      <retval type="string" />
    </parameters>
  </function>
  <function name="PathExclSuffix" visibility="public">
    <parameters>
      <parameter name="Path" type="string" paramflags="const" />
      <parameter name="PathSep" type="Char" paramflags="const">
        <value>
          $5C
        </value>
      </parameter>
      <retval type="string" />
    </parameters>
  </function>
  <function name="PathCanonical" visibility="public">
    <parameters>
      <parameter name="Path" type="string" paramflags="const" />
      <parameter name="PathSep" type="Char" paramflags="const">
        <value>
          $5C
        </value>
      </parameter>
      <retval type="string" />
    </parameters>
  </function>
  <function name="PathExpand" visibility="public">
    <parameters>
      <parameter name="Path" type="string" paramflags="const" />
      <parameter name="BasePath" type="string" paramflags="const">
        <value>
          
        </value>
      </parameter>
      <parameter name="PathSep" type="Char" paramflags="const">
        <value>
          $5C
        </value>
      </parameter>
      <retval type="string" />
    </parameters>
  </function>
  <function name="PathLeftElementA" visibility="public">
    <parameters>
      <parameter name="Path" type="string" paramflags="const" />
      <parameter name="PathSep" type="Char" paramflags="const">
        <value>
          $5C
        </value>
      </parameter>
      <retval type="string" />
    </parameters>
  </function>
  <function name="PathLeftElement" visibility="public">
    <parameters>
      <parameter name="Path" type="string" paramflags="const" />
      <parameter name="PathSep" type="Char" paramflags="const">
        <value>
          $5C
        </value>
      </parameter>
      <retval type="string" />
    </parameters>
  </function>
  <procedure name="PathSplitLeftElementA" visibility="public">
    <parameters>
      <parameter name="Path" type="string" paramflags="const" />
      <parameter name="LeftElement" type="string" paramflags="var" />
      <parameter name="RightPath" type="string" paramflags="var" />
      <parameter name="PathSep" type="Char" paramflags="const">
        <value>
          $5C
        </value>
      </parameter>
    </parameters>
  </procedure>
  <procedure name="PathSplitLeftElement" visibility="public">
    <parameters>
      <parameter name="Path" type="string" paramflags="const" />
      <parameter name="LeftElement" type="string" paramflags="var" />
      <parameter name="RightPath" type="string" paramflags="var" />
      <parameter name="PathSep" type="Char" paramflags="const">
        <value>
          $5C
        </value>
      </parameter>
    </parameters>
  </procedure>
  <procedure name="DecodeFilePathA" visibility="public">
    <parameters>
      <parameter name="FilePath" type="string" paramflags="const" />
      <parameter name="Path" type="string" paramflags="var" />
      <parameter name="FileName" type="string" paramflags="var" />
      <parameter name="PathSep" type="Char" paramflags="const">
        <value>
          $5C
        </value>
      </parameter>
    </parameters>
  </procedure>
  <procedure name="DecodeFilePath" visibility="public">
    <parameters>
      <parameter name="FilePath" type="string" paramflags="const" />
      <parameter name="Path" type="string" paramflags="var" />
      <parameter name="FileName" type="string" paramflags="var" />
      <parameter name="PathSep" type="Char" paramflags="const">
        <value>
          $5C
        </value>
      </parameter>
    </parameters>
  </procedure>
  <function name="FileNameValidA" visibility="public">
    <parameters>
      <parameter name="FileName" type="string" paramflags="const" />
      <retval type="string" />
    </parameters>
  </function>
  <function name="FileNameValid" visibility="public">
    <parameters>
      <parameter name="FileName" type="string" paramflags="const" />
      <retval type="string" />
    </parameters>
  </function>
  <function name="FilePath" visibility="public">
    <parameters>
      <parameter name="FileName" type="string" paramflags="const" />
      <parameter name="Path" type="string" paramflags="const" />
      <parameter name="BasePath" type="string" paramflags="const">
        <value>
          
        </value>
      </parameter>
      <parameter name="PathSep" type="Char" paramflags="const">
        <value>
          $5C
        </value>
      </parameter>
      <retval type="string" />
    </parameters>
  </function>
  <function name="DirectoryExpand" visibility="public">
    <parameters>
      <parameter name="Path" type="string" paramflags="const" />
      <parameter name="BasePath" type="string" paramflags="const">
        <value>
          
        </value>
      </parameter>
      <parameter name="PathSep" type="Char" paramflags="const">
        <value>
          $5C
        </value>
      </parameter>
      <retval type="string" />
    </parameters>
  </function>
  <function name="UnixPathToWinPath" visibility="public">
    <parameters>
      <parameter name="Path" type="string" paramflags="const" />
      <retval type="string" />
    </parameters>
  </function>
  <function name="WinPathToUnixPath" visibility="public">
    <parameters>
      <parameter name="Path" type="string" paramflags="const" />
      <retval type="string" />
    </parameters>
  </function>
  <function name="FileOpenExA" visibility="public">
    <parameters>
      <parameter name="FileName" type="string" paramflags="const" />
      <parameter name="FileAccess" type="TFileAccess" paramflags="const">
        <value>
          faRead
        </value>
      </parameter>
      <parameter name="FileSharing" type="TFileSharing" paramflags="const">
        <value>
          fsDenyNone
        </value>
      </parameter>
      <parameter name="FileOpenFlags" type="TFileOpenFlags" paramflags="const">
        <value>
          []
        </value>
      </parameter>
      <parameter name="FileCreationMode" type="TFileCreationMode" paramflags="const">
        <value>
          fcOpenExisting
        </value>
      </parameter>
      <parameter name="FileOpenWait" type="PFileOpenWait" paramflags="const">
        <value>
          nil
        </value>
      </parameter>
      <retval type="Integer" />
    </parameters>
  </function>
  <function name="FileSeekEx" visibility="public">
    <parameters>
      <parameter name="FileHandle" type="Integer" paramflags="const" />
      <parameter name="FileOffset" type="Int64" paramflags="const" />
      <parameter name="FilePosition" type="TFileSeekPosition" paramflags="const">
        <value>
          fpOffsetFromStart
        </value>
      </parameter>
      <retval type="Int64" />
    </parameters>
  </function>
  <function name="FileReadEx" visibility="public">
    <parameters>
      <parameter name="FileHandle" type="Integer" paramflags="const" />
      <parameter name="Buf" paramflags="var" />
      <parameter name="BufSize" type="Integer" paramflags="const" />
      <retval type="Integer" />
    </parameters>
  </function>
  <function name="FileWriteEx" visibility="public">
    <parameters>
      <parameter name="FileHandle" type="Integer" paramflags="const" />
      <parameter name="Buf" paramflags="const" />
      <parameter name="BufSize" type="Integer" paramflags="const" />
      <retval type="Integer" />
    </parameters>
  </function>
  <procedure name="FileCloseEx" visibility="public">
    <parameters>
      <parameter name="FileHandle" type="Integer" paramflags="const" />
    </parameters>
  </procedure>
  <function name="FileExistsA" visibility="public">
    <parameters>
      <parameter name="FileName" type="string" paramflags="const" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="FileExists" visibility="public">
    <parameters>
      <parameter name="FileName" type="string" paramflags="const" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="FileGetSize" visibility="public">
    <parameters>
      <parameter name="FileName" type="string" paramflags="const" />
      <retval type="Int64" />
    </parameters>
  </function>
  <function name="FileGetDateTime" visibility="public">
    <parameters>
      <parameter name="FileName" type="string" paramflags="const" />
      <retval type="TDateTime" />
    </parameters>
  </function>
  <function name="FileGetDateTime2" visibility="public">
    <parameters>
      <parameter name="FileName" type="string" paramflags="const" />
      <retval type="TDateTime" />
    </parameters>
  </function>
  <function name="FileIsReadOnly" visibility="public">
    <parameters>
      <parameter name="FileName" type="string" paramflags="const" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <procedure name="FileDeleteEx" visibility="public">
    <parameters>
      <parameter name="FileName" type="string" paramflags="const" />
    </parameters>
  </procedure>
  <procedure name="FileRenameEx" visibility="public">
    <parameters>
      <parameter name="OldFileName" type="string" paramflags="const" />
      <parameter name="NewFileName" type="string" paramflags="const" />
    </parameters>
  </procedure>
  <function name="ReadFileBufA" visibility="public">
    <parameters>
      <parameter name="FileName" type="string" paramflags="const" />
      <parameter name="Buf" paramflags="var" />
      <parameter name="BufSize" type="Integer" paramflags="const" />
      <parameter name="FileSharing" type="TFileSharing" paramflags="const">
        <value>
          fsDenyNone
        </value>
      </parameter>
      <parameter name="FileCreationMode" type="TFileCreationMode" paramflags="const">
        <value>
          fcOpenExisting
        </value>
      </parameter>
      <parameter name="FileOpenWait" type="PFileOpenWait" paramflags="const">
        <value>
          nil
        </value>
      </parameter>
      <retval type="Integer" />
    </parameters>
  </function>
  <function name="ReadFileStrA" visibility="public">
    <parameters>
      <parameter name="FileName" type="string" paramflags="const" />
      <parameter name="FileSharing" type="TFileSharing" paramflags="const">
        <value>
          fsDenyNone
        </value>
      </parameter>
      <parameter name="FileCreationMode" type="TFileCreationMode" paramflags="const">
        <value>
          fcOpenExisting
        </value>
      </parameter>
      <parameter name="FileOpenWait" type="PFileOpenWait" paramflags="const">
        <value>
          nil
        </value>
      </parameter>
      <retval type="string" />
    </parameters>
  </function>
  <procedure name="AppendFileA" visibility="public">
    <parameters>
      <parameter name="FileName" type="string" paramflags="const" />
      <parameter name="Buf" paramflags="const" />
      <parameter name="BufSize" type="Integer" paramflags="const" />
      <parameter name="FileSharing" type="TFileSharing" paramflags="const" />
      <parameter name="FileCreationMode" type="TFileCreationMode" paramflags="const" />
      <parameter name="FileOpenWait" type="PFileOpenWait" paramflags="const" />
    </parameters>
  </procedure>
  <procedure name="AppendFileStrA" visibility="public">
    <parameters>
      <parameter name="FileName" type="string" paramflags="const" />
      <parameter name="Buf" type="string" paramflags="const" />
      <parameter name="FileSharing" type="TFileSharing" paramflags="const">
        <value>
          fsDenyWrite
        </value>
      </parameter>
      <parameter name="FileCreationMode" type="TFileCreationMode" paramflags="const">
        <value>
          fcOpenAlways
        </value>
      </parameter>
      <parameter name="FileOpenWait" type="PFileOpenWait" paramflags="const">
        <value>
          nil
        </value>
      </parameter>
    </parameters>
  </procedure>
  <function name="DirectoryEntryExists" visibility="public">
    <parameters>
      <parameter name="Name" type="string" paramflags="const" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="DirectoryEntrySize" visibility="public">
    <parameters>
      <parameter name="Name" type="string" paramflags="const" />
      <retval type="Int64" />
    </parameters>
  </function>
  <function name="DirectoryExists" visibility="public">
    <parameters>
      <parameter name="DirectoryName" type="string" paramflags="const" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="DirectoryGetDateTime" visibility="public">
    <parameters>
      <parameter name="DirectoryName" type="string" paramflags="const" />
      <retval type="TDateTime" />
    </parameters>
  </function>
  <procedure name="DirectoryCreate" visibility="public">
    <parameters>
      <parameter name="DirectoryName" type="string" paramflags="const" />
    </parameters>
  </procedure>
  <function name="GetFirstFileNameMatching" visibility="public">
    <parameters>
      <parameter name="FileMask" type="string" paramflags="const" />
      <retval type="string" />
    </parameters>
  </function>
  <function name="DirEntryGetAttr" visibility="public">
    <parameters>
      <parameter name="FileName" type="string" paramflags="const" />
      <retval type="Integer" />
    </parameters>
  </function>
  <function name="DirEntryIsDirectory" visibility="public">
    <parameters>
      <parameter name="FileName" type="string" paramflags="const" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="FileHasAttr" visibility="public">
    <parameters>
      <parameter name="FileName" type="string" paramflags="const" />
      <parameter name="Attr" type="Word" paramflags="const" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <procedure name="CopyFile" visibility="public">
    <parameters>
      <parameter name="FileName" type="string" paramflags="const" />
      <parameter name="DestName" type="string" paramflags="const" />
    </parameters>
  </procedure>
  <procedure name="MoveFile" visibility="public">
    <parameters>
      <parameter name="FileName" type="string" paramflags="const" />
      <parameter name="DestName" type="string" paramflags="const" />
    </parameters>
  </procedure>
  <function name="DeleteFiles" visibility="public">
    <parameters>
      <parameter name="FileMask" type="string" paramflags="const" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="DriveIsValid" visibility="public">
    <parameters>
      <parameter name="Drive" type="Char" paramflags="const" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="DriveGetType" visibility="public">
    <parameters>
      <parameter name="Path" type="string" paramflags="const" />
      <retval type="TLogicalDriveType" />
    </parameters>
  </function>
  <function name="DriveFreeSpace" visibility="public">
    <parameters>
      <parameter name="Path" type="string" paramflags="const" />
      <retval type="Int64" />
    </parameters>
  </function>
  <procedure name="SelfTest" visibility="public">
  </procedure>
</namespace>
