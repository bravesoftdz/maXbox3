<?xml version="1.0" encoding="utf-8"?>
<namespace name="JclMath_max">
  <const name="Bernstein" type="Extended" visibility="public" />
  <const name="Cbrt2" type="Extended" visibility="public" />
  <const name="Cbrt3" type="Extended" visibility="public" />
  <const name="Cbrt10" type="Extended" visibility="public" />
  <const name="Cbrt100" type="Extended" visibility="public" />
  <const name="CbrtPi" type="Extended" visibility="public" />
  <const name="Catalan" type="Extended" visibility="public" />
  <const name="PiJ" type="Extended" visibility="public" />
  <const name="PiOn2" type="Extended" visibility="public" />
  <const name="PiOn3" type="Extended" visibility="public" />
  <const name="PiOn4" type="Extended" visibility="public" />
  <const name="Sqrt2" type="Extended" visibility="public" />
  <const name="Sqrt3" type="Extended" visibility="public" />
  <const name="Sqrt5" type="Extended" visibility="public" />
  <const name="Sqrt10" type="Extended" visibility="public" />
  <const name="SqrtPi" type="Extended" visibility="public" />
  <const name="Sqrt2Pi" type="Extended" visibility="public" />
  <const name="TwoPi" type="Extended" visibility="public" />
  <const name="ThreePi" type="Extended" visibility="public" />
  <const name="Ln2" type="Extended" visibility="public" />
  <const name="Ln10" type="Extended" visibility="public" />
  <const name="LnPi" type="Extended" visibility="public" />
  <const name="Log2J" type="Extended" visibility="public" />
  <const name="Log3" type="Extended" visibility="public" />
  <const name="LogPi" type="Extended" visibility="public" />
  <const name="LogE" type="Extended" visibility="public" />
  <const name="E" type="Extended" visibility="public" />
  <const name="hLn2Pi" type="Extended" visibility="public" />
  <const name="inv2Pi" type="Extended" visibility="public" />
  <const name="TwoToPower63" type="Extended" visibility="public" />
  <const name="GoldenMean" type="Extended" visibility="public" />
  <const name="EulerMascheroni" type="Extended" visibility="public" />
  <const name="MaxAngle" type="Extended" visibility="public" />
  <const name="MaxTanH" type="Extended" visibility="public" />
  <const name="MaxFactorial" type="Integer">
    <value>
      $6DA
    </value>
  </const>
  <const name="MaxFloatingPoint" type="Extended" visibility="public" />
  <const name="MinFloatingPoint" type="Extended" visibility="public" />
  <const name="PiExt" type="Extended">
    <value>
      3.142
    </value>
  </const>
  <const name="RatioDegToRad" type="Extended" visibility="public" />
  <const name="RatioRadToDeg" type="Extended" visibility="public" />
  <const name="RatioGradToRad" type="Extended" visibility="public" />
  <const name="RatioRadToGrad" type="Extended" visibility="public" />
  <const name="RatioDegToGrad" type="Extended" visibility="public" />
  <const name="RatioGradToDeg" type="Extended" visibility="public" />
  <variable name="PrecisionTolerance" type="Extended" visibility="public" />
  <variable name="EpsSingle" type="Single" />
  <variable name="EpsDouble" type="Double" />
  <variable name="EpsExtended" type="Extended" />
  <variable name="Epsilon" type="Extended" />
  <variable name="ThreeEpsSingle" type="Single" />
  <variable name="ThreeEpsDouble" type="Double" />
  <variable name="ThreeEpsExtended" type="Extended" />
  <variable name="ThreeEpsilon" type="Extended" />
  <const name="ptTrialDivision" type="TPrimalityTestMethod">
    <value>
      ptTrialDivision
    </value>
  </const>
  <const name="ptRabinMiller" type="TPrimalityTestMethod">
    <value>
      ptRabinMiller
    </value>
  </const>
  <enum name="TPrimalityTestMethod">
    <element name="ptTrialDivision" />
    <element name="ptRabinMiller" />
  </enum>
  <type name="Float" type="Extended" />
  <variable name="IsPrime" visibility="public" />
  <const name="fpZero" type="TFloatingPointClass">
    <value>
      fpZero
    </value>
  </const>
  <const name="fpNormal" type="TFloatingPointClass">
    <value>
      fpNormal
    </value>
  </const>
  <const name="fpDenormal" type="TFloatingPointClass">
    <value>
      fpDenormal
    </value>
  </const>
  <const name="fpInfinite" type="TFloatingPointClass">
    <value>
      fpInfinite
    </value>
  </const>
  <const name="fpNaN" type="TFloatingPointClass">
    <value>
      fpNaN
    </value>
  </const>
  <const name="fpInvalid" type="TFloatingPointClass">
    <value>
      fpInvalid
    </value>
  </const>
  <const name="fpEmpty" type="TFloatingPointClass">
    <value>
      fpEmpty
    </value>
  </const>
  <enum name="TFloatingPointClass">
    <element name="fpZero" />
    <element name="fpNormal" />
    <element name="fpDenormal" />
    <element name="fpInfinite" />
    <element name="fpNaN" />
    <element name="fpInvalid" />
    <element name="fpEmpty" />
  </enum>
  <const name="Infinity" type="Extended">
    <value>
      +INF
    </value>
  </const>
  <const name="NaN" type="Extended">
    <value>
      -NAN
    </value>
  </const>
  <const name="NegInfinity" type="Extended">
    <value>
      -INF
    </value>
  </const>
  <const name="LowValidNaNTag" type="Integer">
    <value>
      $FFC00001
    </value>
  </const>
  <const name="HighValidNaNTag" type="Integer">
    <value>
      $3FFFFE
    </value>
  </const>
  <class name="TJclASet">
    <ancestor name="TObject" namespace="System">
      <methodref name="Create" visibility="public">
      </methodref>
      <methodref name="Free" visibility="public">
      </methodref>
      <methodref name="InitInstance" visibility="public">
      </methodref>
      <methodref name="CleanupInstance" visibility="public">
      </methodref>
      <methodref name="ClassType" visibility="public">
      </methodref>
      <methodref name="ClassName" visibility="public">
      </methodref>
      <methodref name="ClassNameIs" visibility="public">
      </methodref>
      <methodref name="ClassParent" visibility="public">
      </methodref>
      <methodref name="ClassInfo" visibility="public">
      </methodref>
      <methodref name="InstanceSize" visibility="public">
      </methodref>
      <methodref name="InheritsFrom" visibility="public">
      </methodref>
      <methodref name="MethodAddress" visibility="public">
      </methodref>
      <methodref name="MethodName" visibility="public">
      </methodref>
      <methodref name="FieldAddress" visibility="public">
      </methodref>
      <methodref name="GetInterface" visibility="public">
      </methodref>
      <methodref name="GetInterfaceEntry" visibility="public">
      </methodref>
      <methodref name="GetInterfaceTable" visibility="public">
      </methodref>
      <methodref name="SafeCallException" visibility="public">
      </methodref>
      <methodref name="AfterConstruction" visibility="public">
      </methodref>
      <methodref name="BeforeDestruction" visibility="public">
      </methodref>
      <methodref name="Dispatch" visibility="public">
      </methodref>
      <methodref name="DefaultHandler" visibility="public">
      </methodref>
      <methodref name="NewInstance" visibility="public">
      </methodref>
      <methodref name="FreeInstance" visibility="public">
      </methodref>
      <methodref name="Destroy" visibility="public">
      </methodref>
    </ancestor>
    <members>
      <function name="GetBit" visibility="public" procflags="abstract virtual">
        <parameters>
          <parameter name="Idx" type="Integer" paramflags="const" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <procedure name="SetBit" visibility="public" procflags="abstract virtual">
        <parameters>
          <parameter name="Idx" type="Integer" paramflags="const" />
          <parameter name="Value" type="Boolean" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="Clear" visibility="public" procflags="abstract virtual">
      </procedure>
      <procedure name="Invert" visibility="public" procflags="abstract virtual">
      </procedure>
      <function name="GetRange" visibility="public" procflags="abstract virtual">
        <parameters>
          <parameter name="Low" type="Integer" paramflags="const" />
          <parameter name="High" type="Integer" paramflags="const" />
          <parameter name="Value" type="Boolean" paramflags="const" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <procedure name="SetRange" visibility="public" procflags="abstract virtual">
        <parameters>
          <parameter name="Low" type="Integer" paramflags="const" />
          <parameter name="High" type="Integer" paramflags="const" />
          <parameter name="Value" type="Boolean" paramflags="const" />
        </parameters>
      </procedure>
    </members>
  </class>
  <class name="TJclFlatSet">
    <ancestor name="TJclASet" namespace="JclMath_max">
      <methodref name="GetBit" visibility="public" />
      <methodref name="SetBit" visibility="public" />
      <methodref name="Clear" visibility="public" />
      <methodref name="Invert" visibility="public" />
      <methodref name="GetRange" visibility="public" />
      <methodref name="SetRange" visibility="public" />
      <ancestor name="TObject" namespace="System">
        <methodref name="Create" visibility="public">
        </methodref>
        <methodref name="Free" visibility="public">
        </methodref>
        <methodref name="InitInstance" visibility="public">
        </methodref>
        <methodref name="CleanupInstance" visibility="public">
        </methodref>
        <methodref name="ClassType" visibility="public">
        </methodref>
        <methodref name="ClassName" visibility="public">
        </methodref>
        <methodref name="ClassNameIs" visibility="public">
        </methodref>
        <methodref name="ClassParent" visibility="public">
        </methodref>
        <methodref name="ClassInfo" visibility="public">
        </methodref>
        <methodref name="InstanceSize" visibility="public">
        </methodref>
        <methodref name="InheritsFrom" visibility="public">
        </methodref>
        <methodref name="MethodAddress" visibility="public">
        </methodref>
        <methodref name="MethodName" visibility="public">
        </methodref>
        <methodref name="FieldAddress" visibility="public">
        </methodref>
        <methodref name="GetInterface" visibility="public">
        </methodref>
        <methodref name="GetInterfaceEntry" visibility="public">
        </methodref>
        <methodref name="GetInterfaceTable" visibility="public">
        </methodref>
        <methodref name="SafeCallException" visibility="public">
        </methodref>
        <methodref name="AfterConstruction" visibility="public">
        </methodref>
        <methodref name="BeforeDestruction" visibility="public">
        </methodref>
        <methodref name="Dispatch" visibility="public">
        </methodref>
        <methodref name="DefaultHandler" visibility="public">
        </methodref>
        <methodref name="NewInstance" visibility="public">
        </methodref>
        <methodref name="FreeInstance" visibility="public">
        </methodref>
        <methodref name="Destroy" visibility="public">
        </methodref>
      </ancestor>
    </ancestor>
    <members>
      <field name="FBits" type="TBits" visibility="private" />
      <constructor name="Create" visibility="public">
        <parameters>
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public">
        <parameters>
        </parameters>
      </destructor>
      <procedure name="Clear" visibility="public" procflags="override">
      </procedure>
      <procedure name="Invert" visibility="public" procflags="override">
      </procedure>
      <procedure name="SetRange" visibility="public" procflags="override">
        <parameters>
          <parameter name="Low" type="Integer" paramflags="const" />
          <parameter name="High" type="Integer" paramflags="const" />
          <parameter name="Value" type="Boolean" paramflags="const" />
        </parameters>
      </procedure>
      <function name="GetBit" visibility="public" procflags="override">
        <parameters>
          <parameter name="Idx" type="Integer" paramflags="const" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="GetRange" visibility="public" procflags="override">
        <parameters>
          <parameter name="Low" type="Integer" paramflags="const" />
          <parameter name="High" type="Integer" paramflags="const" />
          <parameter name="Value" type="Boolean" paramflags="const" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <procedure name="SetBit" visibility="public" procflags="override">
        <parameters>
          <parameter name="Idx" type="Integer" paramflags="const" />
          <parameter name="Value" type="Boolean" paramflags="const" />
        </parameters>
      </procedure>
    </members>
  </class>
  <array name="TPointerArray" low="0" high="8388607">
    <element type="Pointer" />
  </array>
  <pointer name="PPointerArray" type="TPointerArray" indircnt="1" />
  <set name="TDelphiSet" type="Byte" />
  <pointer name="PDelphiSet" type="TDelphiSet" indircnt="1" />
  <const name="EmptyDelphiSet" type="TDelphiSet" visibility="public" />
  <const name="CompleteDelphiSet" type="TDelphiSet" visibility="public" />
  <class name="TJclSparseFlatSet">
    <ancestor name="TJclASet" namespace="JclMath_max">
      <methodref name="GetBit" visibility="public" />
      <methodref name="SetBit" visibility="public" />
      <methodref name="Clear" visibility="public" />
      <methodref name="Invert" visibility="public" />
      <methodref name="GetRange" visibility="public" />
      <methodref name="SetRange" visibility="public" />
      <ancestor name="TObject" namespace="System">
        <methodref name="Create" visibility="public">
        </methodref>
        <methodref name="Free" visibility="public">
        </methodref>
        <methodref name="InitInstance" visibility="public">
        </methodref>
        <methodref name="CleanupInstance" visibility="public">
        </methodref>
        <methodref name="ClassType" visibility="public">
        </methodref>
        <methodref name="ClassName" visibility="public">
        </methodref>
        <methodref name="ClassNameIs" visibility="public">
        </methodref>
        <methodref name="ClassParent" visibility="public">
        </methodref>
        <methodref name="ClassInfo" visibility="public">
        </methodref>
        <methodref name="InstanceSize" visibility="public">
        </methodref>
        <methodref name="InheritsFrom" visibility="public">
        </methodref>
        <methodref name="MethodAddress" visibility="public">
        </methodref>
        <methodref name="MethodName" visibility="public">
        </methodref>
        <methodref name="FieldAddress" visibility="public">
        </methodref>
        <methodref name="GetInterface" visibility="public">
        </methodref>
        <methodref name="GetInterfaceEntry" visibility="public">
        </methodref>
        <methodref name="GetInterfaceTable" visibility="public">
        </methodref>
        <methodref name="SafeCallException" visibility="public">
        </methodref>
        <methodref name="AfterConstruction" visibility="public">
        </methodref>
        <methodref name="BeforeDestruction" visibility="public">
        </methodref>
        <methodref name="Dispatch" visibility="public">
        </methodref>
        <methodref name="DefaultHandler" visibility="public">
        </methodref>
        <methodref name="NewInstance" visibility="public">
        </methodref>
        <methodref name="FreeInstance" visibility="public">
        </methodref>
        <methodref name="Destroy" visibility="public">
        </methodref>
      </ancestor>
    </ancestor>
    <members>
      <field name="FSetList" type="PPointerArray" visibility="private" />
      <field name="FSetListEntries" type="Integer" visibility="private" />
      <destructor name="Destroy" visibility="public">
        <parameters>
        </parameters>
      </destructor>
      <procedure name="Clear" visibility="public" procflags="override">
      </procedure>
      <procedure name="Invert" visibility="public" procflags="override">
      </procedure>
      <function name="GetBit" visibility="public" procflags="override">
        <parameters>
          <parameter name="Idx" type="Integer" paramflags="const" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <procedure name="SetBit" visibility="public" procflags="override">
        <parameters>
          <parameter name="Idx" type="Integer" paramflags="const" />
          <parameter name="Value" type="Boolean" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="SetRange" visibility="public" procflags="override">
        <parameters>
          <parameter name="Low" type="Integer" paramflags="const" />
          <parameter name="High" type="Integer" paramflags="const" />
          <parameter name="Value" type="Boolean" paramflags="const" />
        </parameters>
      </procedure>
      <function name="GetRange" visibility="public" procflags="override">
        <parameters>
          <parameter name="Low" type="Integer" paramflags="const" />
          <parameter name="High" type="Integer" paramflags="const" />
          <parameter name="Value" type="Boolean" paramflags="const" />
          <retval type="Boolean" />
        </parameters>
      </function>
    </members>
  </class>
  <class name="TJclRational">
    <ancestor name="TObject" namespace="System">
      <methodref name="Create" visibility="public">
      </methodref>
      <methodref name="Free" visibility="public">
      </methodref>
      <methodref name="InitInstance" visibility="public">
      </methodref>
      <methodref name="CleanupInstance" visibility="public">
      </methodref>
      <methodref name="ClassType" visibility="public">
      </methodref>
      <methodref name="ClassName" visibility="public">
      </methodref>
      <methodref name="ClassNameIs" visibility="public">
      </methodref>
      <methodref name="ClassParent" visibility="public">
      </methodref>
      <methodref name="ClassInfo" visibility="public">
      </methodref>
      <methodref name="InstanceSize" visibility="public">
      </methodref>
      <methodref name="InheritsFrom" visibility="public">
      </methodref>
      <methodref name="MethodAddress" visibility="public">
      </methodref>
      <methodref name="MethodName" visibility="public">
      </methodref>
      <methodref name="FieldAddress" visibility="public">
      </methodref>
      <methodref name="GetInterface" visibility="public">
      </methodref>
      <methodref name="GetInterfaceEntry" visibility="public">
      </methodref>
      <methodref name="GetInterfaceTable" visibility="public">
      </methodref>
      <methodref name="SafeCallException" visibility="public">
      </methodref>
      <methodref name="AfterConstruction" visibility="public">
      </methodref>
      <methodref name="BeforeDestruction" visibility="public">
      </methodref>
      <methodref name="Dispatch" visibility="public">
      </methodref>
      <methodref name="DefaultHandler" visibility="public">
      </methodref>
      <methodref name="NewInstance" visibility="public">
      </methodref>
      <methodref name="FreeInstance" visibility="public">
      </methodref>
      <methodref name="Destroy" visibility="public">
      </methodref>
    </ancestor>
    <members>
      <field name="FT" type="Integer" visibility="private" />
      <field name="FN" type="Integer" visibility="private" />
      <function name="GetAsString" visibility="private">
        <parameters>
          <retval type="string" />
        </parameters>
      </function>
      <procedure name="SetAsString" visibility="private">
        <parameters>
          <parameter name="S" type="string" paramflags="const" />
        </parameters>
      </procedure>
      <function name="GetAsFloat" visibility="private">
        <parameters>
          <retval type="Extended" />
        </parameters>
      </function>
      <procedure name="SetAsFloat" visibility="private">
        <parameters>
          <parameter name="R" type="Extended" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="Simplify" visibility="protected">
      </procedure>
      <constructor name="Create" visibility="public">
        <parameters>
        </parameters>
      </constructor>
      <constructor name="Create" visibility="public">
        <parameters>
          <parameter name="R" type="Extended" paramflags="const" />
        </parameters>
      </constructor>
      <constructor name="Create" visibility="public">
        <parameters>
          <parameter name="Numerator" type="Integer" paramflags="const" />
          <parameter name="Denominator" type="Integer" paramflags="const">
            <value>
              $1
            </value>
          </parameter>
        </parameters>
      </constructor>
      <property name="Numerator" visibility="public" read="FT" type="Integer" />
      <property name="Denominator" visibility="public" read="FN" type="Integer" />
      <property name="AsString" visibility="public" read="GetAsString" write="SetAsString" type="string" />
      <property name="AsFloat" visibility="public" read="GetAsFloat" write="SetAsFloat" type="Extended" />
      <procedure name="Assign" visibility="public" procflags="overload">
        <parameters>
          <parameter name="R" type="TJclRational" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="Assign" visibility="public" procflags="overload">
        <parameters>
          <parameter name="R" type="Extended" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="Assign" visibility="public" procflags="overload">
        <parameters>
          <parameter name="Numerator" type="Integer" paramflags="const" />
          <parameter name="Denominator" type="Integer" paramflags="const">
            <value>
              $1
            </value>
          </parameter>
        </parameters>
      </procedure>
      <procedure name="AssignZero" visibility="public">
      </procedure>
      <procedure name="AssignOne" visibility="public">
      </procedure>
      <function name="Duplicate" visibility="public">
        <parameters>
          <retval type="TJclRational" />
        </parameters>
      </function>
      <function name="IsEqual" visibility="public" procflags="overload">
        <parameters>
          <parameter name="R" type="TJclRational" paramflags="const" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="IsEqual" visibility="public" procflags="overload">
        <parameters>
          <parameter name="Numerator" type="Integer" paramflags="const" />
          <parameter name="Denominator" type="Integer" paramflags="const">
            <value>
              $1
            </value>
          </parameter>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="IsEqual" visibility="public" procflags="overload">
        <parameters>
          <parameter name="R" type="Extended" paramflags="const" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="IsZero" visibility="public">
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="IsOne" visibility="public">
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <procedure name="Add" visibility="public" procflags="overload">
        <parameters>
          <parameter name="R" type="TJclRational" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="Add" visibility="public" procflags="overload">
        <parameters>
          <parameter name="V" type="Extended" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="Add" visibility="public" procflags="overload">
        <parameters>
          <parameter name="V" type="Integer" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="Subtract" visibility="public" procflags="overload">
        <parameters>
          <parameter name="R" type="TJclRational" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="Subtract" visibility="public" procflags="overload">
        <parameters>
          <parameter name="V" type="Extended" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="Subtract" visibility="public" procflags="overload">
        <parameters>
          <parameter name="V" type="Integer" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="Negate" visibility="public">
      </procedure>
      <procedure name="Abs" visibility="public">
      </procedure>
      <function name="Sgn" visibility="public">
        <parameters>
          <retval type="Integer" />
        </parameters>
      </function>
      <procedure name="Multiply" visibility="public" procflags="overload">
        <parameters>
          <parameter name="R" type="TJclRational" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="Multiply" visibility="public" procflags="overload">
        <parameters>
          <parameter name="V" type="Extended" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="Multiply" visibility="public" procflags="overload">
        <parameters>
          <parameter name="V" type="Integer" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="Reciprocal" visibility="public">
      </procedure>
      <procedure name="Divide" visibility="public" procflags="overload">
        <parameters>
          <parameter name="R" type="TJclRational" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="Divide" visibility="public" procflags="overload">
        <parameters>
          <parameter name="V" type="Extended" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="Divide" visibility="public" procflags="overload">
        <parameters>
          <parameter name="V" type="Integer" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="Sqrt" visibility="public">
      </procedure>
      <procedure name="Sqr" visibility="public">
      </procedure>
      <procedure name="Power" visibility="public" procflags="overload">
        <parameters>
          <parameter name="R" type="TJclRational" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="Power" visibility="public" procflags="overload">
        <parameters>
          <parameter name="V" type="Integer" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="Power" visibility="public" procflags="overload">
        <parameters>
          <parameter name="V" type="Extended" paramflags="const" />
        </parameters>
      </procedure>
    </members>
  </class>
  <class name="EJclMathError">
    <ancestor name="EJclError" namespace="JclBase">
      <methodref name="CreateResRec" visibility="public">
      </methodref>
      <methodref name="CreateResRecFmt" visibility="public">
      </methodref>
      <ancestor name="Exception" namespace="SysUtils">
        <methodref name="Create" visibility="public">
        </methodref>
        <methodref name="CreateFmt" visibility="public">
        </methodref>
        <methodref name="CreateRes" visibility="public">
        </methodref>
        <methodref name="CreateRes" visibility="public">
        </methodref>
        <methodref name="CreateResFmt" visibility="public">
        </methodref>
        <methodref name="CreateResFmt" visibility="public">
        </methodref>
        <methodref name="CreateHelp" visibility="public">
        </methodref>
        <methodref name="CreateFmtHelp" visibility="public">
        </methodref>
        <methodref name="CreateResHelp" visibility="public">
        </methodref>
        <methodref name="CreateResHelp" visibility="public">
        </methodref>
        <methodref name="CreateResFmtHelp" visibility="public">
        </methodref>
        <methodref name="CreateResFmtHelp" visibility="public">
        </methodref>
        <propertyref name="HelpContext" visibility="public">
        </propertyref>
        <propertyref name="Message" visibility="public">
        </propertyref>
        <ancestor name="TObject" namespace="System">
          <methodref name="Create" visibility="public">
          </methodref>
          <methodref name="Free" visibility="public">
          </methodref>
          <methodref name="InitInstance" visibility="public">
          </methodref>
          <methodref name="CleanupInstance" visibility="public">
          </methodref>
          <methodref name="ClassType" visibility="public">
          </methodref>
          <methodref name="ClassName" visibility="public">
          </methodref>
          <methodref name="ClassNameIs" visibility="public">
          </methodref>
          <methodref name="ClassParent" visibility="public">
          </methodref>
          <methodref name="ClassInfo" visibility="public">
          </methodref>
          <methodref name="InstanceSize" visibility="public">
          </methodref>
          <methodref name="InheritsFrom" visibility="public">
          </methodref>
          <methodref name="MethodAddress" visibility="public">
          </methodref>
          <methodref name="MethodName" visibility="public">
          </methodref>
          <methodref name="FieldAddress" visibility="public">
          </methodref>
          <methodref name="GetInterface" visibility="public">
          </methodref>
          <methodref name="GetInterfaceEntry" visibility="public">
          </methodref>
          <methodref name="GetInterfaceTable" visibility="public">
          </methodref>
          <methodref name="SafeCallException" visibility="public">
          </methodref>
          <methodref name="AfterConstruction" visibility="public">
          </methodref>
          <methodref name="BeforeDestruction" visibility="public">
          </methodref>
          <methodref name="Dispatch" visibility="public">
          </methodref>
          <methodref name="DefaultHandler" visibility="public">
          </methodref>
          <methodref name="NewInstance" visibility="public">
          </methodref>
          <methodref name="FreeInstance" visibility="public">
          </methodref>
          <methodref name="Destroy" visibility="public">
          </methodref>
        </ancestor>
      </ancestor>
    </ancestor>
  </class>
  <class name="EJclNaNSignal">
    <ancestor name="EJclMathError" namespace="JclMath_max">
      <ancestor name="EJclError" namespace="JclBase">
        <methodref name="CreateResRec" visibility="public">
        </methodref>
        <methodref name="CreateResRecFmt" visibility="public">
        </methodref>
        <ancestor name="Exception" namespace="SysUtils">
          <methodref name="Create" visibility="public">
          </methodref>
          <methodref name="CreateFmt" visibility="public">
          </methodref>
          <methodref name="CreateRes" visibility="public">
          </methodref>
          <methodref name="CreateRes" visibility="public">
          </methodref>
          <methodref name="CreateResFmt" visibility="public">
          </methodref>
          <methodref name="CreateResFmt" visibility="public">
          </methodref>
          <methodref name="CreateHelp" visibility="public">
          </methodref>
          <methodref name="CreateFmtHelp" visibility="public">
          </methodref>
          <methodref name="CreateResHelp" visibility="public">
          </methodref>
          <methodref name="CreateResHelp" visibility="public">
          </methodref>
          <methodref name="CreateResFmtHelp" visibility="public">
          </methodref>
          <methodref name="CreateResFmtHelp" visibility="public">
          </methodref>
          <propertyref name="HelpContext" visibility="public">
          </propertyref>
          <propertyref name="Message" visibility="public">
          </propertyref>
          <ancestor name="TObject" namespace="System">
            <methodref name="Create" visibility="public">
            </methodref>
            <methodref name="Free" visibility="public">
            </methodref>
            <methodref name="InitInstance" visibility="public">
            </methodref>
            <methodref name="CleanupInstance" visibility="public">
            </methodref>
            <methodref name="ClassType" visibility="public">
            </methodref>
            <methodref name="ClassName" visibility="public">
            </methodref>
            <methodref name="ClassNameIs" visibility="public">
            </methodref>
            <methodref name="ClassParent" visibility="public">
            </methodref>
            <methodref name="ClassInfo" visibility="public">
            </methodref>
            <methodref name="InstanceSize" visibility="public">
            </methodref>
            <methodref name="InheritsFrom" visibility="public">
            </methodref>
            <methodref name="MethodAddress" visibility="public">
            </methodref>
            <methodref name="MethodName" visibility="public">
            </methodref>
            <methodref name="FieldAddress" visibility="public">
            </methodref>
            <methodref name="GetInterface" visibility="public">
            </methodref>
            <methodref name="GetInterfaceEntry" visibility="public">
            </methodref>
            <methodref name="GetInterfaceTable" visibility="public">
            </methodref>
            <methodref name="SafeCallException" visibility="public">
            </methodref>
            <methodref name="AfterConstruction" visibility="public">
            </methodref>
            <methodref name="BeforeDestruction" visibility="public">
            </methodref>
            <methodref name="Dispatch" visibility="public">
            </methodref>
            <methodref name="DefaultHandler" visibility="public">
            </methodref>
            <methodref name="NewInstance" visibility="public">
            </methodref>
            <methodref name="FreeInstance" visibility="public">
            </methodref>
            <methodref name="Destroy" visibility="public">
            </methodref>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <field name="FTag" type="TNaNTag" visibility="private" />
      <constructor name="Create" visibility="public">
        <parameters>
          <parameter name="ATag" type="TNaNTag" />
          <parameter name="Dummy" type="Boolean">
            <value>
              False
            </value>
          </parameter>
        </parameters>
      </constructor>
      <property name="Tag" visibility="public" read="FTag" type="TNaNTag" />
    </members>
  </class>
  <array name="TCrc16Table" low="0" high="255">
    <element type="Word" />
  </array>
  <variable name="Crc16DefaultTable" type="TCrc16Table" visibility="public" />
  <variable name="Crc16DefaultStart" type="Cardinal" visibility="public" />
  <const name="Crc16PolynomCCITT" type="Integer">
    <value>
      $1021
    </value>
  </const>
  <const name="Crc16PolynomIBM" type="Integer">
    <value>
      $8005
    </value>
  </const>
  <const name="Crc16Bits" type="Integer">
    <value>
      $10
    </value>
  </const>
  <const name="Crc16Bytes" type="Integer">
    <value>
      $2
    </value>
  </const>
  <const name="Crc16HighBit" type="Integer">
    <value>
      $8000
    </value>
  </const>
  <const name="NotCrc16HighBit" type="Integer">
    <value>
      $7FFF
    </value>
  </const>
  <array name="TCrc32Table" low="0" high="255">
    <element type="Cardinal" />
  </array>
  <variable name="Crc32DefaultTable" type="TCrc32Table" visibility="public" />
  <variable name="Crc32DefaultStart" type="Cardinal" visibility="public" />
  <const name="Crc32PolynomIEEE" type="Integer">
    <value>
      $4C11DB7
    </value>
  </const>
  <const name="Crc32PolynomCastagnoli" type="Integer">
    <value>
      $1EDC6F41
    </value>
  </const>
  <const name="Crc32Koopman" type="Integer">
    <value>
      $741B8CD7
    </value>
  </const>
  <const name="Crc32Bits" type="Integer">
    <value>
      $20
    </value>
  </const>
  <const name="Crc32Bytes" type="Integer">
    <value>
      $4
    </value>
  </const>
  <const name="Crc32HighBit" type="Integer">
    <value>
      $80000000
    </value>
  </const>
  <const name="NotCrc32HighBit" type="Integer">
    <value>
      $7FFFFFFF
    </value>
  </const>
  <struct name="TRectComplex">
    <field name="Re" type="Extended" visibility="public" />
    <field name="Im" type="Extended" visibility="public" />
  </struct>
  <struct name="TPolarComplex">
    <field name="Radius" type="Extended" visibility="public" />
    <field name="Angle" type="Extended" visibility="public" />
  </struct>
  <variable name="ComplexTypeConversions" type="Cardinal" />
  <procedure name="SwapOrd" visibility="public">
    <parameters>
      <parameter name="X" type="Integer" paramflags="var" />
      <parameter name="Y" type="Integer" paramflags="var" />
    </parameters>
  </procedure>
  <function name="DoubleToHex" visibility="public">
    <parameters>
      <parameter name="D" type="Double" paramflags="const" />
      <retval type="string" />
    </parameters>
  </function>
  <function name="HexToDouble" visibility="public">
    <parameters>
      <parameter name="Hex" type="string" paramflags="const" />
      <retval type="Double" />
    </parameters>
  </function>
  <function name="DegToRad" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Value" type="Extended" paramflags="const" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="DegToRad" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Value" type="Double" paramflags="const" />
      <retval type="Double" />
    </parameters>
  </function>
  <function name="DegToRad" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Value" type="Single" paramflags="const" />
      <retval type="Single" />
    </parameters>
  </function>
  <procedure name="FastDegToRad" visibility="public">
  </procedure>
  <function name="RadToDeg" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Value" type="Extended" paramflags="const" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="RadToDeg" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Value" type="Double" paramflags="const" />
      <retval type="Double" />
    </parameters>
  </function>
  <function name="RadToDeg" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Value" type="Single" paramflags="const" />
      <retval type="Single" />
    </parameters>
  </function>
  <procedure name="FastRadToDeg" visibility="public">
  </procedure>
  <function name="GradToRad" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Value" type="Extended" paramflags="const" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="GradToRad" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Value" type="Double" paramflags="const" />
      <retval type="Double" />
    </parameters>
  </function>
  <function name="GradToRad" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Value" type="Single" paramflags="const" />
      <retval type="Single" />
    </parameters>
  </function>
  <procedure name="FastGradToRad" visibility="public">
  </procedure>
  <function name="RadToGrad" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Value" type="Extended" paramflags="const" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="RadToGrad" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Value" type="Double" paramflags="const" />
      <retval type="Double" />
    </parameters>
  </function>
  <function name="RadToGrad" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Value" type="Single" paramflags="const" />
      <retval type="Single" />
    </parameters>
  </function>
  <procedure name="FastRadToGrad" visibility="public">
  </procedure>
  <function name="DegToGrad" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Value" type="Extended" paramflags="const" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="DegToGrad" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Value" type="Double" paramflags="const" />
      <retval type="Double" />
    </parameters>
  </function>
  <function name="DegToGrad" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Value" type="Single" paramflags="const" />
      <retval type="Single" />
    </parameters>
  </function>
  <procedure name="FastDegToGrad" visibility="public">
  </procedure>
  <function name="GradToDeg" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Value" type="Extended" paramflags="const" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="GradToDeg" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Value" type="Double" paramflags="const" />
      <retval type="Double" />
    </parameters>
  </function>
  <function name="GradToDeg" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Value" type="Single" paramflags="const" />
      <retval type="Single" />
    </parameters>
  </function>
  <procedure name="FastGradToDeg" visibility="public">
  </procedure>
  <procedure name="DomainCheck" visibility="public">
    <parameters>
      <parameter name="Err" type="Boolean" />
    </parameters>
  </procedure>
  <function name="LogBase10" visibility="public">
    <parameters>
      <parameter name="X" type="Extended" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="LogBase2" visibility="public">
    <parameters>
      <parameter name="X" type="Extended" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="LogBaseN" visibility="public">
    <parameters>
      <parameter name="Base" type="Extended" />
      <parameter name="X" type="Extended" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="ArcCos" visibility="public">
    <parameters>
      <parameter name="X" type="Extended" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="ArcCot" visibility="public">
    <parameters>
      <parameter name="X" type="Extended" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="ArcCsc" visibility="public">
    <parameters>
      <parameter name="X" type="Extended" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="ArcSec" visibility="public">
    <parameters>
      <parameter name="X" type="Extended" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="ArcSin" visibility="public">
    <parameters>
      <parameter name="X" type="Extended" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="Cos" visibility="public" procflags="overload">
    <parameters>
      <parameter name="X" type="Extended" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="Cot" visibility="public" procflags="overload">
    <parameters>
      <parameter name="X" type="Extended" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="Coversine" visibility="public">
    <parameters>
      <parameter name="X" type="Extended" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="Csc" visibility="public" procflags="overload">
    <parameters>
      <parameter name="X" type="Extended" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="Exsecans" visibility="public">
    <parameters>
      <parameter name="X" type="Extended" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="Haversine" visibility="public">
    <parameters>
      <parameter name="X" type="Extended" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="Sec" visibility="public" procflags="overload">
    <devnotes>
      SinCos(2.0 * Z.Re, ASin, ACos);
    </devnotes>
    <parameters>
      <parameter name="X" type="Extended" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="Sin" visibility="public" procflags="overload">
    <parameters>
      <parameter name="X" type="Extended" />
      <retval type="Extended" />
    </parameters>
  </function>
  <procedure name="SinCosE" visibility="public">
    <parameters>
      <parameter name="X" type="Extended" />
      <parameter name="Sin" type="Extended" paramflags="out" />
      <parameter name="Cos" type="Extended" paramflags="out" />
    </parameters>
  </procedure>
  <procedure name="SinCos" visibility="public" procflags="overload">
    <parameters>
      <parameter name="X" type="Double" />
      <parameter name="Sin" type="Double" paramflags="out" />
      <parameter name="Cos" type="Double" paramflags="out" />
    </parameters>
  </procedure>
  <procedure name="SinCos" visibility="public" procflags="overload">
    <parameters>
      <parameter name="X" type="Single" />
      <parameter name="Sin" type="Single" paramflags="out" />
      <parameter name="Cos" type="Single" paramflags="out" />
    </parameters>
  </procedure>
  <function name="Tan" visibility="public" procflags="overload">
    <parameters>
      <parameter name="X" type="Extended" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="Versine" visibility="public">
    <parameters>
      <parameter name="X" type="Extended" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="ArcCosH" visibility="public">
    <parameters>
      <parameter name="X" type="Extended" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="ArcCotH" visibility="public">
    <parameters>
      <parameter name="X" type="Extended" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="ArcCscH" visibility="public">
    <parameters>
      <parameter name="X" type="Extended" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="ArcSecH" visibility="public">
    <parameters>
      <parameter name="X" type="Extended" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="ArcTanH" visibility="public">
    <parameters>
      <parameter name="X" type="Extended" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="CosH" visibility="public" procflags="overload">
    <parameters>
      <parameter name="X" type="Extended" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="CotH" visibility="public" procflags="overload">
    <parameters>
      <parameter name="X" type="Extended" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="CscH" visibility="public" procflags="overload">
    <parameters>
      <parameter name="X" type="Extended" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="SecH" visibility="public" procflags="overload">
    <parameters>
      <parameter name="X" type="Extended" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="SinH" visibility="public" procflags="overload">
    <parameters>
      <parameter name="X" type="Extended" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="TanH" visibility="public" procflags="overload">
    <parameters>
      <parameter name="X" type="Extended" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="DegMinSecToFloat" visibility="public">
    <parameters>
      <parameter name="Degs" type="Extended" paramflags="const" />
      <parameter name="Mins" type="Extended" paramflags="const" />
      <parameter name="Secs" type="Extended" paramflags="const" />
      <retval type="Extended" />
    </parameters>
  </function>
  <procedure name="FloatToDegMinSec" visibility="public">
    <parameters>
      <parameter name="X" type="Extended" paramflags="const" />
      <parameter name="Degs" type="Extended" paramflags="var" />
      <parameter name="Mins" type="Extended" paramflags="var" />
      <parameter name="Secs" type="Extended" paramflags="var" />
    </parameters>
  </procedure>
  <function name="Exp" visibility="public" procflags="overload">
    <parameters>
      <parameter name="X" type="Extended" paramflags="const" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="PowerJ" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Base" type="Extended" paramflags="const" />
      <parameter name="Exponent" type="Extended" paramflags="const" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="PowerIntJ" visibility="public" procflags="overload">
    <parameters>
      <parameter name="X" type="Extended" paramflags="const" />
      <parameter name="N" type="Integer" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="TenToY" visibility="public">
    <parameters>
      <parameter name="Y" type="Extended" paramflags="const" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="TruncPower" visibility="public">
    <parameters>
      <parameter name="Base" type="Extended" paramflags="const" />
      <parameter name="Exponent" type="Extended" paramflags="const" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="TwoToY" visibility="public">
    <parameters>
      <parameter name="Y" type="Extended" paramflags="const" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="IsFloatZero" visibility="public">
    <parameters>
      <parameter name="X" type="Extended" paramflags="const" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="FloatsEqual" visibility="public">
    <parameters>
      <parameter name="X" type="Extended" paramflags="const" />
      <parameter name="Y" type="Extended" paramflags="const" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="MaxFloat" visibility="public">
    <parameters>
      <parameter name="X" type="Extended" paramflags="const" />
      <parameter name="Y" type="Extended" paramflags="const" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="MinFloat" visibility="public">
    <parameters>
      <parameter name="X" type="Extended" paramflags="const" />
      <parameter name="Y" type="Extended" paramflags="const" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="ModFloat" visibility="public">
    <parameters>
      <parameter name="X" type="Extended" paramflags="const" />
      <parameter name="Y" type="Extended" paramflags="const" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="RemainderFloat" visibility="public">
    <parameters>
      <parameter name="X" type="Extended" paramflags="const" />
      <parameter name="Y" type="Extended" paramflags="const" />
      <retval type="Extended" />
    </parameters>
  </function>
  <procedure name="SwapFloats" visibility="public">
    <parameters>
      <parameter name="X" type="Extended" paramflags="var" />
      <parameter name="Y" type="Extended" paramflags="var" />
    </parameters>
  </procedure>
  <procedure name="CalcMachineEpsSingle" visibility="public">
  </procedure>
  <procedure name="CalcMachineEpsDouble" visibility="public">
  </procedure>
  <procedure name="CalcMachineEpsExtended" visibility="public">
  </procedure>
  <procedure name="CalcMachineEps" visibility="public">
  </procedure>
  <procedure name="SetPrecisionToleranceToEpsilon" visibility="public">
  </procedure>
  <function name="SetPrecisionTolerance" visibility="public">
    <parameters>
      <parameter name="NewTolerance" type="Extended" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="Ceiling" visibility="public">
    <parameters>
      <parameter name="X" type="Extended" paramflags="const" />
      <retval type="Integer" />
    </parameters>
  </function>
  <function name="CommercialRound" visibility="public">
    <parameters>
      <parameter name="X" type="Extended" paramflags="const" />
      <retval type="Int64" />
    </parameters>
  </function>
  <function name="Factorial" visibility="public">
    <parameters>
      <parameter name="N" type="Integer" paramflags="const" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="FloorJ" visibility="public">
    <parameters>
      <parameter name="X" type="Extended" paramflags="const" />
      <retval type="Integer" />
    </parameters>
  </function>
  <function name="GCD" visibility="public">
    <parameters>
      <parameter name="X" type="Cardinal" />
      <parameter name="Y" type="Cardinal" />
      <retval type="Cardinal" />
    </parameters>
  </function>
  <function name="ISqrt" visibility="public">
    <parameters>
      <parameter name="I" type="Smallint" paramflags="const" />
      <retval type="Smallint" />
    </parameters>
  </function>
  <function name="LCM" visibility="public">
    <parameters>
      <parameter name="X" type="Cardinal" paramflags="const" />
      <parameter name="Y" type="Cardinal" paramflags="const" />
      <retval type="Cardinal" />
    </parameters>
  </function>
  <function name="NormalizeAngle" visibility="public">
    <parameters>
      <parameter name="Angle" type="Extended" paramflags="const" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="Pythagoras" visibility="public">
    <parameters>
      <parameter name="X" type="Extended" paramflags="const" />
      <parameter name="Y" type="Extended" paramflags="const" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="Sgn" visibility="public">
    <parameters>
      <parameter name="X" type="Extended" paramflags="const" />
      <retval type="Integer" />
    </parameters>
  </function>
  <function name="Signe" visibility="public">
    <parameters>
      <parameter name="X" type="Extended" paramflags="const" />
      <parameter name="Y" type="Extended" paramflags="const" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="Ackermann" visibility="public">
    <parameters>
      <parameter name="A" type="Integer" paramflags="const" />
      <parameter name="B" type="Integer" paramflags="const" />
      <retval type="Integer" />
    </parameters>
  </function>
  <function name="Fibonacci" visibility="public">
    <parameters>
      <parameter name="N" type="Integer" paramflags="const" />
      <retval type="Integer" />
    </parameters>
  </function>
  <function name="EnsureRange" visibility="public" procflags="overload">
    <parameters>
      <parameter name="AValue" type="Integer" paramflags="const" />
      <parameter name="AMin" type="Integer" paramflags="const" />
      <parameter name="AMax" type="Integer" paramflags="const" />
      <retval type="Integer" />
    </parameters>
  </function>
  <function name="EnsureRange" visibility="public" procflags="overload">
    <parameters>
      <parameter name="AValue" type="Int64" paramflags="const" />
      <parameter name="AMin" type="Int64" paramflags="const" />
      <parameter name="AMax" type="Int64" paramflags="const" />
      <retval type="Int64" />
    </parameters>
  </function>
  <function name="EnsureRange" visibility="public" procflags="overload">
    <parameters>
      <parameter name="AValue" type="Double" paramflags="const" />
      <parameter name="AMin" type="Double" paramflags="const" />
      <parameter name="AMax" type="Double" paramflags="const" />
      <retval type="Double" />
    </parameters>
  </function>
  <function name="IsPrimeTD" visibility="public">
    <parameters>
      <parameter name="N" type="Cardinal" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="IsPrimeRM" visibility="public">
    <parameters>
      <parameter name="N" type="Cardinal" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="PrimeFactors" visibility="public">
    <parameters>
      <parameter name="N" type="Cardinal" />
      <retval type="TDynCardinalArray" />
    </parameters>
  </function>
  <function name="IsPrimeFactor" visibility="public">
    <parameters>
      <parameter name="F" type="Cardinal" paramflags="const" />
      <parameter name="N" type="Cardinal" paramflags="const" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="IsRelativePrime" visibility="public">
    <parameters>
      <parameter name="X" type="Cardinal" paramflags="const" />
      <parameter name="Y" type="Cardinal" paramflags="const" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <procedure name="SetPrimalityTest" visibility="public">
    <parameters>
      <parameter name="Method" type="TPrimalityTestMethod" paramflags="const" />
    </parameters>
  </procedure>
  <function name="FloatingPointClass" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Value" type="Single" paramflags="const" />
      <retval type="TFloatingPointClass" />
    </parameters>
  </function>
  <function name="FloatingPointClass" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Value" type="Double" paramflags="const" />
      <retval type="TFloatingPointClass" />
    </parameters>
  </function>
  <function name="FloatingPointClass" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Value" type="Extended" paramflags="const" />
      <retval type="TFloatingPointClass" />
    </parameters>
  </function>
  <function name="IsInfinite" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Value" type="Single" paramflags="const" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="IsInfinite" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Value" type="Double" paramflags="const" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="IsInfinite" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Value" type="Extended" paramflags="const" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="IsNaN" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Value" type="Single" paramflags="const" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="IsNaN" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Value" type="Double" paramflags="const" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="IsNaN" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Value" type="Extended" paramflags="const" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="GetNaNTag" visibility="public" procflags="overload">
    <parameters>
      <parameter name="NaN" type="Single" paramflags="const" />
      <retval type="TNaNTag" />
    </parameters>
  </function>
  <function name="GetNaNTag" visibility="public" procflags="overload">
    <parameters>
      <parameter name="NaN" type="Double" paramflags="const" />
      <retval type="TNaNTag" />
    </parameters>
  </function>
  <function name="GetNaNTag" visibility="public" procflags="overload">
    <parameters>
      <parameter name="NaN" type="Extended" paramflags="const" />
      <retval type="TNaNTag" />
    </parameters>
  </function>
  <procedure name="MakeQuietNaN" visibility="public" procflags="overload">
    <parameters>
      <parameter name="X" type="Single" paramflags="var" />
      <parameter name="Tag" type="TNaNTag">
        <value>
          $0
        </value>
      </parameter>
    </parameters>
  </procedure>
  <procedure name="MakeQuietNaN" visibility="public" procflags="overload">
    <parameters>
      <parameter name="X" type="Double" paramflags="var" />
      <parameter name="Tag" type="TNaNTag">
        <value>
          $0
        </value>
      </parameter>
    </parameters>
  </procedure>
  <procedure name="MakeQuietNaN" visibility="public" procflags="overload">
    <parameters>
      <parameter name="X" type="Extended" paramflags="var" />
      <parameter name="Tag" type="TNaNTag">
        <value>
          $0
        </value>
      </parameter>
    </parameters>
  </procedure>
  <procedure name="MakeSignalingNaN" visibility="public" procflags="overload">
    <parameters>
      <parameter name="X" type="Single" paramflags="var" />
      <parameter name="Tag" type="TNaNTag">
        <value>
          $0
        </value>
      </parameter>
    </parameters>
  </procedure>
  <procedure name="MakeSignalingNaN" visibility="public" procflags="overload">
    <parameters>
      <parameter name="X" type="Double" paramflags="var" />
      <parameter name="Tag" type="TNaNTag">
        <value>
          $0
        </value>
      </parameter>
    </parameters>
  </procedure>
  <procedure name="MakeSignalingNaN" visibility="public" procflags="overload">
    <parameters>
      <parameter name="X" type="Extended" paramflags="var" />
      <parameter name="Tag" type="TNaNTag">
        <value>
          $0
        </value>
      </parameter>
    </parameters>
  </procedure>
  <procedure name="MineSingleBuffer" visibility="public">
    <parameters>
      <parameter name="Buffer" paramflags="var" />
      <parameter name="Count" type="Integer" />
      <parameter name="StartTag" type="TNaNTag">
        <value>
          $0
        </value>
      </parameter>
    </parameters>
  </procedure>
  <procedure name="MineDoubleBuffer" visibility="public">
    <parameters>
      <parameter name="Buffer" paramflags="var" />
      <parameter name="Count" type="Integer" />
      <parameter name="StartTag" type="TNaNTag">
        <value>
          $0
        </value>
      </parameter>
    </parameters>
  </procedure>
  <function name="MinedSingleArray" visibility="public">
    <parameters>
      <parameter name="Length" type="Integer" />
      <retval type="TDynSingleArray" />
    </parameters>
  </function>
  <function name="MinedDoubleArray" visibility="public">
    <parameters>
      <parameter name="Length" type="Integer" />
      <retval type="TDynDoubleArray" />
    </parameters>
  </function>
  <function name="IsSpecialValue" visibility="public">
    <parameters>
      <parameter name="X" type="Extended" paramflags="const" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="GetParity" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Buffer" type="TDynByteArray" />
      <parameter name="Len" type="Integer" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="GetParity" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Buffer" type="PByte" />
      <parameter name="Len" type="Integer" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <procedure name="InitCrc16" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Polynom" type="Word" />
      <parameter name="Start" type="Word" />
      <parameter name="Crc16Table" type="TCrc16Table" paramflags="out" />
    </parameters>
  </procedure>
  <procedure name="SetRectComplexFormatStr" visibility="public">
    <parameters>
      <parameter name="S" type="string" paramflags="const" />
    </parameters>
  </procedure>
  <procedure name="SetPolarComplexFormatStr" visibility="public">
    <parameters>
      <parameter name="S" type="string" paramflags="const" />
    </parameters>
  </procedure>
  <function name="ComplexToStr" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Z" type="TRectComplex" paramflags="const" />
      <retval type="string" />
    </parameters>
  </function>
  <function name="ComplexToStr" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Z" type="TPolarComplex" paramflags="const" />
      <retval type="string" />
    </parameters>
  </function>
  <function name="RectComplex" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Re" type="Extended" paramflags="const" />
      <parameter name="Im" type="Extended" paramflags="const">
        <value>
          0
        </value>
      </parameter>
      <retval type="TRectComplex" />
    </parameters>
  </function>
  <function name="RectComplex" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Z" type="TPolarComplex" paramflags="const" />
      <retval type="TRectComplex" />
    </parameters>
  </function>
  <function name="PolarComplex" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Radius" type="Extended" paramflags="const" />
      <parameter name="Angle" type="Extended" paramflags="const">
        <value>
          0
        </value>
      </parameter>
      <retval type="TPolarComplex" />
    </parameters>
  </function>
  <function name="PolarComplex" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Z" type="TRectComplex" paramflags="const" />
      <retval type="TPolarComplex" />
    </parameters>
  </function>
  <function name="Equal" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Z1" type="TRectComplex" paramflags="const" />
      <parameter name="Z2" type="TRectComplex" paramflags="const" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="Equal" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Z1" type="TPolarComplex" paramflags="const" />
      <parameter name="Z2" type="TPolarComplex" paramflags="const" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="IsZero" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Z" type="TRectComplex" paramflags="const" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="IsZero" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Z" type="TPolarComplex" paramflags="const" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="IsInfinite" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Z" type="TRectComplex" paramflags="const" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="IsInfinite" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Z" type="TPolarComplex" paramflags="const" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="Norm" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Z" type="TRectComplex" paramflags="const" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="Norm" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Z" type="TPolarComplex" paramflags="const" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="AbsSqr" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Z" type="TRectComplex" paramflags="const" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="AbsSqr" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Z" type="TPolarComplex" paramflags="const" />
      <retval type="Extended" />
    </parameters>
  </function>
  <function name="Conjugate" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Z" type="TRectComplex" paramflags="const" />
      <retval type="TRectComplex" />
    </parameters>
  </function>
  <function name="Conjugate" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Z" type="TPolarComplex" paramflags="const" />
      <retval type="TPolarComplex" />
    </parameters>
  </function>
  <function name="Inv" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Z" type="TRectComplex" paramflags="const" />
      <retval type="TRectComplex" />
    </parameters>
  </function>
  <function name="Inv" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Z" type="TPolarComplex" paramflags="const" />
      <retval type="TPolarComplex" />
    </parameters>
  </function>
  <function name="Neg" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Z" type="TRectComplex" paramflags="const" />
      <retval type="TRectComplex" />
    </parameters>
  </function>
  <function name="Neg" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Z" type="TPolarComplex" paramflags="const" />
      <retval type="TPolarComplex" />
    </parameters>
  </function>
  <function name="Sum" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Z1" type="TRectComplex" paramflags="const" />
      <parameter name="Z2" type="TRectComplex" paramflags="const" />
      <retval type="TRectComplex" />
    </parameters>
  </function>
  <function name="Sum" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Z" paramflags="const">
        <array name="Z">
          <element type="TRectComplex" />
        </array>
      </parameter>
      <retval type="TRectComplex" />
    </parameters>
  </function>
  <function name="Diff" visibility="public">
    <parameters>
      <parameter name="Z1" type="TRectComplex" paramflags="const" />
      <parameter name="Z2" type="TRectComplex" paramflags="const" />
      <retval type="TRectComplex" />
    </parameters>
  </function>
  <function name="Product" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Z1" type="TRectComplex" paramflags="const" />
      <parameter name="Z2" type="TRectComplex" paramflags="const" />
      <retval type="TRectComplex" />
    </parameters>
  </function>
  <function name="Product" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Z1" type="TPolarComplex" paramflags="const" />
      <parameter name="Z2" type="TPolarComplex" paramflags="const" />
      <retval type="TPolarComplex" />
    </parameters>
  </function>
  <function name="Product" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Z" paramflags="const">
        <array name="Z">
          <element type="TPolarComplex" />
        </array>
      </parameter>
      <retval type="TPolarComplex" />
    </parameters>
  </function>
  <function name="Quotient" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Z1" type="TRectComplex" paramflags="const" />
      <parameter name="Z2" type="TRectComplex" paramflags="const" />
      <retval type="TRectComplex" />
    </parameters>
  </function>
  <function name="Quotient" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Z1" type="TPolarComplex" paramflags="const" />
      <parameter name="Z2" type="TPolarComplex" paramflags="const" />
      <retval type="TPolarComplex" />
    </parameters>
  </function>
  <function name="Ln" visibility="public">
    <parameters>
      <parameter name="Z" type="TPolarComplex" paramflags="const" />
      <retval type="TRectComplex" />
    </parameters>
  </function>
  <function name="Exp" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Z" type="TRectComplex" paramflags="const" />
      <retval type="TPolarComplex" />
    </parameters>
  </function>
  <function name="Power" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Z" type="TPolarComplex" paramflags="const" />
      <parameter name="Exponent" type="Extended" paramflags="const" />
      <retval type="TPolarComplex" />
    </parameters>
  </function>
  <function name="Power" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Z" type="TPolarComplex" paramflags="const" />
      <parameter name="Exponent" type="TRectComplex" paramflags="const" />
      <retval type="TPolarComplex" />
    </parameters>
  </function>
  <function name="PowerInt" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Z" type="TPolarComplex" paramflags="const" />
      <parameter name="Exponent" type="Integer" paramflags="const" />
      <retval type="TPolarComplex" />
    </parameters>
  </function>
  <function name="Root" visibility="public">
    <parameters>
      <parameter name="Z" type="TPolarComplex" paramflags="const" />
      <parameter name="K" type="Cardinal" paramflags="const" />
      <parameter name="N" type="Cardinal" paramflags="const" />
      <retval type="TPolarComplex" />
    </parameters>
  </function>
  <function name="Cos" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Z" type="TRectComplex" paramflags="const" />
      <retval type="TRectComplex" />
    </parameters>
  </function>
  <function name="Sin" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Z" type="TRectComplex" paramflags="const" />
      <retval type="TRectComplex" />
    </parameters>
  </function>
  <function name="Tan" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Z" type="TRectComplex" paramflags="const" />
      <retval type="TRectComplex" />
    </parameters>
  </function>
  <function name="Cot" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Z" type="TRectComplex" paramflags="const" />
      <retval type="TRectComplex" />
    </parameters>
  </function>
  <function name="Sec" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Z" type="TRectComplex" paramflags="const" />
      <retval type="TRectComplex" />
    </parameters>
  </function>
  <function name="Csc" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Z" type="TRectComplex" paramflags="const" />
      <retval type="TRectComplex" />
    </parameters>
  </function>
  <function name="CosH" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Z" type="TRectComplex" paramflags="const" />
      <retval type="TRectComplex" />
    </parameters>
  </function>
  <function name="SinH" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Z" type="TRectComplex" paramflags="const" />
      <retval type="TRectComplex" />
    </parameters>
  </function>
  <function name="TanH" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Z" type="TRectComplex" paramflags="const" />
      <retval type="TRectComplex" />
    </parameters>
  </function>
  <function name="CotH" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Z" type="TRectComplex" paramflags="const" />
      <retval type="TRectComplex" />
    </parameters>
  </function>
  <function name="SecH" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Z" type="TRectComplex" paramflags="const" />
      <retval type="TRectComplex" />
    </parameters>
  </function>
  <function name="CscH" visibility="public" procflags="overload">
    <parameters>
      <parameter name="Z" type="TRectComplex" paramflags="const" />
      <retval type="TRectComplex" />
    </parameters>
  </function>
</namespace>
