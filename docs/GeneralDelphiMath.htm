<html>

<head>
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<title>efg's Delphi Math Functions: General Functions</title>
</head>

<body background="../../Background.gif" bgcolor="#FFFFFF">
<div align="center"><center>

<table border="0">
  <tr>
    <td align="center"><font color="#0000FF" size="6" face="Arial"><em><a href="../../../index.html"><img border="0" src="../../../WebGraphics/Buttons/efglab.jpg" width="300" height="44"></a></em></font></td>
    <td align="center"></td>
    <td align="center"><a href="../../../Library/Delphi/index.html"><img border="0" src="../../../WebGraphics/Buttons/DelphiReferenceLibrary.jpg" width="394" height="44"></a></td>
  </tr>
</table>
</center></div>

<p align="center"><a href="../../../Library/Delphi/MathFunctions/index.html"><font size="6" face="Arial">Delphi/Kylix Math Functions</font></a></p>

<p align="center"><font size="6" face="Arial">General Math Functions</font></p>

<hr>

<p align="center"><font color="#0000FF" face="Arial"><em>Contents</em></font></p>
<div align="center"><center>

<table border="0">
  <tr>
    <td>A. <a href="#Arithmetic">Arithmetic Functions</a></td>
  </tr>
  <tr>
    <td>B. <a href="#Logarithm">Logarithm/Exponential Functions</a></td>
  </tr>
  <tr>
    <td>C. <a href="#Trigonometric">Trigonometric Functions</a></td>
  </tr>
  <tr>
    <td>D. <a href="#Conversions">Conversions and Formatting</a></td>
  </tr>
  <tr>
    <td>E. <a href="#Financial">Financial Functions</a></td>
  </tr>
  <tr>
    <td>F. <a href="#Sorting">Sorting, Discrete Mathematics</a></td>
  </tr>
  <tr>
    <td>G. <a href="#Miscellaneous">Miscellenaous</a></td>
  </tr>
  <tr>
    <td><strong>H. </strong><a href="#Sources"><strong>Sources Key</strong></a></td>
  </tr>
</table>
</center></div>

<hr>

<p align="center"><font size="6"><a name="Arithmetic"></a>A. Arithmetic Functions<br>
</font><font size="3">Note:&nbsp; <em>min</em>, <em>max</em>, <em>sum, average</em>, etc.
functions are in the <a href="StatisticsAndProbability.htm">Statistics Section</a></font></p>
<div align="center"><center>

<table border="1">
  <tr>
    <td align="center" valign="top" width="120"><strong>Function Name</strong></td>
    <td align="center" valign="top" width="520"><strong>Description</strong></td>
    <td align="center" valign="top" width="120"><a href="#Sources"><strong>Source(s)</strong></a></td>
  </tr>
  <tr>
    <td width="120">abs</td>
    <td width="520"><font face="Courier New" size="3">Function Abs(X);</font><br>
    X is an integer-type or real-type expression.</td>
    <td width="120">system</td>
  </tr>
  <tr>
    <td valign="top" width="120">ceil<br>
    ceiling</td>
    <td valign="top" width="520"><font face="Courier New" size="3">Function
      Ceil(X: Extended):Integer;</font><br>
    rounds up: smallest integer &gt;= X, |X| &lt; MaxInt</td>
    <td valign="top" width="120">math<br>
    Clipper, AugMath</td>
  </tr>
  <tr>
    <td valign="top" width="120">CompMod</td>
    <td valign="top" width="520">floating point &quot;Comp&quot; modulus</td>
    <td valign="top" width="120">ESBMaths</td>
  </tr>
  <tr>
    <td valign="top" width="120">Cube</td>
    <td valign="top" width="520">x<sup>3</sup></td>
    <td valign="top" width="120">AugMath</td>
  </tr>
  <tr>
    <td valign="top" width="120">Cubic</td>
    <td valign="top" width="520">Optimized code for cubic equation<br>
      <a href="http://www.optimalcode.com/excubic.zip">www.optimalcode.com/excubic.zip</a>&nbsp;
    </td>
    <td valign="top" width="120">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" width="120">Dec</td>
    <td valign="top" width="520"><font face="Courier New" size="3">Procedure Dec(var X [ ; N: Longint
    ] );</font><br>
    X is a variable of an ordinal type (including Int64 in D4). <em>Dec(X)</em> corresponds to
    the statement <em>X := X - 1</em>, and <em>Dec(X, N)</em> corresponds to the statement <em>X
    := X - N.</em></td>
    <td valign="top" width="120">system</td>
  </tr>
  <tr>
    <td valign="top" width="120">DecLim, DecLimSI, DecLimW, DecLimI, DecLimL</td>
    <td valign="top" width="520">Decrements type to a limit.&nbsp; Below limit no decrement
    occurs.</td>
    <td valign="top" width="120">ESBMaths</td>
  </tr>
  <tr>
    <td valign="top" width="120">Distance</td>
    <td valign="top" width="520">Finding the distance between two TPoints. Also, see <em>hypot
    </em>below.</td>
    <td valign="top" width="120">MathX, ESBMaths</td>
  </tr>
  <tr>
    <td valign="top" width="120">div</td>
    <td valign="top" width="520">x div y, integer division operator, implemented as Delphi
    native operator</td>
    <td valign="top" width="120">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" width="120">DivMod</td>
    <td valign="top" width="520"><font face="Courier New"><small>procedure DivMod(Dividend:
    Integer; Divisor: Word;</small><br>
    <small>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    var Result, Remainder: Word); </small></font><p>Also see:&nbsp; MulDiv</td>
    <td valign="top" width="120">SysUtils (D3)</td>
  </tr>
  <tr>
    <td valign="top" width="120"><font size="3">ESBMagnitude</font></td>
    <td valign="top" width="520">returns magnitute of given value</td>
    <td valign="top" width="120">ESBMaths</td>
  </tr>
  <tr>
    <td valign="top" width="120"><font size="3">Exponent</font></td>
    <td valign="top" width="520">&nbsp;</td>
    <td valign="top" width="120">AugMath</td>
  </tr>
  <tr>
    <td valign="top" width="120">ExtMod, ExtRem</td>
    <td valign="top" width="520">floating point modulus, remainder</td>
    <td valign="top" width="120">ESBMaths</td>
  </tr>
  <tr>
    <td valign="top" width="120">Fibonacci sequence</td>
    <td width="520">Compute the N-th value in the Fibonacci sequence (0, 1, 1, 2, 3, 5, 8, 13,
    21, ...) directly by solving the recurrence relation. This is explained in math books or
    perhaps analysis of algorithms books.<p>u(N) = [ (0.5 + 0.5*SQRT(5))<sup>N</sup> - (0.5 - 0.5 *
      SQRT(5))<sup>N</sup> ] / SQRT(5)</p>
    <p>where u(N) is the Nth term in the sequence and SQRT(5) = square root of
    5. </td>
    <td width="120">&nbsp;</td>
  </tr>
  <tr>
    <td width="120">fix</td>
    <td width="520">&nbsp;</td>
    <td width="120">MathX</td>
  </tr>
  <tr>
    <td valign="top" width="120">FloatIsNegative<br>
      FloatIsPositive<br>
      FloatIsZero</td>
    <td valign="top" width="520">Compares if value is within specified tolerance of zero</td>
    <td valign="top" width="120">ESBMaths</td>
  </tr>
  <tr>
    <td valign="top" width="120">floor</td>
    <td valign="top" width="520"><font face="Courier New" size="3">Function
      Floor(X: Extended):
    Integer;</font><br>
    rounds down: largest integer &lt;= X, |X| &lt; MaxInt</td>
    <td valign="top" width="120">math, Clipper. MathX, AugMath</td>
  </tr>
  <tr>
    <td valign="top" width="120">fmod</td>
    <td valign="top" width="520">x mod y</td>
    <td valign="top" width="120">mathlib2(math387)</td>
  </tr>
  <tr>
    <td valign="top" width="120">frac</td>
    <td valign="top" width="520"><font face="Courier New" size="3">Function
      Frac(X: Real): Real;</font><br>
      Frac(X) = X - Int(X)<br>
    Fractional part of the floating-point argument</td>
    <td valign="top" width="120">system</td>
  </tr>
  <tr>
    <td valign="top" width="120">frexp</td>
    <td valign="top" width="520"><font face="Courier New" size="2">Procedure
      Frexp(X: Extended; var
    Mantissa: Extended; var Exponent: Integer) register;</font><br>
    <br>
    separates the mantissa and exponent</td>
    <td valign="top" width="120">math, MathX</td>
  </tr>
  <tr>
    <td valign="top" width="120"><font size="2">gcd</font></td>
    <td valign="top" width="520">greatest common divisor
      <p><a href="euclid.txt">Euclid's method</a> to determine the greatest common
      divisor of two integers.&nbsp;&nbsp;<a href="euclidr.txt"><br>
      Recursive solution.</a></p>
    </td>
    <td valign="top" width="120">AugMath,<br>
      ESBMaths</td>
  </tr>
  <tr>
    <td valign="top" width="120">Hi</td>
    <td valign="top" width="520"><font face="Courier New" size="2">Function Hi(X): Byte;</font><br>
    The Hi function returns the high-order byte of X as an unsigned value. X is an expression
    of type Integer or Word.</td>
    <td valign="top" width="120">System</td>
  </tr>
  <tr>
    <td valign="top" width="120">hypot,<br>
    EuclideanNorm,<br>
    Pythag,<br>
    Distance</td>
    <td valign="top" width="520"><font face="Courier New" size="2">Function
      Hypot(X, Y: Extended):
    Extended;</font><br>
    <br>
    SQRT(x<sup>2</sup> + y<sup>2</sup>)<br>
    Distance from (0,0) to (x,y). Also see <font face="Arial Narrow">norm</font>.</td>
    <td valign="top" width="120">math, EZmath, TPmath1(fmath), ESBMaths, MathX,
      AugMath</td>
  </tr>
  <tr>
    <td valign="top" width="120">Inc</td>
    <td valign="top" width="520"><font face="Courier New" size="3">Procedure Inc(var X [ ; N: Longint
    ] );</font><br>
    X is a variable of an ordinal type (including Int64 in D4). <em>Inc(X)</em> corresponds to
    the statement <em>X := X + 1</em>, and <em>Inc(X, N)</em> corresponds to the statement <em>X
    := X + N.</em></td>
    <td valign="top" width="120">system</td>
  </tr>
  <tr>
    <td valign="top" width="120">IncLim, IncLimSI, IncLimW, IncLimI, IncLimL</td>
    <td valign="top" width="520">Increments type to a limit.&nbsp; Above limit no increment
    occurs.</td>
    <td valign="top" width="120">ESBMaths</td>
  </tr>
  <tr>
    <td valign="top" width="120">int</td>
    <td valign="top" width="520"><font face="Courier New" size="2">Function
      Int(X: Real): Real;</font><br>
      Int(x) = x rounded toward zero<br>
    Integer part of the floating-point argument. See also <em>trunc</em>.
      <p><i><a href="http://www.amazon.com/exec/obidos/ASIN/1565926595/efgscomputlab">Delphi
      in a NutShell</a></i>, p. 241</p>
    </td>
    <td valign="top" width="120">system</td>
  </tr>
  <tr>
    <td valign="top" width="120">IsEqual</td>
    <td valign="top" width="520">Tests to see if two doubles are effectively equal. Floating
    point numbers are never exact, so we need an approximation. &nbsp; (<em><font face="Arial Narrow">efg</font></em>:&nbsp; not very general?)</td>
    <td valign="top" width="120">Calvert</td>
  </tr>
  <tr>
    <td valign="top" width="120">IsNumeric</td>
    <td valign="top" width="520"><font face="Courier New">Function IsNumeric(s: String) :
    Boolean;<br>
    &nbsp; VAR<br>
    &nbsp;&nbsp;&nbsp; Code: Integer;<br>
    &nbsp;&nbsp;&nbsp; Value: Double;<br>
    BEGIN<br>
    &nbsp; val(s, Value, Code);<br>
    &nbsp; Result := (Code = 0)<br>
    END;</font></td>
    <td valign="top" width="120">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" width="120">IsPositiveArray</td>
    <td valign="top" width="520">TRUE if all elements &gt; Tolerance value</td>
    <td valign="top" width="120">ESBMaths</td>
  </tr>
  <tr>
    <td valign="top" width="120">ISqrt</td>
    <td valign="top" width="520">Integer SQRT</td>
    <td valign="top" width="120">ESBMaths</td>
  </tr>
  <tr>
    <td valign="top" width="120">iSwap</td>
    <td valign="top" width="520">swap 2 integer</td>
    <td valign="top" width="120">TPmath1(fmath)</td>
  </tr>
  <tr>
    <td valign="top" width="120">lcd</td>
    <td valign="top" width="520">least common denominator (Euclid's algorithm)</td>
    <td valign="top" width="120">&lt;find source for this&gt;</td>
  </tr>
  <tr>
    <td valign="top" width="120">lcm</td>
    <td valign="top" width="520">least common multiple</td>
    <td valign="top" width="120">ESBMaths</td>
  </tr>
  <tr>
    <td valign="top" width="120">Lo</td>
    <td valign="top" width="520"><font face="Courier New" size="3">Function Lo(X): Byte;</font><br>
    The Lo function returns the low-order byte of X as an unsigned value. X is an expression
    of type Integer.</td>
    <td valign="top" width="120">System</td>
  </tr>
  <tr>
    <td width="120">MakeWord</td>
    <td width="520"><font face="Courier New" size="3">Function MakeWord(A, B: Byte): Word;</font></td>
    <td width="120">RxLib</td>
  </tr>
  <tr>
    <td width="120">Max, Min</td>
    <td width="520">&nbsp;</td>
    <td width="120">see <a href="StatisticsAndProbability.htm#Statistics">Statistics Functions</a></td>
  </tr>
  <tr>
    <td width="120">Mean, StdDev</td>
    <td width="520">&nbsp;</td>
    <td width="120">see <a href="StatisticsAndProbability.htm#Statistics">Statistics Functions</a></td>
  </tr>
  <tr>
    <td valign="top" width="120">mod</td>
    <td valign="top" width="520">x mod y, modulo or remainder operator.<br>
    Just like x DIV y gives the integer quotient, x MOD y gives the remainder from the
    division. Example: 25 MOD 9 = 7</td>
    <td valign="top" width="120">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" width="120">MulDiv</td>
    <td valign="top" width="520"><font face="Courier New" size="2">Function
    MulDiv(nNumber, nNumerator, nDenominator: Integer): Integer;</font><br>
    <br>
    Example: <font face="Courier New">MulDiv(value, 27, 100)</font> = 27% of value<br>
    <br>
    MulDiv rounds the result. For example, <font face="Courier New">MulDiv(57, 255, 217)</font>
    = 67, since 57*255/217 = 66.98.<p>Also see:&nbsp; DivMod</td>
    <td valign="top" width="120">Delphi Windows unit (D3)</td>
  </tr>
  <tr>
    <td valign="top" width="120">norm</td>
    <td valign="top" width="520"><font face="Courier New" size="2">Function Norm(const Data: array of
    Double): Extended;</font><br>
    Square root of the sum of squares.<br>
    Euclidean L2 norm: SQRT(SumOfSquares).<br>
    Example: norm([1, 3, 5]) = SQRT(1<sup>2 </sup>+ 3<sup>2</sup> + 5<sup>2</sup>)<br>
    use &quot;slice&quot; with open array parameter</td>
    <td valign="top" width="120">math,<br>
    EZmath</td>
  </tr>
  <tr>
    <td width="120">odd</td>
    <td width="520"><font face="Courier New" size="3">Function Odd(X: LongInt): Boolean;</font></td>
    <td width="120">system</td>
  </tr>
  <tr>
    <td width="120">pi</td>
    <td width="520"><font face="Courier New" size="3">Function Pi: Extended;</font></td>
    <td width="120">system</td>
  </tr>
  <tr>
    <td valign="top" width="120">poly</td>
    <td valign="top" width="520"><font face="Courier New" size="2">Function
      Poly(X: Extended; const
    Coefficients: array of Double): Extended;</font>
      <p>
    Example: <font face="Courier New">Poly(x, [ 1.0, -2.0, 1.0]) = x<sup>2</sup> - 2x
    + 1</font>. Polynomial evaluation with Horner's method. Use &quot;slice&quot; open array
    parameter for variable-sized polynomial</p>
    </td>
    <td valign="top" width="120">math, MathX</td>
  </tr>
  <tr>
    <td valign="top" width="120">poly</td>
    <td valign="top" width="520">Evaluate polynomial</td>
    <td valign="top" width="120">TPmath1 (polynom)</td>
  </tr>
  <tr>
    <td valign="top" width="120">RelativePrime</td>
    <td valign="top" width="520">determine if tow integers are relatively prime
      to each other</td>
    <td valign="top" width="120">ESBMaths</td>
  </tr>
  <tr>
    <td valign="top" width="120">RFrac</td>
    <td valign="top" width="520">Evaluates rational fraction</td>
    <td valign="top" width="120">TPmath1 (polynom)</td>
  </tr>
  <tr>
    <td valign="top" width="120">RootPol3</td>
    <td valign="top" width="520">Real roots of polynomial up to degree 3</td>
    <td valign="top" width="120">TPmath1 (polynom)</td>
  </tr>
  <tr>
    <td valign="top" width="120">round</td>
    <td valign="top" width="520"><font face="Courier New">Function Round(X: Extended):
      LongInt; (D1-D3)<br>
      Function Round(X: Extended): Int64; (D4)</font>
      <p>Round(x) rounds to nearest integer, or <b>in the case of a tie then to
      the nearest even integer.</b> Examples: Round(2.5) = 2, Round(+3.499999) =
      3, and Round(3.5) = 4.&nbsp; [Thanks to John Herbster for clarifying this
      explanation.]</p>
      <p>
    <a href="http://www.tempest-sw.com/freeware">Ray Lischner</a> has functions <i> GetRoundMode</i>
    and <i> SetRoundMode</i> to control rounding in his math10.zip.</p>
      <p><i><a href="http://www.amazon.com/exec/obidos/ASIN/1565926595/efgscomputlab">Delphi
      in a NutShell</a></i>, p. 324</p>
      <p>Note:&nbsp; <i>Trunc</i> is slower than <i>Round</i>.&nbsp; According
      to John Herbster in a newsgroup posting:&nbsp; <i>Trunc</i> has to save
      the FPU control word and change it twice.&nbsp; <i>Round</i> does not.&nbsp;</p>
    </td>
    <td valign="top" width="120">system</td>
  </tr>
  <tr>
    <td valign="top" width="120">SameFloat</td>
    <td valign="top" width="520">Compares if floats are within specified tolerance
      <p>(the initial tolerance value is ESBTolerance:&nbsp; Extended =
      5.0E-324;&nbsp; // MinDouble)</p>
    </td>
    <td valign="top" width="120">ESBMaths</td>
  </tr>
  <tr>
    <td valign="top" width="120">sgn</td>
    <td valign="top" width="520">sign</td>
    <td valign="top" width="120">TPmath1(fmath)</td>
  </tr>
  <tr>
    <td valign="top" width="120">Sgn, Sign</td>
    <td valign="top" width="520">sign</td>
    <td valign="top" width="120">ESBMaths, AugMath</td>
  </tr>
  <tr>
    <td valign="top" width="120">slice</td>
    <td valign="top" width="520"><font face="Courier New" size="3">Function Slice(var A: array; Count:
    Integer): array;</font><br>
    Slice returns a sub-section (a &quot;slice&quot;) of an array passed as an open array
    parameter. This allows dynamically allocated arrays to be passed as open array parameters.</td>
    <td valign="top" width="120">system</td>
  </tr>
  <tr>
    <td valign="top" width="120">sqr</td>
    <td valign="top" width="520"><font face="Courier New" size="3">Function
      Sqr(X: Extended):
    Extended;</font><br>
    squared: sqr(x) = x<sup>2</sup>
      <p>Delphi uses &quot;compiler magic&quot; so this &quot;function&quot;
      does not incur the normal overhead of a function call.</p>
    </td>
    <td valign="top" width="120">system</td>
  </tr>
  <tr>
    <td valign="top" width="120">sqrt</td>
    <td valign="top" width="520"><font face="Courier New" size="3">Function
      Sqrt(X: Extended):
    Extended;</font><br>
    square root: sqrt(x) = x<sup>0.5</sup></td>
    <td valign="top" width="120">system</td>
  </tr>
  <tr>
    <td width="120">Sum</td>
    <td width="520">&nbsp;</td>
    <td width="120">see <a href="StatisticsAndProbability.htm#Statistics">Statistics Functions</a></td>
  </tr>
  <tr>
    <td valign="top" width="120">swap</td>
    <td valign="top" width="520"><font face="Courier New" size="3">Function
      Swap(X);</font><br>
    Swap exchanges the high- and low-order bytes within a Word.<br>
    Provided for backwards compatibility only.</td>
    <td valign="top" width="120">system</td>
  </tr>
  <tr>
    <td valign="top" width="120">Swap</td>
    <td valign="top" width="520">Swap two reals</td>
    <td valign="top" width="120">TPmath1(fmath)</td>
  </tr>
  <tr>
    <td valign="top" width="120">SwapInt, SwapInt64, SwapLong</td>
    <td valign="top" width="520"><font face="Courier New" size="3">Procedure SwapInt(Var Int1, Int2:
    Integer);<br>
    Procedure SwapInt64(Var Int1, Int2: Int64);<br>
    Procedure SwapLong (Var Int1, Int2: LongInt);</font></td>
    <td valign="top" width="120">RxLib</td>
  </tr>
  <tr>
    <td valign="top" width="120">SwapB, SwapSI, SwapW, SwapI, SwapL, SwapI32, SwapC,
      SwapInt64,<br>
      SwapExt,<br>
      SwapDbl,<br>
      SwapSing</td>
    <td valign="top" width="520">Swap two values</td>
    <td valign="top" width="120">ESBMaths</td>
  </tr>
  <tr>
    <td valign="top" width="120">Swap32c</td>
    <td valign="top" width="520">Swap bytes with 4-byt integer<br>
    Robert Lee's <a href="../../../Library/UseNet/1997/1121.txt">UseNet
    Post</a></td>
    <td valign="top" width="120">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" width="120">trunc</td>
    <td valign="top" width="520"><font face="Courier New" size="3">Function
      Trunc(X: Extended): LongInt; (D1-D3)<br>
      Function Trunc(X: Extended): Int64; (D4)</font><br>
    Trunc(x) = x rounded toward zero<br>
    Integer part of the floating-point argument. See also <em>int</em>.
      <p><i><a href="http://www.amazon.com/exec/obidos/ASIN/1565926595/efgscomputlab">Delphi
      in a NutShell</a></i>, p. 380</p>
      <p>Note:&nbsp; <i>T</i><i>runc</i> is slower than <i>Round</i>.&nbsp;
      According to John Herbster in a newsgroup posting:&nbsp; <i>Trunc</i> has
      to save the FPU control word and change it twice.&nbsp; <i>Round</i> does
      not.&nbsp;</p>
    </td>
    <td valign="top" width="120">system</td>
  </tr>
</table>
</center></div>

<hr>

<p align="center"><font size="6"><a name="Logarithm"></a>B. Logarithm/Exponential Functions<br>
</font><a href="http://www.math.utep.edu/sosmath/algebra/logs/log1/log1.html">www.math.utep.edu/sosmath/algebra/logs/log1/log1.html</a>
<br>
<a href="http://www.sisweb.com/math/algebra/exponents.htm">www.sisweb.com/math/algebra/exponents.htm</a>
</p>

<div align="center"><center>

<table border="1">
  <tr>
    <td align="center" valign="top" width="120"><strong>Function Name</strong></td>
    <td align="center" valign="top" width="520"><strong>Description</strong></td>
    <td align="center" valign="top" width="120"><a href="#Sources"><strong>Source(s)</strong></a></td>
  </tr>
  <tr>
    <td valign="top" width="120"><font size="3">ESBLog10, ESBLog2, ESBLogBase</font></td>
    <td valign="top" width="520">ESB Extended Log functions</td>
    <td valign="top" width="120">ESBMaths</td>
  </tr>
  <tr>
    <td valign="top" width="120">exp</td>
    <td valign="top" width="520"><font face="Courier New" size="3">Function
      Exp(X: Real): Real;</font><br>
      exp(x) = e<sup>x</sup><p><sup>Robert Lee's &quot;fast&quot; routines, dexp and fexp, in
      <a href="../../../Library/UseNet/1999/1214a.txt">UseNet Post</a></sup></td>
    <td valign="top" width="120">system, TPmath1(fmath)</td>
  </tr>
  <tr>
    <td valign="top" width="120">exp2</td>
    <td valign="top" width="520">exp2(x) = 2<sup>x</sup></td>
    <td valign="top" width="120">TPmath1(fmath)</td>
  </tr>
  <tr>
    <td valign="top" width="120">exp10</td>
    <td valign="top" width="520">exp10(x) = 10<sup>x</sup></td>
    <td valign="top" width="120">TPmath1(fmath)</td>
  </tr>
  <tr>
    <td valign="top" width="120">ExpFixed</td>
    <td valign="top" width="520">&nbsp;</td>
    <td valign="top" width="120">Stockton</td>
  </tr>
  <tr>
    <td valign="top" width="120">ExpFloat</td>
    <td valign="top" width="520">&nbsp;</td>
    <td valign="top" width="120">Stockton</td>
  </tr>
  <tr>
    <td valign="top" width="120">fexp</td>
    <td valign="top" width="520">e<sup>x</sup></td>
    <td valign="top" width="120">mathlib2(math387)</td>
  </tr>
  <tr>
    <td valign="top" width="120">flog, fln</td>
    <td valign="top" width="520">log<sub>10</sub>, log<sub>e</sub></td>
    <td valign="top" width="120">mathlib2(math387)</td>
  </tr>
  <tr>
    <td valign="top" width="120">ften_to</td>
    <td valign="top" width="520">10<sup>x</sup></td>
    <td valign="top" width="120">mathlib2(math387)</td>
  </tr>
  <tr>
    <td valign="top" width="120">fy_to_x</td>
    <td valign="top" width="520">y<sup>x</sup></td>
    <td valign="top" width="120">mathlib2(math387)</td>
  </tr>
  <tr>
    <td valign="top" width="120">ILog2</td>
    <td valign="top" width="520">integer part of the base-2 logarithm of integer</td>
    <td valign="top" width="120">ESBMaths</td>
  </tr>
  <tr>
    <td valign="top" width="120">IntPow, ESBIntPower</td>
    <td valign="top" width="520">float to non-negative integer power</td>
    <td valign="top" width="120">ESBMaths</td>
  </tr>
  <tr>
    <td valign="top" width="120">IntPower</td>
    <td valign="top" width="520"><font face="Courier New" size="3">Function
      IntPower(Base: Extended;
    Exponent: Integer): Extended register;</font>
      <p>
    x<sup>n</sup>, Raise base to an integral power.</p>
    </td>
    <td valign="top" width="120">math, TPmath1(fmath), MathX</td>
  </tr>
  <tr>
    <td valign="top" width="120">ldexp</td>
    <td valign="top" width="520"><font face="Courier New">Function Ldexp(X: Extended; P:
    Integer): Extended register;</font>
      <p>
    x * 2<sup>P</sup></p>
    </td>
    <td valign="top" width="120">math, MathX</td>
  </tr>
  <tr>
    <td valign="top" width="120">ln</td>
    <td valign="top" width="520"><font face="Courier New">Function Ln(X: Real): Real;</font><br>
    natural (base<sub>e</sub>) log<p><sup>Robert Lee's &quot;fast&quot; routines, dln and fln,
    in <a href="../../../Library/UseNet/1999/1214a.txt">UseNet Post</a></sup><p> How can I compute a <em>base-a</em> logarithm, that is,
    log<sub>a</sub> x?
      <p>log<sub>n</sub> x = log<sub>b</sub> x / log<sub>b</sub> n =
    (log<sub>b</sub> x)(log<sub>n</sub> b)<p>log<sub>10</sub> x = log<sub>e</sub> x / log<sub>e</sub>
    10 = (log<sub>e</sub> x)(log<sub>10</sub> e) = 0.4342944819 log<sub>e</sub> x</p>
    <p>log<sub>e</sub> x = log<sub>10</sub> x / log<sub>10</sub> e = (log<sub>10</sub> x)(log<sub>e</sub>
    10) = 2.3025850930 log<sub>10 </sub>x</p>
    </td>
    <td valign="top" width="120">inline, TPmath1(fmath)</td>
  </tr>
  <tr>
    <td valign="top" width="120">lnxp1</td>
    <td valign="top" width="520"><font face="Courier New">Function LnXP1(X: Extended):
    Extended;</font><br>
    Ln(x + 1) is accurate for x near zero</td>
    <td valign="top" width="120">math, MathX</td>
  </tr>
  <tr>
    <td valign="top" width="120">log</td>
    <td valign="top" width="520">base-a log</td>
    <td valign="top" width="120">EZmath, AugMath</td>
  </tr>
  <tr>
    <td valign="top" width="120">log2</td>
    <td valign="top" width="520"><font face="Courier New">Function Log2(X: Extended):
    Extended;</font><br>
    base-2 log</td>
    <td valign="top" width="120">math, TPmath1 (fmath), MathX</td>
  </tr>
  <tr>
    <td valign="top" width="120">log10</td>
    <td valign="top" width="520"><font face="Courier New">Function Log10(X: Extended):
    Extended;</font><br>
    base-10 log</td>
    <td valign="top" width="120">math, EZmath, TPmath1 (fmath), MathX</td>
  </tr>
  <tr>
    <td valign="top" width="120">logN</td>
    <td valign="top" width="520"><font face="Courier New">Function LogN(Base, X: Extended):
    Extended;</font><br>
    base-N log</td>
    <td valign="top" width="120">math, MathX, AugMath</td>
  </tr>
  <tr>
    <td valign="top" width="120">LogXtoBaseY</td>
    <td valign="top" width="520">Base-Y Logarithm of X</td>
    <td valign="top" width="120">ESBMaths</td>
  </tr>
  <tr>
    <td valign="top" width="120">logxy</td>
    <td valign="top" width="520">Log of X to base Y</td>
    <td valign="top" width="120">Calvert</td>
  </tr>
  <tr>
    <td valign="top" width="120">NthRoot</td>
    <td valign="top" width="520">&nbsp;</td>
    <td valign="top" width="120">AugMath</td>
  </tr>
  <tr>
    <td valign="top" width="120">pow(x, y)</td>
    <td valign="top" width="520">x<sup>y </sup>= exp(y * ln(x))</td>
    <td valign="top" width="120">TPmath1 (fmath)</td>
  </tr>
  <tr>
    <td valign="top" width="120">pow2(x)</td>
    <td valign="top" width="520">2^x</td>
    <td valign="top" width="120">ESBMaths</td>
  </tr>
  <tr>
    <td valign="top" width="120">power(x, y)</td>
    <td valign="top" width="520"><font face="Courier New">Function Power(Base, Exponent:
    Extended): Extended;</font><br>
    x<sup>y </sup>= exp(y * ln(x))<br>
    Raise Base to any power, Base &gt; 0</td>
    <td valign="top" width="120">math, EZmath,<br>
    MathX, Stockton, Calvert,
    Turbo (p. 141), AugMath</td>
  </tr>
  <tr>
    <td valign="top" width="120">power10</td>
    <td valign="top" width="520">powers of 10</td>
    <td valign="top" width="120">MathX</td>
  </tr>
  <tr>
    <td valign="top" width="120">RPower</td>
    <td valign="top" width="520">real number to a real power</td>
    <td valign="top" width="120">Turbo (p. 141)</td>
  </tr>
  <tr>
    <td valign="top" width="120">TenToY</td>
    <td valign="top" width="520">10^Y</td>
    <td valign="top" width="120">ESBMaths</td>
  </tr>
  <tr>
    <td valign="top" width="120">TwoToY</td>
    <td valign="top" width="520">2^Y</td>
    <td valign="top" width="120">ESBMaths</td>
  </tr>
  <tr>
    <td valign="top" width="120">XtotheY</td>
    <td valign="top" width="520">Raise X to the Y Power</td>
    <td valign="top" width="120">Calvert</td>
  </tr>
  <tr>
    <td valign="top" width="120">XtoY</td>
    <td valign="top" width="520">X to the Y Power</td>
    <td valign="top" width="120">ESBMaths</td>
  </tr>
</table>
</center></div>

<hr>

<p align="center"><font size="6"><a name="Trigonometric"></a>C. Trigonometric Functions<br>
</font><a href="http://www.math.utep.edu/sosmath/trig/trig.html">www.math.utep.edu/sosmath/trig/trig.html</a>
<br>
<a href="http://www.sisweb.com/math/trig/identities.htm">www.sisweb.com/math/trig/identities.htm</a>
</p>

<p align="center">See <a href="Engineering.htm">Engineering Math Functions</a>
page&nbsp; for <a href="Engineering.htm#Hyperbolic">Hyperbolic Trig Functions</a>
</p>
<div align="center"><center>

<table border="1">
  <tr>
    <td align="center" width="120"><strong>Function Name</strong></td>
    <td align="center" width="520"><strong>Description</strong></td>
    <td align="center" width="120"><a href="#Sources"><strong>Source(s)</strong></a></td>
  </tr>
  <tr>
    <td valign="top" width="120">Angle Conversions</td>
    <td valign="top" width="520">Cycle, radian, grad, degree
      <p><font face="Courier New" size="2">function CycleToDeg(const Cycles:
      Float): Float;<br>
      function CycleToGrad(const Cycles: Float): Float;<br>
      function CycleToRad(const Cycles: Float): Float;<br>
      function DegToCycle(const Degrees: Float): Float;<br>
      function DegToGrad(const Degrees: Float): Float;<br>
      function DegToRad(const Degrees: Float): Float;<br>
      function GradToCycle(const Grads: Float): Float;<br>
      function GradToDeg(const Grads: Float): Float;<br>
      function GradToRad(const Grads: Float): Float;<br>
      function RadToCycle(const Radians: Float): Float;<br>
      function RadToDeg(const Radians: Float): Float;<br>
      function RadToGrad(const Radians: Float): Float;</font></td>
    <td valign="top" width="120"><a href="http://www.delphi-jedi.org/Jedi:CODELIBJCL">JCLUnitConv</a></td>
  </tr>
  <tr>
    <td valign="top" width="120">arccos</td>
    <td valign="top" width="520"><font face="Courier New">Function ArcCos(X: Extended):
    Extended;</font><br>
      arccos(x) = PI/2 - arctan(x / sqrt(1-sqr(x)))<br>
    Input: |X| &lt;= 1, Output: [0 .. PI]</td>
    <td valign="top" width="120">math, EZmath, TPmath1(fmath), Stockton(<a href="http://www.merlyn.demon.co.uk/programs/invcos.pas">invcos</a>),
      MathX, Calvert, Turbo (p. 141), AugMath</td>
  </tr>
  <tr>
    <td valign="top" width="120">arccos2</td>
    <td valign="top" width="520">Dr. John Stockton's <a href="../../UseNet/1999/1128.txt">UseNet Post</a> using ArcTan2 </td>
    <td valign="top" width="120">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" width="120">arccot</td>
    <td valign="top" width="520">arccot(x)
      <p><font face="Courier New">Function ArcCot(const X: Extended): Extended;&nbsp;</font></p>
    </td>
    <td valign="top" width="120">Kylix math,<br>
      EZmath, Stockton(<a href="http://www.merlyn.demon.co.uk/programs/arccot.pas">arccot</a>)</td>
  </tr>
  <tr>
    <td valign="top" width="120">arccsc</td>
    <td valign="top" width="520">arccsc(x)<br>
    Output: [0 .. PI/2) union [-PI .. -PI/2)
      <p><font face="Courier New">Function ArcCsc(const X: Extended): Extended;&nbsp;</font></p>
    </td>
    <td valign="top" width="120">Kylix math, EZmath</td>
  </tr>
  <tr>
    <td valign="top" width="120">arcsec</td>
    <td valign="top" width="520">arcsec(x)<br>
    Output: [0 .. PI/2) union [PI .. 3*PI/2)
      <p><font face="Courier New">Function ArcSec(const X: Extended): Extended;&nbsp;</font></p>
    </td>
    <td valign="top" width="120">Kylix math, EZmath</td>
  </tr>
  <tr>
    <td valign="top" width="120">arcsin</td>
    <td valign="top" width="520">arcsin(x) = arctan(x / sqrt(1-sqr(x)))<br>
    Input: |X| &lt;= 1, Output: [-PI/2 .. PI/2]
      <p><font face="Courier New">Function ArcSin(X: Extended):
    Extended;</font><br>
      </p>
    </td>
    <td valign="top" width="120">math, EZmath, TPmath1(fmath), Stockton(<a href="http://www.merlyn.demon.co.uk/programs/invcos.pas">invcos</a>),
      MathX, Calvert, Turbo (p. 141), AugMath</td>
  </tr>
  <tr>
    <td valign="top" width="120">arcsin2</td>
    <td valign="top" width="520">Dr. John Stockton's <a href="../../UseNet/1999/1128.txt">UseNet Post</a> using ArcTan2 </td>
    <td valign="top" width="120">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" width="120">arctan</td>
    <td valign="top" width="520"><font face="Courier New">Function ArcTan(X: Extended):
    Extended;</font><br>
    Input: x &lt;&gt; 0, Output: -PI/2 .. PI/2<br>
    angle the ray (0,0) to (x,y) makes with positive X-axis<p>Use arctan2 to get angles in all
    four quadrants.
      <p>Tips and Tricks from <i><a href="http://www.amazon.com/exec/obidos/ASIN/1565926595/efgscomputlab">Delphi
      in a NutShell</a></i>, p. 137:</p>
      <ul>
        <li>Integers and Variant arguments are automatically converted to
          floating-point.<br>
          To convert an <i>Int64</i> argument, add 0.0.</li>
        <li>If X is positive infinity (INF), the result is an approximation to
          PI/2; if X is negative infinity (-INF), the result is an approximation
          of -PI/2.</li>
        <li>If X is a quiet NaN, the result is X.</li>
        <li>IF X is a signaling NaN, Arctan reports EInvalidOp.</li>
      </ul>
    </td>
    <td valign="top" width="120">system, TPmath1(fmath), Stockton(<a href="http://www.merlyn.demon.co.uk/programs/invcos.pas">invcos</a>)</td>
  </tr>
  <tr>
    <td valign="top" width="120">arctan2</td>
    <td valign="top" width="520"><font face="Courier New">Function ArcTan2(Y, X: Extended):
    Extended;</font><br>
    ArcTan2 calculates ArcTan(Y/X), and returns an angle in the correct quadrant. Input: |Y|
    &lt; 2^64, |X| &lt; 2^64, X &lt;&gt; 0 Output: [-PI..PI]<p>Example:<br>
      <font face="Courier New" size="2">// Given points(iText,jText) and (iTarget,jTarget). The&nbsp;<br>
      // angle
    between the x-axis and the vector (iTarget-iText,<br>
      // jTarget-jText) ranges in the open interval [0.0, 360.0)<br>
      // degrees.&nbsp; (0 degrees is the +X axis).<br>
    //&nbsp; Note: Normally, ArcTan2 returns a value from -PI to PI.<br>
    angle := 180 * (1 + ArcTan2(jText-jTarget, iTarget-iText) / PI);<br>
    IF&nbsp;&nbsp;&nbsp;angle &gt;= 360.0<br>
    THEN angle := angle - 360.0;</font></td>
    <td valign="top" width="120">math, EZmath,<br>
    Stockton(<a href="http://www.merlyn.demon.co.uk/programs/fpatan2.pas">fpatan2</a>),
    TPmath1(fmath),<br>
    MathX</td>
  </tr>
  <tr>
    <td width="120">bearing</td>
    <td width="520">&nbsp;</td>
    <td width="120">MathX</td>
  </tr>
  <tr>
    <td valign="top" width="120">Coordinate Conversions</td>
    <td valign="top" width="520">Cartesian, polar
      <p><font face="Courier New" size="2">procedure CartesianToPolar(const X, Y: Float; var R, Phi: Float);</font></p>
      <p><font face="Courier New" size="2">procedure PolarToCartesian(const R, Phi: Float; var X, Y:
      Float);</font></p>
      <p><font face="Courier New" size="2">procedure CartesianToCylinder(const X, Y, Z: Float; var R, Phi, Zeta: Float);</font></p>
      <p><font face="Courier New" size="2">procedure CartesianToSpheric(const X, Y, Z: Float; var Rho, Theta, Phi: Float);</font></p>
      <p><font face="Courier New" size="2">procedure CylinderToCartesian(const R, Phi, Zeta: Float; var X, Y, Z: Float);</font></p>
      <p><font face="Courier New" size="2">procedure SphericToCartesian(const Rho, Theta, Phi: Float; var X, Y, Z: Float);</font></td>
    <td valign="top" width="120"><a href="http://www.delphi-jedi.org/Jedi:CODELIBJCL">JCLUnitConv</a></td>
  </tr>
  <tr>
    <td valign="top" width="120">cos</td>
    <td valign="top" width="520"><font face="Courier New" size="3">Function
      cos(X: Extended):
    Extended;</font>
      <p><font size="3">The value x must be in radians.&nbsp; To convert from
      degrees to radians use <a href="#DegToRad">DegToRad</a>.&nbsp; For
      example, cos(60 degrees) in Delphi would be <font face="Courier New">cos(DegToRad(60))</font>
      </font>= 0.5.</p>
      <p>
    FASTEST Sin, Cos, Tan and CTan functions.&nbsp; <br>
    <a href="http://delphi.icm.edu.pl/ftp/d30free/sincosx.zip">http://delphi.icm.edu.pl/ftp/d30free/sincosx.zip</a>
      </p>
      <p>Tips and Tricks from <i><a href="http://www.amazon.com/exec/obidos/ASIN/1565926595/efgscomputlab">Delphi
      in a NutShell</a></i>, p. 172:</p>
      <ul>
        <li>Integers and Variant arguments are automatically converted to
          floating-point.<br>
          To convert an <i>Int64</i> argument, add 0.0.</li>
        <li>If X is a quiet NaN, the result is X.</li>
        <li>IF X is a signaling NaN, cos reports EInvalidOp.</li>
      </ul>
    </td>
    <td valign="top" width="120">system, TPmath1(fmath)</td>
  </tr>
  <tr>
    <td valign="top" width="120">Cosecant</td>
    <td valign="top" width="520">also see csc
      <p><font face="Courier New">Function Cosecant(const X: Extended): Extended;&nbsp;</font></p>
    </td>
    <td valign="top" width="120">Kylix math,&nbsp;<br>
      AugMath </td>
  </tr>
  <tr>
    <td valign="top" width="120">cot</td>
    <td valign="top" width="520">cot(x) = 1/tan(x), with x &lt;&gt; 0
      <p><font face="Courier New">function Cot(const X: Extended): Extended;&nbsp;</font></p>
      <p>simply calls cotan</p>
    </td>
    <td valign="top" width="120">Kylix math, EZmath </td>
  </tr>
  <tr>
    <td valign="top" width="120">cotan</td>
    <td valign="top" width="520"><font face="Courier New" size="3">Function
      Cotan(X: Extended):
    Extended;</font></td>
    <td valign="top" width="120">math, MathX</td>
  </tr>
  <tr>
    <td valign="top" width="120">CoTangent</td>
    <td valign="top" width="520">also see cotan</td>
    <td valign="top" width="120">AugMath</td>
  </tr>
  <tr>
    <td valign="top" width="120">csc</td>
    <td valign="top" width="520">csc(x) = 1/sin(x)
      <p><font face="Courier New">Function Csc(const X: Extended): Extended;&nbsp;</font></p>
      <p>simply calls Cosecant</p>
    </td>
    <td valign="top" width="120">Kylix math</td>
  </tr>
  <tr>
    <td valign="top" width="120"><font face="Courier New" size="3">CycleToDeg</font></td>
    <td valign="top" width="520"> Radians := Cycles * 2PI
      <p><font face="Courier New">Function CycleToDeg(const Cycles: Extended): Extended;</font></td>
    <td valign="top" width="120">Kylix math</td>
  </tr>
  <tr>
    <td valign="top" width="120"><font face="Courier New" size="3">CycleToGrad</font></td>
    <td valign="top" width="520"><font face="Courier New">Function CycleToGrad(const Cycles: Extended): Extended;&nbsp;</font></td>
    <td valign="top" width="120">Kylix math</td>
  </tr>
  <tr>
    <td valign="top" width="120">CycleToRad</td>
    <td valign="top" width="520"><font face="Courier New" size="3">Function
      CycleToRad(Cycles:
    Extended): Extended;</font><br>
    Cycles to Radians.<br>
    Radians = Cycles * 2 * PI</td>
    <td valign="top" width="120">math, MathX</td>
  </tr>
  <tr>
    <td valign="top" width="120"><font face="Courier New" size="3">DegToCycle</font></td>
    <td valign="top" width="520"><font face="Courier New">Function DegToCycle(const Degrees: Extended): Extended;&nbsp;</font></td>
    <td valign="top" width="120">Kylix math</td>
  </tr>
  <tr>
    <td valign="top" width="120"><font face="Courier New" size="3">DegToGrad</font></td>
    <td valign="top" width="520"><font face="Courier New">Function DegToGrad(const Degrees: Extended): Extended;</font></td>
    <td valign="top" width="120">Kylix math</td>
  </tr>
  <tr>
    <td valign="top" width="120"><a name="DegToRad"></a>DegToRad</td>
    <td valign="top" width="520"><font face="Courier New" size="3">Function
      DegToRad(Degrees:
    Extended): Extended;</font> <br>
    Degrees to Radians
      <p>
    Radians = Degrees * PI / 180</p>
    </td>
    <td valign="top" width="120">math, MathX, AugMath</td>
  </tr>
  <tr>
    <td valign="top" width="120">DMS2Extended, Extended2DMS</td>
    <td valign="top" width="520">Converts degrees, minutes, seconds to an extended real, or
    vice versa</td>
    <td valign="top" width="120">ESBMaths</td>
  </tr>
  <tr>
    <td valign="top" width="120">ESBCosec, ESBCot, ESBSec, ESBTan
      <p>ESBArcCosec, ESBArcCos, ESBArcSin, ESBArcSec</td>
    <td valign="top" width="520">trig and inverse trig functions</td>
    <td valign="top" width="120">ESBMaths</td>
  </tr>
  <tr>
    <td valign="top" width="120">ESBSinCos</td>
    <td valign="top" width="520">compute SIN and COS in a single call</td>
    <td valign="top" width="120">ESBMaths</td>
  </tr>
  <tr>
    <td valign="top" width="120">farccos, farcsin, farctan, farctan2</td>
    <td valign="top" width="520">&nbsp;</td>
    <td valign="top" width="120">mathlib2(math387)</td>
  </tr>
  <tr>
    <td valign="top" width="120">fcos, fsin, ftan</td>
    <td valign="top" width="520">&nbsp;</td>
    <td valign="top" width="120">mathlib2(math387)</td>
  </tr>
  <tr>
    <td width="120">FindX, FindY</td>
    <td width="520">&nbsp;</td>
    <td width="120">MathX</td>
  </tr>
  <tr>
    <td valign="top" width="120">FixAngle</td>
    <td valign="top" width="520">set angle in [-PI .. PI]</td>
    <td valign="top" width="120">TPmath1(fmath)</td>
  </tr>
  <tr>
    <td valign="top" width="120">fmod_2PI</td>
    <td valign="top" width="520">x mod (2*PI)</td>
    <td valign="top" width="120">mathlib2(math387)</td>
  </tr>
  <tr>
    <td valign="top" width="120">GradToCycle</td>
    <td valign="top" width="520"><font face="Courier New" size="3">Function GradToCycle(const Grads: Extended): Extended;&nbsp;</font></td>
    <td valign="top" width="120">Kylix math</td>
  </tr>
  <tr>
    <td valign="top" width="120"><font face="Courier New" size="3">GradToDeg</font></td>
    <td valign="top" width="520"><font face="Courier New">Function GradToDeg(const Grads: Extended): Extended;&nbsp;</font></td>
    <td valign="top" width="120">Kylix math</td>
  </tr>
  <tr>
    <td valign="top" width="120">GradToRad</td>
    <td valign="top" width="520"><font face="Courier New" size="3">Function
      GradToRad(Grads:
    Extended): Extended;</font><br>
    Grads to Radians.<br>
    Radians = Grads * PI / 200</td>
    <td valign="top" width="120">math, MathX</td>
  </tr>
  <tr>
    <td valign="top" width="120">nspSDegToRad, nspDDegToRad</td>
    <td valign="top" width="520">Degrees to radians</td>
    <td valign="top" width="120">ISPL</td>
  </tr>
  <tr>
    <td width="120">PolarToRect</td>
    <td width="520">&nbsp;</td>
    <td width="120">MathX</td>
  </tr>
  <tr>
    <td valign="top" width="120">Polar2XY, XY2Polar</td>
    <td valign="top" width="520">Convert polar coordinates to cartesian coordiantes, or vice
    versa</td>
    <td valign="top" width="120">ESBMaths</td>
  </tr>
  <tr>
    <td valign="top" width="120">RadToCycle</td>
    <td valign="top" width="520"><font face="Courier New" size="3">Function
      RadToCycle(Radians:
    Extended): Extended;</font><br>
    Radians to cycles.<br>
    Cycles = Radians / (2 * PI)</td>
    <td valign="top" width="120">math, MathX</td>
  </tr>
  <tr>
    <td valign="top" width="120">RadToDeg</td>
    <td valign="top" width="520"><font face="Courier New" size="3">Function
      RadToDeg(Radians:
    Extended): Extended;</font><br>
    Radians to degrees.<br>
    Degreees = Radians * 180 / PI </td>
    <td valign="top" width="120">math, MathX, AugMath</td>
  </tr>
  <tr>
    <td valign="top" width="120">RadToGrad</td>
    <td valign="top" width="520"><font face="Courier New" size="3">Function
      RadToGrad(Radians:
    Extended): Extended;</font><br>
    Radians to grads.<br>
    Grads = Radians * 200 / PI</td>
    <td valign="top" width="120">math, MathX</td>
  </tr>
  <tr>
    <td width="120">RectToPolar</td>
    <td width="520">&nbsp;</td>
    <td width="120">MathX</td>
  </tr>
  <tr>
    <td valign="top" width="120">sec</td>
    <td valign="top" width="520">sec(x) = 1/cos(x)
      <p><font face="Courier New">Function Sec(const X: Extended): Extended;&nbsp;</font></p>
      <p>Simply calls Secant.</p>
    </td>
    <td valign="top" width="120">Kylix math</td>
  </tr>
  <tr>
    <td valign="top" width="120">Secant</td>
    <td valign="top" width="520">see sec
      <p><font face="Courier New">Function Secant(const X: Extended): Extended;</font></p>
    </td>
    <td valign="top" width="120">Kylix math, AugMath</td>
  </tr>
  <tr>
    <td valign="top" width="120">sin</td>
    <td valign="top" width="520"><font face="Courier New" size="3">Function
      Sin(X: Extended):
    Extended;</font>
      <p><font size="3">The value x must be in radians.&nbsp; To convert from
      degrees to radians use <a href="#DegToRad">DegToRad</a>.&nbsp; For
      example, sin(30 degrees) in Delphi would be <font face="Courier New">sin(DegToRad(30))</font>=
      0.5.</font></p>
      <p>
    FASTEST Sin, Cos, Tan and CTan functions.&nbsp; <br>
    <a href="http://delphi.icm.edu.pl/ftp/d30free/sincosx.zip">http://delphi.icm.edu.pl/ftp/d30free/sincosx.zip</a>
      </p>
      <p>Tips and Tricks from <i><a href="http://www.amazon.com/exec/obidos/ASIN/1565926595/efgscomputlab">Delphi
      in a NutShell</a></i>, p. 341-342:</p>
      <ul>
        <li>Integers and Variant arguments are automatically converted to
          floating-point.<br>
          To convert an <i>Int64</i> argument, add 0.0.</li>
        <li>If X is a quiet NaN, the result is X.</li>
        <li>IF X is a signaling NaN, sin reports EInvalidOp.</li>
      </ul>
      <p>John Herbster's <a href="../../UseNet/2002/0117.txt">UseNet Post</a> about since
      function for large numbers, such as sin(1e18)
    </td>
    <td valign="top" width="120">system, TPmath1 (fmath)</td>
  </tr>
  <tr>
    <td valign="top" width="120">sincos</td>
    <td valign="top" width="520"><font face="Courier New" size="3">Procedure
      SinCos(Theta: Extended;
    var Sin, Cos: Extended) register;</font><font face="Arial Narrow"> <br>
    </font><br>
    sin(theta) and cos(theta): SinCos is 2x faster than calling Sin and Cos separately for the
    same angle</td>
    <td valign="top" width="120">math, mathlib2(math387), Stockton(<a href="http://www.merlyn.demon.co.uk/programs/fsincos.pas">fsincos</a>), MathX</td>
  </tr>
  <tr>
    <td width="120">SphericalToRect</td>
    <td width="520">&nbsp;</td>
    <td width="120">MathX</td>
  </tr>
  <tr>
    <td valign="top" width="120">tan</td>
    <td valign="top" width="520"><font face="Courier New" size="3">Function
      Tan(X: Extended):
    Extended;</font>
      <p><font size="3">The value x must be in radians.&nbsp; To convert from
      degrees to radians use <a href="#DegToRad">DegToRad</a>.&nbsp; For
      example, tan(45 degrees) in Delphi would be <font face="Courier New">tan(DegToRad(45))
      = 1.0</font>.</font></p>
      <p>tan(x) = sin(x)/cos(x)</p>
      <p>
    FASTEST Sin, Cos, Tan and CTan functions.&nbsp; <br>
    <a href="http://delphi.icm.edu.pl/ftp/d30free/sincosx.zip">http://delphi.icm.edu.pl/ftp/d30free/sincosx.zip</a>
      </p>
    </td>
    <td valign="top" width="120">system, math, EZmath, TPmath1(fmath), MathX</td>
  </tr>
  <tr>
    <td valign="top" width="120">Tangent</td>
    <td valign="top" width="520">see Tan
    </td>
    <td valign="top" width="120">AugMtah</td>
  </tr>
</table>
</center></div>

<hr>

<p align="center"><font size="6"><a name="Conversions"></a>D. Conversions and Formatting</font><br>
&quot;Numeric Conversion&quot; in<em> <a href="http://www.amazon.com/exec/obidos/ASIN/1565926595/efgscomputlab">Delphi in a
Nutshell</a></em>,&nbsp; pp. 515-523;<br>
<font size="3">&quot;<a href="../strings/index.html#Conversions">Conversions/Formatting</a>&quot;
on <em><font face="Arial Narrow">efg's </font></em><a href="../strings/index.html">Strings</a>
page;<br>
<a href="../../../OtherProjects/Endian.htm">Endian Notes</a></font></p>
<div align="center"><center>

<table border="1">
  <tr>
    <td align="center" valign="top" width="120"><strong>Function Name</strong></td>
    <td align="center" valign="top" width="520"><strong>Description</strong></td>
    <td align="center" valign="top" width="120"><a href="#Sources"><strong>Source(s)</strong></a></td>
  </tr>
  <tr>
    <td valign="top" width="120">base conversions</td>
    <td valign="top" width="520">A program for converting numbers from/to
      Binary, Octal, Decimal, Hexadecimal. Also any user defined numeric base
      conversion is possible.<br>
      <a href="http://www.gu.edu.au/school/eng/mmt/Base.Zip">www.gu.edu.au/school/eng/mmt/Base.Zip</a>&nbsp;</td>
    <td valign="top" width="120">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" width="120">BinToInt</td>
    <td valign="top" width="520">Converts a binary string into a long integer</td>
    <td valign="top" width="120">Clipper</td>
  </tr>
  <tr>
    <td valign="top" width="120">BitOff</td>
    <td valign="top" width="520">Turns off the specified bit in a long integer</td>
    <td valign="top" width="120">Clipper</td>
  </tr>
  <tr>
    <td valign="top" width="120">BitOn</td>
    <td valign="top" width="520">Turns on the specified bit in a long integer</td>
    <td valign="top" width="120">Clipper</td>
  </tr>
  <tr>
    <td valign="top" width="120">BitSet</td>
    <td valign="top" width="520">Turns specified bit on in a long integer</td>
    <td valign="top" width="120">Clipper</td>
  </tr>
  <tr>
    <td valign="top" width="120">BitToggle</td>
    <td valign="top" width="520">Toggles specified bit</td>
    <td valign="top" width="120">Clipper</td>
  </tr>
  <tr>
    <td valign="top" width="120">Comma</td>
    <td valign="top" width="520">Formats a numeric of any type, inserting commas where
    approprite</td>
    <td valign="top" width="120">Clipper</td>
  </tr>
  <tr>
    <td valign="top" width="120">CompToCurrency</td>
    <td valign="top" width="520">'Comp' Integer to Currency<br>
    <font face="Arial Narrow">Function CompToCurrency(acomp: Comp): Currency;
    cdecl;</font>
      <p><i><a href="http://www.amazon.com/exec/obidos/ASIN/1565926595/efgscomputlab">Delphi
      in a NutShell</a></i>, pp. 166</p>
    </td>
    <td valign="top" width="120">System (D4)</td>
  </tr>
  <tr>
    <td valign="top" width="120">CompToDouble</td>
    <td valign="top" width="520">'Comp' Integer to Double<br>
    <font face="Arial Narrow">Function CompToDouble(acomp: Comp): Double; cdecl;</font>
      <p><i><a href="http://www.amazon.com/exec/obidos/ASIN/1565926595/efgscomputlab">Delphi
      in a NutShell</a></i>, pp. 167</p>
    </td>
    <td valign="top" width="120">System (D4)</td>
  </tr>
  <tr>
    <td valign="top" width="120">Comp2Str</td>
    <td valign="top" width="520">Comp (64-bit integer) to String</td>
    <td valign="top" width="120">Calvert</td>
  </tr>
  <tr>
    <td valign="top" width="120">CompToStr</td>
    <td valign="top" width="520">Complex to String</td>
    <td valign="top" width="120">TPmath1 (PaString)<br>
    Note:&nbsp; Don't confuse 'Comp' as 'Complex' with the 'Comp' type</td>
  </tr>
  <tr>
    <td valign="top" width="120">CurrencyToComp</td>
    <td valign="top" width="520">Currency to 'Comp' Integer<br>
    procedure CurrencyToComp(acurrency: Currency; var result: Comp); cdecl;
      <p><i><a href="http://www.amazon.com/exec/obidos/ASIN/1565926595/efgscomputlab">Delphi
      in a NutShell</a></i>, pp. 173</p>
 </td>
    <td valign="top" width="120">System(D4)</td>
  </tr>
  <tr>
    <td valign="top" width="120">Currency64ToString</td>
    <td valign="top" width="520"><em><a href="http://www.amazon.com/exec/obidos/ASIN/1565926595/efgscomputlab">Delphi in a
    Nutshell</a></em>, pp. 10-11</td>
    <td valign="top" width="120">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" width="120">DoubleToComp</td>
    <td valign="top" width="520">Double to 'Comp' Integer<br>
    procedure DoubleToComp(adouble: Double; var result: Comp); cdecl;
      <p><i><a href="http://www.amazon.com/exec/obidos/ASIN/1565926595/efgscomputlab">Delphi
      in a NutShell</a></i>, pp. 186-187</p>
    </td>
    <td valign="top" width="120">System(D4)</td>
  </tr>
  <tr>
    <td valign="top" width="120">DoubleToHex</td>
    <td valign="top" width="520">See <em><font face="Arial Narrow">efg's</font></em> <a href="../../../Mathematics/NaN.htm">Exploring Numbers, Not-A-Number (NaN), and Infinity
    (INF)</a></td>
    <td valign="top" width="120">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" width="120">ExtendedToHex</td>
    <td valign="top" width="520"><font face="Courier New" size="2">FUNCTION ExtendedToHex(CONST x:
    Extended): STRING;<br>
    &nbsp; VAR<br>
    &nbsp;&nbsp;&nbsp; // &quot;overlay&quot; and &quot;x&quot; occupy same memory location<br>
    &nbsp;&nbsp;&nbsp; overlay: ARRAY[0..9] OF CHAR ABSOLUTE x;<br>
    &nbsp;&nbsp;&nbsp; i : INTEGER;<br>
    BEGIN<br>
    &nbsp; RESULT := '';<br>
    &nbsp; // Use &quot;logical&quot; order instead of &quot;little endian&quot; order<br>
    &nbsp; FOR i := Low(Overlay) TO High(Overlay) DO<br>
    &nbsp; BEGIN<br>
    &nbsp;&nbsp;&nbsp; RESULT := IntToHex( Byte(overlay[i]),2) + RESULT;<br>
    &nbsp; END<br>
    END;</font><p>Example:<br>
      <font face="Courier New" size="3">
    // PI = $4000C90FDAA22168C235<br>
    s := ExtendedToHex(PI);</font></td>
    <td valign="top" width="120">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" width="120">FloatToDecimal</td>
    <td valign="top" width="520"><font face="Courier New" size="3">Procedure FloatToDecimal(var
    DecVal: TFloatRec; const Value; ValueType: TFloatValue; Precision, Decimals: Integer);</font><font face="Arial Narrow"><br>
    </font>Convert a floating-point value to a decimal representation suitable for further
    formattting.</td>
    <td valign="top" width="120">SysUtils</td>
  </tr>
  <tr>
    <td valign="top" width="120">FloatToStr</td>
    <td valign="top" width="520"><font face="Courier New" size="3">Function
      FloatToStr(Value:
    Extended): string;</font><font face="Arial Narrow"><br>
    </font>Float to String: Convert a floating-point value to a string.<br>
    The conversion uses general number format with 15 signficiant digits. Example: s :=
    FloatToStr(x);</td>
    <td valign="top" width="120">SysUtils,<br>
    TPmath1 (PaString)</td>
  </tr>
  <tr>
    <td valign="top" width="120">FloatToStr</td>
    <td valign="top" width="520">Fix for Delphi 1 to handle NANs and INFs correctly.</td>
    <td valign="top" width="120">Tempest</td>
  </tr>
  <tr>
    <td valign="top" width="120">FloatToStrF</td>
    <td valign="top" width="520"><font face="Courier New" size="3">Function
      FloatToStrF(Value:
    Extended; Format: TFloatFormat; Precision, Digits: Integer): string;</font><br>
    Convert floating-point value to a string using a specified format, precision and digits.
    Format is ffGeneral, ffExponent, ffFixed, ffNumber or ffCurrency.<br>
    <br>
    Handles NANs (non-a-number) and INFs (infinities, + or -).<br>
    Example: <font face="Arial Narrow">s := FloatToStr(x, ffGeneral, Precision, Digits);</font></td>
    <td valign="top" width="120">SysUtils</td>
  </tr>
  <tr>
    <td valign="top" width="120">FloatToStrF</td>
    <td valign="top" width="520">Fix for Delphi 1 to handle NANs and INFs correctly.</td>
    <td valign="top" width="120">Tempest</td>
  </tr>
  <tr>
    <td valign="top" width="120">FloatToText</td>
    <td valign="top" width="520"><font face="Courier New" size="3">Function
      FloatToText(Buffer: PChar;
    const Value; ValueType: TFloatValue; Format: TFloatFormat; Precision, Digits: Integer):
    Integer;</font><br>
    Convert floating-point value with specified format, precision and digits.<br>
    Null-terminated output string.</td>
    <td valign="top" width="120">SysUtils</td>
  </tr>
  <tr>
    <td valign="top" width="120">FloatToText</td>
    <td valign="top" width="520">Fix for Delphi 1 to handle NANs and INFs correctly.</td>
    <td valign="top" width="120">Tempest</td>
  </tr>
  <tr>
    <td valign="top" width="120">FloatToTextFmt</td>
    <td valign="top" width="520"><font face="Courier New" size="3">Function
      FloatToTextFmt(Buffer: PChar; const Value; ValueType: TFloatValue; Format:
      PChar): Integer;</font><br>
    Convert floating-point value to its decimal representation using the specified format.
    Null-terminated output string.</td>
    <td valign="top" width="120">SysUtils</td>
  </tr>
  <tr>
    <td valign="top" width="120">Format</td>
    <td valign="top" width="520"><font face="Courier New" size="3">Function Format(const Format:
    string; const Args: array of const): string;</font><font face="Arial Narrow"><br>
      </font><font face="Courier New" size="3">
    <br>
      // Use like &quot;C&quot; sprintf<br>
      s := Format('%.3f times %d is %-16s', [Measurement, Value, Key]);<br>
    <br>
      // for zero fill on left<br>
      s := Format('%3.3d', [i]);&nbsp;</font>
      <p><font face="Courier New">  VAR<br>
      &nbsp; d:  INTEGER;<br>
      &nbsp; w:  INTEGER;<br>
      &nbsp; x:  Double;<br>
      . . .<br>
  x := -pi;<br>
  d := 4;<br>
  w := d + 3;<br>
  ShowMessage(Format('%*.*f', [w,d,x]));<br>
  ShowMessage(Format('%.*f', [d, x]));</font></p>
    </td>
    <td valign="top" width="120">SysUtils</td>
  </tr>
  <tr>
    <td valign="top" width="120">FormatFloat</td>
    <td valign="top" width="520">Format floating-point value given format string. Format
    specifiers include 0-digit placeholder, #-digit placeholder (blanks), ',' - thousand
    separator, 'xx' or &quot;xx&quot;- as is, ';'-separate sections for +,-,0<br>
    Examples:<br>
      <font face="Courier New">s := FormatFloat('##0.0', Factor);</font><p><font face="Courier New">VAR d: DOUBLE;<br>
    <br>
    d := 123456789012345.25;<br>
    // displays 123,456,789,012,345.25<br>
      ShowMessage(FormatFloat(',#0.00', d));</font></p>
    <p><font face="Courier New">d := 0.25;<br>
    // displays .25<br>
    ShowMessage(FormatFloat(',#.00', d));</font></td>
    <td valign="top" width="120">SysUtils</td>
  </tr>
  <tr>
    <td valign="top" width="120">HexToDouble</td>
    <td valign="top" width="520">See <em><font face="Arial Narrow">efg's</font></em> <a href="../../../Mathematics/NaN.htm">Exploring Numbers, Not-A-Number (NaN), and Infinity
    (INF)</a></td>
    <td valign="top" width="120">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" width="120">HexToInt</td>
    <td valign="top" width="520">Converts a hexadecimal string into a long integer <br>
    (equivalent to StrToInt with '$' prefix)</td>
    <td valign="top" width="120">Clipper</td>
  </tr>
  <tr>
    <td valign="top" width="120">IntToBin</td>
    <td valign="top" width="520">Converts an integer to a binary string</td>
    <td valign="top" width="120">Clipper</td>
  </tr>
  <tr>
    <td valign="top" width="120">IntToHex</td>
    <td valign="top" width="520"><font face="Courier New" size="3">Function
      IntToHex(Value: Integer;
    Digits: Integer): string;</font>
      <p><font face="Courier New" size="3">
    Function IntToHex(Value: Int64; Digits: Integer): string; overload; (D4)</font><br>
    <br>
    Returns the hex representation of an integer</p>
    </td>
    <td valign="top" width="120">SysUtils</td>
  </tr>
  <tr>
    <td valign="top" width="120">IntToStr</td>
    <td valign="top" width="520"><font face="Courier New">Function
      IntToStr(Value: Integer):
    string; overload;</font>
      <p><font face="Courier New">
    Function IntToStr(Value: Int64): string; overload; (D4)</font><br>
    <br>
    Integer to String</p>
    </td>
    <td valign="top" width="120">SysUtils,<br>
    TPmath1 (PaString),<br>
    Calvert</td>
  </tr>
  <tr>
    <td valign="top" width="120">IntToSTrPad0</td>
    <td valign="top" width="520">Converts a number into a string and pads the string with
    zeros if it is less than Len characters long</td>
    <td valign="top" width="120">Calvert</td>
  </tr>
  <tr>
    <td valign="top" width="120">IsAlpha, IsHex, IsNum, IsAlphaNum</td>
    <td valign="top" width="520">String validation routines in HyperString package<br>
    <a href="http://www.mindspring.com/~efd/tools.htm">www.mindspring.com/~efd/tools.htm</a></td>
    <td valign="top" width="120">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" width="120">LetNum</td>
    <td valign="top" width="520">TNumLet is a component that writes in words the
      number passed as a parameter.<br>
      <a href="http://delphi.icm.edu.pl/ftp/d10free/LetNum.zip">http://delphi.icm.edu.pl/ftp/d10free/LetNum.zip</a>&nbsp;</td>
    <td valign="top" width="120">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" width="120">LFill</td>
    <td valign="top" width="520">Pad with leading blanks (use for numeric alignment)</td>
    <td valign="top" width="120">TPmath1 (PaString)</td>
  </tr>
  <tr>
    <td valign="top" width="120">NumConv</td>
    <td valign="top" width="520">Component to convert numbers from on numeric system to
    another<br>
    <a href="http://delphi.icm.edu.pl/ftp/d30free/numconv.zip">http://delphi.icm.edu.pl/ftp/d30free/numconv.zip</a>
    </td>
    <td valign="top" width="120">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" width="120">NumWords</td>
    <td valign="top" width="520">Express any number in words using English, Deutch, Francais,
    Espanol, Italiano, or Turkish. Automatic or manual selection of&nbsp; language and
    currency<br>
    <a href="http://delphi.icm.edu.pl/ftp/d20free/numwords.zip">http://delphi.icm.edu.pl/ftp/d20free/numwords.zip</a>
    </td>
    <td valign="top" width="120">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" width="120">Pennies2Dollars</td>
    <td valign="top" width="520">Converts a Comp type that represents a certain number of
    pennies into a string with two decimal places. 123 =&gt; $1.23</td>
    <td valign="top" width="120">Calvert</td>
  </tr>
  <tr>
    <td valign="top" width="120">Real2Str</td>
    <td valign="top" width="520">Converts a double number into a string</td>
    <td valign="top" width="120">Calvert</td>
  </tr>
  <tr>
    <td valign="top" width="120">Replace</td>
    <td valign="top" width="520">Replace all occurences of given string with another string.</td>
    <td valign="top" width="120">TPmath1 (PaString)</td>
  </tr>
  <tr>
    <td valign="top" width="120">Roman</td>
    <td valign="top" width="520"><font face="Courier New" size="3">function Roman(Number : longint) : string ;</font><br>
    Conversion to Roman Numeral
      <p>Also: Roman Numerals, <a href="http://www.delphiforfun.org/Programs/roman_numerals.htm">www.delphiforfun.org/Programs/roman_numerals.htm</a>&nbsp;</p>
      <p><a href="roman.txt">Slightly modified version of Stockton's Roman
      function.</a></p>
    </td>
    <td valign="top" width="120">Stockton(<a href="http://www.merlyn.demon.co.uk/programs/wr-roman.pas">wr-roman</a>)</td>
  </tr>
  <tr>
    <td valign="top" width="120">RFill</td>
    <td valign="top" width="520">Pad with trailing blanks (use for numeric alignment)</td>
    <td valign="top" width="120">TPmath1 (PaString)</td>
  </tr>
  <tr>
    <td valign="top" width="120">Str</td>
    <td valign="top" width="520">Converts an integer-type or real-type expression to a string
    according to the <em>Width</em> and <em>Decimals</em> formatting parameters.</td>
    <td valign="top" width="120">System</td>
  </tr>
  <tr>
    <td valign="top" width="120">StrChar</td>
    <td valign="top" width="520">Concatenate N occurences of given string</td>
    <td valign="top" width="120">TPmath1 (PaString)</td>
  </tr>
  <tr>
    <td valign="top" width="120">StringForBytes</td>
    <td valign="top" width="520">Neil Rubenking's <font face="Courier New">StringForBytes</font>
      in the AllFuncs.pas unit of his <a href="http://www.zdnet.com/downloads/stories/info/0,,001CV4,.html">ColorClue</a>
      utility.&nbsp; Given an Int64 number of bytes, returns 'nnn,nnn bytes' or
      ' nnn.nn KB' or 'nnn.nn MB' or 'nnn.nn GB'.</td>
    <td valign="top" width="120">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" width="120">StringToCurrency64</td>
    <td valign="top" width="520"><em><a href="http://www.amazon.com/exec/obidos/ASIN/1565926595/efgscomputlab">Delphi in a
    Nutshell</a></em>, pp. 10-11</td>
    <td valign="top" width="120">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" width="120">Str2Comp</td>
    <td valign="top" width="520">Converts a String to a Comp</td>
    <td valign="top" width="120">Calvert</td>
  </tr>
  <tr>
    <td valign="top" width="120">Str2Pennies</td>
    <td valign="top" width="520">Converts a String to a Comp</td>
    <td valign="top" width="120">Calvert</td>
  </tr>
  <tr>
    <td valign="top" width="120">Str2Real</td>
    <td valign="top" width="520">Converts a string to a double number</td>
    <td valign="top" width="120">Calvert</td>
  </tr>
  <tr>
    <td valign="top" width="120">StrToInt</td>
    <td valign="top" width="520"><font face="Courier New" size="3">Function StrToInt(const S: string):
    Integer;</font><font face="Arial Narrow"><br>
    <br>
    </font>Converts given string to an integer value. (Actually uses Val procedure. See
    below.)<br>
    <br>
    Prefix a string with a '$' to convert a hex value to an integer. Example: StrToInt('$' +
    'C') returns the integer value 12.<p>In D4, the C-like '0x' prefix can also be used to
    denote a hex value.&nbsp; For example, <br>
    i := StrToInt('0x1234');</td>
    <td valign="top" width="120">SysUtils</td>
  </tr>
  <tr>
    <td valign="top" width="120">StrToInt64</td>
    <td valign="top" width="520"><font face="Courier New" size="3">Function StrToInt64(const S:
    string): Int64; (D4)</font></td>
    <td valign="top" width="120">SysUtils</td>
  </tr>
  <tr>
    <td valign="top" width="120">StrToIntDef</td>
    <td valign="top" width="520"><font face="Courier New" size="3">Function StrToIntDef(const S:
    string; Default: Integer): Integer;</font></td>
    <td valign="top" width="120">SysUtils</td>
  </tr>
  <tr>
    <td valign="top" width="120">StrToIntDef64</td>
    <td valign="top" width="520"><font face="Courier New" size="3">Function StrToInt64Def(const S:
    string; Default: Int64): Int64; (D4)</font></td>
    <td valign="top" width="120">SysUtils</td>
  </tr>
  <tr>
    <td valign="top" width="120">StrToFloat</td>
    <td valign="top" width="520"><font face="Courier New">Function StrToFloat(const S:
    string): Extended;</font><font face="Arial Narrow"><br>
    </font>Convert given string to Extended float.</td>
    <td valign="top" width="120">SysUtils</td>
  </tr>
  <tr>
    <td valign="top" width="120">TFloatFormat</td>
    <td valign="top" width="520"><font face="Courier New">TFloatFormat = (ffGeneral,
      ffExponent, ffFixed, ffNumber, ffCurrency);</font><font face="Arial Narrow"><br>
    </font>See <em>FloatToStrF, FloatToText</em></td>
    <td valign="top" width="120">SysUtils</td>
  </tr>
  <tr>
    <td valign="top" width="120">TFloatRec</td>
    <td valign="top" width="520"><font face="Courier New">TFloatRec = <br>
    record<br>
      &nbsp; Exponent: Smallint;<br>
      &nbsp; Negative: Boolean;<br>
      &nbsp; Digits: array[0..20] of Char;<br>
    end;</font><br>
    <br>
    <em>TFloatRec</em> is the <em>FloatToDecimal </em>result word.</td>
    <td valign="top" width="120">SysUtils</td>
  </tr>
  <tr>
    <td valign="top" width="120">TFloatValue</td>
    <td valign="top" width="520"><font face="Courier New">TFloatValue = (fvExtended,
      fvCurrency);</font><font face="Arial Narrow"><br>
    </font><em>TFloatValue</em> is the type of the ValueType parameter of the F<em>loatToText,
    FloatToTextFmt and TextToFloat</em> functions and the <em>FloatToDecimal</em> procedure.</td>
    <td valign="top" width="120">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" width="120">Trim</td>
    <td valign="top" width="520">Remove leading and trailing blanks</td>
    <td valign="top" width="120">SysUtils,<br>
    TPmath1 (PaString)</td>
  </tr>
  <tr>
    <td valign="top" width="120">TrimLeft,<br>
    LTrim</td>
    <td valign="top" width="520">Remove leading blanks</td>
    <td valign="top" width="120">SysUtils,<br>
    TPmath1 (PaString)</td>
  </tr>
  <tr>
    <td valign="top" width="120">TrimRight,<br>
    RTrim</td>
    <td valign="top" width="520">Remove trailing blanks</td>
    <td valign="top" width="120">SystUtils,<br>
    TPmath1 (PaString)</td>
  </tr>
  <tr>
    <td valign="top" width="120">Unit Conversions</td>
    <td valign="top" width="520">Angle Conversions (cycle, radian, grad, degree)<br>
      Coordinate Conversions (Cartesian, polar)<br>
      Length (cm, inc, feet, meter, yard, km, mile)<br>
      Mass (kilogram, pound)<br>
      Pressure (Pascal, Bars, Atmosphere, Torr)<br>
      Temperature (Celsius, Kelvin, Fahrenheit)<br>
      Volume (liter, gallons)</td>
    <td valign="top" width="120"><a href="http://www.delphi-jedi.org/Jedi:CODELIBJCL">JCLUnitConv</a></td>
  </tr>
  <tr>
    <td valign="top" width="120">Val</td>
    <td valign="top" width="520"><font face="Courier New">Procedure Val(S; var V; var Code:
    Integer);</font><font face="Arial Narrow"><br>
    </font>Converts a string to its numeric representation. S is a string-type expression --
    it must be a sequence of characters that form a signed whole number. V is an integer-type
    or real-type variable.<br>
    <br>
    Val performs range checking differently depending upon the state of $R and the type of the
    parameter V: {$R+} -- an out-of-range value always genererates a run-time error. {$R-} --
    the values for out-of-range vary depending upon the data type of V.<p>Use '$' prefix to
    convert hex to decimal.</p>
    <p>In D4, also use '0x' prefix for hex value, for example,<br>
    Val('0x1234', i, Code);&nbsp;&nbsp;&nbsp;&nbsp; // 4660 decimal</td>
    <td valign="top" width="120">System</td>
  </tr>
  <tr>
    <td valign="top" width="120">ValidFloat</td>
    <td valign="top" width="520"><pre>FUNCTION ValidFloat(CONST s:  STRING):  BOOLEAN;
BEGIN
  RESULT := TRUE;
  TRY
    StrToFloat(s)
  EXCEPT
    ON EConvertError DO RESULT := FALSE
  END
END {ValidFloat};</pre>
    </td>
    <td valign="top" width="120">SysUtils</td>
  </tr>
  <tr>
    <td valign="top" width="120">xRound</td>
    <td valign="top" width="520">Clipper-like Round function</td>
    <td valign="top" width="120">Clipper</td>
  </tr>
  <tr>
    <td valign="top" width="120">xStr</td>
    <td valign="top" width="520">Converts a number to a string with a width of 10 and no
    decimal places</td>
    <td valign="top" width="120">Clipper</td>
  </tr>
  <tr>
    <td valign="top" width="120">xStrW</td>
    <td valign="top" width="520">Converts a number to a string of specified with with specifid
    decimal places</td>
    <td valign="top" width="120">Clipper</td>
  </tr>
  <tr>
    <td valign="top" width="120">xVal</td>
    <td valign="top" width="520">Converts a string to a floating point value with error
    handling</td>
    <td valign="top" width="120">Clipper</td>
  </tr>
</table>
</center></div>

<p>&nbsp;</p>

<hr>

<p align="center"><font size="6"><a name="Financial"></a>E. Financial Functions</font></p>
<div align="center"><center>

<table border="1">
  <tr>
    <td align="center" width="120" valign="top"><strong>Function / Type Name</strong></td>
    <td align="center" width="520" valign="top"><strong>Description</strong></td>
    <td align="center" width="120" valign="top"><a href="#Sources"><strong>Source(s)</strong></a></td>
  </tr>
  <tr>
    <td width="120" valign="top">DoubleDeclining<br>
    Balance</td>
    <td width="520" valign="top"><font face="Courier New">Function
      DoubleDecliningBalance(Cost, Salvage:
    Extended;
    Life, Period: Integer): Extended;</font>
      <p>
    Depreciation using double-declining balance formula.</p>
    </td>
    <td width="120" valign="top">math</td>
  </tr>
  <tr>
    <td width="120" valign="top">Financial Calculator</td>
    <td width="520" valign="top">The <i>Financial Calculator</i> calculates
      various types of time-dependent financial transactions, related to:&nbsp;
      <p>1. Mortgage (Regular payment &amp; Detailed payment schedule)</p>
      <p>2. Loan (Payment, Principal &amp; Term of Loans)</p>
      <p>3. Investment (Final Value, Initial Principal, Interest Rate &amp;
      Investment term of Term Deposits)</p>
      <p>4. Annuity with Withdrawals (Principal, Withdrawal amount, &amp; number
      of withdrawals)</p>
      <p>5. Annuity with Deposits (Final Value, Regular deposits &amp; Annuity
      term</p>
      <p><a href="http://delphi.icm.edu.pl/ftp/d30free/Fin_Calc.zip">http://delphi.icm.edu.pl/ftp/d30free/Fin_Calc.zip</a></p>
    </td>
    <td width="120" valign="top">&nbsp;</td>
  </tr>
  <tr>
    <td width="120" valign="top">FutureValue</td>
    <td width="520" valign="top"><font face="Courier New">Function
      FutureValue(Rate: Extended; NPeriods:
    Integer; Payment, PresentValue:
    Extended; PaymentTime: TPaymentTime): Extended;</font>
      <p>
    Future value of an investment.</p>
    </td>
    <td width="120" valign="top">math</td>
  </tr>
  <tr>
    <td width="120" valign="top">InterestPayment</td>
    <td width="520" valign="top"><font face="Courier New">Function
      InterestPayment(Rate: Extended; Period,
    NPeriods: Integer; PresentValue,FutureValue: Extended; PaymentTime:
      TPaymentTime): Extended;</font>
      <p>
    Amount of the loan payment that is interest.</p>
      <p>In D1-D5, there is a problem with InterestPayment and PeriodPayment
      ONLY for period one and ONLY for ptStartOfPeriod PaymentTime.&nbsp; See <i><font face="Arial Narrow">efg's</font></i>
      <a href="../../UseNet/2001/0515.txt">UseNet Posting</a> about this problem
      and one possible fix.</p>
    </td>
    <td width="120" valign="top">math</td>
  </tr>
  <tr>
    <td width="120" valign="top">InterestRate</td>
    <td width="520" valign="top"><font face="Courier New">Function
      InterestRate(NPeriods: Integer;<br>
    Payment, PresentValue, FutureValue: Extended; PaymentTime: TPaymentTime): Extended;</font>
      <p>
    Interest rate necessary to earn a specified amount.</p>
    </td>
    <td width="120" valign="top">math</td>
  </tr>
  <tr>
    <td width="120" valign="top">InternalRateOfReturn</td>
    <td width="520" valign="top"><font face="Courier New">Function
      InternalRateOfReturn(Guess: Extended;</font><font face="Arial Narrow"><br>
    const CashFlows: array of Double): Extended; </font>
      <p>
    Rate of return based on cash-flow data.</p>
    </td>
    <td width="120" valign="top">math</td>
  </tr>
  <tr>
    <td width="120" valign="top">Investments, Mortgage</td>
    <td width="520" valign="top">PC Magazine utility, PayEmOff, includes
      separate calculators for analyzing your mortgage and investments. These
      calculators can instantly show you the effect of changing the interest
      rate, payment amount, or number of months for investment or until
      payoff.&nbsp; <i>PC
      Magazine</i> Utility, PayEmOff,&nbsp; in Delphi.</td>
    <td width="120" valign="top">&nbsp;</td>
  </tr>
  <tr>
    <td width="120" valign="top">NetPresentValue</td>
    <td width="520" valign="top"><font face="Courier New">Function
      NetPresentValue(Rate: Extended; const
    CashFlows: array of Double; PaymentTime: TPaymentTime): Extended;</font>
      <p>
    Current value of a set of cash-flow values, taking the interest rate into account.</p>
    </td>
    <td width="120" valign="top">math</td>
  </tr>
  <tr>
    <td width="120" valign="top">NumberOfPeriods</td>
    <td width="520" valign="top"><font face="Courier New">Function
      NumberOfPeriods(Rate, Payment, PresentValue, FutureValue: Extended;PaymentTime:
      TPaymentTime): Extended;</font>
      <p>
    Number of periods for an investment to reach a specified value.</p>
    </td>
    <td width="120" valign="top">math</td>
  </tr>
  <tr>
    <td width="120" valign="top">Payment</td>
    <td width="520" valign="top"><font face="Courier New">Function Payment(Rate: Extended; NPeriods:
    Integer;<br>
    PresentValue, FutureValue: Extended; PaymentTime: TPaymentTime): Extended;</font>
      <p>
    Amount of loan payments, given the amount borrowed, the interest rate, and present and
    future values of the investment.</p>
      <p>
    Returns the amount required to repay a debt, Borland&nbsp; <a href="http://community.borland.com/article/0,1410,16051,00.html">TI 1051D</a> </p>
 </td>
    <td width="120" valign="top">math</td>
  </tr>
  <tr>
    <td width="120" valign="top">PeriodPayment</td>
    <td width="520" valign="top"><font face="Courier New">Function
      PeriodPayment(Rate: Extended; Period,
    NPeriods: Integer; PresentValue, FutureValue: Extended; PaymentTime:
      TPaymentTime): Extended;</font>
      <p>
    Amount of the loan payment that is principal.</p>
      <p>
    In D1-D5, there is a problem with InterestPayment and PeriodPayment ONLY for
    period one and ONLY for ptStartOfPeriod PaymentTime.&nbsp; See <i><font face="Arial Narrow">efg's</font></i>
    <a href="../../UseNet/2001/0515.txt">UseNet Posting</a> about this problem
    and one possible fix.</p>
    </td>
    <td width="120" valign="top">math</td>
  </tr>
  <tr>
    <td width="120" valign="top">PresentValue</td>
    <td width="520" valign="top"><font face="Courier New">Function
      PresentValue(Rate: Extended; NPeriods:
    Integer; Payment, FutureValue: Extended; PaymentTime: TPaymentTime): Extended;</font>
      <p>
    Present value of an investment.</p>
    </td>
    <td width="120" valign="top">math</td>
  </tr>
  <tr>
    <td width="120" valign="top">SLNDepreciation</td>
    <td width="520" valign="top"><font face="Courier New">Function
      SLNDepreciation(Cost, Salvage:
    Extended; Life: Integer): Extended;</font>
      <p>
    Straight-line depreciation of an investment.</p>
    </td>
    <td width="120" valign="top">math</td>
  </tr>
  <tr>
    <td width="120" valign="top">SYDDepreciation</td>
    <td width="520" valign="top"><font face="Courier New">Function
      SYDDepreciation(Cost, Salvage:
    Extended; Life, Period: Integer): Extended;</font>
      <p>
    Sum-of-Years-Digits depreciation.</p>
    </td>
    <td width="120" valign="top">math</td>
  </tr>
  <tr>
    <td width="120" valign="top"><font face="Courier New">TPaymentTime</font></td>
    <td width="520" valign="top">type  TPaymentTime = (ptEndOfPeriod, ptStartOfPeriod);&nbsp;
    </td>
    <td width="120" valign="top">math</td>
  </tr>
</table>
</center></div>

<p align="center">Business Calculator Component: <a href="http://www.flash.net/~wincsoft">www.flash.net/~wincsoft</a>
</p>

<hr>

<p align="center"><font size="6"><a name="Sorting"></a>F. Sorting, Discrete Mathematics</font></p>
<div align="center"><center>

<table border="1">
  <tr>
    <td align="center" width="120"><strong>Function Name</strong></td>
    <td align="center" width="520"><strong>Math Description</strong></td>
    <td align="center" width="120"><a href="#Sources"><strong>Source(s)</strong></a></td>
  </tr>
  <tr>
    <td valign="top" width="120">eclass</td>
    <td valign="top" width="520">determine equivalence classes from list</td>
    <td valign="top" width="120">recipes</td>
  </tr>
  <tr>
    <td width="120">eclazz</td>
    <td width="520">determine equivalence classes from procedure</td>
    <td width="120">recipes</td>
  </tr>
  <tr>
    <td width="120">indexx</td>
    <td width="520">construct an index for an array</td>
    <td width="120">recipes</td>
  </tr>
  <tr>
    <td width="120">piksr2</td>
    <td width="520">sort two arrays by straight insertion</td>
    <td width="120">recipes</td>
  </tr>
  <tr>
    <td width="120">piksrt</td>
    <td width="520">sort an array by straight insertion</td>
    <td width="120">recipes</td>
  </tr>
  <tr>
    <td width="120">rank</td>
    <td width="520">construct a rank table for an array</td>
    <td width="120">recipes</td>
  </tr>
  <tr>
    <td valign="top" width="120">QSort / DQSort</td>
    <td valign="top" width="520">Quick Sort</td>
    <td valign="top" width="120">TPmath1(stat)</td>
  </tr>
  <tr>
    <td width="120">shell</td>
    <td width="520">sort an array by Shell's method</td>
    <td width="120">recipes</td>
  </tr>
  <tr>
    <td width="120">sort</td>
    <td width="520">sort an array by quicksort method</td>
    <td width="120">recipes</td>
  </tr>
  <tr>
    <td width="120">sort2</td>
    <td width="520">&nbsp;</td>
    <td width="120">recipes</td>
  </tr>
  <tr>
    <td width="120">sort3</td>
    <td width="520">sort, use an index to sort 3 or more arrays</td>
    <td width="120">recipes</td>
  </tr>
</table>
</center></div>

<hr>

<p align="center"><font size="6"><a name="Miscellaneous"></a>G. Miscellaneous Functions</font></p>
<div align="center"><center>

<table border="1">
  <tr>
    <td align="center" valign="top" width="120"><strong>Function Name</strong></td>
    <td align="center" width="520"><strong>Description</strong></td>
    <td align="center" width="120"><a href="#Sources"><strong>Source(s)</strong></a></td>
  </tr>
  <tr>
    <td valign="top" width="120">ClearExceptions</td>
    <td width="520">Clear FPU exception bits</td>
    <td width="120">Tempest</td>
  </tr>
  <tr>
    <td valign="top" width="120">CRC-16, CRC-32</td>
    <td width="520">See <em><font face="Arial">efg's</font></em> <a href="../../../Mathematics/CRC.htm">CRC Lab Report</a> for code and links</td>
    <td width="120">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" width="120">Comparison Functions</td>
    <td valign="top" width="520">FltLE, FltLT, FltGE, FltGT, FltEQ, FltNE</td>
    <td valign="top" width="120">Tempest</td>
  </tr>
  <tr>
    <td valign="top" width="120">ESBDigits</td>
    <td valign="top" width="520">number of digits of a positive integer</td>
    <td valign="top" width="120">ESBMaths</td>
  </tr>
  <tr>
    <td width="120">FloatIsZero</td>
    <td width="520">Compares X to zero</td>
    <td width="120">ESBMaths</td>
  </tr>
  <tr>
    <td width="120" valign="top">Get8087x<br>
      Set8087x</td>
    <td width="520"><font size="2" face="Courier New">function
      Get8087ControlWord: Word;<br>
      function Get8087Infinity: T8087Infinity;<br>
      function Get8087Precision: T8087Precision;<br>
      function Get8087Rounding: T8087Rounding;<br>
      function Get8087StatusWord: Word;&nbsp;&nbsp;&nbsp;</font>
      <p><font face="Courier New" size="2">function Set8087Infinity(const
      Infinity: T8087Infinity): T8087Infinity;</font></p>
      <p><font face="Courier New" size="2">function Set8087Precision(const
      Precision: T8087Precision): T8087Precision;&nbsp;</font></p>
      <p><font face="Courier New" size="2">function Set8087Rounding(const
      Rounding: T8087Rounding): T8087Rounding;&nbsp;</font></p>
      <p><font face="Courier New" size="2">function Set8087ControlWord(const
      Control: Word): Word;</font></td>
    <td width="120" valign="top">JCL8087</td>
  </tr>
  <tr>
    <td valign="top" width="120">Get87ControlWord / Set87ControlWord</td>
    <td valign="top" width="520">80x87 Control Word</td>
    <td valign="top" width="120">ESBmaths</td>
  </tr>
  <tr>
    <td valign="top" width="120">GetControlWord / SetControlWord</td>
    <td valign="top" width="520">Get/Set FPU control word. See also <em>Set8087CW</em>.</td>
    <td valign="top" width="120">Tempest</td>
  </tr>
  <tr>
    <td valign="top" width="120">GetExceptionMask / SetExceptionMask</td>
    <td valign="top" width="520">Get/Set FPU exception mask</td>
    <td valign="top" width="120">Tempest</td>
  </tr>
  <tr>
    <td valign="top" width="120">GetRoundMode / SetRoundMode</td>
    <td valign="top" width="520">Get/Set FPU rounding mode</td>
    <td valign="top" width="120">Tempest</td>
  </tr>
  <tr>
    <td valign="top" width="120">GetPrecisionMode / SetPrecisionMode</td>
    <td valign="top" width="520">Get/Set FPU precision mode</td>
    <td valign="top" width="120">Tempest</td>
  </tr>
  <tr>
    <td valign="top" width="120">IsInfinity</td>
    <td valign="top" width="520">BOOLEAN function to determine if value is &quot;not a
    number&quot;<p>Also see <em><font face="Arial Narrow">efg's</font></em> <a href="../../../Mathematics/NaN.htm">Exploring Numbers, Not-A-Number (NaN), and Infinity
    (INF)</a></td>
    <td valign="top" width="120">Tempest</td>
  </tr>
  <tr>
    <td valign="top" width="120">IsNAN</td>
    <td valign="top" width="520">BOOLEAN function to determine if value is +/-
    &quot;infinity&quot;<p>Also see <em><font face="Arial Narrow">efg's</font></em> <a href="../../../Mathematics/NaN.htm">Exploring Numbers, Not-A-Number (NaN), and Infinity
    (INF)</a></td>
    <td valign="top" width="120">Tempest</td>
  </tr>
  <tr>
    <td valign="top" width="120"><a name="Set8087CW"></a>Set8087CW</td>
    <td valign="top" width="520">Set FPU control word.&nbsp; See <a href="FPUControlWord.Txt">FPU
    Control Word Bits</a>.
      <p><font face="Arial Narrow"><i>efg's </i></font><i>Set8087CW and
      SetRoundMode </i><a href="Rounding.pas.TXT">rounding example </a>gives
      these results:</p>
      <table border="1" width="100%" cellspacing="0">
        <tr>
          <td width="100%" colspan="4">
            <p align="center"><b>Round Mode</b></td>
        </tr>
        <tr>
          <td width="25%" align="center"><b>Nearest<br>
            (IEEE/Banker's)</b></td>
          <td width="25%" align="center"><b>Down</b></td>
          <td width="25%" align="center"><b>Up</b></td>
          <td width="25%" align="center"><b>Truncate</b></td>
        </tr>
        <tr>
          <td width="25%">Round(0/2) = 0<br>
            Round(1/2) = 0<br>
            Round(2/2) = 1<br>
            Round(3/2) = 2<br>
            Round(4/2) = 2<br>
            Round(5/2) = 2<br>
            Round(6/2) = 3<br>
            Round(7/2) = 4<br>
            Round(8/2) = 4<br>
            Round(9/2) = 4</td>
          <td width="25%">Round(0/2) = 0<br>
            Round(1/2) = 0<br>
            Round(2/2) = 1<br>
            Round(3/2) = 1<br>
            Round(4/2) = 2<br>
            Round(5/2) = 2<br>
            Round(6/2) = 3<br>
            Round(7/2) = 3<br>
            Round(8/2) = 4<br>
            Round(9/2) = 4</td>
          <td width="25%">Round(0/2) = 0<br>
            Round(1/2) = 1<br>
            Round(2/2) = 1<br>
            Round(3/2) = 2<br>
            Round(4/2) = 2<br>
            Round(5/2) = 3<br>
            Round(6/2) = 3<br>
            Round(7/2) = 4<br>
            Round(8/2) = 4<br>
            Round(9/2) = 5</td>
          <td width="25%">Round(0/2) = 0<br>
            Round(1/2) = 0<br>
            Round(2/2) = 1<br>
            Round(3/2) = 1<br>
            Round(4/2) = 2<br>
            Round(5/2) = 2<br>
            Round(6/2) = 3<br>
            Round(7/2) = 3<br>
            Round(8/2) = 4<br>
            Round(9/2) = 4</td>
        </tr>
      </table>
      <p><i><a href="http://www.amazon.com/exec/obidos/ASIN/1565926595/efgscomputlab">Delphi
      in a NutShell</a></i>, pp. 332-333</p>
      <p>
      Steve Schafer's <a href="../../UseNet/2000/0606b.txt">UseNet
      Post</a> about FPU Control Word Bits</p>
      <p>
      See comments in ESBMaths source code.</p>
      <p>Affine: +INF and -INF are distinct values.<br>
      Projective: sign of INF is ignored.</p>
      <p><font face="Courier New" size="2">// Default 8087 control word. FPU
    control register<br>
      // is set to this value.<br>
    // CAUTION: Setting this to an invalid value could<br>
      // cause unpredictable behavior.<br>
      VAR Default8087CW: Word = $1332;</font></p>
    <p><font face="Courier New" size="2">//&nbsp; The variable <em>Default8087CW</em> contains the
    default control word.<br>
    procedure Set8087CW(NewCW: Word);<br>
    asm<br>
    &nbsp; MOV Default8087CW,AX<br>
    &nbsp; FLDCW Default8087CW<br>
    end;</font></p>
    <p>The OpenGL unit does this in its initialization code:<font face="Arial Narrow"><br>
    &nbsp;</font><font face="Courier New" size="2">&nbsp;Set8087CW($133F);</font></p>
    <p>Charlie Calvert's &quot;Turning off Floating Point Exceptions in BCB and Delphi&quot;
    for Direct 3D, <a href="http://hometown.aol.com/charliecal/TechPapers/FloatingPoint.html">http://hometown.aol.com/charliecal/TechPapers/FloatingPoint.html</a>
    </p>
    <p>See Intel's <a href="http://developer.intel.com/design/pro/applnots/243291.htm">Software
    and Hardware Considerations for FPU Exception Handlers for Intel Architecture Processors</a></p>
    <p>Peter Below's <a href="../../UseNet/1999/0520b.txt">UseNet
    Post</a> explaining why the error &quot;Floating Point Invalid Operation&quot; occurs
    after calling a Delphi DLL from VC++ </p>
    <p>Stefan Hoffmeister's <a href="../../../Library/UseNet/1999/0709a.txt">UseNet
    Post</a> about FPU exception problems<br>
    Stefan Hoffmeister's <a href="../../UseNet/1999/0725.txt">UseNet
    Post</a> with WreakHavoc example<br>
    John Herbster's <a href="../../UseNet/1999/1119b.txt">UseNet Post</a> with
    SetX87CW function and example</p>
    <p><strong>Bob Lee</strong> from 28 Aug 1999 UseNet Post:&nbsp; &quot;I have heard many
    people complain about MS DLL's altering the FPU control word.&nbsp; Your only recourse is
    to wrap all calls to the DLL with a resetting of the controlword.&quot;</p>
    <p>Maynard Philbrook's <a href="../../UseNet/1999/0828.txt">UseNet Post</a>
    with ASM code for getting/setting control word.</p>
    <p>See also <em>GetControlWord</em> / <em>SetControlWord</em> above.</td>
    <td valign="top" width="120">system</td>
  </tr>
  <tr>
    <td valign="top" width="120"><sup>Set87ControlWord</sup></td>
    <td valign="top" width="520">see above</td>
    <td valign="top" width="120">ESBMaths</td>
  </tr>
  <tr>
    <td valign="top" width="120">Sigmoid</td>
    <td valign="top" width="520"><sup>Robert Lee's &quot;fast&quot; routines, including
    sigmoid, in <a href="../../../Library/UseNet/1999/1214a.txt">UseNet Post</a></sup></td>
    <td valign="top" width="120">&nbsp;</td>
  </tr>
</table>
</center></div>

<hr>

<p align="center"><font size="6"><strong><a name="Sources"></a>H. Sources Key</strong></font></p>
<div align="center"><center>

<table border="1">
  <tr>
    <td width="120"><strong>Source</strong></td>
    <td width="640"><strong>Description/Location</strong></td>
  </tr>
  <tr>
    <td valign="top" width="120">AugMath</td>
    <td valign="top" width="640">Augmented Math (what Borland left out)<br>
      <a href="http://www.engineeringobjects.com/AugMathUnit.htm">www.engineeringobjects.com/AugMathUnit.htm</a>&nbsp;
    </td>
  </tr>
  <tr>
    <td valign="top" width="120">Calvert</td>
    <td valign="top" width="640">Charlie Calvert's MathBox<br>
    <a href="http://homepages.borland.com/ccalvert/Downloads/MathBox.pas">http://homepages.borland.com/ccalvert/Downloads/MathBox.pas</a>
    <p>32-bit replacement for MathBox and StrBox<br>
    <a href="http://homepages.borland.com/ccalvert/Downloads/CodeBox1.pas">http://homepages.borland.com/ccalvert/Downloads/CodeBox1.pas</a>
    </td>
  </tr>
  <tr>
    <td valign="top" width="120">Clipper</td>
    <td valign="top" width="640">Clipper Functions: Math/Conversion Functions<br>
      <a href="http://www.adpsi.com/clipfunc/cffuncs.htm">http://www.adpsi.com/clipfunc/cffuncs.htm</a>&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" width="120">ESBMaths</td>
    <td valign="top" width="640">
      <table border="0">
        <tr>
          <td><a href="http://www.esbconsult.com.au"><img border="0" src="../Pillars/esblogo.gif" width="91" height="89"></a></td>
          <td><b><font color="#3366cc"><big><big>ESB Consultancy</big></big><br>
        <font color="#003399"><big>Developers of Mathematical</big></font> <font color="#003399"><big>&amp;
        Statistical<br>
 Software and Delphi Software.</big></font></font></b></td>
        </tr>
      </table>
      <p align="left" style="MARGIN-BOTTOM: 10px; MARGIN-TOP: 5px">ESBMaths is a collection of
    Integer and Floating Point Routines for Delphi. <font color="#000000">Includes
    probability and statistical related routines</font><p align="left" style="MARGIN-BOTTOM: 10px; MARGIN-TOP: 5px">Freeware
      ESBMaths with Source.&nbsp; <a href="http://www.esbconsult.com">www.esbconsult.com</a>
    </td>
  </tr>
  <tr>
    <td valign="top" width="120">EZmath</td>
    <td valign="top" width="640">?</td>
  </tr>
  <tr>
    <td valign="top" width="120">ISPL</td>
    <td valign="top" width="640">Delphi interface for the Intel Signal Processing Library
    (5430 lines, 872 procedures and functions exported by NSP.DLL): <a href="http://home.t-online.de/home/Robert.Rossmair/nsp.htm">http://home.t-online.de/home/Robert.Rossmair/nsp.htm</a>
    <br>
    Intel Signal Processing Library: <br>
    <a href="http://developer.intel.com/vtune/perflibst/spl/index.htm">http://developer.intel.com/vtune/perflibst/spl/index.htm</a>
    </td>
  </tr>
  <tr>
    <td valign="top" width="120">JCL8087</td>
    <td valign="top" width="640">Delphi Jedi Code Library (JCL), JCL8087.pas
      unit<br>
      <a href="http://www.delphi-jedi.org/Jedi:CODELIBJCL">http://www.delphi-jedi.org/Jedi:CODELIBJCL</a>&nbsp;
    </td>
  </tr>
  <tr>
    <td valign="top" width="120">JCLUnitConv</td>
    <td valign="top" width="640">Delphi Jedi Code Library (JCL), JCLUnitConv.pas
      unit<br>
      <a href="http://www.delphi-jedi.org/Jedi:CODELIBJCL">http://www.delphi-jedi.org/Jedi:CODELIBJCL</a>&nbsp;
    </td>
  </tr>
  <tr>
    <td valign="top" width="120">math</td>
    <td valign="top" width="640">Borland's <a href="../../../Library/Delphi/MathInfo/index.html#DelphiMathUnit"> Delphi math unit</a> </td>
  </tr>
  <tr>
    <td valign="top" width="120">math1</td>
    <td valign="top" width="640"><a href="http://www.lohninger.com/math1.html">www.lohninger.com/math1.html</a>
    (not yet indexed above)</td>
  </tr>
  <tr>
    <td valign="top" width="120">math2</td>
    <td valign="top" width="640"><a href="http://www.lohninger.com/math2.html">www.lohninger.com/math2.html</a>
    &nbsp; (not yet indexed above)</td>
  </tr>
  <tr>
    <td valign="top" width="120">mathlib2</td>
    <td valign="top" width="640"><a href="ftp://ftp.wustl.edu/systems/ibmpc/garbo.uwasa.fi/turbopas/mathlib2.zip">ftp://ftp.wustl.edu/systems/ibmpc/garbo.uwasa.fi/turbopas/mathlib2.zip<br>
      ftp://garbo.uwasa.fi/pc/turbopas/mathlib2.zip<br>
      http://garbo.uwasa.fi/pc/turbopas.html</a>
    </td>
  </tr>
  <tr>
    <td width="120">MathX</td>
    <td width="640"><a href="http://www.razorsedgesoft.com/mathx.htm">www.razorsedgesoft.com/mathx.htm</a>&nbsp;
    </td>
  </tr>
  <tr>
    <td valign="top" width="120">recipes</td>
    <td valign="top" width="640"><em>Numerical Recipes Pascal shareware version</em><br>
      <a href="ftp://garbo.uwasa.fi/pc/turbopas/nrpas13.zip">ftp://garbo.uwasa.fi/pc/turbopas/nrpas13.zip</a>&nbsp;<br>
      <a href="http://garbo.uwasa.fi/pc/turbopas.html">http://garbo.uwasa.fi/pc/turbopas.html</a>&nbsp;</td>
  </tr>
  <tr>
    <td width="120">RxLib</td>
    <td width="640"><a href="http://www.rxlib.com">www.rxlib.com</a>&nbsp; (file:
      MaxMin.PAS)
      <p><a href="http://www.rxlib.com"><img border="0" src="../Pillars/rxlogo.gif" width="139" height="80"></a></p>
    </td>
  </tr>
  <tr>
    <td valign="top" width="120">Stockton</td>
    <td valign="top" width="640">Dr. John Stockton's Pascal Maths Page<br>
    <a href="http://www.merlyn.demon.co.uk/pas-math.htm">http://www.merlyn.demon.co.uk/pas-math.htm</a>
    </td>
  </tr>
  <tr>
    <td valign="top" width="120">System</td>
    <td valign="top" width="640">Borland's Delphi System unit</td>
  </tr>
  <tr>
    <td valign="top" width="120">SysUtils</td>
    <td valign="top" width="640">Borland's Delphi SysUtils unit</td>
  </tr>
  <tr>
    <td valign="top" width="120">Tempest</td>
    <td valign="top" width="640">Ray Lischner's FltMath unit (Math10.ZIP): <a href="http://www.tempest-sw.com/freeware">www.tempest-sw.com/freeware</a> (only compiles
    in Delphi 1)</td>
  </tr>
  <tr>
    <td valign="top" width="120">TPmath1</td>
    <td valign="top" width="640">
      <table border="0">
        <tr>
        <td bgcolor="#008000"><b><font color="#ffff00" size="+3"><p align="center">TP
        Math</font></b></td>
        </tr>
      </table>
      <p>Jean DeBord's<em> TPMath<br>
      </em><a href="http://www.unilim.fr/pages_perso/jean.debord/tpmath/tpmath.htm">www.unilim.fr/pages_perso/jean.debord/tpmath/tpmath.htm</a></td>
  </tr>
  <tr>
    <td valign="top" width="120">Turbo</td>
    <td valign="top" width="640"><a href="http://www.amazon.com/exec/obidos/ASIN/0471610097/efgscomputlab"><em>Turbo
    Algorithms</em></a> (C, Pascal, Basic, Prolog)<br>
    Keith Weiskamp, Namir Shamas, Ron Pronk<br>
    John Wiley, 1989 (Out of Print)<br>
      <a href="http://www.amazon.com/exec/obidos/ASIN/0471610097/efgscomputlab"><img src="../Algorithms/TurboAlgorithms.JPG" alt="TurboAlgorithms.JPG (6242 bytes)" border="0" width="112" height="140"></a></td>
  </tr>
</table>
</center></div>

<hr>

<p align="center"><font size="1">Links Verified 14 Jul 2000<br>
Updated <!--webbot bot="Timestamp" S-Type="EDITED" S-Format="%d %b %Y" startspan -->29 Apr 2004<!--webbot bot="Timestamp" endspan i-checksum="15052" --></font></p>

<p align="center"><img src="http://www.efg2.com/cgi-bin/count.pl?N840General"><font size="1"><br>
since 1 Nov 1998</font></p>
</body>
</html>
