PROGRAM einmaleins_function_format;

//VAR 
//<Variable declarations>
  
  
//<FUNCTION>

// do with format to left or right justifying-- 

// With the '-' operator, the data is left justified
//  ShowMessage(Format('Justified decimal = <%-7d>', [1234]));
// The precision value forces 0 padding to the desired size
//  ShowMessage(Format('0 padded decimal  = <%.6d>', [1234]));
// Note the <> characters are added to show formatting
//  ShowMessage(Format('Padded decimal    = <%7d>', [1234]));

//call by value - wertübergabe - copy

//type TFuncX = function(x: double): double;


Function NMaleins(limit: byte): string;
var i, j: byte;  //local
   temps: string;
begin
for i:= 1 to LIMIT do
  for j:= 1 to LIMIT do begin
    temps:= temps + Format('%.3d   ',[i*j])
    if j=LIMIT then temps:= temps + #13#10;
  end;
  result:= temps;    
end; //function end   


// call by reference -pointer   
//PSXCompiler: [Hint] 08_EINMALEINS_FUNC.TXT(32:10): Variable 'Result' never used
Function NMaleinsWithout_Return(var limit: byte): string;
var i, j: byte;  //local
begin
limit:= 15;
for i:= 1 to LIMIT do
  for j:= 1 to LIMIT do begin
    write(intToStr(i*j)+'   ')
    if j = LIMIT then writeln('')
  end;    
end; //function end   


procedure recursion_fct(k: integer);
begin
 inc(k)
 writeln(format('top S: Funktion rek_fkt (%f)',[power(k,2)]));
  if k < 5  then //break condition
    recursion_fct(k); //recursive call
  writeln(format('back E: Funktion rek_fkt(%d)',[k])); 
  writeln(floatToStr(log2(20)))
end;

function Func2(X : double) : double;
{ Function to be plotted }
begin
   // 7 : Func := Sin(X);
   //x:= 20;
    result:= Cos(X);
   // 9 : Func := Tan(X);
 
end;


var 
  aFrm: TForm;
  mT: TTimer;
  tB: TTrackBar;
  statBar1: TStatusBar;
  image1: TImage;


//**************************Event Handlers*******************************
procedure TFrm1_trackSpeedChange(Sender: TObject);
begin
  //mt.Interval:= 1000 div tB.Position;
  writeln(intToStr(1000 div tB.Position));
end;

procedure TFrm1_closeForm(Sender: TObject; var Action: TCloseAction);
begin
  {if mt <> NIL then begin
    mT.enabled:= false;
    mT.Free;
    mT:= NIL;
  end;}
  ///afrm.Free;  
  action:= caFree;
  afrm:= NIL;
end;

procedure TFrm1_CloseClick(Sender: TObject);
begin
  afrm.Close;
end;

procedure TFrm1_PauseClick(Sender: TObject);
begin
  {if mT <> NIL then
    mt.enabled:= not mt.enabled; }
end;

//**************************Form Builder*******************************
procedure loadForm;
begin
  aFrm:= TForm.Create(self);
  //mT:= TTimer.Create(self);
  //mt.onTimer:= @TFrm1_timerRedrawTimer;
  //mt.interval:= MILLISECONDS;
  //mt.free;  in on close            
  with aFrm do begin
    Caption:= '********** Form Template ***********';  
    height:= 510;
    width:= 700;
    Position:= poScreenCenter;
    //Color:= clBlack;
    onClose:= @TFrm1_closeForm;
    //onPaint:= @TFrm1_FormPaint;
    Canvas.Pen.color:= clBlue;
    Canvas.Pen.Width:= 15;
    Show;
    //canvas.brush.bitmap:= getBitmapObject(Exepath+'examples\images\citymax.bmp');
    Canvas.FillRect(Rect(600,300,100,100));
  end;
  image1:= Timage.create(aFrm);
  with image1 do begin
    Parent:= aFrm;
    setbounds(31,39,550,255);
 //Image1.Picture.BitMap.LoadFromFile('F:\dateienohneback\EKON15\maxbox3\mX397\maxbox3\examples\citymax.bmp');
    //image1.brush.color:= clblue;
  end;
 
  with TBitBtn.Create(aFrm) do begin
    Parent:= aFrm;
    setbounds(310,390,150,55);
    caption:= 'Pause';
    font.size:= 12;
    glyph.LoadFromResourceName(getHINSTANCE,'CL_MPPAUSE'); 
    mXButton(05,05,width, height,12,12,handle);
    //event handler
    onClick:= @TFrm1_PauseClick;
  end;
  with TBitBtn.Create(aFrm) do begin
    Parent:= aFrm;
    setbounds(480, 390,150, 55);
    caption:= 'Close';
    font.size:= 12;
    glyph.LoadFromResourceName(getHINSTANCE,'CL_MPSTOP'); 
    mXButton(05,05,width, height,12,12,handle);
    onClick:= @TFrm1_CloseClick;
  end;
  tB:= TTrackBar.create(aFrm);
  with tB do begin
    parent:= aFrm;
    setBounds(40,402,230,40);
    Min:= 10; Max:= 100
    Frequency:= 10
    Position:= 1000 div 50;
    linesize:= 4;
    ThumbLength:= 30;
    SetFocus;
    OnChange:= @TFrm1_trackSpeedChange;
  end;
  statbar1:= TStatusBar.Create(aFrm);
  with statbar1 do begin
    parent:= aFrm;
    showhint:= true;
    hint:= 'this is a LED BoX';
    Panels.add;
      panels.items[0].width:= 200;
      panels.items[0].text:= '200';
    Panels.add;
      panels.items[1].width:= 150;
      panels.items[1].text:= '150';
  end;
end;  

   type
  TAxis = record        { Coordinate axis }
    Scale : TScale;
    Min   : Float;
    Max   : Float;
    Step  : Float;
  end;
  
  procedure PlotLine(Canvas : TCanvas; X1, Y1, X2, Y2 : Integer);
begin
  Canvas.MoveTo(X1, Y1);
  Canvas.LineTo(X2, Y2);
  writeln(inttoStr(y2));
end;


var
  //MaxCurv : Byte = 0;

  XminPixel : Integer; 
  XmaxPixel : Integer; 
  YminPixel : Integer; 
    YmaxPixel : Integer; 

  //XminPixel := 0;


function XOutOfBounds(X : Integer) : Boolean;
{ Checks if an absissa is outside the graphic bounds }
begin
  result:= (X < 0) or (X > 100);
end;

function YOutOfBounds(Y : Integer) : Boolean;
{ Checks if an ordinate is outside the graphic bounds }
begin
  result:= (Y < 0) or (Y > 100);
end;

function CheckPoint(X, Y       : Float;
                    var Xp, Yp : Integer) : Boolean;
{ Computes the pixel coordinates of a point and
  checks if it is enclosed within the graph limits }
begin
  //Xp := Xpixel(X);
  //Yp := Ypixel(Y);
  result:= not(XOutOfBounds(Xp) or YOutOfBounds(Yp));
end;




procedure PlotFunc(Canvas     : TCanvas;
                   Func       : TFuncX;
                   Xmin, Xmax : Float;
                   Npt        : Integer;
                   CurvIndex  : Integer);
var
  X1, Y1, X2, Y2, H  : Float;
  Xp1, Yp1, Xp2, Yp2 : Integer;
  Flag1, Flag2       : Boolean;
  I                  : Integer;
begin
  //if (Npt < 2) or (CurvParam[CurvIndex]^.LineParam.Style = psClear) then Exit;

  if Xmin >= Xmax then
    begin
      Xmin := 10;
      Xmax := 100;
    end;

  H := (Xmax - Xmin) / Npt;

  //SetGraphSettings(Canvas, CurvIndex);

  { Check first point }
  X1 := Xmin;
  //if XAxis.Scale = LinScale then
    Y1 := Func(X1)
  //else
    //Y1 := Func(Exp10(X1));

  //if YAxis.Scale = LogScale then Y1 := Log10(Y1);
  Flag1 := CheckPoint(X1, Y1, Xp1, Yp1);

  { Check other points and plot lines if possible }
  for I := 1 to Npt do begin
      X2 := X1 + H;
      //if XAxis.Scale = LinScale then
        Y2 := Func(X2)
        //writeln(floattostr(y2))
      //else
        //Y2 := Func(Exp10(X2));

      //if YAxis.Scale = LogScale then Y2 := Log10(Y2);

      Flag2 := CheckPoint(X2, Y2, Xp2, Yp2);

      //if Flag1 and Flag2 then
        PlotLine(Canvas, round(X1+10), round(Y1+10), round(X2+100), round(Y2+200));

      X1 := X2;
      Xp1 := Xp2;
      Yp1 := Yp2;
      Flag1 := Flag2;
    end;

   //RestoreGraphSettings(Canvas);
end;



   var   X1,X2, npts, width: integer;
      color: TColor;
      ax: TFuncX;

BEGIN  //Main
//<Executable statements>
  recursion_fct(0)
  Writeln(' ');
  Writeln(NMaleins(12))
   loadForm;
    //PlotFunc(Image1.Canvas, @Func, X1, X2, Npts, 1);
     if not InitGraphics(Image1.Width, Image1.Height) then Exit;

  SetWindow(Image1.Canvas, 10, 95, 10, 90, True);
  PlotOxAxis(Image1.Canvas);
  PlotOyAxis(Image1.Canvas);
  PlotGrid(Image1.Canvas, BothGrid);
  
  Width:= 10;
  Npts  := 420;
  Color := clBlue;

  SetLineParam(1, psSolid, Width, Color);

    X1:= 20;
    X2:= 530;
    
    ax:= @func2;
    Func2(10);
  
    //ax:= @Func2;

    PlotFunc(image1.canvas, @Func2, X1, X2, Npts, 1);

  {elimit:= 12;
  NMaleinsReturn(elimit)}
//<Definitions>  
END. 

//---------------------------------------------------------------------

  1     2     3     4     5     6     7     8     9    10    11    12   
  2     4     6     8    10    12    14    16    18    20    22    24   
  3     6     9    12    15    18    21    24    27    30    33    36   
  4     8    12    16    20    24    28    32    36    40    44    48   
  5    10    15    20    25    30    35    40    45    50    55    60   
  6    12    18    24    30    36    42    48    54    60    66    72   
  7    14    21    28    35    42    49    56    63    70    77    84   
  8    16    24    32    40    48    56    64    72    80    88    96   
  9    18    27    36    45    54    63    72    81    90    99   108   
 10    20    30    40    50    60    70    80    90   100   110   120   
 11    22    33    44    55    66    77    88    99   110   121   132   
 12    24    36    48    60    72    84    96   108   120   132   144   

Was ist die Idee eines Stacks ?

Die Daten werden auf den Stapel gelegt und in derselben Reihenfolge wieder vom Stapel genommen.  Bsp.: Zwischenspeicher, Parameteraufrufe, lokale Variablen, Datenbankfragen (SQL) 



----app_template_loaded----








----app_template_loaded----